/*
 * @Author: lutz
 * @Date: 2019-06-17 16:06:10
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-02 15:49:50
 */

/**
 * 判断组件中props中是否有指定的属性
 * @param {Vnode} instance vNode
 * @param {String|Number} prop 属性名称
 * @return {Boolean}
 */
export const hasProp = (instance, prop) => {
    const { $options: { propsData = {} } = {} } = instance;
    return prop in propsData;
};

/**
 * 过滤props中的undefined
 * @param {Object} props $props
 * @param {Object} propsData $options.propsData
 * @return {Object}
 */
export const filterProps = (props, propsData = {}) => {
    const res = {};
    Object.keys(props).forEach(k => {
        if (k in propsData || props[k] !== void 0) {
            res[k] = props[k];
        }
    });
    return res;
};

/**
 * 组件slot中是否有指定的属性
 * @param {Vnode} slot $slot
 * @param {string|number} prop 属性名称
 * @return {boolean}
 */
export const slotHasProp = (slot, prop) => {
    const { propsData = {} } = slot.componentOptions || {};
    return prop in propsData;
};

/**
 * 是否为空组件
 * @param {Vnode} c vNode
 * @return {boolean}
 */
export function isEmptyElement(c) {
    return !(c.tag || (c.text && c.text.trim() !== ''));
}

/**
 * 获取所有的子孩子节点
 * @param {Vnode} ele vNode
 * @returns {array} vnode
 */
export const getAllChildren = ele => {
    const componentOptions = (ele.$vnode ? ele.$vnode.componentOptions : ele.componentOptions) || {};
    return ele.children || componentOptions.children || [];
};

/**
 * 获取组件$slot
 * @param {Vnode} ele Vnode
 * @returns {Object} $slot
 */
export const getSlots = ele => {
    const children = getAllChildren(ele);
    const slots = {};
    children.forEach(child => {
        if (!isEmptyElement(child)) {
            const name = (child.data && child.data.slot) || 'default';
            slots[name] = slots[name] || [];
            slots[name].push(child);
        }
    });
    return slots;
};

/**
 * 获取$slot中的options
 * @param {Vnode} ele vNode
 * @returns {Object}
 */
export const getSlotOptions = ele => {
    // 函数式组件
    if (ele.fnOptions) {
        return ele.fnOptions;
    }
    const componentOptions = ele.$vnode ? ele.$vnode.componentOptions : ele.componentOptions;
    return componentOptions ? componentOptions.Ctor.options || {} : {};
};

function getType(fn) {
    const match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
}

/**
 * 获取组件中的$options.propsData
 * @param {Vnode} instance vNode
 * @returns {Object}
 */
export const getOptionProps = instance => {
    if (instance.componentOptions) {
        const componentOptions = instance.componentOptions;
        const { propsData = {}, Ctor = {} } = componentOptions;
        const props = (Ctor.options || {}).props || {};
        const res = {};
        for (const [k, v] of Object.entries(props)) {
            const def = v.default;
            if (def !== undefined) {
                res[k] = typeof def === 'function' && getType(v.type) !== 'Function' ? def.call(instance) : def;
            }
        }
        return {
            ...res,
            ...propsData
        };
    }
    const { $options = {}, $props = {} } = instance;
    return filterProps($props, $options.propsData);
};

/**
 * 获取节点事件 $listeners
 * @param {Vnode} node
 * @returns {Object}
 */
export function getEvent(node) {
    let events = {};
    if (node.componentOptions && node.componentOptions.listeners) {
        events = node.componentOptions.listeners;
    } else if (node.data && node.data.on) {
        events = node.data.on;
    }
    return { ...events };
}
