import _ from "lodash";
import mgs from "packages/form-item/src/message-CN.js";

// 正则匹配 range[*]
const reg = /range\[(\S*)\]/i;
// 匹配空字符串
const reg_space = /\s+/g;
const seq = ",";

/**
 *  rule字段 String to Object
 *   a) require 必须值
 *   b) type 类型需求，请查看 message-CN.js 中的 types字段
 *   c) range 范围需求
 *       *range 使用 async-validator 没提供使用说明,所以提供以下类似python的范围语法
 *       range[50] => { len: 50 }
 *       range[1:] => { min: 1 }
 *       range[:100] => { max: 100 }
 *       range[1:100] => { min: 1, max: 100 }
 * @param {String} str rule 字段值
 * @returns {Object}
 */
export function ruleStr2Obj(str = "") {
  // 去除空格
  let rules = str.replace(reg_space, "");
  const arr = rules.split(seq);
  rules = {};
  // mgs.types中匹配类型
  const type = _.intersection(arr, Object.keys(mgs.types));
  // 如果多个匹配则取第一个
  if (type && type.length) {
    rules.type = type[0];
  }
  // require: true?
  if (arr && arr.length && arr.indexOf("required") !== -1) {
    rules.required = true;
  }
  arr.forEach(item => {
    if (reg.test(item)) {
      const substr = item.match(reg);
      if (substr) {
        const valStr = substr[1];
        // ~-1 === 0
        if (~valStr.indexOf(":")) {
          const val = valStr.split(":");
          if (val[0]) {
            rules.min = parseInt(val[0]);
          }

          if (val[1]) {
            rules.max = parseInt(val[1]);
          }
        } else {
          rules.len = parseInt(valStr);
        }
      }
    }
  });
  return rules;
}

/**
 * formItem 或 form 中 rule 字段的转换
 * @param {*} rules rule 字段值
 * @param {Enum} type ['formItem', 'form'] 对应字母的组件
 * @returns {Array|Object}
 */
export function ruleChange(rules, type) {
  // 防止void 0、null、0、''、NaN情况
  if (!rules) {
    return;
  }
  let selfRules = rules;
  if (type === "formItem" && _.isString(rules)) {
    selfRules = ruleStr2Obj(rules);
  }
  if (type === "form") {
    selfRules = {};
    for (let key in rules) {
      const item = rules[key];
      selfRules[key] = _.isString(item) ? ruleStr2Obj(item) : item;
    }
  }
  return selfRules;
}
