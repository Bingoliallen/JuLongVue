/*
 * @Author: lutz
 * @Date: 2019-07-02 13:21:30
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-04 14:25:16
 */

export const toStr = Object.prototype.toString;
export const hasOwn = Object.prototype.hasOwnProperty;

// Null、Undefined、Boolean、String、Number、Object、Symbol
export const isNull = v => v === null;
export const isUndefined = v => v === void 0;
export const isBoolean = v => toStr.call(v) === '[object Boolean]';
export const isString = v => toStr.call(v) === '[object String]';
export const isNumber = v => toStr.call(v) === '[object Number]';
export const isObject = v => toStr.call(v) === '[object Object]';
export const isSymbol = v => toStr.call(v) === '[object Symbol]';

// ELEMENT
export const isHtmlElement = v => v && v.nodeType === Node.ELEMENT_NODE;
export const isVNode = v => v !== null && typeof v === 'object' && hasOwn.call(v, 'componentOptions');

// RegExp、Function、Array
export const isRegExp = v => toStr.call(v) === '[object RegExp]';
export const isFunction = v => toStr.call(v) === '[object Function]';
export const isArray = Array.isArray || (v => toStr.call(v) === '[object Array]');

// Empty
export const isNil = v => v === null || v === void 0;
export const isEmpty = v => v === null || v === void 0 || v === '';

/*
    // 判断整型
    isInteger(1.00) // true
    // 判断浮点型
    const patter = /^(-?\d+)(\.\d+)?$/; // float RegExp
    isFloat(1.00) // false
    // 判断能否转换成数值类型
    isNumberic('string') // false
    isNumberic('0.00') // true
*/
// Number
export const isInteger = Number.isInteger || (v => typeof v === 'number' && isFinite(v) && Math.floor(v) === v);
export const isFloat = v => typeof v === 'number' && v != parseInt(v);
export const isNumberic = v => !isNaN(parseFloat(v)) && isFinite(v);

// Date
export const isDate = v => toStr.call(v) === '[object Date]';

// Object
export const hasProp = (obj, prop) => hasOwn.call(obj, prop);
// 是否引用类型
export const isCiteType = v => v != null && (typeof v === 'object' || typeof v === 'function');

// Funciton
export const isNative = v => typeof v === 'function' && /native code/.test(v.toString());

// ObjectLike
export const isObjectLike = v => v != null && typeof v === 'object';
