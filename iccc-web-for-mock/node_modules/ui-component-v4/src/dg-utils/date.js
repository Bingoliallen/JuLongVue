/*
 * @Author: lutz
 * @Date: 2019-06-24 10:41:24
 * @Last Modified by: lutz
 * @Last Modified time: 2020-01-13 17:19:36
 */

/**
 * 验证有效的日期的输入格式
 * @param {String} str yyyy-MM-dd | yyyy-M-D | yyyy:MM:dd | yyyy:M:D | yyyy/MM/dd | yyyy/M/D
 *
 * @returns {Boolean}
 */

import { isDate, isString, isInteger, isBoolean } from './types';

export function validFormatDatePicker(str) {
    if (!str) {
        return false;
    }
    if (isDate(str)) {
        return true;
    }
    const datePickerRE = /^(\d{1,4})(-|\/|:)(\d{1,2})\2(\d{1,2})$/;
    const result = str.match(datePickerRE);
    if (!result) {
        return false;
    }
    const d = new Date(result[1], result[3] - 1, result[4]);
    return d.getFullYear() == result[1] && d.getMonth() + 1 == result[3] && d.getDate() == result[4];
}

/**
 * 将时间格式化到指定格式
 * y:年份 M:月份 d:日 q:季 w:星期 H:24小时 h:12小时 m:分钟 s:秒 S毫秒
 * @param {String|Object} opt 需要格式化到的字符串 Object默认取format
 * @param {Date|Number} date 时间
 * @param {Boolean} bool 是否关闭时间自动使用当前时间
 *
 * @returns {String}
 */
export function formatDate(opt, date, bool) {
    const options = {
        weekdays: ['天', '一', '二', '三', '四', '五', '六', '天'],
        format: 'yyyy-MM-dd HH:mm:ss',
        week: '星期',
        W: '周'
    };

    // 为了方便书写,次序打乱。 opt: {Object|String}; data: {Date|Integer}; bool: {Boolean}
    if (isDate(opt) || isInteger(opt)) {
        opt = [date, (date = opt)][0]; // 两值交换
    } else if (isDate(bool) || isInteger(bool)) {
        bool = [date, (date = bool)][0];
    }
    if (isBoolean(opt)) {
        opt = [bool, (bool = opt)][0];
    } else if (isBoolean(date)) {
        date = [bool, (bool = date)][0];
    }

    date = isDate(date) ? date : isInteger(date) ? new Date(date) : null;

    // 开启严格模式,禁止传入空值
    if (bool === true && !isDate(date)) {
        return null;
    }

    date = date || new Date();
    opt = isString(opt) ? { format: opt } : opt || {};
    opt = { ...options, ...opt };
    let fmt = opt.format;
    const obj = {
        y: date.getFullYear(), // 年份，注意必须用getFullYear
        M: date.getMonth() + 1, // 月份，注意是从0-11
        d: date.getDate(), // 日
        q: Math.floor((date.getMonth() + 3) / 3), // 季度
        w: date.getDay(), // 星期，注意是0-6
        H: date.getHours(), // 24小时制
        h: date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, // 12小时制
        m: date.getMinutes(), // 分钟
        s: date.getSeconds(), // 秒
        S: date.getMilliseconds() // 毫秒
    };
    Object.keys(obj).forEach(item => {
        fmt = fmt.replace(new RegExp(item + '+', 'g'), function(m) {
            let val = obj[item] + '';
            if (item == 'w') {
                return (m.length > 2 ? opt.week : opt.W) + opt.weekdays[val];
            }
            for (let j = 0, len = val.length; j < m.length - len; j++) {
                val = '0' + val;
            }
            return m.length == 1 ? val : val.substring(val.length - m.length);
        });
    });
    return fmt;
}

/**
 * 判断闰年
 * @param {Number} year 查询的年份
 *
 * @return {Boolean}
 */
export function isLeapYear(year) {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

/**
 * 获取月份的天数
 * @param {Number}  year    查询的年份
 * @param {Number}  month   查询的月份（需要 -1）
 *
 * @return {Number}
 */
export function getMonthDays(year, month) {
    const monthDays = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return monthDays[month] || (isLeapYear(year) ? 29 : 28);
}

/**
 * 获取日期在当年的第几天
 * @param {Number}  year    查询的年份
 * @param {Number}  month   查询的月份
 * @param {Number}  day     查询的号数
 *
 * @return {Number}
 */
export function getSameYearNumber(year, month, day) {
    const now = new Date(year, month - 1, day);
    let y = now.getFullYear();
    let m = now.getMonth();
    let d = now.getDate();
    for (let i = 0; i < m; i++) {
        d += getMonthDays(y, i);
    }
    return d;
}

/**
 * 获取日期在日期当年的第几周
 * @param {number}  year   查询的年份
 * @param {number}  month  查询的月份
 * @param {number}  date   查询的号数
 *
 * @return {number}
 */
export function getWeekNumber(year, month, day) {
    let days = getSameYearNumber(year, month, day);
    const yearFirstDay = new Date(year, 0, 1).getDay() || 7;
    let week = null;
    if (yearFirstDay == 1) {
        week = Math.ceil(days / 7);
    } else {
        days -= 7 - yearFirstDay + 1;
        week = Math.ceil(days / 7) + 1;
    }
    return week;
}

/**
 * 获取当年第几周的起止日期
 * @param {Number}  year   查询的年份
 * @param {Number}  week   第n个星期(超过当年n个周将不显示)
 * @param {Boolean} border defulat: true 允许越过当年年份
 * @param {String}  format 展示的时间格式 yyyy-MM-dd
 *
 * @return {Object}
 */
export function getWeekRange(year, week, border, format = 'yyyy-MM-dd') {
    const dayTime = 24 * 60 * 60 * 1000;
    const oldYearDay = new Date(year, 11, 31);
    const newsYearDay = new Date(year, 0, 1);
    const yearFirstDay = newsYearDay.getDay() || 7;
    let sunDay = newsYearDay.getTime();
    const maxWeek = getWeekNumber(year, 12, 31);
    week = week > maxWeek ? maxWeek : week;
    if (yearFirstDay != 7) {
        sunDay += (7 - yearFirstDay) * dayTime;
    }
    sunDay += (week - 1) * 7 * dayTime;
    let startTime = sunDay - 6 * dayTime;
    let endTime = sunDay;
    if (border === false) {
        const yearFirst = newsYearDay.getTime();
        const yearLast = oldYearDay.getTime();
        if (yearFirst > startTime) {
            startTime = yearFirst;
        }
        if (yearLast < endTime) {
            endTime = yearLast;
        }
    }
    return {
        startTime: formatDate(startTime, format),
        endTime: formatDate(endTime, format)
    };
}

/**
 * 近 n 周的日期起止
 * @param {Number} counst 近n周
 * @param {Number} date 日期时间型
 *
 * @return {Array}
 */
export function getNearlyWeek(counst, date) {
    const now = typeof date == 'number' ? new Date(date) : new Date();
    let y = now.getFullYear();
    let m = now.getMonth();
    let d = now.getDate();
    let w = getWeekNumber(y, m + 1, d) - 1; // 当前周 - 1, 本周不计算
    let optArr = [];
    while (w > w - counst && optArr.length < counst) {
        if (w == 0) {
            y--;
            w = getWeekNumber(w, 12, 31);
        }
        optArr.push({
            label: y + '年第' + (w < 10 ? '0' + w : w) + '周',
            value: getWeekRange(y, w, false)
        });
        w--;
    }
    return optArr;
}
