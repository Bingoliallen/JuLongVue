import Vue from "vue";
import { on } from "main/utils/dom";
import _ from "lodash";

const nodeList = [];
const ctx = "@@clickoutsideContext";

let startClick;
let seed = 0;

!Vue.prototype.$isServer && on(document, "mousedown", e => (startClick = e));

!Vue.prototype.$isServer &&
  on(document, "mouseup", e => {
    nodeList.forEach(node => node[ctx].documentHandler(e, startClick));
  });
function deepContainPopper(vnode, mousedown, mouseup) {
  // 过滤掉子节点不存在日期和下拉类似浮层点击
  let isContain = false;
  let isFilter = vnode => {
    // 节点实例的存在浮层，且包含点击元素
    if (
      vnode.context &&
      vnode.context.popperElm &&
      vnode.context.popperElm.contains(mousedown.target)
    ) {
      isContain = true;
      return;
    }
    // 普通节点找子节点，组件占位节点，找第一个根节点
    let children =
      (!_.isEmpty(vnode.children) && vnode.children) ||
      (!_.isEmpty(vnode.componentInstance) && [
        vnode.componentInstance._vnode
      ]) ||
      [];
    // 递归调用子节点
    children.forEach(isFilter);
  };
  isFilter(vnode);
  return isContain;
}
function createDocumentHandler(el, binding, vnode) {
  return function(mouseup = {}, mousedown = {}) {
    if (
      !vnode ||
      !vnode.context ||
      !mouseup.target ||
      !mousedown.target ||
      el.contains(mouseup.target) ||
      el.contains(mousedown.target) ||
      el === mouseup.target ||
      (vnode.context.popperElm &&
        (vnode.context.popperElm.contains(mouseup.target) ||
          vnode.context.popperElm.contains(mousedown.target))) ||
      deepContainPopper(vnode, mousedown, mouseup) // 增加yangjy ，深度遍历子节点是否存在弹层包含点击元素
    )
      return;

    if (
      binding.expression &&
      el[ctx].methodName &&
      vnode.context[el[ctx].methodName]
    ) {
      vnode.context[el[ctx].methodName]();
    } else {
      el[ctx].bindingFn && el[ctx].bindingFn();
    }
  };
}

/**
 * v-clickoutside
 * @desc 点击元素外面才会触发的事件
 * @example
 * ```vue
 * <div v-element-clickoutside="handleClose">
 * ```
 */
export default {
  bind(el, binding, vnode) {
    nodeList.push(el);
    const id = seed++;
    el[ctx] = {
      id,
      documentHandler: createDocumentHandler(el, binding, vnode),
      methodName: binding.expression,
      bindingFn: binding.value
    };
  },

  update(el, binding, vnode) {
    el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);
    el[ctx].methodName = binding.expression;
    el[ctx].bindingFn = binding.value;
  },

  unbind(el) {
    let len = nodeList.length;

    for (let i = 0; i < len; i++) {
      if (nodeList[i][ctx].id === el[ctx].id) {
        nodeList.splice(i, 1);
        break;
      }
    }
    delete el[ctx];
  }
};
