export default {
    name: 'DgRow',

    componentName: 'DgRow',

    props: {
        tag: {
            type: String,
            default: 'div'
        },
        // update by author: tangdm
        gutter: [Number, String],
        type: String,
        justify: {
            type: String,
            default: 'start'
        },
        align: {
            type: String,
            default: 'top'
        },
        // 斑马间距
        zebra: [Number, String],
        // 高度值
        height: [Number, String],
        // 背景色
        background: String,
        // 左右间距
        space: [Number, String]
    },

    computed: {
        style() {
            const ret = {};

            // 去除字符串两端的空格
            function trim(text) {
                return text == null ? '' : (text + '').replace(/^\s*((?:[\S\s]*\S)?)\s*$/, '$1');
            }

            // 提取字符串数值及单位
            function splitGutterStyle(item) {
                const _number = item.match(/^[.0-9]*/gi);
                const _unit = item.match(/[a-z|A-Z]+$/gi);
                return `-${_number / 2}` + (_unit ? _unit : 'px');
            }

            // 提取斑马纹 Zebra 的值
            function splitZebraStyle(item) {
                const _number = item.match(/^[.0-9]*/gi);
                const _unit = item.match(/[a-z|A-Z]+$/gi);
                return _number + (_unit ? _unit : 'px');
            }

            // 检测是否存在该属性
            if (this.gutter) {
                // 检测 `gutter` 的类型
                if (typeof this.gutter === 'string') {
                    // 过滤空格及拆分数组
                    const trimArray = trim(this.gutter).split(' ');

                    // 位数判断
                    if (trimArray.length === 2) {
                        ret.marginLeft = splitGutterStyle(trimArray[0]);
                        ret.marginRight = splitGutterStyle(trimArray[1]);
                    } else {
                        ret.marginLeft = splitGutterStyle(trimArray[0]);
                        ret.marginRight = ret.marginLeft;
                    }
                } else {
                    ret.marginLeft = `-${this.gutter / 2}px`;
                    ret.marginRight = ret.marginLeft;
                }
            }

            // 检测是否存在该属性
            if (this.zebra) {
                // 检测 `gutter` 的类型
                if (typeof this.zebra === 'string') {
                    // 过滤空格及拆分数组
                    let trimGutter = trim(this.zebra);
                    let trimArray = trimGutter.split(' ');

                    // 位数判断
                    if (trimArray.length === 2) {
                        ret.paddingTop = splitZebraStyle(trimArray[0]);
                        ret.paddingBottom = splitZebraStyle(trimArray[1]);
                    } else {
                        ret.paddingTop = splitZebraStyle(trimArray[0]);
                        ret.paddingBottom = ret.paddingTop;
                    }
                } else {
                    ret.paddingTop = `${this.zebra / 2}px`;
                    ret.paddingBottom = ret.paddingTop;
                }
            }

            // 检测是否存在该属性
            if (this.space) {
                // 检测 `gutter` 的类型
                if (typeof this.space === 'string') {
                    // 过滤空格及拆分数组
                    let trimSpace = trim(this.space);
                    let trimArray = trimSpace.split(' ');

                    // 位数判断
                    if (trimArray.length === 2) {
                        ret.paddingLeft = splitZebraStyle(trimArray[0]);
                        ret.paddingRight = splitZebraStyle(trimArray[1]);
                    } else {
                        ret.paddingLeft = splitZebraStyle(trimArray[0]);
                        ret.paddingRight = ret.paddingLeft;
                    }
                } else {
                    ret.paddingLeft = `${this.space / 2}px`;
                    ret.paddingRight = ret.paddingLeft;
                }
            }
    
            // add author: tangdm descript: add some model for extended the mode
            if (this.height) {
                ret.height = typeof this.height === 'string' ? this.height : this.height + 'px';
            }
    
            // add author: tangdm descript: add some model for extended the mode
            if (this.background) {
                ret.background = this.background;
            }

            return ret;
        }
    },

    render(h) {
        return h(
            this.tag,
            {
                class: [
                    'el-row',
                    this.justify !== 'start' ? `is-justify-${this.justify}` : '',
                    this.align !== 'top' ? `is-align-${this.align}` : '',
                    { 'el-row--flex': this.type === 'flex' }
                ],
                style: this.style
            },
            this.$slots.default
        );
    }
};
