import _ from 'lodash';

export default {
    // create
    props: {
        rows: Array,
        columns: Array,
        labelMap: Object
    },

    methods: {
        // upload
        dataHandler() {
            if (!this.chartHandler) return;

            // update-start author:lutz
            const { columns, rows } = this;
            let data = _.isEmpty(this.data) ? { columns, rows } : this.data;
            const settings = _.merge({ labelMap: this.labelMap }, this.settings);
            /* [code]
                let data = this.data
                const { columns = [], rows = [] } = data
            */
            // update-end

            const extra = {
                tooltipVisible: this.tooltipVisible,
                legendVisible: this.legendVisible,
                echarts: this.echarts,
                color: this.chartColor,
                tooltipFormatter: this.tooltipFormatter,
                _once: this._once
            };
            if (this.beforeConfig) data = this.beforeConfig(data);

            // update-start author:lutz
            /* [code] let options = this.chartHandler(columns, rows, this.settings, extra) */
            let options = this.chartHandler(columns, rows, settings, extra);
            // update-end

            if (options) {
                if (typeof options.then === 'function') {
                    options.then(this.optionsHandler);
                } else {
                    this.optionsHandler(options);
                }
            }
        }
    }
};
