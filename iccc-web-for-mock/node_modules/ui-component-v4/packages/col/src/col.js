export default {
    name: 'DgCol',

    props: {
        span: {
            type: Number,
            default: 24
        },
        tag: {
            type: String,
            default: 'div'
        },
        offset: Number,
        pull: Number,
        push: Number,
        xs: [Number, Object],
        sm: [Number, Object],
        md: [Number, Object],
        lg: [Number, Object],
        xl: [Number, Object],
        // add author: tangdm
        // 宽度值
        width: [Number, String],
        // 高度值
        height: [Number, String],
        // 背景值
        background: String,
        // 空间所占的区域
        flex: Number
    },

    computed: {
        gutter() {
            let parent = this.$parent;

            // update author: tangdm [code] parent && parent.$options.componentName !== 'ElRow'
            while (parent && parent.$options.componentName !== 'DgRow') {
                parent = parent.$parent;
            }
            return parent ? parent.gutter : 0;
        }
    },
    render(h) {
        let classList = [];
        let style = {};

        // 去除字符串两端的空格
        function trim(text) {
            return text == null ? '' : (text + '').replace(/^\s*((?:[\S\s]*\S)?)\s*$/, '$1');
        }

        // 提取字符串数值及单位
        function splitGutterStyle(item) {
            const _number = item.match(/^[.0-9]*/gi);
            const _unit = item.match(/[a-z|A-Z]+$/gi);
            return _number / 2 + (_unit ? _unit : 'px');
        }

        // update author: tangdm
        if (this.gutter) {
            // style.paddingLeft = this.gutter / 2 + 'px';
            // style.paddingRight = style.paddingLeft;

            // 检测 `gutter` 的类型
            if (typeof this.gutter === 'string') {
                // 过滤空格及拆分数组
                const trimArray = trim(this.gutter).split(' ');

                // 位数判断
                if (trimArray.length === 2) {
                    style.paddingLeft = splitGutterStyle(trimArray[0]);
                    style.paddingRigth = splitGutterStyle(trimArray[1]);
                } else {
                    style.paddingLeft = splitGutterStyle(trimArray[0]);
                    style.paddingRight = style.paddingLeft;
                }
            } else {
                style.paddingLeft = this.gutter / 2 + 'px';
                style.paddingRight = style.paddingLeft;
            }
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.width) {
            style.width = typeof this.width === 'string' ? this.width : this.width + 'px';
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.height) {
            style.height = typeof this.height === 'string' ? this.height : this.height + 'px';
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.background) {
            style.background = this.background;
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.flex) {
            style.flex = this.flex;
        }

        ['span', 'offset', 'pull', 'push'].forEach(prop => {
            if (this[prop] || this[prop] === 0) {
                classList.push(prop !== 'span' ? `el-col-${prop}-${this[prop]}` : `el-col-${this[prop]}`);
            }
        });

        ['xs', 'sm', 'md', 'lg', 'xl'].forEach(size => {
            if (typeof this[size] === 'number') {
                classList.push(`el-col-${size}-${this[size]}`);
            } else if (typeof this[size] === 'object') {
                let props = this[size];
                Object.keys(props).forEach(prop => {
                    classList.push(
                        prop !== 'span' ? `el-col-${size}-${prop}-${props[prop]}` : `el-col-${size}-${props[prop]}`
                    );
                });
            }
        });

        return h(
            this.tag,
            {
                class: ['el-col', classList],
                style
            },
            this.$slots.default
        );
    }
};
