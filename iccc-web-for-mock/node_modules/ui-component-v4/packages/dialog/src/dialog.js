import Vue from 'vue';
import Dialog from './main';
import objectAssign from 'main/utils/merge';

const dialog = function(options) {
    const { router, store } = this.$root.$options;
    let com = options.component.default ? options.component.default : options.component;
    // // 指令和注入
    // let cfg = {
    //     directives: {
    //         footer: {
    //             inserted(el, binding, vnode) {
    //                 // 检测是否存在
    //                 if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
    //                     // 构建新的按钮区域
    //                     let dom = document.createElement('div');
    //                     dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
    //                     dom.appendChild(el);

    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.appendChild(dom);
    //                 } else {
    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
    //                 }
    //             }
    //         }
    //     }
    // };

    // 混入对象
    let mixin = function(comObj) {
        let component = comObj.default || comObj;
        let com = { ...component };
        // com.mixins = com.mixins ? [cfg, ...com.mixins] : [cfg];
        return com;
    };

    // 加入指令
    com = mixin(com);

    const instance = new Vue({
        router,
        store,
        data: objectAssign(
            {
                appendToBody: true,
                center: true,
                visible: true,
                'head-type': 'info',
                vertical: true
            },
            options
        ),
        render(h) {
            return h(
                Dialog,
                {
                    props: objectAssign({}, options, {
                        appendToBody: true,
                        visible: this.visible
                    }),
                    on: {
                        'update:visible': status => {
                            this.visible = status;
                        },
                        open: function() {
                            options.on && options.on.open && options.on.open();
                        },
                        opened: function() {
                            options.on && options.on.opened && options.on.opened();
                        },
                        close: function(e) {
                            instance.close(e);
                        }
                    }
                },
                [
                    h(com, {
                        props: options.props,
                        on: {
                            close: e => {
                                instance.close(e);
                            },
                            ...options.on
                        }
                    })
                ]
            );
        },
        methods: {
            show: function() {
                this.visible = true;
            },
            hide: function() {
                this.visible = false;
            },
            destroy() {
                this.$destroy();
            },
            close: function() {
                if (options.close && options.close() === 'hide') {
                    return;
                }
                instance.destroy();
            }
        }
    });
    return instance.$mount();
};

export default dialog;
