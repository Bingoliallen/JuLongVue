import _ from 'lodash';
const WhileLock = 10; // 防止死循环

// 检测是否弹层 Dialog
const checkDialogType = (vnode) => {
    let node = vnode.context.$parent.$el;
    return !!node && node.className === "el-dialog__wrapper";
}

export default {
    bind(el, { value }, vnode) {
        if(checkDialogType(vnode)) return;
        if (value !== false) {
            let opt = vnode.context;
            let whileBool = true;
            let whileLock = WhileLock; // 防止死循环
            while (whileBool && whileLock > 0) {
                opt = opt.$parent;
                if (opt && opt.$options.opt && opt.$options.opt.btnExt) {
                    opt = opt.$options.opt ? opt.$options.opt : opt;
                    whileBool = false;
                }
                --whileLock;
            }
            opt.btnExt.push(el);
        } else {
            vnode.context.$nextTick(() => {
                vnode.elm.parentNode.removeChild(el);
            });
        }
    },
    inserted(el, { value }, vnode) {
        if(!checkDialogType(vnode)) return;
        // 检测是否存在
        if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
            // 构建新的按钮区域
            let dom = document.createElement('div');
            dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
            dom.appendChild(el);

            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.appendChild(dom);
        } else {
            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
        }
    },
    update(el, { value }, vnode, oldVnode) {
        if(checkDialogType(vnode)) return;
        let layuiLayerBtn = vnode.context.$parent.$el;
        let whileBool = true;
        let whileLock = WhileLock; // 防止死循环
        while (whileBool && whileLock > 0) {
            if (!layuiLayerBtn) {
                whileBool = false;
                continue;
            }
            layuiLayerBtn = layuiLayerBtn.parentNode;
            
            // 检测是否找到父级元素
            if(!layuiLayerBtn) {
                whileBool = false;
                continue;
            }

            const className = layuiLayerBtn.className;
            if (className && _.includes(className, 'layui-layer layui-layer-page')) {
                layuiLayerBtn = layuiLayerBtn.querySelector('.layui-layer-btn');
                whileBool = false;
            }
            --whileLock;
        }
        if (!layuiLayerBtn) {
            return;
        }
        if (value !== false) {
            layuiLayerBtn.appendChild(el);
        } else {
            // el.parentNode === null 说明移除了
            el.parentNode && layuiLayerBtn.removeChild(el);
        }
    }
};
