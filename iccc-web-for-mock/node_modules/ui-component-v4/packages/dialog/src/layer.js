import layer from './layer-source';
import PopupManager from 'element-ui/lib/utils/popup/popup-manager';
import $ from 'jquery';
import _ from 'lodash';

let layerDialog = function (Vue) {
    return function (option) {
        if (!option.content && !option.component) {
            throw 'error: the content or component of  Dialog cannot be null!';
        }
        // 初始化参数
        let opt = initOption(option);

        // 不是组件的直接调用原有的方法
        if (!opt.isComponent) {
            return layer.open(opt);
        }

        // 获取组件信息,和是否异步组件
        let { component, isAsync } = getComponent(opt, Vue);

        // 创建组件实例
        const { router, store } = this.$root.$options;
        let instance = new Vue({
            router,
            store,
            parent: this,
            el: opt.$el[0],
            opt: opt,
            provide: {
                $p: this,
                $props: opt.props
            },
            components: {
                InnerComponent: component
            },
            render(h) {
                let comName = typeof opt.content == 'string' ? opt.content : 'InnerComponent';
                return h(comName, {
                    props: opt.props,
                    on: {
                        close: e => {
                            layer.close(this.dialogIndex);
                        },
                        closeAll() {
                            layer.closeAll();
                        },
                        ...opt.on
                    }
                });
            },

            methods: {
                destroy() {
                    this.$destroy();
                },
                close: index => {
                    let _index = index ? index : this.dialogIndex;
                    layer.close(_index);
                },
                closeAll: () => {
                    layer.closeAll();
                }
            },
            mounted() {
                const that = this;
                this.$nextTick(() => {
                    !isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            updated() {
                const that = this;
                this.$nextTick(() => {
                    isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            destroyed() {
                $(this.$el).remove();
                instance = null;
            }
        });

        return instance;
    };
};

/**
 * 初始化参数
 * @param opt
 * @returns {Object}
 */
function initOption(opt) {
    // 计算宽高，不允许超出浏览器最大高框
    let [maxW, maxH] = [document.body.clientWidth - 10, document.body.clientHeight - 100];
    let [width = '10000px', height = '10000px'] = opt.area || [];
    if (width.indexOf('px') > 0) {
        width = parseInt(width) > maxW ? maxW + 'px' : width;
    }
    if (height.indexOf('px') > 0) {
        height = parseInt(height) > maxH ? maxH + 'px' : height;
    }

    // 合并参数
    if (opt.component) {
        opt.content = opt.component;
    }
    let content = opt.content.default ? opt.content.default : opt.content;
    // 获取zIndex,让下一个zIndex加3
    let zIndex = PopupManager.nextZIndex();
    PopupManager.zIndex += 2 + layer.index;

    opt = $.extend({ btn: [], btnExt: [], type: 5, maxmin: true }, opt, {
        zIndex: opt.zIndex ? opt.zIndex : zIndex,
        area: [width, height],
        com: content,
        $el: $('<div></div>').appendTo('body')
    });
    if (opt.type == 5) {
        opt.isComponent = true;
    }
    return opt;
}

/**
 * 根据参数获取组件对象异步组件、同步组件require、import等
 * @param opt
 */
function getComponent(opt, Vue) {
    let component = {},
        isAsync = false;
    // 指令和注入
    let cfg = {
        inject: ['$p', '$props']
    };

    // 混入对象
    let mixin = function (comObj) {
        let component = comObj.default || comObj;
        let com = { ...component };
        com.mixins = com.mixins ? [cfg, ...com.mixins] : [cfg];
        return com;
    };

    // 根据对象类型返回混合后的组件
    let isVueComponent =
        opt.com instanceof Function && opt.com.prototype.constructor.toString().includes('VueComponent');
    if (opt.com instanceof Promise) {
        // import("./edit")
        component = (resolve, reject) => {
            opt.com.then(function (obj) {
                resolve(mixin(obj));
            });
        };
        isAsync = true;
    } else if (opt.com instanceof Function && !isVueComponent) {
        // function(resolve,reject){}
        component = (resolve, reject) => {
            opt.com(obj => {
                resolve(mixin(obj));
            }, reject);
        };
        isAsync = true;
    } else if (opt.com instanceof Function && isVueComponent) {
        component = opt.com;
        component.options.directives.footer = cfg.directives.footer;
    } else {
        component = mixin(opt.com);
    }
    return { component, isAsync };
}

/**
 * 调用layer弹窗，供组件渲染后调用
 * @param opt
 */
function openLayer(opt) {
    let optClone = { ...opt };
    let that = this;
    let optEnd = opt.end;
    optClone.content = $(this.$el);
    optClone.type = 1;
    optClone.end = function () {
        optEnd && optEnd.apply(that);
        that.$destroy();
    };
    that.dialogIndex = layer.open(optClone);
    that.layer = layer;
}

export { layerDialog, layer };
