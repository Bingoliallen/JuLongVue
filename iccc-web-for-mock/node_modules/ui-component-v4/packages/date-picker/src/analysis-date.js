import { isString, isArray, isInteger, isDate } from 'main/dg-utils/types';
import { validFormatDatePicker } from 'main/dg-utils/date';
// import moment from 'moment';
import dayjs from 'dayjs';

export function analysis(v) {
    if (!isString(v)) {
        return;
    }

    // 存储时间的 number
    const obj = {
        y: {
            num: 0,
            rang: [],
            fn: 'FullYear'
        },
        M: {
            num: 0,
            rang: [],
            fn: 'Month'
        },
        d: {
            num: 0,
            rang: [],
            fn: 'Date'
        },
        // 季度
        q: {
            num: 0,
            rang: [],
            fn: 'Month*3'
        },
        w: {
            num: 0,
            fn: 'Date*7'
        },
        H: {
            num: 0,
            rang: [],
            fn: 'Hours'
        },
        // 12小时制
        h: {
            num: 0,
            rang: [],
            fn: 'Hours*2'
        },
        m: {
            num: 0,
            rang: [],
            fn: 'Minutes'
        },
        s: {
            num: 0,
            rang: [],
            fn: 'Seconds'
        },
        // 毫秒
        S: {
            num: 0,
            rang: [],
            fn: 'Milliseconds'
        }
    };

    // 过去时间 | 未来时间
    const op = v.slice(0, 1) === '-' ? -1 : 1;

    // 将下划线去掉
    v = v.replace(/-/g, '');

    Object.keys(obj).forEach(item => {
        v.replace(new RegExp('[0-9]+' + item), function(n) {
            obj[item]['num'] = parseInt(n) || 0;
            return ';';
        });
    });

    const now = new Date();
    Object.keys(obj).forEach(item => {
        if (!obj[item].num) {
            return;
        }
        const fnArr = obj[item].fn.split('*');
        let n = 1;
        let fn = obj[item].fn;

        if (fnArr.length > 1) {
            fn = fnArr[0];
            n = fnArr[1];
        }
        // 时间减法
        now[`set${fn}`](now[`get${fn}`]() + obj[item].num * op * n);
    });
    return now;
}

export function str2date(v) {
    if (isArray(v)) {
        // 过滤|转换成有效时间类型
        return v.map(item => (validFormatDatePicker(item) ? item : analysis(item)));
    } else {
        return validFormatDatePicker(v) ? new Date(v) : analysis(v);
    }
}

/**
 *将类型转换成 Date
 *
 * @export
 * @param {*} v
 */
export function any2date(v) {
    if (isDate(v)) {
        return v;
    } else if (isInteger(v)) {
        const date = new Date(v);
        return date.getTime() ? date : null;
    } else if (isString(v)) {
        // let result = v;
        // if (result.length === 14) {
        //     result = result.replace(result.match(/\d{8}/)[0], result.match(/\d{8}/)[0] + " ");
        // }
        return dayjs(v).format("YYYY-MM-DD HH:mm:ss");
    }
    return null;
}
