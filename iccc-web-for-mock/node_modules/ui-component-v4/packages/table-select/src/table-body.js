import DgTable from 'packages/table';
import TableOption from './option.vue';
import { complex } from 'main/dg-utils/shear.js';

// 深度拷贝 TableBody
const LTableBody = complex(DgTable.components.ElTable.components.TableBody);

export default {
    name: 'DgTableBody',

    mixins: [LTableBody],

    components: {
        TableOption
    },

    methods: {
        rowRender(row, $index, treeRowData) {
            const { treeIndent, columns, firstDefaultColumnIndex } = this;
            const columnsHidden = columns.map((column, index) => this.isColumnHidden(index));
            const rowClasses = this.getRowClass(row, $index);
            const prop = this.table.prop || this.table.$attrs.prop; // lutz+ 标记 id
            let display = true;
            if (treeRowData) {
                rowClasses.push('el-table__row--level-' + treeRowData.level);
                display = treeRowData.display;
            }
            // lutz+
            const data = {
                class: rowClasses,
                style: this.getRowStyle(row, $index),
                key: this.getKeyOfRow(row, $index),
                props: {
                    value: row[prop.value],
                    label: row[prop.label],
                    disabled: row[prop.disabled]
                },
                on: {
                    click: $event => this.handleClick($event, row),
                    dblclick: $event => this.handleDoubleClick($event, row),
                    contextmenu: $event => this.handleContextMenu($event, row),
                    mouseenter: _ => this.handleMouseEnter($index),
                    mouseleave: this.handleMouseLeave
                },
                directives: [
                    {
                        name: 'show',
                        value: display
                    }
                ]
            };
            // update
            return (
                <table-option {...data}>
                    {columns.map((column, cellIndex) => {
                        const { rowspan, colspan } = this.getSpan(row, column, $index, cellIndex);
                        if (!rowspan || !colspan) {
                            return null;
                        }
                        const columnData = { ...column };
                        columnData.realWidth = this.getColspanRealWidth(columns, colspan, cellIndex);
                        const data = {
                            store: this.store,
                            _self: this.context || this.table.$vnode.context,
                            column: columnData,
                            row,
                            $index
                        };
                        if (cellIndex === firstDefaultColumnIndex && treeRowData) {
                            data.treeNode = {
                                indent: treeRowData.level * treeIndent,
                                level: treeRowData.level
                            };
                            if (typeof treeRowData.expanded === 'boolean') {
                                data.treeNode.expanded = treeRowData.expanded;
                                // 表明是懒加载
                                if ('loading' in treeRowData) {
                                    data.treeNode.loading = treeRowData.loading;
                                }
                                if ('noLazyChildren' in treeRowData) {
                                    data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
                                }
                            }
                        }
                        return (
                            <td
                                style={this.getCellStyle($index, cellIndex, row, column)}
                                class={this.getCellClass($index, cellIndex, row, column)}
                                rowspan={rowspan}
                                colspan={colspan}
                                on-mouseenter={$event => this.handleCellMouseEnter($event, row)}
                                on-mouseleave={this.handleCellMouseLeave}
                            >
                                {column.renderCell.call(
                                    this._renderProxy,
                                    this.$createElement,
                                    data,
                                    columnsHidden[cellIndex]
                                )}
                            </td>
                        );
                    })}
                </table-option>
            );
        }
    }
};
