// update
var Components = require('../../components.json');
var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');
var endOfLine = require('os').EOL;

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}

const components = [
{{install}}
];

const install = function(Vue, opts = {}) {
  components.forEach(component => {
    Vue.component(component.name, component);
  });

  // +lutz+
  Vue.prototype.$dgMsgbox = MessageBox;
  Vue.prototype.$dgAlert = MessageBox.alert;
  Vue.prototype.$dgConfirm = MessageBox.confirm;
  Vue.prototype.$dgPrompt = MessageBox.prompt;
  // -lutz-
  // +tangdm+
  Vue.prototype.$dgDialog = Dialog.dialog;
  Vue.prototype.$dgLayer = Dialog.layerDialog(Vue);
  Vue.prototype.$layer = Dialog.layer;
  // -tangdm-
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
{{list}}
};
`;

delete Components.font;

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  // lutz+
  // import v-chart
  // if (componentName === "Charts") {
  //   var INSTALL_CHARTS_TEMPLATE = "  ...{{name}}.charsArr";
  //   installTemplate.push(
  //     render(INSTALL_CHARTS_TEMPLATE, {
  //       name: componentName
  //     })
  //   );
  //   listTemplate.push(` ...${componentName}.charsObj`);
  //   return;
  // }
  // lutz-

  if (["Loading", "MessageBox", "Notification", "Message"].indexOf(componentName) === -1) {
    installTemplate.push(
      render(INSTALL_COMPONENT_TEMPLATE, {
        name: componentName,
        component: name
      })
    );
  }

  if (componentName !== "Loading") listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);
