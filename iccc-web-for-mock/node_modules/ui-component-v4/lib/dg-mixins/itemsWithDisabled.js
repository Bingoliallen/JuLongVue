'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _convert = require('main/dg-mixins/convert.js');

var _convert2 = _interopRequireDefault(_convert);

var _dataConvert = require('main/dg-utils/data-convert.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    mixins: [_convert2.default],
    props: {
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabledValue: {
            type: [String, Array],
            default: function _default() {
                return [];
            }
        },
        seq: { type: String, default: ',' },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        }
    },
    watch: {
        data: function data(val) {
            this.dataSource = val;
        },

        // dataSource 触发 data改变的方法
        dataSource: function dataSource(val) {
            this.$emit('change-data', val);
        }
    },
    data: function data() {
        return { dataSource: this.data };
    },

    computed: {
        itemsWithDisabled: function itemsWithDisabled() {
            var dataSource = this.dataSource,
                disabledValue = this.disabledValue,
                seq = this.seq,
                defaultProp = this.defaultProp;

            var disabledArr = (0, _dataConvert.str2arr)(disabledValue, seq, true, dataSource, defaultProp.value);
            if (disabledArr.length < 1) {
                return dataSource;
            }
            // 深度拷贝,避免污染数据源($data)
            var data = _lodash2.default.cloneDeep(dataSource);
            data.forEach(function (item) {
                var isInclude = _lodash2.default.includes(disabledArr, item[defaultProp.value]);
                // 这里if中的布尔值要分开写否则会报错
                if (isInclude) {
                    item[defaultProp.disabled] = true;
                }
            });
            return data;
        }
    }
}; /*
   @author lutz
   @updateDate 2019-06-18
   @describe
       props
           data {array} 组件数据源,透传到 $data.dataSource
           disabled-value {array|string} 禁用项
           seq {string} 分隔符（命名参考: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html）
           output-format {string} enum["String", "Array"]
       data
           dataSource {array} 数据源
       computed
           itemsWithDisabled @return {array<object>} 添加禁用状态到数据源
       watch
           data => dataSource 兼容组件 $props.data 对 $data.dataSource 值变化
   */