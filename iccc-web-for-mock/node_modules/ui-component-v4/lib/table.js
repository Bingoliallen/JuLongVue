module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 26);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 19:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getChildrenRefs; });
function getChildrenRefs(component, ref) {
  var method = {};
  for (var key in component.methods) {
    method[key] = new Function("return this.$refs." + ref + "." + key + ".apply(this,arguments)");
  }
  return method;
}

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),

/***/ 26:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/main.vue?vue&type=template&id=dbfcea2e&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-table" },
    [
      _c(
        "div",
        { staticClass: "dg-table__content" },
        [
          _c(
            "el-table",
            _vm._g(
              _vm._b(
                {
                  directives: [
                    {
                      name: "loading",
                      rawName: "v-loading",
                      value: _vm.loadding,
                      expression: "loadding"
                    }
                  ],
                  ref: "grid",
                  class: [
                    _vm.renderData.length === 0 && !_vm.$attrs.border
                      ? "is-hidden-border-bottom"
                      : ""
                  ],
                  attrs: {
                    data: _vm.renderData,
                    "row-key": _vm.rowKey,
                    prop: _vm.prop,
                    border: _vm.border
                  },
                  on: {
                    "selection-change": _vm.handleSelectItem,
                    "sort-change": _vm.handleSortChange
                  }
                },
                "el-table",
                _vm.attrs,
                false
              ),
              _vm.$listeners
            ),
            [
              _vm._t("default"),
              _c("template", { slot: "empty" }, [_vm._t("empty")], 2),
              _vm._t("append")
            ],
            2
          )
        ],
        1
      ),
      _vm.pagination && _vm.renderData.length > 0
        ? [
            _c(
              "el-pagination",
              _vm._b(
                {
                  staticClass: "dg-table__pagination",
                  on: {
                    "size-change": _vm.handleSizeChange,
                    "current-change": _vm.handleCurrentChange,
                    "prev-click": _vm.handlePrevClick,
                    "next-click": _vm.handleNextClick
                  }
                },
                "el-pagination",
                _vm.paginationOptions,
                false
              )
            )
          ]
        : [_vm._t("pagination")]
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/table/src/main.vue?vue&type=template&id=dbfcea2e&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: external "sortablejs"
var external_sortablejs_ = __webpack_require__(28);
var external_sortablejs_default = /*#__PURE__*/__webpack_require__.n(external_sortablejs_);

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./packages/table/src/autoPageSize.js
/**
 * 此处填写文件描述
 * @Author: yangjy
 * @Date: 2019-06-06
 * @Project ui-component-v4
 */



/* harmony default export */ var autoPageSize = (function (strats, count) {
    var pageTotal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

    var pageSize = 10;
    if (strats && external_lodash_default.a.isFunction(strats)) {
        var height = strats(document.body.clientHeight || window.innerHeight, count);
        if (height <= 0) {
            return [10, 15, 20];
        }
        pageSize = Math.floor(height / 46 - 2);
        pageSize = pageSize || 1;
    }

    // let pageTotal = Math.ceil(count / pageSize);
    var pageSizes = [];
    // 遍历页数表
    for (var i = 1; i <= pageTotal; i++) {
        pageSizes.push(pageSize * i);
    }
    return pageSizes;
});
// EXTERNAL MODULE: ./src/utils/merge.js
var merge = __webpack_require__(8);

// EXTERNAL MODULE: ./src/dg-utils/children.refs.js
var children_refs = __webpack_require__(19);

// EXTERNAL MODULE: ./src/dg-utils/shear.js
var shear = __webpack_require__(5);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/main.vue?vue&type=script&lang=js&
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


// info views by https://github.com/SortableJS/Sortable







var TableRefs = Object(children_refs["a" /* default */])(external_element_ui_["Table"], 'grid');

/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgTable',

    provide: function provide() {
        return {
            overflow: this.overflow,
            paginationOptions: this.paginationOptions
        };
    },


    props: {
        // 透传属性
        // ElTable.ElTableBody 使用<DgTableSelect :prop="defaultProp" />
        prop: Object,
        // 默认数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 分页类型 client | server
        pagingType: {
            type: String,
            default: 'server',
            validator: function validator(val) {
                return ['client', 'server'].indexOf(val) !== -1;
            }
        },
        // 是否可拖拽
        draggable: {
            type: Boolean,
            default: false
        },
        // 拖拽配置项
        dragProps: {
            type: Object,
            default: function _default() {}
        },
        // 是否开启分页
        pagination: {
            type: Boolean,
            default: true
        },
        // 分页配置参数
        paginationProps: {
            type: Object,
            default: function _default() {}
        },
        // 总条数
        paginationTotal: {
            type: Number,
            default: 10
        },
        // 开启是否自动计算分页条数
        autoPage: {
            type: [String, Function]
        },
        border: {
            type: Boolean,
            default: false
        },
        // 行 ID 名称
        rowKey: {
            type: [Function, String],
            default: 'id'
        },
        loading: {
            type: Boolean,
            default: false
        },
        overflow: {
            // tooltip、wrap、origin
            type: String,
            default: 'tooltip'
        },
        // 复选框默认选中值
        selectDefault: {
            type: [Number, String, Array]
        },
        // 若 selectDefault为String时的分隔符
        seq: {
            type: String,
            default: ','
        },
        tableDraggable: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            orignData: [],
            sortColumn: {},
            loadding: this.loading,
            // 默认数据
            dataSource: this.data,
            dataClient: this.data,
            // 拖拽对象
            sortable: null,
            // 分页参数配置
            paginationOptions: {
                currentPage: 1,
                pageSizes: [10, 20, 30],
                pageSize: 10,
                layout: 'total, sizes, prev, pager, next, jumper',
                total: this.paginationTotal
            },
            // 当前分页选中值
            currentSelected: []
        };
    },


    computed: {
        renderData: function renderData() {
            if (this.pagination == true && this.pagingType === 'client') {
                var column = this.sortColumn;
                var _paginationOptions = this.paginationOptions,
                    pageSize = _paginationOptions.pageSize,
                    currentPage = _paginationOptions.currentPage;

                var start = (currentPage - 1) * pageSize;

                var tmpData = [];
                if (!column.order) {
                    tmpData = this.dataClient;
                } else if (column.order === 'ascending') {
                    tmpData = external_lodash_default.a.sortBy(this.dataClient, function (item) {
                        return item[column.property];
                    });
                } else if (column.order === 'descending') {
                    tmpData = external_lodash_default.a.sortBy(this.dataClient, function (item) {
                        return -item[column.property];
                    });
                }

                this.dataSource = tmpData.slice(start, start + pageSize);
            } else if (this.pagination == false && this.pagingType === 'client') {
                this.dataSource = this.dataClient;
            }
            return this.dataSource;
        },


        // 拖拽参数配置
        dragOptions: function dragOptions() {
            return Object(merge["a" /* default */])({
                ghostClass: 'dg-table__placeholder',
                dragClass: 'dg-table__placeholder',
                chosenClass: 'dg-table__placeholder',
                setData: this.handleDragSetData,
                onEnd: this.handleDragOnEnd
            }, this.dragProps);
        },
        attrs: function attrs() {
            return _extends({}, Object(shear["d" /* getCmpProps */])(external_element_ui_["Table"], this), { draggable: this.tableDraggable });
        }
    },

    watch: {
        selectDefault: {
            deep: true,
            immediate: true,
            handler: function handler() {
                var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var seq = this.seq;

                var check = val;
                if (external_lodash_default.a.isString(val)) {
                    // isString
                    check = val.split(seq);
                } else if (external_lodash_default.a.isNumber(val)) {
                    // isNumber
                    check = [val];
                }
                this.currentSelected = external_lodash_default.a.uniq(check);
            }
        },
        // 监听数据
        data: {
            deep: true,
            immediate: true,
            handler: function handler(data, oldData) {
                if (this.pagingType == 'client') {
                    this.orignData = data;
                    this.dataClient = data;
                    var totalPage = Math.ceil(data.length / this.paginationOptions.pageSize);
                    if (totalPage < this.paginationOptions.currentPage) {
                        this.paginationOptions.currentPage = totalPage || 1;
                    }
                    this.paginationOptions.total = data.length;
                } else {
                    this.dataSource = data;
                }
                // 客户端数据且没有分页
                if (!this.pagination && this.pagingType === 'client') {
                    this.dataSource = this.dataClient;
                }
            }
        },
        paginationTotal: {
            handler: function handler(val) {
                this.paginationOptions.total = val;
            }
        },
        paginationProps: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                var total = this.paginationOptions.total;
                this.pagingType === 'client' && (total = this.dataClient.length);
                if (this.autoPage) {
                    var _pageSizes = autoPageSize(this.autoPage, total);
                    this.paginationOptions = Object(merge["a" /* default */])({
                        currentPage: 1,
                        pageSizes: _pageSizes,
                        pageSize: _pageSizes[0],
                        layout: 'total, sizes, prev, pager, next, jumper',
                        total: total
                    });
                } else {
                    this.paginationOptions = Object(merge["a" /* default */])({
                        currentPage: 1,
                        pageSizes: [10, 20, 30],
                        pageSize: 10,
                        layout: 'total, sizes, prev, pager, next, jumper',
                        total: total
                    }, val);
                }
                if (!this.paginationOptions.pageSizes.includes(this.paginationOptions.pageSize)) {
                    this.paginationOptions.pageSizes.unshift(this.paginationOptions.pageSize);
                }
            }
        },
        // 监听服务端数据
        dataSource: {
            immediate: true,
            deep: true,
            handler: function handler(val) {
                // 选中
                this.handleDefCheck();
                this.$emit('change-data', val);
            }
        }
    },

    components: {
        ElTable: external_element_ui_["Table"],
        ElPagination: external_element_ui_["Pagination"]
    },

    methods: _extends({
        changeLoading: function changeLoading() {
            this.loadding = !this.loadding;
        },


        /**
         * 拖拽操作
         *
         */
        handleSortTable: function handleSortTable() {
            var el = this.$refs.grid.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0];
            this.sortable = external_sortablejs_default.a.create(el, this.dragOptions);
        },


        /**
         * 拖拽配置参数
         * @param dataTransfer
         */
        handleDragSetData: function handleDragSetData(dataTransfer) {
            dataTransfer.setData('Text', '');
        },


        /**
         * 拖拽显示排序
         * @param evt
         */
        handleDragOnEnd: function handleDragOnEnd(evt) {
            var data = this.pagingType === 'client' ? this.dataClient : this.dataSource;
            var targetRow = data.splice(evt.oldIndex, 1)[0];
            data.splice(evt.newIndex, 0, targetRow);

            // 拖拽回传数据
            this.$emit('drag-end', data);
        },


        /**
         * 页数值改变方法
         *
         * @param evt
         */
        handleSizeChange: function handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.paginationOptions.currentPage = 1;
            this.$emit('change-size', val);
        },


        /**
         * 当前页改变方法
         *
         * @param evt
         */
        handleCurrentChange: function handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.$emit('change-current', val);
        },


        /**
         * 排序改变方法
         */
        handleSortChange: function handleSortChange(_ref) {
            var column = _ref.column,
                prop = _ref.prop,
                order = _ref.order;

            column && (this.sortColumn = column);
            // this.$emit('sort-change', { column, prop, order });
            this._handleSortChange({ column: column, prop: prop, order: order });
        },
        _handleSortChange: function _handleSortChange() {},


        /**
         * 点击上一页
         *
         * @param evt
         */
        handlePrevClick: function handlePrevClick(val) {
            this.$emit('click-prev', val);
        },


        /**
         * 点击下一页
         *
         * @param evt
         */
        handleNextClick: function handleNextClick(val) {
            this.$emit('click-next', val);
        },


        // /**
        //  * 选择选项值
        //  */
        // handleSelectItem(val) {
        //     // 当前页选中值
        //     this.currentSelected = val;
        // },
        /* type="selection" start */
        // 复选框操作
        handleSelectItem: function handleSelectItem(val) {
            var currentSelected = this.currentSelected,
                dataSource = this.dataSource,
                rowKey = this.rowKey;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';
            var check = val.map(function (item) {
                return item[key];
            });
            // 当前页面 key 集合
            var dataId = dataSource.map(function (item) {
                return item[key];
            });
            // 展示页面中不存在，但却选中的 key
            var beforeSelect = currentSelected.filter(function (item) {
                return !external_lodash_default.a.includes(dataId, item);
            }) || [];
            // 当前页选中值
            this.currentSelected = external_lodash_default.a.uniq([].concat(check, beforeSelect));
        },


        // 动态变化多次需要用时间获取
        getCheck: function getCheck() {
            return this.currentSelected;
        },


        // 勾选值(当前显示页、其他显示页)
        setCheck: function setCheck(rows) {
            var _this = this;

            var rowKey = this.rowKey,
                dataSource = this.dataSource,
                currentSelected = this.currentSelected;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';
            // 去除已经选中的，若没有此代码选中状态会被取消
            rows = external_lodash_default.a.difference(rows, currentSelected);
            // 当前页面需要勾选的
            var currentCheck = dataSource.filter(function (item) {
                return external_lodash_default.a.includes(rows, item[key]);
            });
            if (currentCheck && currentCheck.length) {
                currentCheck.forEach(function (row) {
                    return _this.$refs.grid.toggleRowSelection(row, true);
                });
            }
            // 其他显示页
            var otherCheck = external_lodash_default.a.difference(rows, currentCheck);
            this.currentSelected = external_lodash_default.a.uniq([].concat(currentSelected, otherCheck));
        },


        // 清空所有选中
        clearAll: function clearAll() {
            this.$refs.grid.clearSelection();
            this.currentSelected = [];
        },


        // 默认选中
        handleDefCheck: function handleDefCheck() {
            var _this2 = this;

            if (this.selectDefault === void 0) {
                return;
            }

            var currentSelected = this.currentSelected,
                rowKey = this.rowKey,
                dataSource = this.dataSource,
                typeSelect = this.typeSelect;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';

            // 兼容 reserve-selection 属性
            if (typeSelect) {
                this.$nextTick(function () {
                    var dataClient = _this2.dataClient;

                    var client = dataClient.filter(function (item) {
                        return external_lodash_default.a.includes(currentSelected, item[key]);
                    });
                    client.forEach(function (row) {
                        return _this2.$refs.grid.toggleRowSelection(row, true);
                    });
                });
                return;
            }

            if (currentSelected && currentSelected.length) {
                // IF _.isFunction => 'id'
                this.$nextTick(function () {
                    var currentSelect = dataSource.filter(function (item) {
                        return external_lodash_default.a.includes(currentSelected, item[key]);
                    });
                    currentSelect.forEach(function (row) {
                        return _this2.$refs.grid.toggleRowSelection(row, true);
                    });
                });
            }
        }
    }, TableRefs),

    created: function created() {
        var _this3 = this;

        // 初始化执行
        if (this.draggable) {
            this.$nextTick(function () {
                // 拖拽操作
                _this3.handleSortTable();
            });
        }

        // 分页配置
        if (!this.pagination) {
            return;
        }
    }
});
// CONCATENATED MODULE: ./packages/table/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/table/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/table/src/main.vue"
/* harmony default export */ var main = (component.exports);
// CONCATENATED MODULE: ./packages/table/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var table = __webpack_exports__["default"] = (main);

/***/ }),

/***/ 28:
/***/ (function(module, exports) {

module.exports = require("sortablejs");

/***/ }),

/***/ 5:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return complex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return filterObj; });
/* unused harmony export replaceObj */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return complexObj; });
/* unused harmony export hyphenate */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getCmpProps; });
/* unused harmony export getCmpEvents */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getCmpType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getCmpPropsFromAttrs; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: lutz
 * @Date: 2019-06-05 17:05:32
 * @Last Modified by: lutz
 * @Last Modified time: 2019-12-06 08:58:43
 */



/**
 * 修改组件属性或对象的属性
 * 深度克隆
 * @param {Object} cpm
 * @param {Array|Object} hook 生命周期函数和组件属性；数组默认删除，对象默认替换（恒等undefined，默认删除）
 * @param {Array|Object} watch 监听属性的修改
 * @return {Object}
 */
function complex(cpm, hook, watch) {
    var component = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(cpm);

    if (hook) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(hook)) {
            hook.forEach(function (item) {
                delete component[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(hook)) {
            for (var key in hook) {
                if (hook[key] === void 0) {
                    delete component[key];
                } else {
                    component[key] = hook[key];
                }
            }
        }
    }

    if (watch) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(watch) && component.watch) {
            watch.forEach(function (item) {
                delete component.watch[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(watch)) {
            for (var _key in watch) {
                if (watch[_key] === void 0) {
                    delete component.watch[_key];
                } else {
                    component.watch[_key] = watch[_key];
                }
            }
        }
    }

    return component;
}

/**
 * 删除对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {array} filterArr 需要删除的属性名称
 *
 * @return {object}
 */
function filterObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var newObj = _extends({}, obj);
    filterArr.forEach(function (item) {
        delete newObj[item];
    });
    return newObj;
}

/**
 * 替换对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {object} filterObj 需要替换的属性名称，undefined则会删除对象上属性
 *
 * @return {object}
 */
function replaceObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var newObj = _extends({}, obj, filterObj);
    Object.keys(filterObj).forEach(function (item) {
        if (filterObj[item] === void 0) {
            delete newObj[item];
        }
    });
    return newObj;
}

/**
 * 根据参数操作对象
 * 浅拷贝
 * demo
 * a) 过滤undefined
 *  var obj = { input: void 0, change() { console.log('change') } }
 *  complexObj(obj, null, true) // { change: f }
 *  obj // { input: undefined, change: f }
 *
 * b) 删除属性
 *  var obj = { a: 2, b: 3 }, arr = ['a', 'c']
 *  complexObj(obj, arr) // { b: 3 }
 *  obj // {a: 2, b: 3}
 *
 * c) 替换属性
 *  var obj = { a: 2, b: 3 }, fobj = { a: void 0, c: 9, b: 4 }
 *  complexObj(obj, fobj) // { b: 4, c: 9 }
 *  obj // {a: 2, b: 3}
 *
 *
 * @param {object} obj 需要操作的对象
 * @param {array|object} filterVal 数组：需要删除的属性名称，对象：需要替换的属性名称，undefined则会删除对象上属性
 * @param {boolen} filterNull 是否过滤 undefined
 *
 * @return {object}
 */
function complexObj(obj, filterVal) {
    var filterNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var newObj = _extends({}, obj);

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(filterVal)) {
        newObj = filterObj(obj, filterVal);
    } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(filterVal)) {
        newObj = replaceObj(obj, filterVal);
    }

    // 过滤 undefined
    if (filterNull) {
        Object.keys(newObj).forEach(function (item) {
            if (newObj[item] === void 0) {
                delete newObj[item];
            }
        });
    }

    return newObj;
}

var hyphenateRE = /\B([A-Z])/g;

/**
 * 将驼峰转换成-隔开
 * hyphenate('ElTable') => "el-table"
 * @param {string} str
 * @return {string}
 */
var hyphenate = function hyphenate(str) {
    return str.replace(hyphenateRE, "-$1").toLowerCase();
};

/**
 * 获取指定组件的参数值
 * @param cmp 组件对象，如ElTable
 * @param instance  当前组件对象,调用时，传this
 * @param filterObject 过滤属性值，{name:"11",sex:(props,val)=>val,age:undefined} 属性undefined 删除属性
 */
function getCmpProps(cmp, instance) {
    var filterObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // 如果不是组件函数，则生成组件函数，主要是把混合的属性合并在一起
    if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(cmp)) {
        cmp = instance.constructor.extend(cmp);
    }
    // 传入属性值+默认的值
    var propsData = _extends({}, instance.$attrs, instance.$props);

    // 过滤属性值
    var cmpProps = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(cmp.options.props, function (value, key) {
        var propValue = propsData[key] || propsData[hyphenate(key)];
        // 过滤组件属性
        if (filterObj.hasOwnProperty(key)) {
            propValue = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(filterObj[key]) ? filterObj[key](propsData, propValue) : filterObj[key];
        }

        // 过滤 undefined
        if (propValue !== undefined) {
            cmpProps[key] = propValue;
        }
    });

    return cmpProps;
}

/**
 * 获取组件的事件对象
 * @param instance
 * @param filterObj {click:"handleClick",change:(evt)=>val,input:undefined} 属性undefined 删除属性
 * @returns {*}
 */
function getCmpEvents(instance) {
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var listeners = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(instance.$listeners);
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(filterObj, function (val, key) {
        if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val)) {
            listeners[key] = instance[val];
        } else if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(val)) {
            listeners[key] = val;
        } else if (val === undefined) {
            delete listeners[key];
        }
    });
    return listeners;
}

/**
 * 根据组件参数是，require、import获取组件的对象
 * @param type
 * @returns {type}
 */
function getCmpType(type) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(type) && type.default) {
        type = type.default;
    }
    if (type && type instanceof Promise) {
        var promise = type;
        type = function type(resolve, reject) {
            promise.then(function (obj) {
                resolve(obj);
            });
        };
    }
    return type;
}

/**
 * 从$attrs获取匹配的属性
 * @param instance
 * @param reg
 */
function getCmpPropsFromAttrs(instance, reg) {
    var attr = instance.$attrs;
    var obj = {};

    Object.keys(attr).map(function (item) {
        if (reg.test(item)) {
            obj[item.replace(reg, "")] = attr[item];
        }
    });

    return obj;
}

/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (target) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }

  return target;
});

/***/ })

/******/ });