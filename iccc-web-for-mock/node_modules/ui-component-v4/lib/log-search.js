module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 67);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("jquery");

/***/ }),

/***/ 67:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/log-search/src/main.vue?vue&type=template&id=ed28ed24&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-log-search" }, [
    _c(
      "div",
      {
        staticClass: "dg-log-search__content",
        on: {
          mouseenter: _vm.handleEnterHover,
          mouseleave: _vm.handleRemoveHover
        }
      },
      [
        _c(
          "dg-scrollbar",
          {
            ref: "scrollbar",
            attrs: { "busy-loading": _vm.busyLoading, "load-distance": "" },
            on: {
              "scroll-top": _vm.scrollTop,
              "scroll-event": _vm.scrollEvent,
              "scroll-bottom": _vm.scrollBottom
            }
          },
          [
            _c(
              "ul",
              { ref: "searchWrap", staticClass: "dg-log-search__list" },
              _vm._l(_vm.dataSource, function(item, index) {
                return _c(
                  "li",
                  { key: index, staticClass: "dg-log-search__item" },
                  [_vm._t("default", null, { data: item })],
                  2
                )
              }),
              0
            )
          ]
        )
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/log-search/src/main.vue?vue&type=template&id=ed28ed24&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: external "jquery"
var external_jquery_ = __webpack_require__(12);
var external_jquery_default = /*#__PURE__*/__webpack_require__.n(external_jquery_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/log-search/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgLogSearch',
    props: {
        // 目标数据
        data: {
            type: Array,
            default: []
        },
        // 是否自动滚动
        isAutoScroll: {
            type: Boolean,
            default: false
        },
        // 滚动置顶触发
        scrollTop: {
            type: Function,
            default: function _default() {}
        },
        // 滚动置底触发
        scrollBottom: {
            type: Function,
            default: function _default() {}
        },
        // 滚动触发
        scrollEvent: {
            type: Function,
            default: function _default() {}
        },
        // 限制条数
        limitCounts: {
            type: Number,
            default: 0
        },
        // 禁止触发上下加载数据
        isDisableLoadData: {
            type: Boolean,
            default: false
        }
    },
    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            // 加载锁定(阻止置顶触发事件及置底触发事件)
            busyLoading: true,
            // 缓存推送的数据
            cacheData: [],
            // 过滤的字段
            filterValue: '',
            // 过滤的位置存储
            filterArray: []
        };
    },

    watch: {
        /**
         * 监听目标数据的改变
         *
         * @param val
         */
        data: function data(val) {
            this.dataSource = val;
        },

        /**
         * 监听 isDisableLoadData 改变
         *
         */
        isDisableLoadData: function isDisableLoadData(val) {
            this.busyLoading = !val;
        }
    },
    methods: {
        // 置顶方法
        goScrollToTop: function goScrollToTop() {
            this.$refs.scrollbar.goScrollToTop();
        },

        // 置底方法
        goScrollToBottom: function goScrollToBottom() {
            this.$refs.scrollbar.goScrollToBottom();
        },

        // 滚动到指定的位置
        goScrollToPositionY: function goScrollToPositionY(y, animateTime, callback) {
            this.$refs.scrollbar.goScrollToYAxis(y, animateTime, callback);
        },

        // 清空数据
        clearData: function clearData() {
            this.dataSource = [];
        },

        /**
         * 数据更新加载入新的条数方法
         *
         * @param data [Array] 数据
         * @param type [String] 字符串
         */
        loadingData: function loadingData(data, type) {
            var _this = this;

            var self = this;

            var itemHeight = this.$refs.searchWrap.children.length > 0 ? this.$refs.searchWrap.children[0].clientHeight : 0;

            // 检测是否限制最大条数
            if (this.limitCounts) {
                // 计算超出条数
                var deleteCounts = this.limitCounts > this.dataSource.length + data.length ? 0 : data.length + this.dataSource.length - this.limitCounts;

                // 检测是否超出
                if (!isNaN(this.limitCounts) && deleteCounts > 0 && type === 'down' && this.busyLoading) {
                    // 删除指定条数
                    self.dataSource.splice(0, deleteCounts);

                    // 重置滚动条位置
                    var scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                    this.$refs.scrollbar.wrap.scrollTop = scrollTop - data.length * itemHeight;
                }
            }

            // 数据操作
            if (type === 'up') {
                data.forEach(function (item) {
                    _this.dataSource.unshift(item);
                });
            } else if (type === 'down') {
                data.forEach(function (item) {
                    _this.dataSource.push(item);
                });
            }
        },

        /**
         * 数据实时推送的方法
         *
         * @param data [Array] 数据
         */
        realTimeLoading: function realTimeLoading(data) {
            var _this2 = this;

            var itemHeight = this.$refs.searchWrap.children.length > 0 ? this.$refs.searchWrap.children[0].clientHeight : 0;

            // 检测是否限制最大条数
            if (this.limitCounts) {
                // 检测当前的数据加载的状态，若属于加载锁定状态
                if (this.busyLoading) {
                    // 是否存在缓存数据
                    if (this.cacheData.length > 0) {
                        // 合并内容数据
                        this.dataSource = external_lodash_default.a.concat(this.dataSource, this.cacheData, data);

                        // 更新数据内容
                        this.dataSource.splice(0, this.dataSource.length - this.limitCounts);

                        // 清空缓存数据
                        this.cacheData = [];
                    } else {
                        this.loadingData(data, 'down');
                    }

                    // 是否自动滚动
                    if (this.isAutoScroll) {
                        var scrollTop = this.$refs.scrollbar.wrap.scrollHeight - this.$refs.scrollbar.wrap.clientHeight;
                        this.$refs.scrollbar.wrap.scrollTop = scrollTop;
                    }
                } else {
                    // 是否存在缓存数据
                    if (this.limitCounts <= this.dataSource.length) {
                        this.cacheData = this.cacheData.concat(data);
                    } else {
                        // 计算数据拆分的条数
                        var deleteCounts = this.dataSource.length + data.length - this.limitCounts;

                        // 检测是否超出
                        if (deleteCounts > 0) {
                            // 删除特定条数
                            this.dataSource.splice(0, deleteCounts);

                            // 追加指定条数
                            var addData = data.slice(0, deleteCounts);
                            this.dataSource = this.dataSource.concat(addData);

                            // 缓存条数增加
                            var newData = data.slice(deleteCounts);
                            this.cacheData = this.cacheData.concat(newData);

                            // 重置滚动条位置
                            var _scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                            this.$refs.scrollbar.wrap.scrollTop = _scrollTop - newData.length * itemHeight;
                        } else {
                            this.dataSource = this.dataSource.concat(data);
                        }
                    }
                }
            } else {
                // 无限制则直接追加数据
                data.forEach(function (item) {
                    _this2.dataSource.push(item);
                });

                // 是否自动滚动
                if (this.isAutoScroll && this.busyLoading) {
                    var _scrollTop2 = this.$refs.scrollbar.wrap.scrollHeight - this.$refs.scrollbar.wrap.clientHeight;
                    this.$refs.scrollbar.wrap.scrollTop = _scrollTop2;
                }
            }
        },

        /**
         * 鼠标上移悬浮时操作
         *
         */
        handleEnterHover: function handleEnterHover() {
            // 取消滚动锁定加载
            this.busyLoading = this.isDisableLoadData;

            // 触发进入操作
            this.$emit('hover-enter');
        },

        /**
         * 鼠标移除悬浮时操作
         *
         */
        handleRemoveHover: function handleRemoveHover() {
            // 滚动锁定加载
            this.busyLoading = true;

            // 触发离开操作
            this.$emit('hover-leave');
        },

        /**
         * 查询数据高亮方法
         *
         * @param item [String] 查询对应文本
         * @param filterKey [String] 过滤文本
         */
        searchHighLightMethods: function searchHighLightMethods(item, filterKey) {
            // 界面中查找特定值
            if (!filterKey) return item;

            var result = item.replace(new RegExp(filterKey + '{1}'), '<span class="dg-log-search__light">' + filterKey + '</span>');
            return result;
        },

        /**
         * 滚动到匹配指定的位置
         *
         */
        scrollToPointPosition: function scrollToPointPosition(filterValue) {
            // 去除两端的空格
            filterValue = external_jquery_default.a.trim(filterValue);

            // 校验不为空值
            if (!filterValue) return false;

            // 比较与原先的值是否有变化
            if (this.filterValue === filterValue) {
                var scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                var scrollHeight = this.$refs.scrollbar.wrap.scrollHeight;
                var clientHeight = this.$refs.scrollbar.wrap.clientHeight;
                var flag = true;

                // 滚动位置判断
                for (var i = 0, len = this.filterArray.length; i < len; i++) {
                    // 滚动置底，则无需遍历后续的值
                    if (scrollTop + clientHeight === scrollHeight) break;

                    // 滚动至下一个值
                    if (this.filterArray[i] > scrollTop) {
                        flag = false;
                        this.goScrollToPositionY(this.filterArray[i], 200);
                        break;
                    }
                }

                // 若置底，则恢复初始位置
                if (flag) this.goScrollToPositionY(this.filterArray[0], 200);
            } else {
                var $filterSpan = external_jquery_default()(this.$el).find('.dg-log-search__light');
                this.filterArray = [];
                this.filterValue = filterValue;
                var self = this;

                external_jquery_default.a.each($filterSpan, function (index, item) {
                    var _value = item.closest('li').offsetTop;
                    self.filterArray.push(_value);
                });

                this.goScrollToPositionY(this.filterArray[0], 200);
            }
        }
    },
    mounted: function mounted() {
        var _this3 = this;

        // DOM 加载完成
        this.$nextTick(function () {
            // 是否启用自动滚动
            if (_this3.isAutoScroll) {
                var scrollHeight = _this3.$refs.scrollbar.wrap.scrollHeight;
                _this3.$refs.scrollbar.goScrollToYAxis(scrollHeight);
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/log-search/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/log-search/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/log-search/src/main.vue"
/* harmony default export */ var main = (component.exports);
// CONCATENATED MODULE: ./packages/log-search/index.js


/* istanbul ignore next */
main.install = function (Vue) {
  Vue.component(main.name, main);
};

/* harmony default export */ var log_search = __webpack_exports__["default"] = (main);

/***/ })

/******/ });