module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return str2arr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return data2type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return uniqArr; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/*
 * @Author: lutz
 * @Date: 2019-06-24 11:16:27
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-01 15:15:41
 * @Last Modified by: huangjq
 * @Last Modified time: 2020-07-24 11:10:20
 */



/**
 * string to array
 * @param {any} val 需要处理的数据
 * @param {string} seq 字符串分隔符
 * @param {boolen} clone 是否深度拷贝
 * @param {array} dataSource 数据源
 * @param {string|number} dataSourceValueName 数据源需要匹配字段
 *
 * @return {array}
 */
function str2arr(val) {
    var seq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
    var clone = arguments[2];
    var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var dataSourceValueName = arguments[4];
    var isDataSourceChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNil(val) || val === '') {
        return [];
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return clone ? lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(val) : val;
    }

    var data = val.toString().split(seq);

    // 数据源必须是数组 && 长度大于0 && 展示数据必须是数组
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(dataSource) && dataSource.length && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(data)) {
        // 对象数组 或 数组的截取第一个数据判断数字类型
        if (dataSourceValueName != null && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0][dataSourceValueName]) || !dataSourceValueName && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0])) {
            data = data.map(function (item) {
                return Number(item);
            });
        }
    }

    if (isDataSourceChanged) {
        // huangjq 2020/07/24
        // 数据源改变后，有些原有的value不存在了，重新过滤
        var keys = [];
        dataSource.map(function (item) {
            return keys.push(item[dataSourceValueName]);
        });
        data = data.filter(function (item) {
            return keys.indexOf(item) > -1;
        });
    }

    return data;
}

/**
 * 将数据转换成指定数据类型
 * @param {*} val
 * @param {Array|String|Object} type 需要转换的类型
 * @param {String} seq 分隔符
 */
function data2type(val, type) {
    var seq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    var bool = lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type] && lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type](val);

    if (bool) {
        return val;
    }

    // 为保证选项可选中，这里不能将数字转成字符串
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(val) && type === 'String') {
        return val;
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val) && type === 'String') {
        return val.sort().join(seq);
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val) && type === 'Array') {
        return val.split(seq);
    }

    var map = {
        String: '',
        Array: [],
        Object: {}
    };

    return map[type];
}

/**
 * 两个数组合并成不重复的数组
 * @param {Array} exp
 * @param {Array} val
 */
function uniqArr(exp, val) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(exp) && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.union(exp, val);
    }

    return [];
}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return complex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return filterObj; });
/* unused harmony export replaceObj */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return complexObj; });
/* unused harmony export hyphenate */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getCmpProps; });
/* unused harmony export getCmpEvents */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getCmpType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getCmpPropsFromAttrs; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: lutz
 * @Date: 2019-06-05 17:05:32
 * @Last Modified by: lutz
 * @Last Modified time: 2019-12-06 08:58:43
 */



/**
 * 修改组件属性或对象的属性
 * 深度克隆
 * @param {Object} cpm
 * @param {Array|Object} hook 生命周期函数和组件属性；数组默认删除，对象默认替换（恒等undefined，默认删除）
 * @param {Array|Object} watch 监听属性的修改
 * @return {Object}
 */
function complex(cpm, hook, watch) {
    var component = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(cpm);

    if (hook) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(hook)) {
            hook.forEach(function (item) {
                delete component[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(hook)) {
            for (var key in hook) {
                if (hook[key] === void 0) {
                    delete component[key];
                } else {
                    component[key] = hook[key];
                }
            }
        }
    }

    if (watch) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(watch) && component.watch) {
            watch.forEach(function (item) {
                delete component.watch[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(watch)) {
            for (var _key in watch) {
                if (watch[_key] === void 0) {
                    delete component.watch[_key];
                } else {
                    component.watch[_key] = watch[_key];
                }
            }
        }
    }

    return component;
}

/**
 * 删除对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {array} filterArr 需要删除的属性名称
 *
 * @return {object}
 */
function filterObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var newObj = _extends({}, obj);
    filterArr.forEach(function (item) {
        delete newObj[item];
    });
    return newObj;
}

/**
 * 替换对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {object} filterObj 需要替换的属性名称，undefined则会删除对象上属性
 *
 * @return {object}
 */
function replaceObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var newObj = _extends({}, obj, filterObj);
    Object.keys(filterObj).forEach(function (item) {
        if (filterObj[item] === void 0) {
            delete newObj[item];
        }
    });
    return newObj;
}

/**
 * 根据参数操作对象
 * 浅拷贝
 * demo
 * a) 过滤undefined
 *  var obj = { input: void 0, change() { console.log('change') } }
 *  complexObj(obj, null, true) // { change: f }
 *  obj // { input: undefined, change: f }
 *
 * b) 删除属性
 *  var obj = { a: 2, b: 3 }, arr = ['a', 'c']
 *  complexObj(obj, arr) // { b: 3 }
 *  obj // {a: 2, b: 3}
 *
 * c) 替换属性
 *  var obj = { a: 2, b: 3 }, fobj = { a: void 0, c: 9, b: 4 }
 *  complexObj(obj, fobj) // { b: 4, c: 9 }
 *  obj // {a: 2, b: 3}
 *
 *
 * @param {object} obj 需要操作的对象
 * @param {array|object} filterVal 数组：需要删除的属性名称，对象：需要替换的属性名称，undefined则会删除对象上属性
 * @param {boolen} filterNull 是否过滤 undefined
 *
 * @return {object}
 */
function complexObj(obj, filterVal) {
    var filterNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var newObj = _extends({}, obj);

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(filterVal)) {
        newObj = filterObj(obj, filterVal);
    } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(filterVal)) {
        newObj = replaceObj(obj, filterVal);
    }

    // 过滤 undefined
    if (filterNull) {
        Object.keys(newObj).forEach(function (item) {
            if (newObj[item] === void 0) {
                delete newObj[item];
            }
        });
    }

    return newObj;
}

var hyphenateRE = /\B([A-Z])/g;

/**
 * 将驼峰转换成-隔开
 * hyphenate('ElTable') => "el-table"
 * @param {string} str
 * @return {string}
 */
var hyphenate = function hyphenate(str) {
    return str.replace(hyphenateRE, "-$1").toLowerCase();
};

/**
 * 获取指定组件的参数值
 * @param cmp 组件对象，如ElTable
 * @param instance  当前组件对象,调用时，传this
 * @param filterObject 过滤属性值，{name:"11",sex:(props,val)=>val,age:undefined} 属性undefined 删除属性
 */
function getCmpProps(cmp, instance) {
    var filterObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // 如果不是组件函数，则生成组件函数，主要是把混合的属性合并在一起
    if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(cmp)) {
        cmp = instance.constructor.extend(cmp);
    }
    // 传入属性值+默认的值
    var propsData = _extends({}, instance.$attrs, instance.$props);

    // 过滤属性值
    var cmpProps = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(cmp.options.props, function (value, key) {
        var propValue = propsData[key] || propsData[hyphenate(key)];
        // 过滤组件属性
        if (filterObj.hasOwnProperty(key)) {
            propValue = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(filterObj[key]) ? filterObj[key](propsData, propValue) : filterObj[key];
        }

        // 过滤 undefined
        if (propValue !== undefined) {
            cmpProps[key] = propValue;
        }
    });

    return cmpProps;
}

/**
 * 获取组件的事件对象
 * @param instance
 * @param filterObj {click:"handleClick",change:(evt)=>val,input:undefined} 属性undefined 删除属性
 * @returns {*}
 */
function getCmpEvents(instance) {
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var listeners = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(instance.$listeners);
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(filterObj, function (val, key) {
        if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val)) {
            listeners[key] = instance[val];
        } else if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(val)) {
            listeners[key] = val;
        } else if (val === undefined) {
            delete listeners[key];
        }
    });
    return listeners;
}

/**
 * 根据组件参数是，require、import获取组件的对象
 * @param type
 * @returns {type}
 */
function getCmpType(type) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(type) && type.default) {
        type = type.default;
    }
    if (type && type instanceof Promise) {
        var promise = type;
        type = function type(resolve, reject) {
            promise.then(function (obj) {
                resolve(obj);
            });
        };
    }
    return type;
}

/**
 * 从$attrs获取匹配的属性
 * @param instance
 * @param reg
 */
function getCmpPropsFromAttrs(instance, reg) {
    var attr = instance.$attrs;
    var obj = {};

    Object.keys(attr).map(function (item) {
        if (reg.test(item)) {
            obj[item.replace(reg, "")] = attr[item];
        }
    });

    return obj;
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return off; });
/* unused harmony export once */
/* unused harmony export hasClass */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeClass; });
/* unused harmony export getStyle */
/* unused harmony export setStyle */
/* unused harmony export isScroll */
/* unused harmony export getScrollContainer */
/* unused harmony export isInContainer */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* istanbul ignore next */



var isServer = vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer;
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var ieVersion = isServer ? 0 : Number(document.documentMode);

/* istanbul ignore next */
var trim = function trim(string) {
  return (string || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
/* istanbul ignore next */
var camelCase = function camelCase(name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, "Moz$1");
};

/* istanbul ignore next */
var on = function () {
  if (!isServer && document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var off = function () {
  if (!isServer && document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var once = function once(el, event, fn) {
  var listener = function listener() {
    if (fn) {
      fn.apply(this, arguments);
    }
    off(el, event, listener);
  };
  on(el, event, listener);
};

/* istanbul ignore next */
function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
  }
}

/* istanbul ignore next */
function addClass(el, cls) {
  if (!el) return;
  var curClass = el.className;
  var classes = (cls || "").split(" ");

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " " + clsName;
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}

/* istanbul ignore next */
function removeClass(el, cls) {
  if (!el || !cls) return;
  var classes = cls.split(" ");
  var curClass = " " + el.className + " ";

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" " + clsName + " ", " ");
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}

/* istanbul ignore next */
var getStyle = ieVersion < 9 ? function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "styleFloat";
  }
  try {
    switch (styleName) {
      case "opacity":
        try {
          return element.filters.item("alpha").opacity / 100;
        } catch (e) {
          return 1.0;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "cssFloat";
  }
  try {
    var computed = document.defaultView.getComputedStyle(element, "");
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};

/* istanbul ignore next */
function setStyle(element, styleName, value) {
  if (!element || !styleName) return;

  if ((typeof styleName === "undefined" ? "undefined" : _typeof(styleName)) === "object") {
    for (var prop in styleName) {
      if (styleName.hasOwnProperty(prop)) {
        setStyle(element, prop, styleName[prop]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === "opacity" && ieVersion < 9) {
      element.style.filter = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
    } else {
      element.style[styleName] = value;
    }
  }
}

var isScroll = function isScroll(el, vertical) {
  if (isServer) return;

  var determinedDirection = vertical !== null || vertical !== undefined;
  var overflow = determinedDirection ? vertical ? getStyle(el, "overflow-y") : getStyle(el, "overflow-x") : getStyle(el, "overflow");

  return overflow.match(/(scroll|auto)/);
};

var getScrollContainer = function getScrollContainer(el, vertical) {
  if (isServer) return;

  var parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent)) {
      return window;
    }
    if (isScroll(parent, vertical)) {
      return parent;
    }
    parent = parent.parentNode;
  }

  return parent;
};

var isInContainer = function isInContainer(el, container) {
  if (isServer || !el || !container) return false;

  var elRect = el.getBoundingClientRect();
  var containerRect = void 0;

  if ([window, document, document.documentElement, null, undefined].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }

  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};

/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (target) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }

  return target;
});

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* harmony default export */ __webpack_exports__["a"] = ({
    props: {
        valueName: String,
        labelName: String,
        disabledName: [String, Function],
        childrenName: String,
        isLeafName: String
    },
    computed: {
        defaultProp: function defaultProp() {
            var valueName = this.valueName,
                labelName = this.labelName,
                childrenName = this.childrenName,
                disabledName = this.disabledName,
                isLeafName = this.isLeafName;

            var _ref = this.props || {},
                value = _ref.value,
                label = _ref.label,
                children = _ref.children,
                disabled = _ref.disabled,
                isLeaf = _ref.isLeaf,
                other = _objectWithoutProperties(_ref, ['value', 'label', 'children', 'disabled', 'isLeaf']);

            return _extends({}, other, {
                value: valueName || value || 'value',
                label: labelName || label || 'label',
                disabled: disabledName || disabled || 'disabled',
                children: childrenName || children || 'children',
                isLeaf: isLeafName || isLeaf || 'isLeaf'
            });
        }
    }
});

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var main_dg_mixins_convert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var main_dg_utils_data_convert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/*
@author lutz
@updateDate 2019-06-18
@describe
    props
        data {array} 组件数据源,透传到 $data.dataSource
        disabled-value {array|string} 禁用项
        seq {string} 分隔符（命名参考: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html）
        output-format {string} enum["String", "Array"]
    data
        dataSource {array} 数据源
    computed
        itemsWithDisabled @return {array<object>} 添加禁用状态到数据源
    watch
        data => dataSource 兼容组件 $props.data 对 $data.dataSource 值变化
*/




/* harmony default export */ __webpack_exports__["a"] = ({
    mixins: [main_dg_mixins_convert_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
    props: {
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabledValue: {
            type: [String, Array],
            default: function _default() {
                return [];
            }
        },
        seq: { type: String, default: ',' },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        }
    },
    watch: {
        data: function data(val) {
            this.dataSource = val;
        },

        // dataSource 触发 data改变的方法
        dataSource: function dataSource(val) {
            this.$emit('change-data', val);
        }
    },
    data: function data() {
        return { dataSource: this.data };
    },

    computed: {
        itemsWithDisabled: function itemsWithDisabled() {
            var dataSource = this.dataSource,
                disabledValue = this.disabledValue,
                seq = this.seq,
                defaultProp = this.defaultProp;

            var disabledArr = Object(main_dg_utils_data_convert_js__WEBPACK_IMPORTED_MODULE_2__[/* str2arr */ "b"])(disabledValue, seq, true, dataSource, defaultProp.value);
            if (disabledArr.length < 1) {
                return dataSource;
            }
            // 深度拷贝,避免污染数据源($data)
            var data = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(dataSource);
            data.forEach(function (item) {
                var isInclude = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.includes(disabledArr, item[defaultProp.value]);
                // 这里if中的布尔值要分开写否则会报错
                if (isInclude) {
                    item[defaultProp.disabled] = true;
                }
            });
            return data;
        }
    }
});

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function (child) {
    var name = child.$options.componentName;

    if (name === componentName) {
      child.$emit.apply(child, [eventName].concat(params));
    } else {
      _broadcast.apply(child, [componentName, eventName].concat([params]));
    }
  });
}
/* harmony default export */ __webpack_exports__["a"] = ({
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent = this.$parent || this.$root;
      var name = parent.$options.componentName;

      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;

        if (parent) {
          name = parent.$options.componentName;
        }
      }
      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
});

/***/ }),
/* 14 */,
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "label",
    {
      staticClass: "el-radio dg-radio",
      class: [
        _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
        { "is-disabled": _vm.isDisabled },
        { "is-focus": _vm.focus },
        { "is-bordered": _vm.border },
        { "is-checked": _vm.model === _vm.label }
      ],
      attrs: {
        role: "radio",
        "aria-checked": _vm.model === _vm.label,
        "aria-disabled": _vm.isDisabled,
        tabindex: _vm.tabIndex
      },
      on: {
        keydown: function($event) {
          if (
            !$event.type.indexOf("key") &&
            _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])
          ) {
            return null
          }
          $event.stopPropagation()
          $event.preventDefault()
          _vm.model = _vm.isDisabled ? _vm.model : _vm.label
        }
      }
    },
    [
      _c(
        "span",
        {
          staticClass: "el-radio__input",
          class: {
            "is-disabled": _vm.isDisabled,
            "is-checked": _vm.model === _vm.label
          }
        },
        [
          _c("span", { staticClass: "el-radio__inner" }),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            ref: "radio",
            staticClass: "el-radio__original",
            attrs: {
              type: "radio",
              "aria-hidden": "true",
              name: _vm.name,
              disabled: _vm.isDisabled,
              tabindex: "-1"
            },
            domProps: {
              value: _vm.label,
              checked: _vm._q(_vm.model, _vm.label)
            },
            on: {
              focus: function($event) {
                _vm.focus = true
              },
              click: _vm.handleClick,
              change: [
                function($event) {
                  _vm.model = _vm.label
                },
                _vm.handleChange
              ],
              blur: function($event) {
                _vm.focus = false
              }
            }
          })
        ]
      ),
      _c(
        "span",
        {
          staticClass: "el-radio__label",
          on: {
            keydown: function($event) {
              $event.stopPropagation()
            }
          }
        },
        [
          _vm._t("default"),
          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
        ],
        2
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgRadio',

    mixins: [external_element_ui_["Radio"]],

    props: {
        // 是否关闭再次点击取消功能
        callOff: Boolean
    },

    methods: {
        // create
        handleClick: function handleClick() {
            var bool = this.model === this.label;
            this.$emit('has-click', this.label);
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleClick', this.label);
                this.dispatch('DgRadioGroup', 'handleClick', this.label);
            }
            // 如果前后值相等且关闭取消，则不让继续触发
            if (bool && this.callOff) {
                return;
            }
            var val = bool ? '' : this.label;
            this.$emit('input', val);
            this.$emit('change', val);
            // 兼容 <el-radio-group> & <dg-radio-group> 两种方式。注：这两种组件不能使用包含关系。
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleChange', val);
                this.dispatch('DgRadioGroup', 'handleChange', val);
            }
        },


        // update
        handleChange: function handleChange() {
            var _this = this;

            this.$nextTick(function () {
                // 如果前后值相等则不让触发 change 事件
                if (_this.model === _this.label) {
                    return;
                }
                _this.$emit('change', _this.model);
                if (_this.isGroup) {
                    _this.dispatch('ElRadioGroup', 'handleChange', _this.model);
                    _this.dispatch('DgRadioGroup', 'handleChange', _this.model); // lutz+
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/radio/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/radio/src/main.vue"
/* harmony default export */ var main = (component.exports);
// CONCATENATED MODULE: ./packages/radio/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var packages_radio = __webpack_exports__["default"] = (main);

/***/ }),
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=template&id=01558241&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "el-tree dg-tree",
      class: {
        "el-tree--highlight-current": _vm.highlightCurrent,
        "is-dragging": !!_vm.dragState.draggingNode,
        "is-drop-not-allow": !_vm.dragState.allowDrop,
        "is-drop-inner": _vm.dragState.dropType === "inner",
        "dg-tree--icon-class-style": _vm.iconClass
      },
      attrs: { role: "tree" }
    },
    [
      _vm._l(_vm.root.childNodes, function(child) {
        return _c("el-tree-node", {
          key: _vm.getNodeKey(child),
          attrs: {
            node: child,
            props: _vm.defaultProp,
            "node-key": _vm.nodeKey,
            "check-strictly": _vm.checkStrictly,
            "render-after-expand": _vm.renderAfterExpand,
            "show-checkbox": _vm.showCheckbox,
            "radio-type": _vm.radioType,
            "render-content": _vm.renderContent
          },
          on: { "node-expand": _vm.handleNodeExpand }
        })
      }),
      _vm.isEmpty
        ? _c("div", { staticClass: "el-tree__empty-block" }, [
            _c("span", { staticClass: "el-tree__empty-text" }, [
              _vm._v(_vm._s(_vm.emptyText))
            ])
          ])
        : _vm._e(),
      _c("div", {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.dragState.showDropIndicator,
            expression: "dragState.showDropIndicator"
          }
        ],
        ref: "dropIndicator",
        staticClass: "el-tree__drop-indicator"
      })
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=template&id=01558241&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&
var tree_nodevue_type_template_id_3ba3ef0e_render = function() {
  var this$1 = this
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.node.visible,
          expression: "node.visible"
        }
      ],
      ref: "node",
      staticClass: "el-tree-node dg-tree-node",
      class: {
        "is-expanded": _vm.expanded,
        "is-current": _vm.tree.store.currentNode === _vm.node,
        "is-hidden": !_vm.node.visible,
        "is-focusable": !_vm.node.disabled,
        "is-checked": !_vm.node.disabled && _vm.node.checked,
        "is-radio": _vm.node.disabled && !_vm.node.checked && !_vm.checkStrictly
      },
      attrs: {
        role: "treeitem",
        tabindex: "-1",
        "aria-expanded": _vm.expanded,
        "aria-disabled": _vm.node.disabled,
        "aria-checked": _vm.node.checked,
        draggable: _vm.tree.draggable
      },
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.handleClick($event)
        },
        contextmenu: function($event) {
          return this$1.handleContextMenu($event)
        },
        dragstart: function($event) {
          $event.stopPropagation()
          return _vm.handleDragStart($event)
        },
        dragover: function($event) {
          $event.stopPropagation()
          return _vm.handleDragOver($event)
        },
        dragend: function($event) {
          $event.stopPropagation()
          return _vm.handleDragEnd($event)
        },
        drop: function($event) {
          $event.stopPropagation()
          return _vm.handleDrop($event)
        }
      }
    },
    [
      _c(
        "div",
        {
          staticClass: "el-tree-node__content",
          style: {
            "padding-left": (_vm.node.level - 1) * _vm.tree.indent + "px"
          }
        },
        [
          _c("span", {
            class: [
              {
                "is-leaf": _vm.node.isLeaf,
                expanded: !_vm.node.isLeaf && _vm.expanded
              },
              "el-tree-node__expand-icon",
              _vm.tree.iconClass
                ? _vm.node.isLeaf
                  ? _vm.tree.iconLeaf
                    ? _vm.tree.iconLeaf
                    : ""
                  : _vm.tree.iconClass
                : "el-icon-caret-right"
            ],
            on: {
              click: function($event) {
                $event.stopPropagation()
                return _vm.handleExpandIconClick($event)
              }
            }
          }),
          _vm.showCheckbox &&
          !(_vm.node.store.isFrozenRoot && _vm.node.level === 1)
            ? _c("el-checkbox", {
                attrs: {
                  indeterminate: _vm.node.indeterminate,
                  disabled: !!_vm.node.disabled
                },
                on: { change: _vm.handleCheckChange },
                nativeOn: {
                  click: function($event) {
                    $event.stopPropagation()
                  }
                },
                model: {
                  value: _vm.node.checked,
                  callback: function($$v) {
                    _vm.$set(_vm.node, "checked", $$v)
                  },
                  expression: "node.checked"
                }
              })
            : _vm.radioType
            ? _c(
                "dg-radio",
                {
                  attrs: {
                    label: _vm.node.data[_vm.nodeKey],
                    disabled: !!_vm.node.disabled
                  },
                  on: { change: _vm.handleRadioChange },
                  model: {
                    value: _vm.node.radio,
                    callback: function($$v) {
                      _vm.$set(_vm.node, "radio", $$v)
                    },
                    expression: "node.radio"
                  }
                },
                [_c("span")]
              )
            : _vm._e(),
          _vm.node.loading
            ? _c("span", {
                staticClass: "el-tree-node__loading-icon el-icon-loading"
              })
            : _vm._e(),
          _c("node-content", { attrs: { node: _vm.node } })
        ],
        1
      ),
      _c("el-collapse-transition", [
        !_vm.renderAfterExpand || _vm.childNodeRendered
          ? _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.expanded,
                    expression: "expanded"
                  }
                ],
                staticClass: "el-tree-node__children",
                attrs: { role: "group", "aria-expanded": _vm.expanded }
              },
              _vm._l(_vm.node.childNodes, function(child) {
                return _c("el-tree-node", {
                  key: _vm.getNodeKey(child),
                  attrs: {
                    "node-key": _vm.nodeKey,
                    "check-strictly": _vm.checkStrictly,
                    "radio-type": _vm.radioType,
                    "render-content": _vm.renderContent,
                    "render-after-expand": _vm.renderAfterExpand,
                    "show-checkbox": _vm.showCheckbox,
                    node: child
                  },
                  on: { "node-expand": _vm.handleChildNodeExpand }
                })
              }),
              1
            )
          : _vm._e()
      ])
    ],
    1
  )
}
var tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = []
tree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&

// EXTERNAL MODULE: ./src/utils/dom.js
var dom = __webpack_require__(6);

// CONCATENATED MODULE: ./src/transitions/collapse-transition.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var collapse_transition_Transition = function () {
  function Transition() {
    _classCallCheck(this, Transition);
  }

  Transition.prototype.beforeEnter = function beforeEnter(el) {
    Object(dom["a" /* addClass */])(el, 'collapse-transition');
    if (!el.dataset) el.dataset = {};

    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;

    el.style.height = '0';
    el.style.paddingTop = 0;
    el.style.paddingBottom = 0;
  };

  Transition.prototype.enter = function enter(el) {
    el.dataset.oldOverflow = el.style.overflow;
    if (el.scrollHeight !== 0) {
      el.style.height = el.scrollHeight + 'px';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    } else {
      el.style.height = '';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    }

    el.style.overflow = 'hidden';
  };

  Transition.prototype.afterEnter = function afterEnter(el) {
    // for safari: remove class then reset height is necessary
    Object(dom["d" /* removeClass */])(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
  };

  Transition.prototype.beforeLeave = function beforeLeave(el) {
    if (!el.dataset) el.dataset = {};
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.dataset.oldOverflow = el.style.overflow;

    el.style.height = el.scrollHeight + 'px';
    el.style.overflow = 'hidden';
  };

  Transition.prototype.leave = function leave(el) {
    if (el.scrollHeight !== 0) {
      // for safari: add class after set height, or it will jump to zero height suddenly, weired
      Object(dom["a" /* addClass */])(el, 'collapse-transition');
      el.style.height = 0;
      el.style.paddingTop = 0;
      el.style.paddingBottom = 0;
    }
  };

  Transition.prototype.afterLeave = function afterLeave(el) {
    Object(dom["d" /* removeClass */])(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
  };

  return Transition;
}();

/* harmony default export */ var collapse_transition = ({
  name: 'ElCollapseTransition',
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children;

    var data = {
      on: new collapse_transition_Transition()
    };

    return h('transition', data, children);
  }
});
// EXTERNAL MODULE: ./packages/radio/index.js + 5 modules
var packages_radio = __webpack_require__(15);

// EXTERNAL MODULE: ./src/mixins/emitter.js
var emitter = __webpack_require__(13);

// CONCATENATED MODULE: ./packages/tree/src/model/util.js
var NODE_KEY = '$treeNodeId';

var markNodeData = function markNodeData(node, data) {
  if (!data || data[NODE_KEY]) return;
  Object.defineProperty(data, NODE_KEY, {
    value: node.id,
    enumerable: false,
    configurable: false,
    writable: false
  });
};

var util_getNodeKey = function getNodeKey(key, data) {
  if (!key) return data[NODE_KEY];
  return data[key];
};

var findNearestComponent = function findNearestComponent(element, componentName) {
  var target = element;
  while (target && target.tagName !== 'BODY') {
    if (target.__vue__ && target.__vue__.$options.name === componentName) {
      return target.__vue__;
    }
    target = target.parentNode;
  }
  return null;
};
// EXTERNAL MODULE: ./src/dg-utils/data-convert.js
var data_convert = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








/* harmony default export */ var tree_nodevue_type_script_lang_js_ = ({
    name: 'ElTreeNode',

    componentName: 'ElTreeNode',

    mixins: [emitter["a" /* default */]],

    props: {
        // create author:lutz
        checkStrictly: Boolean,
        node: {
            default: function _default() {
                return {};
            }
        },
        radioType: String,
        nodeKey: String,
        props: {},
        renderContent: Function,
        renderAfterExpand: {
            type: Boolean,
            default: true
        },
        showCheckbox: {
            type: Boolean,
            default: false
        }
    },

    components: {
        ElCollapseTransition: collapse_transition,
        DgRadio: packages_radio["default"],
        ElCheckbox: external_element_ui_["Checkbox"],
        NodeContent: {
            props: {
                node: {
                    required: true
                }
            },
            render: function render(h) {
                var parent = this.$parent;
                var tree = parent.tree;
                var node = this.node;
                var data = node.data,
                    store = node.store;

                // add author: tangdm 增加过滤值高亮

                var temple = node.store.isHighLight && node.filter ? node.label.replace(new RegExp(node.filter + '{1}'), '<span class="dg-tree-filter__light">' + node.filter + '</span>') : node.label;

                return parent.renderContent ? parent.renderContent.call(parent._renderProxy, h, { _self: tree.$vnode.context, node: node, data: data, store: store }) : tree.$scopedSlots.default ? tree.$scopedSlots.default({ node: node, data: data }) :
                // update author: tangdm desc: 支持 `v-html` 模板语法，用于支持高亮检索词
                // <span class="el-tree-node__label">{node.label}</span>
                h('span', { 'class': 'el-tree-node__label', domProps: {
                        'innerHTML': temple
                    }
                });
            }
        }
    },

    data: function data() {
        return {
            tree: null,
            expanded: false,
            childNodeRendered: false,
            oldChecked: null,
            oldIndeterminate: null
        };
    },


    watch: {
        'node.indeterminate': function nodeIndeterminate(val) {
            this.handleSelectChange(this.node.checked, val);
        },
        'node.checked': function nodeChecked(val) {
            this.handleSelectChange(val, this.node.indeterminate);
        },
        'node.expanded': function nodeExpanded(val) {
            var _this = this;

            this.$nextTick(function () {
                return _this.expanded = val;
            });
            if (val) {
                this.childNodeRendered = true;
            }
        }
    },

    methods: {
        getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.tree.nodeKey, node.data);
        },
        handleSelectChange: function handleSelectChange(checked, indeterminate, bool) {
            if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {
                this.tree.$emit('check-change', this.node.data, checked, indeterminate);
                // create-start author:lutz  checkbox的v-model
                var _tree = this.tree,
                    seq = _tree.seq,
                    outputFormat = _tree.outputFormat;

                var data = this.tree.getCheckedKeys(false);
                this.tree.$emit('input', Object(data_convert["a" /* data2type */])(data, outputFormat, seq));
                // create-end
            }
            this.oldChecked = checked;
            this.indeterminate = indeterminate;
        },
        handleClick: function handleClick() {
            // create-start 单选禁用的情况展开子元素
            if (this.node.disabled && !this.node.checked) {
                this.handleExpandIconClick();
                return;
            }
            // create-end
            var store = this.tree.store;
            store.setCurrentNode(this.node);
            this.tree.$emit('current-change', store.currentNode ? store.currentNode.data : null, store.currentNode);
            this.tree.currentNode = this;
            if (this.tree.expandOnClickNode) {
                this.handleExpandIconClick();
            }

            if (this.tree.checkOnClickNode && !this.node.disabled) {
                this.handleCheckChange(null, {
                    target: { checked: !this.node.checked }
                });
            }

            // create-start author:lutz 普通单选的v-model
            // !showCheckbox && radioType === '' 非复选框的情况
            if (!this.showCheckbox && this.tree.radioType === '' && !this.node.disabled) {
                var _tree2 = this.tree,
                    seq = _tree2.seq,
                    outputFormat = _tree2.outputFormat;

                var data = this.node.data[this.nodeKey];
                var outVal = Object(data_convert["a" /* data2type */])(data, outputFormat, seq);
                this.tree.$emit('input', Object(data_convert["a" /* data2type */])(data, outputFormat, seq));
                this.dispatch('LSelect', 'handleCloseDrapdown');
            }
            // create-end

            this.tree.$emit('node-click', this.node.data, this.node, this);
        },
        handleContextMenu: function handleContextMenu(event) {
            if (this.tree._events['node-contextmenu'] && this.tree._events['node-contextmenu'].length > 0) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.tree.$emit('node-contextmenu', event, this.node.data, this.node, this);
        },
        handleExpandIconClick: function handleExpandIconClick() {
            if (this.node.isLeaf) return;
            if (this.expanded) {
                this.tree.$emit('node-collapse', this.node.data, this.node, this);
                this.node.collapse();
            } else {
                this.node.expand();
                this.$emit('node-expand', this.node.data, this.node, this);
            }
        },
        handleCheckChange: function handleCheckChange(value, ev) {
            var _this2 = this;

            // 通过勾选的值，判断父子节点是否关联
            var node = this.node;
            var checked = void 0;

            // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
            // if(node.store.isToggleContact) {
            //     checked = node.expanded ? (node.checked === value && node.selected ? !value : value) : value;
            // } else {
            checked = ev.target.checked;
            // }

            this.node.setChecked(checked, !this.tree.checkStrictly);
            this.$nextTick(function () {
                var store = _this2.tree.store;
                _this2.tree.$emit('check', _this2.node.data, {
                    checkedNodes: store.getCheckedNodes(),
                    checkedKeys: store.getCheckedKeys(),
                    halfCheckedNodes: store.getHalfCheckedNodes(),
                    halfCheckedKeys: store.getHalfCheckedKeys()
                });
            });
        },
        handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {
            this.broadcast('ElTreeNode', 'tree-node-expand', node);
            this.tree.$emit('node-expand', nodeData, node, instance);
        },
        handleDragStart: function handleDragStart(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-start', event, this);
        },
        handleDragOver: function handleDragOver(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-over', event, this);
            event.preventDefault();
        },
        handleDrop: function handleDrop(event) {
            event.preventDefault();
        },
        handleDragEnd: function handleDragEnd(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-end', event, this);
        },


        // lutz+
        /* 当单选框被点击的时候触发 $emit('radio', node.data: object, { radioNodes: array, radioKeys: array }) */
        handleRadioChange: function handleRadioChange(val) {
            var _this3 = this;

            this.$nextTick(function () {
                var store = _this3.tree.store;

                if (_this3.radioType === 'level') {
                    _this3.node.parent.childNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                } else {
                    var allNodes = store._getAllNodes().sort(function (a, b) {
                        return b.level - a.level;
                    });
                    allNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                }

                _this3.node.setRadio(val);
                var radioKeys = store.getRadioKeys();
                _this3.tree.$emit('radio', _this3.node.data, { radioNodes: store.getRadioNodes(), radioKeys: radioKeys });

                var _tree3 = _this3.tree,
                    seq = _tree3.seq,
                    outputFormat = _tree3.outputFormat;


                _this3.tree.$emit('input', Object(data_convert["a" /* data2type */])(radioKeys, outputFormat, seq));
                if (_this3.radioType !== 'level') {
                    _this3.dispatch('LSelect', 'handleCloseDrapdown');
                }
            });
        }
        // lutz-

    },

    created: function created() {
        var _this4 = this;

        var parent = this.$parent;

        if (parent.isTree) {
            this.tree = parent;
        } else {
            this.tree = parent.tree;
        }

        var tree = this.tree;
        if (!tree) {
            console.warn("Can not find node's tree.");
        }

        var props = tree.props || {};
        var childrenKey = props['children'] || 'children';

        this.$watch('node.data.' + childrenKey, function () {
            _this4.node.updateChildren();
        });

        if (this.node.expanded) {
            this.expanded = true;
            this.childNodeRendered = true;
        }

        if (this.tree.accordion) {
            this.$on('tree-node-expand', function (node) {
                if (_this4.node !== node) {
                    _this4.node.collapse();
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_tree_nodevue_type_script_lang_js_ = (tree_nodevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_tree_nodevue_type_script_lang_js_,
  tree_nodevue_type_template_id_3ba3ef0e_render,
  tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/tree/src/tree-node.vue"
/* harmony default export */ var tree_node = (component.exports);
// EXTERNAL MODULE: ./src/utils/merge.js
var merge = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/tree/src/model/node.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function node_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var getChildState = function getChildState(node) {
    var all = true;
    var none = true;
    var allWithoutDisable = true;
    for (var i = 0, j = node.length; i < j; i++) {
        var n = node[i];
        if (n.checked !== true || n.indeterminate) {
            all = false;
            if (!n.disabled) {
                allWithoutDisable = false;
            }
        }
        if (n.checked !== false || n.indeterminate) {
            none = false;
        }
    }

    return { all: all, none: none, allWithoutDisable: allWithoutDisable, half: !all && !none };
};

var reInitChecked = function reInitChecked(node) {
    if (node.childNodes.length === 0) return;

    // add author: tangdm desc: 冻结根节点
    if (node.store.isFrozenRoot && node.level === 1) return;

    var _getChildState = getChildState(node.childNodes),
        all = _getChildState.all,
        none = _getChildState.none,
        half = _getChildState.half;

    if (all) {
        node.checked = true;
        node.indeterminate = false;
    } else if (half) {
        node.checked = false;
        node.indeterminate = true;
    } else if (none) {
        node.checked = false;
        node.indeterminate = false;
    }

    var parent = node.parent;
    if (!parent || parent.level === 0) return;

    if (!node.store.checkStrictly) {
        reInitChecked(parent);
    }
};

var getPropertyFromData = function getPropertyFromData(node, prop) {
    var props = node.store.props;
    var data = node.data || {};
    var config = props[prop];

    if (typeof config === 'function') {
        return config(data, node);
    } else if (typeof config === 'string') {
        return data[config];
    } else if (typeof config === 'undefined') {
        var dataProp = data[prop];
        return dataProp === undefined ? '' : dataProp;
    }
};

var nodeIdSeed = 0;

var node_Node = function () {
    function Node(options) {
        node_classCallCheck(this, Node);

        this.id = nodeIdSeed++;
        this.text = null;
        this.checked = false;
        this.indeterminate = false;
        this.data = null;
        this.expanded = false;
        this.parent = null;
        this.visible = true;
        // create-start author:lutz
        this.radio = null;
        // create-end
        // create-start author:tangdm desc: 标识联动状态
        this.selected = false;
        // create-end
        // create-start author:tangdm desc: 过滤值监听
        this.filter = null;
        // create-end

        for (var name in options) {
            if (options.hasOwnProperty(name)) {
                this[name] = options[name];
            }
        }

        // internal
        this.level = 0;
        this.loaded = false;
        this.childNodes = [];
        this.loading = false;

        if (this.parent) {
            this.level = this.parent.level + 1;
        }

        var store = this.store;
        if (!store) {
            throw new Error('[Node]store is required!');
        }
        store.registerNode(this);

        var props = store.props;
        if (props && typeof props.isLeaf !== 'undefined') {
            var isLeaf = getPropertyFromData(this, 'isLeaf');
            if (typeof isLeaf === 'boolean') {
                this.isLeafByUser = isLeaf;
            }
        }

        if (store.lazy !== true && this.data) {
            this.setData(this.data);

            if (store.defaultExpandAll) {
                this.expanded = true;
            }
        } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {
            this.expand();
        } else if (store.lazy && options.store.checkLeaf && !this.data[store.props.isLeaf]) {
            this.data.disabled = true;
        }

        if (!Array.isArray(this.data)) {
            markNodeData(this, this.data);
        }
        if (!this.data) return;
        var defaultExpandedKeys = store.defaultExpandedKeys;
        var key = store.key;
        if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {
            this.expand(null, store.autoExpandParent);
        }

        if (key && store.currentNodeKey !== undefined && this.key === store.currentNodeKey) {
            store.currentNode = this;
        }

        if (store.lazy) {
            store._initDefaultCheckedNode(this);
        }

        this.updateLeafState();
    }

    Node.prototype.setData = function setData(data) {
        if (!Array.isArray(data)) {
            markNodeData(this, data);
        }

        // create-start author:lutz
        // check-leaf 只能选择子节点
        var _store = this.store,
            checkLeaf = _store.checkLeaf,
            props = _store.props;

        var isObject = Object.prototype.toString.call(data) === '[object Object]';
        if (isObject && checkLeaf && data[props.children] && data[props.children].length) {
            data[props.disabled] = true;
        }
        // create-end

        this.data = data;
        this.childNodes = [];

        var children = void 0;
        if (this.level === 0 && this.data instanceof Array) {
            children = this.data;
        } else {
            children = getPropertyFromData(this, 'children') || [];
            // create-start author:lutz
            var _store2 = this.store,
                checkStrictly = _store2.checkStrictly,
                _props = _store2.props;

            var disabled = getPropertyFromData(this, 'disabled');
            var disabledName = _props.disabled;
            // 父节点禁用、节点关联(disabled && !false)开启禁用
            if (disabled && !checkStrictly) {
                children.forEach(function (item) {
                    item[disabledName] = true;
                });
            }
            // create-end
        }

        for (var i = 0, j = children.length; i < j; i++) {
            this.insertChild({ data: children[i] });
        }
    };

    Node.prototype.contains = function contains(target) {
        var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var walk = function walk(parent) {
            var children = parent.childNodes || [];
            var result = false;
            for (var i = 0, j = children.length; i < j; i++) {
                var child = children[i];
                if (child === target || deep && walk(child)) {
                    result = true;
                    break;
                }
            }
            return result;
        };

        return walk(this);
    };

    Node.prototype.remove = function remove() {
        var parent = this.parent;
        if (parent) {
            parent.removeChild(this);
        }
    };

    Node.prototype.insertChild = function insertChild(child, index, batch) {
        if (!child) throw new Error('insertChild error: child is required.');

        if (!(child instanceof Node)) {
            if (!batch) {
                var children = this.getChildren(true);
                if (children.indexOf(child.data) === -1) {
                    if (typeof index === 'undefined' || index < 0) {
                        children.push(child.data);
                    } else {
                        children.splice(index, 0, child.data);
                    }
                }
            }
            Object(merge["a" /* default */])(child, {
                parent: this,
                store: this.store
            });
            child = new Node(child);
        }

        child.level = this.level + 1;

        if (typeof index === 'undefined' || index < 0) {
            this.childNodes.push(child);
        } else {
            this.childNodes.splice(index, 0, child);
        }

        this.updateLeafState();
    };

    Node.prototype.insertBefore = function insertBefore(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
        }
        this.insertChild(child, index);
    };

    Node.prototype.insertAfter = function insertAfter(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
            if (index !== -1) index += 1;
        }
        this.insertChild(child, index);
    };

    Node.prototype.removeChild = function removeChild(child) {
        var children = this.getChildren() || [];
        var dataIndex = children.indexOf(child.data);
        if (dataIndex > -1) {
            children.splice(dataIndex, 1);
        }

        var index = this.childNodes.indexOf(child);

        if (index > -1) {
            this.store && this.store.deregisterNode(child);
            child.parent = null;
            this.childNodes.splice(index, 1);
        }

        this.updateLeafState();
    };

    Node.prototype.removeChildByData = function removeChildByData(data) {
        var targetNode = null;

        for (var i = 0; i < this.childNodes.length; i++) {
            if (this.childNodes[i].data === data) {
                targetNode = this.childNodes[i];
                break;
            }
        }

        if (targetNode) {
            this.removeChild(targetNode);
        }
    };

    Node.prototype.expand = function expand(callback, expandParent) {
        var _this = this;

        var done = function done() {
            if (expandParent) {
                var parent = _this.parent;
                while (parent.level > 0) {
                    parent.expanded = true;
                    parent = parent.parent;
                }
            }
            _this.expanded = true;
            if (callback) callback();
        };

        if (this.shouldLoadData()) {
            this.loadData(function (data) {
                if (data instanceof Array) {
                    if (_this.checked) {
                        _this.setChecked(true, true);
                    } else if (!_this.store.checkStrictly) {
                        reInitChecked(_this);
                    }
                    done();
                }
            });
        } else {
            done();
        }
    };

    Node.prototype.doCreateChildren = function doCreateChildren(array) {
        var _this2 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        array.forEach(function (item) {
            _this2.insertChild(Object(merge["a" /* default */])({ data: item }, defaultProps), undefined, true);
        });
    };

    Node.prototype.collapse = function collapse() {
        this.expanded = false;

        // add author: tangdm desc: 折叠状态切换
        if (this.store.isToggleContact) {
            // 折叠不关联
            if (!this.checked && this.indeterminate) {
                this.indeterminate = false;

                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
            }
        }
    };

    Node.prototype.shouldLoadData = function shouldLoadData() {
        return this.store.lazy === true && this.store.load && !this.loaded;
    };

    Node.prototype.updateLeafState = function updateLeafState() {
        if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== 'undefined') {
            this.isLeaf = this.isLeafByUser;
            return;
        }
        var childNodes = this.childNodes;
        if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
            this.isLeaf = !childNodes || childNodes.length === 0;
            return;
        }
        this.isLeaf = false;
    };

    Node.prototype.setChecked = function setChecked(value, deep, recursion, passValue) {
        var _this3 = this;

        // add author: tangdm desc: 冻结根节点
        if (this.store.isFrozenRoot && this.level === 1) return;

        // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
        if (this.store.isToggleContact) {

            // 是否当前元素
            if (!recursion) {
                // 展开状态
                if (this.expanded) {
                    var newValue = void 0;
                    if (this.isLeaf) {
                        newValue = value;
                    } else {
                        var _getChildState2 = getChildState(this.childNodes),
                            all = _getChildState2.all;

                        newValue = all;
                    }

                    // this.checked = this.selected === true ? !newValue : value;
                    this.checked = value === true;
                    this.indeterminate = false;

                    if (!this.isLeaf) {
                        // 遍历子节点
                        if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                            var _getChildState3 = getChildState(this.childNodes),
                                _all = _getChildState3.all,
                                allWithoutDisable = _getChildState3.allWithoutDisable;

                            if (!this.isLeaf && !_all && allWithoutDisable) {
                                this.checked = false;
                                value = false;
                            }

                            var handleDescendants = function handleDescendants() {
                                if (deep) {
                                    var childNodes = _this3.childNodes;
                                    for (var i = 0, j = childNodes.length; i < j; i++) {
                                        var child = childNodes[i];
                                        passValue = passValue || _this3.checked !== false;
                                        var isCheck = child.disabled ? child.checked : passValue;
                                        child.setChecked(isCheck, deep, true, passValue);
                                    }

                                    var _getChildState4 = getChildState(childNodes),
                                        half = _getChildState4.half,
                                        _all2 = _getChildState4.all;

                                    if (!_all2) {
                                        _this3.checked = _all2;
                                        _this3.indeterminate = half;
                                    }
                                }
                            };

                            // 递归子节点
                            handleDescendants();
                        }
                    }
                } else {
                    this.checked = value;
                    this.indeterminate = false;

                    // 标识折叠收缩选择的状态
                    this.selected = value === true;
                    if (this.store.checkStrictly) {
                        return;
                    }
                }

                // if (!this.store.isToggleContact) {
                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
                // }
            } else {
                // 展开状态
                if (this.expanded) {
                    this.checked = value === true;
                    this.indeterminate = false;

                    // 遍历子节点
                    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                        var _getChildState5 = getChildState(this.childNodes),
                            _all3 = _getChildState5.all,
                            _allWithoutDisable = _getChildState5.allWithoutDisable;

                        if (!this.isLeaf && !_all3 && _allWithoutDisable) {
                            this.checked = false;
                            value = false;
                        }

                        var _handleDescendants = function _handleDescendants() {
                            if (deep) {
                                var childNodes = _this3.childNodes;
                                for (var i = 0, j = childNodes.length; i < j; i++) {
                                    var child = childNodes[i];
                                    passValue = passValue || _this3.checked !== false;
                                    var isCheck = child.disabled ? child.checked : passValue;
                                    child.setChecked(isCheck, deep, true, passValue);
                                }

                                var _getChildState6 = getChildState(childNodes),
                                    half = _getChildState6.half,
                                    _all4 = _getChildState6.all;

                                if (!_all4) {
                                    _this3.checked = _all4;
                                    _this3.indeterminate = half;
                                }
                            }
                        };

                        // 递归子节点
                        _handleDescendants();
                    }
                } else {
                    this.checked = value === true;
                    this.indeterminate = value === 'half';
                }
            }
        } else {
            this.indeterminate = value === 'half';
            this.checked = value === true;

            if (this.store.checkStrictly) return;

            if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                var _getChildState7 = getChildState(this.childNodes),
                    _all5 = _getChildState7.all,
                    _allWithoutDisable2 = _getChildState7.allWithoutDisable;

                if (!this.isLeaf && !_all5 && _allWithoutDisable2) {
                    this.checked = false;
                    value = false;
                }

                var _handleDescendants2 = function _handleDescendants2() {
                    if (deep) {
                        var childNodes = _this3.childNodes;
                        for (var i = 0, j = childNodes.length; i < j; i++) {
                            var child = childNodes[i];
                            passValue = passValue || value !== false;
                            var isCheck = child.disabled ? child.checked : passValue;
                            child.setChecked(isCheck, deep, true, passValue);
                        }

                        var _getChildState8 = getChildState(childNodes),
                            half = _getChildState8.half,
                            _all6 = _getChildState8.all;

                        if (!_all6) {
                            _this3.checked = _all6;
                            _this3.indeterminate = half;
                        }
                    }
                };

                if (this.shouldLoadData()) {
                    // Only work on lazy load data.
                    this.loadData(function () {
                        _handleDescendants2();
                        reInitChecked(_this3);
                    }, {
                        checked: value !== false
                    });
                    return;
                } else {
                    _handleDescendants2();
                }
            }

            var _parent = this.parent;
            if (!_parent || _parent.level === 0) return;

            // 是否点击的当前元素
            if (!recursion) {
                reInitChecked(_parent);
            }
        }
    };

    Node.prototype.getChildren = function getChildren() {
        var forceInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        // this is data
        if (this.level === 0) return this.data;
        var data = this.data;
        if (!data) return null;

        var props = this.store.props;
        var children = 'children';
        if (props) {
            children = props.children || 'children';
        }

        if (data[children] === undefined) {
            data[children] = null;
        }

        if (forceInit && !data[children]) {
            data[children] = [];
        }

        return data[children];
    };

    Node.prototype.updateChildren = function updateChildren() {
        var _this4 = this;

        var newData = this.getChildren() || [];
        var oldData = this.childNodes.map(function (node) {
            return node.data;
        });

        var newDataMap = {};
        var newNodes = [];

        newData.forEach(function (item, index) {
            if (item[NODE_KEY]) {
                newDataMap[item[NODE_KEY]] = { index: index, data: item };
            } else {
                newNodes.push({ index: index, data: item });
            }
        });

        if (!this.store.lazy) {
            oldData.forEach(function (item) {
                if (!newDataMap[item[NODE_KEY]]) _this4.removeChildByData(item);
            });
        }

        newNodes.forEach(function (_ref) {
            var index = _ref.index,
                data = _ref.data;

            _this4.insertChild({ data: data }, index);
        });

        this.updateLeafState();
    };

    Node.prototype.loadData = function loadData(callback) {
        var _this5 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
            this.loading = true;

            var resolve = function resolve(children) {
                _this5.loaded = true;
                _this5.loading = false;
                _this5.childNodes = [];

                _this5.doCreateChildren(children, defaultProps);

                _this5.updateLeafState();

                if (callback) {
                    callback.call(_this5, children);
                }
            };

            this.store.load(this, resolve);
        } else {
            if (callback) {
                callback.call(this);
            }
        }
    };

    // create-start author:lutz
    // (radioVal: any) 写入radioVal


    Node.prototype.setRadio = function setRadio(radioVal) {
        this.radio = radioVal;
    };
    // create-end


    _createClass(Node, [{
        key: 'label',
        get: function get() {
            return getPropertyFromData(this, 'label');
        }
    }, {
        key: 'key',
        get: function get() {
            var nodeKey = this.store.key;
            if (this.data) return this.data[nodeKey];
            return null;
        }
    }, {
        key: 'disabled',
        get: function get() {
            return getPropertyFromData(this, 'disabled');
        }
    }, {
        key: 'nextSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return parent.childNodes[index + 1];
                }
            }
            return null;
        }
    }, {
        key: 'previousSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return index > 0 ? parent.childNodes[index - 1] : null;
                }
            }
            return null;
        }
    }]);

    return Node;
}();

/* harmony default export */ var model_node = (node_Node);
// CONCATENATED MODULE: ./packages/tree/src/model/tree-store.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function tree_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var tree_store_TreeStore = function () {
    function TreeStore(options) {
        var _this = this;

        tree_store_classCallCheck(this, TreeStore);

        this.currentNode = null;
        this.currentNodeKey = null;

        for (var option in options) {
            if (options.hasOwnProperty(option)) {
                this[option] = options[option];
            }
        }

        this.nodesMap = {};

        this.root = new model_node({
            data: this.data,
            store: this
        });

        if (this.lazy && this.load) {
            var loadFn = this.load;
            loadFn(this.root, function (data) {
                _this.root.doCreateChildren(data);
                _this._initDefaultCheckedNodes();
            });
        } else {
            this._initDefaultCheckedNodes();
        }
    }

    TreeStore.prototype.filter = function filter(value) {
        var filterNodeMethod = this.filterNodeMethod;
        var lazy = this.lazy;

        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                child.visible = filterNodeMethod.call(child, value, child.data, child);

                // add author: tangdm desc: 追加过滤值
                child.filter = value;

                traverse(child);
            });

            if (!node.visible && childNodes.length) {
                var allHidden = true;

                childNodes.forEach(function (child) {
                    if (child.visible) allHidden = false;
                });

                if (node.root) {
                    node.root.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.root.filter = value;
                } else {
                    node.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.filter = value;
                }
            }
            if (!value) return;

            if (node.visible && !node.isLeaf && !lazy) node.expand();
        };

        traverse(this);
    };

    TreeStore.prototype.setData = function setData(newVal) {
        var instanceChanged = newVal !== this.root.data;
        if (instanceChanged) {
            this.root.setData(newVal);
            this._initDefaultCheckedNodes();
        } else {
            this.root.updateChildren();
        }
    };

    TreeStore.prototype.getNode = function getNode(data) {
        if (data instanceof model_node) return data;
        var key = (typeof data === "undefined" ? "undefined" : _typeof(data)) !== "object" ? data : util_getNodeKey(this.key, data);
        return this.nodesMap[key] || null;
    };

    TreeStore.prototype.insertBefore = function insertBefore(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertBefore({ data: data }, refNode);
    };

    TreeStore.prototype.insertAfter = function insertAfter(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertAfter({ data: data }, refNode);
    };

    TreeStore.prototype.remove = function remove(data) {
        var node = this.getNode(data);
        if (node && node.parent) {
            node.parent.removeChild(node);
        }
    };

    TreeStore.prototype.append = function append(data, parentData) {
        var parentNode = parentData ? this.getNode(parentData) : this.root;

        if (parentNode) {
            parentNode.insertChild({ data: data });
        }
    };

    TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {
        var _this2 = this;

        var defaultCheckedKeys = this.defaultCheckedKeys || [];
        var nodesMap = this.nodesMap;

        defaultCheckedKeys.forEach(function (checkedKey) {
            var node = nodesMap[checkedKey];

            if (node) {
                node.setChecked(true, !_this2.checkStrictly);
                // create-start author:lutz
                // 给radio写入值
                if (node.store.radioType === "all" || node.store.radioType === "level") {
                    node.setRadio(node.key);
                }
                // create-end
            }
        });
    };

    TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {
        var defaultCheckedKeys = this.defaultCheckedKeys || [];

        if (defaultCheckedKeys.indexOf(node.key) !== -1) {
            node.setChecked(true, !this.checkStrictly);
        }
    };

    TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {
        if (newVal !== this.defaultCheckedKeys) {
            this.defaultCheckedKeys = newVal;
            this._initDefaultCheckedNodes();
        }
    };

    TreeStore.prototype.registerNode = function registerNode(node) {
        var key = this.key;
        if (!key || !node || !node.data) return;

        var nodeKey = node.key;
        if (nodeKey !== undefined) this.nodesMap[node.key] = node;
    };

    TreeStore.prototype.deregisterNode = function deregisterNode(node) {
        var _this3 = this;

        var key = this.key;
        if (!key || !node || !node.data) return;

        node.childNodes.forEach(function (child) {
            _this3.deregisterNode(child);
        });

        delete this.nodesMap[node.key];
    };

    TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {
        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
                    checkedNodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return checkedNodes;
    };

    TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {
        var _this4 = this;

        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        return this.getCheckedNodes(leafOnly).map(function (data) {
            return (data || {})[_this4.key];
        });
    };

    TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {
        var nodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if (child.indeterminate) {
                    nodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return nodes;
    };

    TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {
        var _this5 = this;

        return this.getHalfCheckedNodes().map(function (data) {
            return (data || {})[_this5.key];
        });
    };

    TreeStore.prototype._getAllNodes = function _getAllNodes() {
        var allNodes = [];
        var nodesMap = this.nodesMap;
        for (var nodeKey in nodesMap) {
            if (nodesMap.hasOwnProperty(nodeKey)) {
                allNodes.push(nodesMap[nodeKey]);
            }
        }

        return allNodes;
    };

    TreeStore.prototype.updateChildren = function updateChildren(key, data) {
        var node = this.nodesMap[key];
        if (!node) return;
        var childNodes = node.childNodes;
        for (var i = childNodes.length - 1; i >= 0; i--) {
            var child = childNodes[i];
            this.remove(child.data);
        }
        for (var _i = 0, j = data.length; _i < j; _i++) {
            var _child = data[_i];
            this.append(_child, node.data);
        }
    };

    TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var checkedKeys = arguments[2];

        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var cache = Object.create(null);
        var keys = Object.keys(checkedKeys);
        allNodes.forEach(function (node) {
            return node.setChecked(false, false);
        });
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            var checked = keys.indexOf(nodeKey) > -1;
            if (!checked) {
                if (node.checked && !cache[nodeKey]) {
                    node.setChecked(false, false);
                }
                continue;
            }

            var parent = node.parent;
            while (parent && parent.level > 0) {
                cache[parent.data[key]] = true;
                parent = parent.parent;
            }

            if (node.isLeaf || this.checkStrictly) {
                node.setChecked(true, false);
                continue;
            }
            node.setChecked(true, true);

            if (leafOnly) {
                (function () {
                    node.setChecked(false, false);
                    var traverse = function traverse(node) {
                        var childNodes = node.childNodes;
                        childNodes.forEach(function (child) {
                            if (!child.isLeaf) {
                                child.setChecked(false, false);
                            }
                            traverse(child);
                        });
                    };
                    traverse(node);
                })();
            }
        }
    };

    TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            checkedKeys[(item || {})[key]] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.defaultCheckedKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (key) {
            checkedKeys[key] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys) {
        var _this6 = this;

        keys = keys || [];
        this.defaultExpandedKeys = keys;

        keys.forEach(function (key) {
            var node = _this6.getNode(key);
            if (node) node.expand(null, _this6.autoExpandParent);
        });
    };

    TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {
        var node = this.getNode(data);

        if (node) {
            node.setChecked(!!checked, deep);
        }
    };

    TreeStore.prototype.getCurrentNode = function getCurrentNode() {
        return this.currentNode;
    };

    TreeStore.prototype.setCurrentNode = function setCurrentNode(node) {
        this.currentNode = node;
    };

    TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {
        var key = node[this.key];
        var currNode = this.nodesMap[key];
        this.setCurrentNode(currNode);
    };

    TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {
        if (key === null) {
            this.currentNode = null;
            return;
        }
        var node = this.getNode(key);
        if (node) {
            this.currentNode = node;
        }
    };

    // create-start


    TreeStore.prototype.setRadio = function setRadio(data, radioVal, deep) {
        var node = this.getNode(data);
        if (node) {
            node.setRadio(radioVal, deep);
        }
    };

    // 则返回目前被选中的节点所组成的数组


    TreeStore.prototype.getRadioNodes = function getRadioNodes() {
        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function (child) {
                if (child.radio != null && child.radio !== "") {
                    // null || void 0 || '' 下会被认为是没有选中
                    checkedNodes.push(child.data);
                }
                traverse(child);
            });
        };
        traverse(this);
        return checkedNodes;
    };

    // 返回目前被选中的节点的 key 所组成的数组


    TreeStore.prototype.getRadioKeys = function getRadioKeys() {
        var _this7 = this;

        return this.getRadioNodes().map(function (data) {
            return (data || {})[_this7.key];
        });
    };

    // nodes设置目前勾选节点


    TreeStore.prototype.setRadioNodes = function setRadioNodes(array) {
        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            var index = (item || {})[key];
            checkedKeys[index] = index;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    // keys设置勾选节点


    TreeStore.prototype.setRadioKeys = function setRadioKeys(keys) {
        this.defaultRadioKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (item) {
            checkedKeys[item] = item;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    TreeStore.prototype._setRadioKeys = function _setRadioKeys(key, checkedKey) {
        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var keys = Object.keys(checkedKey);
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            node.setRadio(keys.indexOf(nodeKey) !== -1 ? checkedKey[nodeKey] : null);
        }
    };

    // create-end


    return TreeStore;
}();

/* harmony default export */ var tree_store = (tree_store_TreeStore);
// EXTERNAL MODULE: ./src/dg-mixins/itemsWithDisabled.js
var dg_mixins_itemsWithDisabled = __webpack_require__(10);

// EXTERNAL MODULE: ./src/dg-utils/shear.js
var shear = __webpack_require__(5);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










var Tree = Object(shear["a" /* complex */])(external_element_ui_["Tree"], ['created', 'mounted']);

/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgTree',

    mixins: [Tree, dg_mixins_itemsWithDisabled["a" /* default */]],

    components: {
        ElTreeNode: tree_node
    },

    props: {
        iconLeaf: String,
        iconClass: String,
        // 只能选择叶子节点
        checkLeaf: Boolean,
        // node-key 现在是必须的
        nodeKey: {
            type: String,
            required: true
        },
        value: {
            type: [String, Array, Number]
        },
        // element-ui 高亮显示选中
        highlightCurrent: {
            type: Boolean,
            default: function _default() {
                return true;
            }
        },
        // radio: all：整棵树只能选一个; level：同级只能选择一个; '': 不显示默认
        radioType: {
            type: String,
            default: '',
            validator: function validator(val) {
                return ['level', 'all', ''].indexOf(val) !== -1;
            }
        },
        // 是否移除默认的键盘监听事件
        noneDefaultKeyboard: {
            type: Boolean,
            default: false
        },
        // 是否在复选的模式支持展开关联且收缩失去关联 add author: tangdm
        isToggleContact: {
            type: Boolean,
            default: false
        },
        // 是否根节点冻结 add author: tangdm
        isFrozenRoot: {
            type: Boolean,
            default: false
        },
        // 是否高亮检索值 add author: tangdm
        isHighLight: {
            type: Boolean,
            default: false
        }
    },
    watch: {
        // create author:lutz
        // v-model 功能绑定数据
        value: function value(val, oldVal) {
            // debugger;
            var radioType = this.radioType,
                seq = this.seq,
                value = this.value,
                showCheckbox = this.showCheckbox,
                itemsWithDisabled = this.itemsWithDisabled,
                nodeKey = this.nodeKey;

            var valArr = Object(data_convert["b" /* str2arr */])(value, seq, true, itemsWithDisabled, nodeKey);

            // radio
            if (radioType === 'level' || radioType === 'all') {
                this.setRadioKeys(valArr);
            }

            // checkbox
            if (showCheckbox) {
                var checkStrictly = this.checkStrictly;

                var preCheckedArr = this.getCheckedKeys();
                var oldValArr = Object(data_convert["b" /* str2arr */])(preCheckedArr, seq);

                if (valArr.length && oldValArr.length && !checkStrictly) {
                    var _nodeKey = this.nodeKey;

                    var diffArr = external_lodash_default.a.difference(oldValArr, valArr);

                    // 剔除父及祖先级元素
                    var traverseParent = function traverseParent(node, valArr) {
                        var parentNode = node.parent;
                        if (parentNode && parentNode.level != 0) {
                            external_lodash_default.a.remove(valArr, function (n) {
                                return parentNode.data[_nodeKey] === n;
                            });
                            traverseParent(parentNode, valArr);
                        }
                    };

                    // 剔除所有子代及子孙元素
                    var traverseChild = function traverseChild(node, valArr) {
                        var childNodes = node.childNodes;
                        if (childNodes && childNodes.length) {
                            childNodes.forEach(function (item) {
                                external_lodash_default.a.remove(valArr, function (n) {
                                    return n === item.data[_nodeKey];
                                });
                            });
                            traverseChild(childNodes, valArr);
                        }
                    };

                    // diffArr.forEach(item => {
                    //     const node = this.getNode(item);
                    //     if (node) {
                    //         traverseParent(node, valArr);
                    //         traverseChild(node, valArr);
                    //     }
                    // });
                }
                this.setCheckedKeys(valArr);
            }

            // highlight
            if (!showCheckbox && radioType === '' && valArr.length < 2) {
                this.setCurrentKey(valArr);
            }
        },


        // create author:lutz
        dataSource: function dataSource(val) {
            this.store.setData(this.itemsWithDisabled);
        }
    },

    // describe:数据类型转换
    created: function created() {
        var _this = this;

        console.log(this.value);
        this.isTree = true;
        // create-start author:lutz
        var valArr = Object(data_convert["b" /* str2arr */])(this.value, this.seq, true, this.dataSource);
        var checkArr = Object(data_convert["b" /* str2arr */])(this.defaultCheckedKeys, this.seq, true, this.dataSource, this.nodeKey);
        var expArr = Object(data_convert["b" /* str2arr */])(this.defaultExpandedKeys, this.seq, true, this.dataSource, this.nodeKey);
        // create-end author:lutz
        this.store = new tree_store({
            key: this.nodeKey,
            lazy: this.lazy,
            load: this.load,
            checkLeaf: this.checkLeaf,
            checkStrictly: this.checkStrictly || this.isToggleContact,
            // add author: tangdm desc: 收缩展开是否联动
            isToggleContact: this.isToggleContact,
            // add author: tangdm desc: 是否冻结根节点
            isFrozenRoot: this.isFrozenRoot,
            // add author: tangdm desc: 是否高亮检索值
            isHighLight: this.isHighLight,

            checkDescendants: this.checkDescendants,
            // update-start  author:lutz
            data: this.dataSource,
            radioType: this.radioType,
            props: this.defaultProp,
            currentNodeKey: this.currentNodeKey || this.value,
            defaultCheckedKeys: Object(data_convert["c" /* uniqArr */])(valArr, checkArr),
            defaultExpandedKeys: Object(data_convert["c" /* uniqArr */])(valArr, expArr),
            /* [code]
                data: this.data,
                props: this.props,
                currentNodeKey: this.currentNodeKey
                defaultCheckedKeys: this.defaultCheckedKeys,
                defaultExpandedKeys: this.defaultExpandedKeys
            */
            // update-end
            autoExpandParent: this.autoExpandParent,
            defaultExpandAll: this.defaultExpandAll,
            filterNodeMethod: this.filterNodeMethod
        });

        this.root = this.store.root;

        var dragState = this.dragState;

        this.$on('tree-node-drag-start', function (event, treeNode) {
            if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {
                event.preventDefault();
                return false;
            }
            event.dataTransfer.effectAllowed = 'move';

            // wrap in try catch to address IE's error when first param is 'text/plain'
            try {
                // setData is required for draggable to work in FireFox
                // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox
                event.dataTransfer.setData('text/plain', '');
            } catch (e) {}
            dragState.draggingNode = treeNode;
            _this.$emit('node-drag-start', treeNode.node, event);
        });

        this.$on('tree-node-drag-over', function (event, treeNode) {
            var dropNode = findNearestComponent(event.target, 'ElTreeNode');
            var oldDropNode = dragState.dropNode;
            if (oldDropNode && oldDropNode !== dropNode) {
                Object(dom["d" /* removeClass */])(oldDropNode.$el, 'is-drop-inner');
            }
            var draggingNode = dragState.draggingNode;
            if (!draggingNode || !dropNode) return;

            var dropPrev = true;
            var dropInner = true;
            var dropNext = true;
            var userAllowDropInner = true;
            if (typeof _this.allowDrop === 'function') {
                dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');
                userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');
                dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');
            }
            event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';
            if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
                if (oldDropNode) {
                    _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);
                }
                _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);
            }

            if (dropPrev || dropInner || dropNext) {
                dragState.dropNode = dropNode;
            }

            if (dropNode.node.nextSibling === draggingNode.node) {
                dropNext = false;
            }
            if (dropNode.node.previousSibling === draggingNode.node) {
                dropPrev = false;
            }
            if (dropNode.node.contains(draggingNode.node, false)) {
                dropInner = false;
            }
            if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
                dropPrev = false;
                dropInner = false;
                dropNext = false;
            }

            var targetPosition = dropNode.$el.getBoundingClientRect();
            var treePosition = _this.$el.getBoundingClientRect();

            var dropType = void 0;
            var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
            var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;

            var indicatorTop = -9999;
            var distance = event.clientY - targetPosition.top;
            if (distance < targetPosition.height * prevPercent) {
                dropType = 'before';
            } else if (distance > targetPosition.height * nextPercent) {
                dropType = 'after';
            } else if (dropInner) {
                dropType = 'inner';
            } else {
                dropType = 'none';
            }

            var iconPosition = dropNode.$el.querySelector('.el-tree-node__expand-icon').getBoundingClientRect();
            var dropIndicator = _this.$refs.dropIndicator;
            if (dropType === 'before') {
                indicatorTop = iconPosition.top - treePosition.top;
            } else if (dropType === 'after') {
                indicatorTop = iconPosition.bottom - treePosition.top;
            }
            dropIndicator.style.top = indicatorTop + 'px';
            dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';

            if (dropType === 'inner') {
                Object(dom["a" /* addClass */])(dropNode.$el, 'is-drop-inner');
            } else {
                Object(dom["d" /* removeClass */])(dropNode.$el, 'is-drop-inner');
            }

            dragState.showDropIndicator = dropType === 'before' || dropType === 'after';
            dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
            dragState.dropType = dropType;
            _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);
        });

        this.$on('tree-node-drag-end', function (event) {
            var draggingNode = dragState.draggingNode,
                dropType = dragState.dropType,
                dropNode = dragState.dropNode;

            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';

            if (draggingNode && dropNode) {
                var draggingNodeCopy = {
                    data: draggingNode.node.data
                };
                if (dropType !== 'none') {
                    draggingNode.node.remove();
                }
                if (dropType === 'before') {
                    dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'after') {
                    dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'inner') {
                    dropNode.node.insertChild(draggingNodeCopy);
                }
                if (dropType !== 'none') {
                    _this.store.registerNode(draggingNodeCopy);
                }

                Object(dom["d" /* removeClass */])(dropNode.$el, 'is-drop-inner');

                _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);
                if (dropType !== 'none') {
                    _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);
                }
            }
            if (draggingNode && !dropNode) {
                _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);
            }

            dragState.showDropIndicator = false;
            dragState.draggingNode = null;
            dragState.dropNode = null;
            dragState.allowDrop = true;
        });
    },


    methods: {
        /*  radioType: 1. all：整棵树只能选一个 2. level：同级只能选择一个 3. '': 不显示默认 */
        // 返回目前被选中的节点所组成的数组
        getRadioNodes: function getRadioNodes() {
            return this.store.getRadioNodes();
        },


        // 返回目前被选中的节点所组成的数组的 key
        getRadioKeys: function getRadioKeys() {
            return this.store.getRadioKeys();
        },


        // 设置目前勾选的节点，使用此方法必须设置 node-key 属性。function (nodes: array)
        setRadioNodes: function setRadioNodes(nodes) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioNodes');
            this.store.setRadioNodes(nodes);
        },


        // 设置勾选节点所组成的数组的 key。 function(keys: array)
        setRadioKeys: function setRadioKeys(keys) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioKeys');
            this.store.setRadioKeys(keys);
        },


        // 设置radio信息。 function (data: array, radioVal: boolean, deep: boolean = false)
        setRadio: function setRadio(data, radioVal, deep) {
            this.store.setRadio(data, radioVal, deep);
        }
    },

    // edit author: tangdm descript: 去除默认的鼠标监听事件
    mounted: function mounted() {
        this.initTabIndex();
        if (!this.noneDefaultKeyboard) this.$el.addEventListener('keydown', this.handleKeydown);
    },
    updated: function updated() {
        this.treeItems = this.$el.querySelectorAll('[role=treeitem]');
        this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');
    }
});
// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
main_component.options.__file = "packages/tree/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./packages/tree/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var tree = __webpack_exports__["default"] = (main);

/***/ })
/******/ ]);