'use strict';

exports.__esModule = true;
exports.str2arr = str2arr;
exports.data2type = data2type;
exports.uniqArr = uniqArr;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * string to array
 * @param {any} val 需要处理的数据
 * @param {string} seq 字符串分隔符
 * @param {boolen} clone 是否深度拷贝
 * @param {array} dataSource 数据源
 * @param {string|number} dataSourceValueName 数据源需要匹配字段
 *
 * @return {array}
 */
function str2arr(val) {
    var seq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
    var clone = arguments[2];
    var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var dataSourceValueName = arguments[4];
    var isDataSourceChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (_lodash2.default.isNil(val) || val === '') {
        return [];
    }

    if (_lodash2.default.isArray(val)) {
        return clone ? _lodash2.default.cloneDeep(val) : val;
    }

    var data = val.toString().split(seq);

    // 数据源必须是数组 && 长度大于0 && 展示数据必须是数组
    if (_lodash2.default.isArray(dataSource) && dataSource.length && _lodash2.default.isArray(data)) {
        // 对象数组 或 数组的截取第一个数据判断数字类型
        if (dataSourceValueName != null && _lodash2.default.isNumber(dataSource[0][dataSourceValueName]) || !dataSourceValueName && _lodash2.default.isNumber(dataSource[0])) {
            data = data.map(function (item) {
                return Number(item);
            });
        }
    }

    if (isDataSourceChanged) {
        // huangjq 2020/07/24
        // 数据源改变后，有些原有的value不存在了，重新过滤
        var keys = [];
        dataSource.map(function (item) {
            return keys.push(item[dataSourceValueName]);
        });
        data = data.filter(function (item) {
            return keys.indexOf(item) > -1;
        });
    }

    return data;
}

/**
 * 将数据转换成指定数据类型
 * @param {*} val
 * @param {Array|String|Object} type 需要转换的类型
 * @param {String} seq 分隔符
 */
/*
 * @Author: lutz
 * @Date: 2019-06-24 11:16:27
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-01 15:15:41
 * @Last Modified by: huangjq
 * @Last Modified time: 2020-07-24 11:10:20
 */

function data2type(val, type) {
    var seq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    var bool = _lodash2.default['is' + type] && _lodash2.default['is' + type](val);

    if (bool) {
        return val;
    }

    // 为保证选项可选中，这里不能将数字转成字符串
    if (_lodash2.default.isNumber(val) && type === 'String') {
        return val;
    }

    if (_lodash2.default.isArray(val) && type === 'String') {
        return val.sort().join(seq);
    }

    if (_lodash2.default.isString(val) && type === 'Array') {
        return val.split(seq);
    }

    var map = {
        String: '',
        Array: [],
        Object: {}
    };

    return map[type];
}

/**
 * 两个数组合并成不重复的数组
 * @param {Array} exp
 * @param {Array} val
 */
function uniqArr(exp, val) {
    if (_lodash2.default.isArray(exp) && _lodash2.default.isArray(val)) {
        return _lodash2.default.union(exp, val);
    }

    return [];
}