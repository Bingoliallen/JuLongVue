"use strict";

exports.__esModule = true;
exports.ruleStr2Obj = ruleStr2Obj;
exports.ruleChange = ruleChange;

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _messageCN = require("packages/form-item/src/message-CN.js");

var _messageCN2 = _interopRequireDefault(_messageCN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 正则匹配 range[*]
var reg = /range\[(\S*)\]/i;
// 匹配空字符串
var reg_space = /\s+/g;
var seq = ",";

/**
 *  rule字段 String to Object
 *   a) require 必须值
 *   b) type 类型需求，请查看 message-CN.js 中的 types字段
 *   c) range 范围需求
 *       *range 使用 async-validator 没提供使用说明,所以提供以下类似python的范围语法
 *       range[50] => { len: 50 }
 *       range[1:] => { min: 1 }
 *       range[:100] => { max: 100 }
 *       range[1:100] => { min: 1, max: 100 }
 * @param {String} str rule 字段值
 * @returns {Object}
 */
function ruleStr2Obj() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  // 去除空格
  var rules = str.replace(reg_space, "");
  var arr = rules.split(seq);
  rules = {};
  // mgs.types中匹配类型
  var type = _lodash2.default.intersection(arr, Object.keys(_messageCN2.default.types));
  // 如果多个匹配则取第一个
  if (type && type.length) {
    rules.type = type[0];
  }
  // require: true?
  if (arr && arr.length && arr.indexOf("required") !== -1) {
    rules.required = true;
  }
  arr.forEach(function (item) {
    if (reg.test(item)) {
      var substr = item.match(reg);
      if (substr) {
        var valStr = substr[1];
        // ~-1 === 0
        if (~valStr.indexOf(":")) {
          var val = valStr.split(":");
          if (val[0]) {
            rules.min = parseInt(val[0]);
          }

          if (val[1]) {
            rules.max = parseInt(val[1]);
          }
        } else {
          rules.len = parseInt(valStr);
        }
      }
    }
  });
  return rules;
}

/**
 * formItem 或 form 中 rule 字段的转换
 * @param {*} rules rule 字段值
 * @param {Enum} type ['formItem', 'form'] 对应字母的组件
 * @returns {Array|Object}
 */
function ruleChange(rules, type) {
  // 防止void 0、null、0、''、NaN情况
  if (!rules) {
    return;
  }
  var selfRules = rules;
  if (type === "formItem" && _lodash2.default.isString(rules)) {
    selfRules = ruleStr2Obj(rules);
  }
  if (type === "form") {
    selfRules = {};
    for (var key in rules) {
      var item = rules[key];
      selfRules[key] = _lodash2.default.isString(item) ? ruleStr2Obj(item) : item;
    }
  }
  return selfRules;
}