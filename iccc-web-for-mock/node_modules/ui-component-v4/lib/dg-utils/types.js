'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * @Author: lutz
 * @Date: 2019-07-02 13:21:30
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-04 14:25:16
 */

var toStr = exports.toStr = Object.prototype.toString;
var hasOwn = exports.hasOwn = Object.prototype.hasOwnProperty;

// Null、Undefined、Boolean、String、Number、Object、Symbol
var isNull = exports.isNull = function isNull(v) {
    return v === null;
};
var isUndefined = exports.isUndefined = function isUndefined(v) {
    return v === void 0;
};
var isBoolean = exports.isBoolean = function isBoolean(v) {
    return toStr.call(v) === '[object Boolean]';
};
var isString = exports.isString = function isString(v) {
    return toStr.call(v) === '[object String]';
};
var isNumber = exports.isNumber = function isNumber(v) {
    return toStr.call(v) === '[object Number]';
};
var isObject = exports.isObject = function isObject(v) {
    return toStr.call(v) === '[object Object]';
};
var isSymbol = exports.isSymbol = function isSymbol(v) {
    return toStr.call(v) === '[object Symbol]';
};

// ELEMENT
var isHtmlElement = exports.isHtmlElement = function isHtmlElement(v) {
    return v && v.nodeType === Node.ELEMENT_NODE;
};
var isVNode = exports.isVNode = function isVNode(v) {
    return v !== null && (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && hasOwn.call(v, 'componentOptions');
};

// RegExp、Function、Array
var isRegExp = exports.isRegExp = function isRegExp(v) {
    return toStr.call(v) === '[object RegExp]';
};
var isFunction = exports.isFunction = function isFunction(v) {
    return toStr.call(v) === '[object Function]';
};
var isArray = exports.isArray = Array.isArray || function (v) {
    return toStr.call(v) === '[object Array]';
};

// Empty
var isNil = exports.isNil = function isNil(v) {
    return v === null || v === void 0;
};
var isEmpty = exports.isEmpty = function isEmpty(v) {
    return v === null || v === void 0 || v === '';
};

/*
    // 判断整型
    isInteger(1.00) // true
    // 判断浮点型
    const patter = /^(-?\d+)(\.\d+)?$/; // float RegExp
    isFloat(1.00) // false
    // 判断能否转换成数值类型
    isNumberic('string') // false
    isNumberic('0.00') // true
*/
// Number
var isInteger = exports.isInteger = Number.isInteger || function (v) {
    return typeof v === 'number' && isFinite(v) && Math.floor(v) === v;
};
var isFloat = exports.isFloat = function isFloat(v) {
    return typeof v === 'number' && v != parseInt(v);
};
var isNumberic = exports.isNumberic = function isNumberic(v) {
    return !isNaN(parseFloat(v)) && isFinite(v);
};

// Date
var isDate = exports.isDate = function isDate(v) {
    return toStr.call(v) === '[object Date]';
};

// Object
var hasProp = exports.hasProp = function hasProp(obj, prop) {
    return hasOwn.call(obj, prop);
};
// 是否引用类型
var isCiteType = exports.isCiteType = function isCiteType(v) {
    return v != null && ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' || typeof v === 'function');
};

// Funciton
var isNative = exports.isNative = function isNative(v) {
    return typeof v === 'function' && /native code/.test(v.toString());
};

// ObjectLike
var isObjectLike = exports.isObjectLike = function isObjectLike(v) {
    return v != null && (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object';
};