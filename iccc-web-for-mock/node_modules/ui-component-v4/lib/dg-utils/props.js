'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.isEmptyElement = isEmptyElement;
exports.getEvent = getEvent;
/*
 * @Author: lutz
 * @Date: 2019-06-17 16:06:10
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-02 15:49:50
 */

/**
 * 判断组件中props中是否有指定的属性
 * @param {Vnode} instance vNode
 * @param {String|Number} prop 属性名称
 * @return {Boolean}
 */
var hasProp = exports.hasProp = function hasProp(instance, prop) {
    var _instance$$options = instance.$options;
    _instance$$options = _instance$$options === undefined ? {} : _instance$$options;
    var _instance$$options$pr = _instance$$options.propsData,
        propsData = _instance$$options$pr === undefined ? {} : _instance$$options$pr;

    return prop in propsData;
};

/**
 * 过滤props中的undefined
 * @param {Object} props $props
 * @param {Object} propsData $options.propsData
 * @return {Object}
 */
var filterProps = exports.filterProps = function filterProps(props) {
    var propsData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var res = {};
    Object.keys(props).forEach(function (k) {
        if (k in propsData || props[k] !== void 0) {
            res[k] = props[k];
        }
    });
    return res;
};

/**
 * 组件slot中是否有指定的属性
 * @param {Vnode} slot $slot
 * @param {string|number} prop 属性名称
 * @return {boolean}
 */
var slotHasProp = exports.slotHasProp = function slotHasProp(slot, prop) {
    var _ref = slot.componentOptions || {},
        _ref$propsData = _ref.propsData,
        propsData = _ref$propsData === undefined ? {} : _ref$propsData;

    return prop in propsData;
};

/**
 * 是否为空组件
 * @param {Vnode} c vNode
 * @return {boolean}
 */
function isEmptyElement(c) {
    return !(c.tag || c.text && c.text.trim() !== '');
}

/**
 * 获取所有的子孩子节点
 * @param {Vnode} ele vNode
 * @returns {array} vnode
 */
var getAllChildren = exports.getAllChildren = function getAllChildren(ele) {
    var componentOptions = (ele.$vnode ? ele.$vnode.componentOptions : ele.componentOptions) || {};
    return ele.children || componentOptions.children || [];
};

/**
 * 获取组件$slot
 * @param {Vnode} ele Vnode
 * @returns {Object} $slot
 */
var getSlots = exports.getSlots = function getSlots(ele) {
    var children = getAllChildren(ele);
    var slots = {};
    children.forEach(function (child) {
        if (!isEmptyElement(child)) {
            var name = child.data && child.data.slot || 'default';
            slots[name] = slots[name] || [];
            slots[name].push(child);
        }
    });
    return slots;
};

/**
 * 获取$slot中的options
 * @param {Vnode} ele vNode
 * @returns {Object}
 */
var getSlotOptions = exports.getSlotOptions = function getSlotOptions(ele) {
    // 函数式组件
    if (ele.fnOptions) {
        return ele.fnOptions;
    }
    var componentOptions = ele.$vnode ? ele.$vnode.componentOptions : ele.componentOptions;
    return componentOptions ? componentOptions.Ctor.options || {} : {};
};

function getType(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
}

/**
 * 获取组件中的$options.propsData
 * @param {Vnode} instance vNode
 * @returns {Object}
 */
var getOptionProps = exports.getOptionProps = function getOptionProps(instance) {
    if (instance.componentOptions) {
        var componentOptions = instance.componentOptions;
        var _componentOptions$pro = componentOptions.propsData,
            propsData = _componentOptions$pro === undefined ? {} : _componentOptions$pro,
            _componentOptions$Cto = componentOptions.Ctor,
            Ctor = _componentOptions$Cto === undefined ? {} : _componentOptions$Cto;

        var props = (Ctor.options || {}).props || {};
        var res = {};
        for (var _iterator = Object.entries(props), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref3 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref3 = _i.value;
            }

            var _ref2 = _ref3;
            var k = _ref2[0];
            var v = _ref2[1];

            var def = v.default;
            if (def !== undefined) {
                res[k] = typeof def === 'function' && getType(v.type) !== 'Function' ? def.call(instance) : def;
            }
        }
        return _extends({}, res, propsData);
    }
    var _instance$$options2 = instance.$options,
        $options = _instance$$options2 === undefined ? {} : _instance$$options2,
        _instance$$props = instance.$props,
        $props = _instance$$props === undefined ? {} : _instance$$props;

    return filterProps($props, $options.propsData);
};

/**
 * 获取节点事件 $listeners
 * @param {Vnode} node
 * @returns {Object}
 */
function getEvent(node) {
    var events = {};
    if (node.componentOptions && node.componentOptions.listeners) {
        events = node.componentOptions.listeners;
    } else if (node.data && node.data.on) {
        events = node.data.on;
    }
    return _extends({}, events);
}