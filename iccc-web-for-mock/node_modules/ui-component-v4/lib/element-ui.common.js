module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("jquery");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Modified from https://github.com/taylorhakes/fecha
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Taylor Hakes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *     The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*eslint-disable*/
// 把 YYYY-MM-DD 改成了 yyyy-MM-dd
(function (main) {
  'use strict';

  /**
   * Parse or format dates
   * @class fecha
   */

  var fecha = {};
  var token = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
  var twoDigits = '\\d\\d?';
  var threeDigits = '\\d{3}';
  var fourDigits = '\\d{4}';
  var word = '[^\\s]+';
  var literal = /\[([^]*?)\]/gm;
  var noop = function noop() {};

  function regexEscape(str) {
    return str.replace(/[|\\{()[^$+*?.-]/g, '\\$&');
  }

  function shorten(arr, sLen) {
    var newArr = [];
    for (var i = 0, len = arr.length; i < len; i++) {
      newArr.push(arr[i].substr(0, sLen));
    }
    return newArr;
  }

  function monthUpdate(arrName) {
    return function (d, v, i18n) {
      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
      if (~index) {
        d.month = index;
      }
    };
  }

  function pad(val, len) {
    val = String(val);
    len = len || 2;
    while (val.length < len) {
      val = '0' + val;
    }
    return val;
  }

  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var monthNamesShort = shorten(monthNames, 3);
  var dayNamesShort = shorten(dayNames, 3);
  fecha.i18n = {
    dayNamesShort: dayNamesShort,
    dayNames: dayNames,
    monthNamesShort: monthNamesShort,
    monthNames: monthNames,
    amPm: ['am', 'pm'],
    DoFn: function DoFn(D) {
      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
    }
  };

  var formatFlags = {
    D: function D(dateObj) {
      return dateObj.getDay();
    },
    DD: function DD(dateObj) {
      return pad(dateObj.getDay());
    },
    Do: function Do(dateObj, i18n) {
      return i18n.DoFn(dateObj.getDate());
    },
    d: function d(dateObj) {
      return dateObj.getDate();
    },
    dd: function dd(dateObj) {
      return pad(dateObj.getDate());
    },
    ddd: function ddd(dateObj, i18n) {
      return i18n.dayNamesShort[dateObj.getDay()];
    },
    dddd: function dddd(dateObj, i18n) {
      return i18n.dayNames[dateObj.getDay()];
    },
    M: function M(dateObj) {
      return dateObj.getMonth() + 1;
    },
    MM: function MM(dateObj) {
      return pad(dateObj.getMonth() + 1);
    },
    MMM: function MMM(dateObj, i18n) {
      return i18n.monthNamesShort[dateObj.getMonth()];
    },
    MMMM: function MMMM(dateObj, i18n) {
      return i18n.monthNames[dateObj.getMonth()];
    },
    yy: function yy(dateObj) {
      return pad(String(dateObj.getFullYear()), 4).substr(2);
    },
    yyyy: function yyyy(dateObj) {
      return pad(dateObj.getFullYear(), 4);
    },
    h: function h(dateObj) {
      return dateObj.getHours() % 12 || 12;
    },
    hh: function hh(dateObj) {
      return pad(dateObj.getHours() % 12 || 12);
    },
    H: function H(dateObj) {
      return dateObj.getHours();
    },
    HH: function HH(dateObj) {
      return pad(dateObj.getHours());
    },
    m: function m(dateObj) {
      return dateObj.getMinutes();
    },
    mm: function mm(dateObj) {
      return pad(dateObj.getMinutes());
    },
    s: function s(dateObj) {
      return dateObj.getSeconds();
    },
    ss: function ss(dateObj) {
      return pad(dateObj.getSeconds());
    },
    S: function S(dateObj) {
      return Math.round(dateObj.getMilliseconds() / 100);
    },
    SS: function SS(dateObj) {
      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
    },
    SSS: function SSS(dateObj) {
      return pad(dateObj.getMilliseconds(), 3);
    },
    a: function a(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
    },
    A: function A(dateObj, i18n) {
      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
    },
    ZZ: function ZZ(dateObj) {
      var o = dateObj.getTimezoneOffset();
      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
    }
  };

  var parseFlags = {
    d: [twoDigits, function (d, v) {
      d.day = v;
    }],
    Do: [twoDigits + word, function (d, v) {
      d.day = parseInt(v, 10);
    }],
    M: [twoDigits, function (d, v) {
      d.month = v - 1;
    }],
    yy: [twoDigits, function (d, v) {
      var da = new Date(),
          cent = +('' + da.getFullYear()).substr(0, 2);
      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
    }],
    h: [twoDigits, function (d, v) {
      d.hour = v;
    }],
    m: [twoDigits, function (d, v) {
      d.minute = v;
    }],
    s: [twoDigits, function (d, v) {
      d.second = v;
    }],
    yyyy: [fourDigits, function (d, v) {
      d.year = v;
    }],
    S: ['\\d', function (d, v) {
      d.millisecond = v * 100;
    }],
    SS: ['\\d{2}', function (d, v) {
      d.millisecond = v * 10;
    }],
    SSS: [threeDigits, function (d, v) {
      d.millisecond = v;
    }],
    D: [twoDigits, noop],
    ddd: [word, noop],
    MMM: [word, monthUpdate('monthNamesShort')],
    MMMM: [word, monthUpdate('monthNames')],
    a: [word, function (d, v, i18n) {
      var val = v.toLowerCase();
      if (val === i18n.amPm[0]) {
        d.isPm = false;
      } else if (val === i18n.amPm[1]) {
        d.isPm = true;
      }
    }],
    ZZ: ['[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z', function (d, v) {
      var parts = (v + '').match(/([+-]|\d\d)/gi),
          minutes;

      if (parts) {
        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
      }
    }]
  };
  parseFlags.dd = parseFlags.d;
  parseFlags.dddd = parseFlags.ddd;
  parseFlags.DD = parseFlags.D;
  parseFlags.mm = parseFlags.m;
  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
  parseFlags.MM = parseFlags.M;
  parseFlags.ss = parseFlags.s;
  parseFlags.A = parseFlags.a;

  // Some common format strings
  fecha.masks = {
    default: 'ddd MMM dd yyyy HH:mm:ss',
    shortDate: 'M/D/yy',
    mediumDate: 'MMM d, yyyy',
    longDate: 'MMMM d, yyyy',
    fullDate: 'dddd, MMMM d, yyyy',
    shortTime: 'HH:mm',
    mediumTime: 'HH:mm:ss',
    longTime: 'HH:mm:ss.SSS'
  };

  /***
   * Format a date
   * @method format
   * @param {Date|number} dateObj
   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
   */
  fecha.format = function (dateObj, mask, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof dateObj === 'number') {
      dateObj = new Date(dateObj);
    }

    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
      throw new Error('Invalid Date in fecha.format');
    }

    mask = fecha.masks[mask] || mask || fecha.masks['default'];

    var literals = [];

    // Make literals inactive by replacing them with ??
    mask = mask.replace(literal, function ($0, $1) {
      literals.push($1);
      return '@@@';
    });
    // Apply formatting rules
    mask = mask.replace(token, function ($0) {
      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
    });
    // Inline literal values back into the formatted value
    return mask.replace(/@@@/g, function () {
      return literals.shift();
    });
  };

  /**
   * Parse a date string into an object, changes - into /
   * @method parse
   * @param {string} dateStr Date string
   * @param {string} format Date parse format
   * @returns {Date|boolean}
   */
  fecha.parse = function (dateStr, format, i18nSettings) {
    var i18n = i18nSettings || fecha.i18n;

    if (typeof format !== 'string') {
      throw new Error('Invalid format in fecha.parse');
    }

    format = fecha.masks[format] || format;

    // Avoid regular expression denial of service, fail early for really long strings
    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
    if (dateStr.length > 1000) {
      return null;
    }

    var dateInfo = {};
    var parseInfo = [];
    var literals = [];
    format = format.replace(literal, function ($0, $1) {
      literals.push($1);
      return '@@@';
    });
    var newFormat = regexEscape(format).replace(token, function ($0) {
      if (parseFlags[$0]) {
        var info = parseFlags[$0];
        parseInfo.push(info[1]);
        return '(' + info[0] + ')';
      }

      return $0;
    });
    newFormat = newFormat.replace(/@@@/g, function () {
      return literals.shift();
    });
    var matches = dateStr.match(new RegExp(newFormat, 'i'));
    if (!matches) {
      return null;
    }

    for (var i = 1; i < matches.length; i++) {
      parseInfo[i - 1](dateInfo, matches[i], i18n);
    }

    var today = new Date();
    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
      dateInfo.hour = +dateInfo.hour + 12;
    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
      dateInfo.hour = 0;
    }

    var date;
    if (dateInfo.timezoneOffset != null) {
      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
    } else {
      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
    }
    return date;
  };

  /* istanbul ignore next */
  if ( true && module.exports) {
    module.exports = fecha;
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return fecha;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/popup/popup-manager");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("throttle-debounce/debounce");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("async-validator");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("viewerjs");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("xe-utils");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

this["pinyin"] = /******/function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/var installedModules = {}; // The require function
    /******/
    /******/ /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports; // Create a new module (and put it into the cache)
        /******/
        /******/ /******/var module = installedModules[moduleId] = {
            /******/exports: {},
            /******/id: moduleId,
            /******/loaded: false
            /******/
        }; // Execute the module function
        /******/
        /******/ /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded
        /******/
        /******/ /******/module.loaded = true; // Return the exports of the module
        /******/
        /******/ /******/return module.exports;
        /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/__webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/__webpack_require__.c = installedModules; // __webpack_public_path__
    /******/
    /******/ /******/__webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/return __webpack_require__(0);
    /******/
}(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    module.exports = __webpack_require__(5);

    /***/
},
/* 1 */
/***/function (module, exports) {
    /* eslint-disable no-unused-vars */
    "use strict";

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
        }

        return Object(val);
    }

    module.exports = Object.assign || function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }

            if (Object.getOwnPropertySymbols) {
                symbols = Object.getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }

        return to;
    };

    /***/
},
/* 2 */
/***/function (module, exports) {
    "use strict";

    module.exports = {
        èr: "二贰",
        shí: "十时实蚀",
        yǐ: "乙已以蚁倚",
        yī: "一衣医依伊揖壹",
        "chǎng,ān,hàn": "厂",
        "dīng,zhēng": "丁",
        qī: "七戚欺漆柒凄嘁",
        "bǔ,bo": "卜",
        rén: "人仁",
        rù: "入褥",
        jiǔ: "九久酒玖灸韭",
        ér: "儿而",
        bā: "八巴疤叭芭捌笆",
        "jǐ,jī": "几",
        "le,liǎo": "了",
        lì: "力历厉立励利例栗粒吏沥荔俐莉砾雳痢",
        dāo: "刀",
        nǎi: "乃奶",
        sān: "三叁",
        yòu: "又右幼诱佑",
        yú: "于余鱼娱渔榆愚隅逾舆",
        shì: "士示世市式势事侍饰试视柿是适室逝释誓拭恃嗜",
        "gān,gàn": "干",
        gōng: "工弓公功攻宫恭躬",
        kuī: "亏盔窥",
        tǔ: "土",
        cùn: "寸",
        "dà,dài,tài": "大",
        cái: "才材财裁",
        xià: "下夏",
        zhàng: "丈仗帐胀障杖账",
        "yǔ,yù,yú": "与",
        "shàng,shǎng": "上",
        "wàn,mò": "万",
        kǒu: "口",
        xiǎo: "小晓",
        jīn: "巾斤今金津筋襟",
        shān: "山删衫珊",
        qiān: "千迁牵谦签",
        qǐ: "乞企启起",
        chuān: "川穿",
        "gè,gě": "个各",
        sháo: "勺芍",
        yì: "亿义艺忆议亦异役译易疫益谊意毅翼屹抑邑绎奕逸肄溢",
        jí: "及吉级极即急疾集籍棘辑嫉",
        fán: "凡烦矾樊",
        xī: "夕西吸希析牺息悉惜稀锡溪熄膝昔晰犀熙嬉蟋",
        wán: "丸完玩顽",
        "me,mó,ma,yāo": "么",
        "guǎng,ān": "广",
        "wáng,wú": "亡",
        mén: "门们",
        shī: "尸失师诗狮施湿虱",
        zhī: "之支汁芝肢脂蜘",
        jǐ: "己挤脊",
        zǐ: "子紫姊籽滓",
        wèi: "卫未位味畏胃喂慰谓猬蔚魏",
        yě: "也冶野",
        "nǚ,rǔ": "女",
        rèn: "刃认韧纫",
        fēi: "飞非啡",
        xí: "习席袭媳",
        mǎ: "马码玛",
        "chā,chá,chǎ": "叉",
        fēng: "丰封疯峰锋蜂枫",
        xiāng: "乡香箱厢湘镶",
        jǐng: "井警阱",
        "wáng,wàng": "王",
        kāi: "开揩",
        tiān: "天添",
        wú: "无吴芜梧蜈",
        "fū,fú": "夫",
        zhuān: "专砖",
        yuán: "元园原圆援缘源袁猿辕",
        yún: "云匀耘",
        "zhā,zā,zhá": "扎",
        mù: "木目牧墓幕暮慕沐募睦穆",
        wǔ: "五午伍武侮舞捂鹉",
        tīng: "厅听",
        "bù,fǒu": "不",
        "qū,ōu": "区",
        quǎn: "犬",
        tài: "太态泰汰",
        yǒu: "友",
        "chē,jū": "车",
        pǐ: "匹",
        yóu: "尤由邮犹油游",
        jù: "巨拒具俱剧距惧锯聚炬",
        yá: "牙芽崖蚜涯衙",
        bǐ: "比彼笔鄙匕秕",
        jiē: "皆阶接街秸",
        hù: "互户护沪",
        "qiè,qiē": "切",
        "wǎ,wà": "瓦",
        zhǐ: "止旨址纸指趾",
        "tún,zhūn": "屯",
        "shǎo,shào": "少",
        rì: "日",
        "zhōng,zhòng": "中",
        gāng: "冈刚纲缸肛",
        "nèi,nà": "内",
        bèi: "贝备倍辈狈惫焙",
        shuǐ: "水",
        "jiàn,xiàn": "见",
        niú: "牛",
        shǒu: "手守首",
        máo: "毛矛茅锚",
        qì: "气弃汽器迄泣",
        shēng: "升生声牲笙甥",
        "cháng,zhǎng": "长",
        "shén,shí": "什",
        "piàn,piān": "片",
        "pú,pū": "仆",
        "huà,huā": "化",
        bì: "币必毕闭毙碧蔽弊避壁庇蓖痹璧",
        "chóu,qiú": "仇",
        "zhuǎ,zhǎo": "爪",
        "jǐn,jìn": "仅",
        réng: "仍",
        "fù,fǔ": "父",
        "cóng,zòng": "从",
        fǎn: "反返",
        jiè: "介戒届界借诫",
        xiōng: "凶兄胸匈汹",
        "fēn,fèn": "分",
        fá: "乏伐罚阀筏",
        cāng: "仓苍舱沧",
        yuè: "月阅悦跃越岳粤",
        "shì,zhī": "氏",
        wù: "勿务物误悟雾坞晤",
        qiàn: "欠歉",
        "fēng,fěng": "风",
        dān: "丹耽",
        wū: "乌污呜屋巫诬",
        fèng: "凤奉",
        "gōu,gòu": "勾",
        wén: "文闻蚊",
        "liù,lù": "六",
        huǒ: "火伙",
        fāng: "方芳",
        "dǒu,dòu": "斗",
        "wèi,wéi": "为",
        dìng: "订定锭",
        jì: "计记技忌际季剂迹既继寄绩妓荠寂鲫冀",
        xīn: "心辛欣新薪锌",
        "chǐ,chě": "尺",
        yǐn: "引饮蚓瘾",
        chǒu: "丑",
        kǒng: "孔恐",
        duì: "队对",
        bàn: "办半扮伴瓣绊",
        "yǔ,yú": "予",
        yǔn: "允陨",
        quàn: "劝",
        shū: "书叔殊梳舒疏输蔬抒枢淑",
        shuāng: "双霜",
        yù: "玉育狱浴预域欲遇御裕愈誉芋郁喻寓豫",
        huàn: "幻换唤患宦涣焕痪",
        kān: "刊堪勘",
        mò: "末沫漠墨默茉陌寞",
        jī: "击饥圾机肌鸡积基激讥叽唧畸箕",
        "dǎ,dá": "打",
        qiǎo: "巧",
        "zhèng,zhēng": "正症挣",
        pū: "扑",
        "bā,pá": "扒",
        gān: "甘肝竿柑",
        qù: "去",
        rēng: "扔",
        gǔ: "古谷股鼓",
        běn: "本",
        "jié,jiē": "节结",
        "shù,shú,zhú": "术",
        bǐng: "丙柄饼秉禀",
        "kě,kè": "可",
        zuǒ: "左",
        bù: "布步怖部埠",
        "shí,dàn": "石",
        lóng: "龙聋隆咙胧窿",
        yà: "轧亚讶",
        miè: "灭蔑",
        píng: "平评凭瓶萍坪",
        dōng: "东冬",
        "kǎ,qiǎ": "卡",
        "běi,bèi": "北",
        yè: "业页夜液谒腋",
        jiù: "旧救就舅臼疚",
        shuài: "帅蟀",
        guī: "归规闺硅瑰",
        "zhàn,zhān": "占",
        dàn: "旦但诞淡蛋氮",
        "qiě,jū": "且",
        "yè,xié": "叶",
        jiǎ: "甲钾",
        dīng: "叮盯",
        shēn: "申伸身深呻绅",
        "hào,háo": "号",
        diàn: "电店垫殿玷淀惦奠",
        tián: "田甜恬",
        shǐ: "史使始驶矢屎",
        "zhī,zhǐ": "只",
        yāng: "央殃秧鸯",
        diāo: "叼雕刁碉",
        jiào: "叫轿较窖酵",
        lìng: "另",
        "dāo,tāo": "叨",
        sì: "四寺饲肆",
        tàn: "叹炭探碳",
        qiū: "丘秋蚯",
        hé: "禾河荷盒",
        fù: "付负妇附咐赴复傅富腹覆赋缚",
        dài: "代带贷怠袋逮戴",
        xiān: "仙先掀锨",
        yí: "仪宜姨移遗夷胰",
        bái: "白",
        "zǎi,zǐ,zī": "仔",
        chì: "斥赤翅",
        tā: "他它塌",
        guā: "瓜刮",
        hū: "乎呼忽",
        cóng: "丛",
        "lìng,líng,lǐng": "令",
        yòng: "用",
        shuǎi: "甩",
        yìn: "印",
        "lè,yuè": "乐",
        "jù,gōu": "句",
        cōng: "匆葱聪囱",
        fàn: "犯饭泛范贩",
        cè: "册厕测策",
        wài: "外",
        "chù,chǔ": "处",
        niǎo: "鸟",
        bāo: "包胞苞褒",
        zhǔ: "主煮嘱拄",
        shǎn: "闪陕",
        lán: "兰拦栏蓝篮澜",
        "tóu,tou": "头",
        huì: "汇绘贿惠慧讳诲晦秽",
        hàn: "汉旱捍悍焊撼翰憾",
        tǎo: "讨",
        xué: "穴学",
        xiě: "写",
        "níng,nìng,zhù": "宁",
        ràng: "让",
        lǐ: "礼李里理鲤",
        xùn: "训讯迅汛驯逊殉",
        yǒng: "永咏泳勇蛹踊",
        mín: "民",
        chū: "出初",
        ní: "尼",
        sī: "司丝私斯撕嘶",
        liáo: "辽疗僚聊寥嘹缭",
        jiā: "加佳嘉枷",
        nú: "奴",
        "zhào,shào": "召",
        biān: "边编鞭蝙",
        pí: "皮疲脾啤",
        yùn: "孕运韵酝蕴",
        "fā,fà": "发",
        shèng: "圣胜剩",
        "tái,tāi": "台苔",
        jiū: "纠究揪鸠",
        mǔ: "母亩牡拇姆",
        "káng,gāng": "扛",
        xíng: "刑形型邢",
        dòng: "动冻栋洞",
        kǎo: "考烤拷",
        kòu: "扣寇",
        tuō: "托拖脱",
        lǎo: "老",
        gǒng: "巩汞拱",
        zhí: "执直侄值职植",
        kuò: "扩阔廓",
        yáng: "扬阳杨洋",
        "dì,de": "地",
        "sǎo,sào": "扫",
        "chǎng,cháng": "场",
        ěr: "耳尔饵",
        máng: "芒忙盲茫",
        xiǔ: "朽",
        "pǔ,pò,pō,piáo": "朴",
        quán: "权全泉拳痊",
        "guò,guo,guō": "过",
        chén: "臣尘辰沉陈晨忱",
        zài: "再在",
        xié: "协胁斜携鞋谐",
        "yā,yà": "压",
        yàn: "厌艳宴验雁焰砚唁谚堰",
        "yǒu,yòu": "有",
        cún: "存",
        bǎi: "百摆",
        "kuā,kuà": "夸",
        jiàng: "匠酱",
        duó: "夺踱",
        huī: "灰挥恢辉徽",
        dá: "达",
        sǐ: "死",
        liè: "列劣烈猎",
        guǐ: "轨鬼诡",
        "xié,yá,yé,yú,xú": "邪",
        "jiá,jiā,gā,xiá": "夹",
        chéng: "成呈诚承城程惩橙",
        mài: "迈麦卖",
        "huà,huá": "划",
        zhì: "至志帜制质治致秩智置挚掷窒滞稚",
        cǐ: "此",
        zhēn: "贞针侦珍真斟榛",
        jiān: "尖奸歼坚肩艰兼煎",
        guāng: "光",
        "dāng,dàng": "当",
        zǎo: "早枣澡蚤藻",
        "tù,tǔ": "吐",
        "xià,hè": "吓",
        chóng: "虫崇",
        tuán: "团",
        "tóng,tòng": "同",
        "qū,qǔ": "曲",
        diào: "吊钓掉",
        yīn: "因阴音姻茵",
        chī: "吃嗤痴",
        "ma,má,mǎ": "吗",
        yǔ: "屿宇羽",
        fān: "帆翻",
        huí: "回茴蛔",
        "qǐ,kǎi": "岂",
        zé: "则责",
        suì: "岁碎穗祟遂隧",
        ròu: "肉",
        "zhū,shú": "朱",
        wǎng: "网往枉",
        nián: "年",
        diū: "丢",
        shé: "舌",
        zhú: "竹逐烛",
        qiáo: "乔侨桥瞧荞憔",
        wěi: "伟伪苇纬萎",
        "chuán,zhuàn": "传",
        pāng: "乓",
        pīng: "乒",
        "xiū,xǔ": "休",
        fú: "伏扶俘浮符幅福凫芙袱辐蝠",
        yōu: "优忧悠幽",
        yán: "延严言岩炎沿盐颜阎蜒檐",
        jiàn: "件建荐贱剑健舰践鉴键箭涧",
        "rèn,rén": "任",
        "huá,huà,huā": "华",
        "jià,jiè,jie": "价",
        shāng: "伤商",
        "fèn,bīn": "份",
        fǎng: "仿访纺",
        "yǎng,áng": "仰",
        zì: "自字",
        "xiě,xuè": "血",
        xiàng: "向项象像橡",
        "sì,shì": "似",
        hòu: "后厚候",
        zhōu: "舟州周洲",
        "háng,xíng": "行",
        "huì,kuài": "会",
        shā: "杀纱杉砂",
        "hé,gě": "合",
        zhào: "兆赵照罩",
        zhòng: "众仲",
        yé: "爷",
        sǎn: "伞",
        "chuàng,chuāng": "创",
        duǒ: "朵躲",
        wēi: "危威微偎薇巍",
        xún: "旬寻巡询循",
        zá: "杂砸",
        míng: "名明鸣铭螟",
        duō: "多哆",
        zhēng: "争征睁筝蒸怔狰",
        sè: "色涩瑟",
        zhuàng: "壮状撞",
        "chōng,chòng": "冲",
        bīng: "冰兵",
        zhuāng: "庄装妆桩",
        qìng: "庆",
        liú: "刘留流榴琉硫瘤",
        "qí,jì,zī,zhāi": "齐",
        cì: "次赐",
        jiāo: "交郊浇娇骄胶椒焦蕉礁",
        chǎn: "产铲阐",
        wàng: "妄忘旺望",
        chōng: "充",
        wèn: "问",
        chuǎng: "闯",
        "yáng,xiáng": "羊",
        "bìng,bīng": "并",
        dēng: "灯登蹬",
        mǐ: "米",
        guān: "关官棺",
        "hàn,hán": "汗",
        jué: "决绝掘诀爵",
        jiāng: "江姜僵缰",
        "tāng,shāng": "汤",
        chí: "池驰迟持弛",
        "xīng,xìng": "兴",
        zhái: "宅",
        ān: "安氨庵鞍",
        jiǎng: "讲奖桨蒋",
        jūn: "军均君钧",
        "xǔ,hǔ": "许",
        fěng: "讽",
        "lùn,lún": "论",
        nóng: "农浓脓",
        shè: "设社舍涉赦",
        "nà,nǎ,nèi,nā": "那",
        "jìn,jǐn": "尽",
        dǎo: "导岛蹈捣祷",
        "sūn,xùn": "孙",
        zhèn: "阵振震镇",
        shōu: "收",
        fáng: "防妨房肪",
        rú: "如儒蠕",
        mā: "妈",
        "xì,hū": "戏",
        "hǎo,hào": "好",
        "tā,jiě": "她",
        "guān,guàn": "观冠",
        huān: "欢",
        "hóng,gōng": "红",
        mǎi: "买",
        "xiān,qiàn": "纤",
        "jì,jǐ": "纪济",
        "yuē,yāo": "约",
        shòu: "寿受授售兽瘦",
        "nòng,lòng": "弄",
        jìn: "进近晋浸",
        wéi: "违围唯维桅",
        "yuǎn,yuàn": "远",
        tūn: "吞",
        tán: "坛谈痰昙谭潭檀",
        fǔ: "抚斧府俯辅腐甫脯",
        "huài,pēi,pī,péi": "坏",
        rǎo: "扰",
        pī: "批披坯霹",
        zhǎo: "找沼",
        chě: "扯",
        zǒu: "走",
        chāo: "抄钞超",
        bà: "坝爸霸",
        gòng: "贡",
        "zhé,shé,zhē": "折",
        "qiǎng,qiāng,chēng": "抢",
        zhuā: "抓",
        xiào: "孝笑效哮啸",
        pāo: "抛",
        tóu: "投",
        kàng: "抗炕",
        fén: "坟焚",
        kēng: "坑",
        dǒu: "抖陡蚪",
        "ké,qiào": "壳",
        "fāng,fáng": "坊",
        niǔ: "扭纽钮",
        kuài: "块快筷",
        "bǎ,bà": "把",
        bào: "报抱爆豹",
        jié: "劫杰洁捷截竭",
        què: "却确鹊",
        huā: "花",
        fēn: "芬吩纷氛",
        qín: "芹琴禽勤秦擒",
        láo: "劳牢",
        lú: "芦炉卢庐颅",
        "gān,gǎn": "杆",
        kè: "克刻客课",
        "sū,sù": "苏",
        dù: "杜渡妒镀",
        "gàng,gāng": "杠",
        cūn: "村",
        qiú: "求球囚",
        xìng: "杏幸性姓",
        "gèng,gēng": "更",
        liǎng: "两",
        "lì,lí": "丽",
        shù: "束述树竖恕庶墅漱",
        dòu: "豆逗痘",
        "hái,huán": "还",
        "fǒu,pǐ": "否",
        lái: "来莱",
        lián: "连怜帘莲联廉镰",
        "xiàn,xuán": "县",
        "zhù,chú": "助",
        dāi: "呆",
        kuàng: "旷况矿框眶",
        "ya,yā": "呀",
        zú: "足族",
        dūn: "吨蹲墩",
        kùn: "困",
        nán: "男",
        "chǎo,chāo": "吵",
        "yuán,yún,yùn": "员",
        chuàn: "串",
        chuī: "吹炊",
        "ba,bā": "吧",
        hǒu: "吼",
        gǎng: "岗",
        "bié,biè": "别",
        "dīng,dìng": "钉",
        gào: "告",
        wǒ: "我",
        luàn: "乱",
        tū: "秃突凸",
        xiù: "秀袖绣锈嗅",
        "gū,gù": "估",
        měi: "每美",
        "hé,hē,hè": "何",
        "tǐ,tī,bèn": "体",
        "bó,bǎi,bà": "伯",
        zuò: "作坐座做",
        líng: "伶灵铃陵零龄玲凌菱蛉翎",
        dī: "低堤滴",
        "yòng,yōng": "佣",
        nǐ: "你拟",
        zhù: "住注驻柱祝铸贮蛀",
        zào: "皂灶造燥躁噪",
        "fó,fú,bì,bó": "佛",
        chè: "彻撤澈",
        tuǒ: "妥椭",
        lín: "邻林临琳磷鳞",
        hán: "含寒函涵韩",
        chà: "岔衩",
        cháng: "肠尝常偿",
        "dù,dǔ": "肚",
        "guī,jūn,qiū": "龟",
        miǎn: "免勉娩冕缅",
        "jiǎo,jué": "角",
        kuáng: "狂",
        "tiáo,tiāo": "条",
        luǎn: "卵",
        yíng: "迎盈营蝇赢荧莹萤",
        "xì,jì": "系",
        chuáng: "床",
        kù: "库裤酷",
        "yìng,yīng": "应",
        lěng: "冷",
        "zhè,zhèi": "这",
        xù: "序叙绪续絮蓄旭恤酗婿",
        xián: "闲贤弦咸衔嫌涎舷",
        "jiān,jiàn": "间监",
        pàn: "判盼叛畔",
        "mēn,mèn": "闷",
        wāng: "汪",
        "dì,tì,tuí": "弟",
        "shā,shà": "沙",
        "shà,shā": "煞",
        càn: "灿",
        wò: "沃卧握",
        "méi,mò": "没",
        gōu: "沟钩",
        "shěn,chén": "沈",
        huái: "怀槐徊淮",
        sòng: "宋送诵颂讼",
        hóng: "宏虹洪鸿",
        qióng: "穷琼",
        zāi: "灾栽",
        liáng: "良梁粮粱",
        zhèng: "证郑政",
        bǔ: "补捕哺",
        sù: "诉肃素速塑粟溯",
        "shí,zhì": "识",
        cí: "词辞慈磁祠瓷雌",
        zhěn: "诊枕疹",
        "niào,suī": "尿",
        céng: "层",
        jú: "局菊橘",
        "wěi,yǐ": "尾",
        zhāng: "张章彰樟",
        gǎi: "改",
        lù: "陆录鹿路赂",
        "ē,ā": "阿",
        zǔ: "阻组祖诅",
        miào: "妙庙",
        yāo: "妖腰邀夭吆",
        nǔ: "努",
        "jìn,jìng": "劲",
        rěn: "忍",
        qū: "驱屈岖蛆躯",
        chún: "纯唇醇",
        nà: "纳钠捺",
        bó: "驳脖博搏膊舶渤",
        "zòng,zǒng": "纵",
        "wén,wèn": "纹",
        lǘ: "驴",
        huán: "环",
        qīng: "青轻倾清蜻氢卿",
        xiàn: "现限线宪陷馅羡献腺",
        biǎo: "表",
        "mǒ,mò,mā": "抹",
        lǒng: "拢垄",
        "dān,dàn,dǎn": "担",
        bá: "拔跋",
        jiǎn: "拣茧俭捡检减剪简柬碱",
        tǎn: "坦毯袒",
        chōu: "抽",
        yā: "押鸦鸭",
        guǎi: "拐",
        pāi: "拍",
        zhě: "者",
        dǐng: "顶鼎",
        yōng: "拥庸",
        "chāi,cā": "拆",
        dǐ: "抵",
        "jū,gōu": "拘",
        lā: "垃",
        "lā,lá": "拉",
        "bàn,pàn": "拌",
        zhāo: "招昭",
        pō: "坡泼颇",
        bō: "拨波玻菠播",
        "zé,zhái": "择",
        tái: "抬",
        "qí,jī": "其奇",
        qǔ: "取娶",
        kǔ: "苦",
        mào: "茂贸帽貌",
        "ruò,rě": "若",
        miáo: "苗描瞄",
        "píng,pēng": "苹",
        yīng: "英樱鹰莺婴缨鹦",
        qié: "茄",
        jīng: "茎京经惊晶睛精荆兢鲸",
        "zhī,qí": "枝",
        bēi: "杯悲碑卑",
        "guì,jǔ": "柜",
        bǎn: "板版",
        sōng: "松",
        qiāng: "枪腔",
        gòu: "构购够垢",
        "sàng,sāng": "丧",
        huà: "画话桦",
        huò: "或货获祸惑霍",
        "cì,cī": "刺",
        "yǔ,yù": "雨语",
        "bēn,bèn": "奔",
        fèn: "奋粪愤忿",
        hōng: "轰烘",
        "qī,qì": "妻",
        ōu: "欧殴鸥",
        qǐng: "顷请",
        "zhuǎn,zhuàn,zhuǎi": "转",
        zhǎn: "斩盏展",
        ruǎn: "软",
        lún: "轮仑伦沦",
        dào: "到盗悼道稻",
        chǐ: "齿耻侈",
        kěn: "肯垦恳啃",
        hǔ: "虎",
        "xiē,suò": "些",
        lǔ: "虏鲁卤",
        shèn: "肾渗慎",
        shàng: "尚",
        guǒ: "果裹",
        kūn: "昆坤",
        guó: "国",
        chāng: "昌猖",
        chàng: "畅唱",
        diǎn: "典点碘",
        gù: "固故顾雇",
        áng: "昂",
        zhōng: "忠终钟盅衷",
        "ne,ní": "呢",
        àn: "岸按案暗",
        "tiě,tiē,tiè,": "帖",
        luó: "罗萝锣箩骡螺逻",
        kǎi: "凯慨",
        "lǐng,líng": "岭",
        bài: "败拜",
        tú: "图徒途涂屠",
        chuí: "垂锤捶",
        "zhī,zhì": "知织",
        guāi: "乖",
        gǎn: "秆赶敢感橄",
        "hé,hè,huó,huò,hú": "和",
        "gòng,gōng": "供共",
        "wěi,wēi": "委",
        "cè,zè,zhāi": "侧",
        pèi: "佩配沛",
        "pò,pǎi": "迫",
        "de,dì,dí": "的",
        pá: "爬",
        suǒ: "所索锁琐",
        jìng: "径竞竟敬静境镜靖",
        mìng: "命",
        "cǎi,cài": "采",
        niàn: "念",
        tān: "贪摊滩瘫",
        rǔ: "乳辱",
        pín: "贫",
        fū: "肤麸孵敷",
        fèi: "肺废沸费吠",
        zhǒng: "肿",
        péng: "朋棚蓬膨硼鹏澎篷",
        "fú,fù": "服",
        féi: "肥",
        hūn: "昏婚荤",
        tù: "兔",
        hú: "狐胡壶湖蝴弧葫",
        gǒu: "狗苟",
        bǎo: "饱宝保",
        xiǎng: "享响想",
        biàn: "变遍辨辩辫",
        "dǐ,de": "底",
        "jìng,chēng": "净",
        fàng: "放",
        nào: "闹",
        zhá: "闸铡",
        "juàn,juǎn": "卷",
        "quàn,xuàn": "券",
        "dān,shàn,chán": "单",
        chǎo: "炒",
        "qiǎn,jiān": "浅",
        fǎ: "法",
        "xiè,yì": "泄",
        lèi: "泪类",
        zhān: "沾粘毡瞻",
        "pō,bó": "泊",
        "pào,pāo": "泡",
        xiè: "泻卸屑械谢懈蟹",
        "ní,nì": "泥",
        "zé,shì": "泽",
        pà: "怕帕",
        guài: "怪",
        zōng: "宗棕踪",
        shěn: "审婶",
        zhòu: "宙昼皱骤咒",
        "kōng,kòng,kǒng": "空",
        "láng,làng": "郎",
        chèn: "衬趁",
        gāi: "该",
        "xiáng,yáng": "详",
        "lì,dài": "隶",
        jū: "居鞠驹",
        "shuā,shuà": "刷",
        mèng: "孟梦",
        gū: "孤姑辜咕沽菇箍",
        "jiàng,xiáng": "降",
        mèi: "妹昧媚",
        jiě: "姐",
        jià: "驾架嫁稼",
        "cān,shēn,cēn,sān": "参",
        liàn: "练炼恋链",
        xì: "细隙",
        shào: "绍哨",
        tuó: "驼驮鸵",
        guàn: "贯惯灌罐",
        zòu: "奏揍",
        chūn: "春椿",
        bāng: "帮邦梆",
        "dú,dài": "毒",
        guà: "挂卦褂",
        kuǎ: "垮",
        "kuà,kū": "挎",
        náo: "挠",
        "dǎng,dàng": "挡",
        shuān: "拴栓",
        tǐng: "挺艇",
        "kuò,guā": "括",
        "shí,shè": "拾",
        "tiāo,tiǎo": "挑",
        wā: "挖蛙洼",
        pīn: "拼",
        "shèn,shén": "甚",
        mǒu: "某",
        nuó: "挪",
        gé: "革阁格隔",
        "xiàng,hàng": "巷",
        cǎo: "草",
        chá: "茶察茬",
        dàng: "荡档",
        huāng: "荒慌",
        róng: "荣绒容熔融茸蓉溶榕",
        "nán,nā": "南",
        biāo: "标彪膘",
        yào: "药耀",
        kū: "枯哭窟",
        "xiāng,xiàng": "相",
        "chá,zhā": "查",
        liǔ: "柳",
        "bǎi,bó,bò": "柏",
        "yào,yāo": "要",
        wāi: "歪",
        "yán,yàn": "研",
        lí: "厘狸离犁梨璃黎漓篱",
        "qì,qiè": "砌",
        miàn: "面",
        kǎn: "砍坎",
        shuǎ: "耍",
        nài: "耐奈",
        cán: "残蚕惭",
        zhàn: "战站栈绽蘸",
        "bèi,bēi": "背",
        lǎn: "览懒揽缆榄",
        "shěng,xǐng": "省",
        "xiāo,xuē": "削",
        zhǎ: "眨",
        "hǒng,hōng,hòng": "哄",
        xiǎn: "显险",
        "mào,mò": "冒",
        "yǎ,yā": "哑",
        yìng: "映硬",
        zuó: "昨",
        xīng: "星腥猩",
        pā: "趴",
        guì: "贵桂跪刽",
        "sī,sāi": "思",
        xiā: "虾瞎",
        "mǎ,mā,mà": "蚂",
        suī: "虽",
        pǐn: "品",
        mà: "骂",
        "huá,huā": "哗",
        "yè,yàn,yān": "咽",
        "zán,zǎ": "咱",
        "hā,hǎ,hà": "哈",
        yǎo: "咬舀",
        "nǎ,něi,na,né": "哪",
        "hāi,ké": "咳",
        xiá: "峡狭霞匣侠暇辖",
        "gǔ,gū": "骨",
        "gāng,gàng": "钢",
        tiē: "贴",
        "yào,yuè": "钥",
        "kàn,kān": "看",
        jǔ: "矩举",
        zěn: "怎",
        xuǎn: "选癣",
        "zhòng,zhǒng,chóng": "种",
        miǎo: "秒渺藐",
        kē: "科棵颗磕蝌",
        "biàn,pián": "便",
        "zhòng,chóng": "重",
        liǎ: "俩",
        duàn: "段断缎锻",
        cù: "促醋簇",
        shùn: "顺瞬",
        xiū: "修羞",
        sú: "俗",
        qīn: "侵钦",
        "xìn,shēn": "信",
        huáng: "皇黄煌凰惶蝗蟥",
        "zhuī,duī": "追",
        jùn: "俊峻骏竣",
        "dài,dāi": "待",
        xū: "须虚需",
        hěn: "很狠",
        dùn: "盾顿钝",
        lǜ: "律虑滤氯",
        pén: "盆",
        "shí,sì,yì": "食",
        dǎn: "胆",
        táo: "逃桃陶萄淘",
        pàng: "胖",
        "mài,mò": "脉",
        dú: "独牍",
        jiǎo: "狡饺绞脚搅",
        yuàn: "怨院愿",
        ráo: "饶",
        wān: "弯湾豌",
        āi: "哀哎埃",
        "jiāng,jiàng": "将浆",
        tíng: "亭庭停蜓廷",
        liàng: "亮谅辆晾",
        "dù,duó": "度",
        chuāng: "疮窗",
        "qīn,qìng": "亲",
        zī: "姿资滋咨",
        dì: "帝递第蒂缔",
        "chà,chā,chāi,cī": "差",
        yǎng: "养氧痒",
        qián: "前钱钳潜黔",
        mí: "迷谜靡",
        nì: "逆昵匿腻",
        "zhà,zhá": "炸",
        zǒng: "总",
        làn: "烂滥",
        "pào,páo,bāo": "炮",
        tì: "剃惕替屉涕",
        "sǎ,xǐ": "洒",
        zhuó: "浊啄灼茁卓酌",
        "xǐ,xiǎn": "洗",
        qià: "洽恰",
        pài: "派湃",
        huó: "活",
        rǎn: "染",
        héng: "恒衡",
        hún: "浑魂",
        nǎo: "恼脑",
        "jué,jiào": "觉",
        hèn: "恨",
        xuān: "宣轩喧",
        qiè: "窃怯",
        "biǎn,piān": "扁",
        ǎo: "袄",
        shén: "神",
        "shuō,shuì,yuè": "说",
        tuì: "退蜕",
        chú: "除厨锄雏橱",
        méi: "眉梅煤霉玫枚媒楣",
        hái: "孩",
        wá: "娃",
        "lǎo,mǔ": "姥",
        nù: "怒",
        hè: "贺赫褐鹤",
        róu: "柔揉蹂",
        bǎng: "绑膀",
        lěi: "垒蕾儡",
        rào: "绕",
        "gěi,jǐ": "给",
        luò: "骆洛",
        "luò,lào": "络",
        tǒng: "统桶筒捅",
        gēng: "耕羹",
        hào: "耗浩",
        bān: "班般斑搬扳颁",
        zhū: "珠株诸猪蛛",
        lāo: "捞",
        fěi: "匪诽",
        "zǎi,zài": "载",
        "mái,mán": "埋",
        "shāo,shào": "捎稍",
        zhuō: "捉桌拙",
        niē: "捏",
        kǔn: "捆",
        "dū,dōu": "都",
        sǔn: "损笋",
        juān: "捐鹃",
        zhé: "哲辙",
        rè: "热",
        wǎn: "挽晚碗惋婉",
        "ái,āi": "挨",
        "mò,mù": "莫",
        "è,wù,ě,wū": "恶",
        tóng: "桐铜童彤瞳",
        "xiào,jiào": "校",
        "hé,hú": "核",
        yàng: "样漾",
        gēn: "根跟",
        gē: "哥鸽割歌戈",
        chǔ: "础储楚",
        pò: "破魄",
        tào: "套",
        chái: "柴豺",
        dǎng: "党",
        mián: "眠绵棉",
        shài: "晒",
        jǐn: "紧锦谨",
        "yūn,yùn": "晕",
        "huàng,huǎng": "晃",
        shǎng: "晌赏",
        ēn: "恩",
        "ài,āi": "唉",
        "ā,á,ǎ,à,a": "啊",
        "bà,ba,pí": "罢",
        zéi: "贼",
        tiě: "铁",
        "zuàn,zuān": "钻",
        "qiān,yán": "铅",
        quē: "缺",
        tè: "特",
        "chéng,shèng": "乘",
        dí: "敌笛涤嘀嫡",
        zū: "租",
        chèng: "秤",
        "mì,bì": "秘泌",
        "chēng,chèn,chèng": "称",
        tòu: "透",
        zhài: "债寨",
        "dào,dǎo": "倒",
        "tǎng,cháng": "倘",
        "chàng,chāng": "倡",
        juàn: "倦绢眷",
        "chòu,xiù": "臭",
        "shè,yè,yì": "射",
        xú: "徐",
        háng: "航杭",
        ná: "拿",
        wēng: "翁嗡",
        diē: "爹跌",
        ài: "爱碍艾隘",
        "gē,gé": "胳搁",
        cuì: "脆翠悴粹",
        zàng: "脏葬",
        láng: "狼廊琅榔",
        féng: "逢",
        è: "饿扼遏愕噩鳄",
        "shuāi,cuī": "衰",
        gāo: "高糕羔篙",
        zhǔn: "准",
        bìng: "病",
        téng: "疼腾誊藤",
        "liáng,liàng": "凉量",
        táng: "唐堂塘膛糖棠搪",
        pōu: "剖",
        "chù,xù": "畜",
        "páng,bàng": "旁磅",
        lǚ: "旅屡吕侣铝缕履",
        fěn: "粉",
        liào: "料镣",
        shāo: "烧",
        yān: "烟淹",
        tāo: "涛掏滔",
        lào: "涝酪",
        zhè: "浙蔗",
        xiāo: "消宵销萧硝箫嚣",
        hǎi: "海",
        "zhǎng,zhàng": "涨",
        làng: "浪",
        rùn: "润闰",
        tàng: "烫",
        "yǒng,chōng": "涌",
        huǐ: "悔毁",
        "qiāo,qiǎo": "悄",
        hài: "害亥骇",
        "jiā,jia,jie": "家",
        kuān: "宽",
        bīn: "宾滨彬缤濒",
        zhǎi: "窄",
        lǎng: "朗",
        "dú,dòu": "读",
        zǎi: "宰",
        "shàn,shān": "扇",
        "shān,shàn": "苫",
        wà: "袜",
        xiáng: "祥翔",
        shuí: "谁",
        páo: "袍咆",
        "bèi,pī": "被",
        "tiáo,diào,zhōu": "调",
        yuān: "冤鸳渊",
        "bō,bāo": "剥",
        ruò: "弱",
        péi: "陪培赔",
        niáng: "娘",
        tōng: "通",
        "néng,nài": "能",
        "nán,nàn,nuó": "难",
        sāng: "桑",
        pěng: "捧",
        dǔ: "堵赌睹",
        yǎn: "掩眼演衍",
        duī: "堆",
        "pái,pǎi": "排",
        tuī: "推",
        "jiào,jiāo": "教",
        lüè: "掠略",
        "jù,jū": "据",
        kòng: "控",
        "zhù,zhuó,zhe": "著",
        "jūn,jùn": "菌",
        "lè,lēi": "勒",
        méng: "萌盟檬朦",
        cài: "菜",
        tī: "梯踢剔",
        "shāo,sào": "梢",
        "fù,pì": "副",
        "piào,piāo": "票",
        shuǎng: "爽",
        "shèng,chéng": "盛",
        "què,qiāo,qiǎo": "雀",
        xuě: "雪",
        "chí,shi": "匙",
        xuán: "悬玄漩",
        "mī,mí": "眯",
        "la,lā": "啦",
        "shé,yí": "蛇",
        "lèi,léi,lěi": "累",
        "zhǎn,chán": "崭",
        "quān,juàn,juān": "圈",
        yín: "银吟淫",
        bèn: "笨",
        "lóng,lǒng": "笼",
        mǐn: "敏皿闽悯",
        nín: "您",
        ǒu: "偶藕",
        tōu: "偷",
        piān: "偏篇翩",
        "dé,děi,de": "得",
        "jiǎ,jià": "假",
        pán: "盘",
        chuán: "船",
        cǎi: "彩睬踩",
        lǐng: "领",
        liǎn: "脸敛",
        "māo,máo": "猫",
        měng: "猛锰",
        cāi: "猜",
        háo: "毫豪壕嚎",
        má: "麻",
        guǎn: "馆管",
        còu: "凑",
        hén: "痕",
        kāng: "康糠慷",
        "xuán,xuàn": "旋",
        "zhe,zhuó,zháo,zhāo": "着",
        "lǜ,shuài": "率",
        "gài,gě,hé": "盖",
        cū: "粗",
        "lín,lìn": "淋",
        "qú,jù": "渠",
        "jiàn,jiān": "渐溅",
        "hùn,hún": "混",
        pó: "婆",
        qíng: "情晴擎",
        cǎn: "惨",
        "sù,xiǔ,xiù": "宿",
        yáo: "窑谣摇遥肴姚",
        móu: "谋",
        mì: "密蜜觅",
        huǎng: "谎恍幌",
        "tán,dàn": "弹",
        suí: "随",
        "yǐn,yìn": "隐",
        "jǐng,gěng": "颈",
        shéng: "绳",
        qí: "骑棋旗歧祈脐畦崎鳍",
        chóu: "绸酬筹稠愁畴",
        "lǜ,lù": "绿",
        dā: "搭",
        kuǎn: "款",
        tǎ: "塔",
        "qū,cù": "趋",
        "tí,dī,dǐ": "提",
        "jiē,qì": "揭",
        xǐ: "喜徙",
        sōu: "搜艘",
        chā: "插",
        "lǒu,lōu": "搂",
        "qī,jī": "期",
        rě: "惹",
        "sàn,sǎn": "散",
        dǒng: "董懂",
        "gě,gé": "葛",
        pú: "葡菩蒲",
        "zhāo,cháo": "朝",
        "luò,là,lào": "落",
        kuí: "葵魁",
        bàng: "棒傍谤",
        "yǐ,yī": "椅",
        sēn: "森",
        "gùn,hùn": "棍",
        bī: "逼",
        "zhí,shi": "殖",
        "xià,shà": "厦",
        "liè,liě": "裂",
        xióng: "雄熊",
        zàn: "暂赞",
        yǎ: "雅",
        chǎng: "敞",
        zhǎng: "掌",
        shǔ: "暑鼠薯黍蜀署曙",
        zuì: "最罪醉",
        hǎn: "喊罕",
        "jǐng,yǐng": "景",
        lǎ: "喇",
        "pēn,pèn": "喷",
        "pǎo,páo": "跑",
        chuǎn: "喘",
        "hē,hè,yè": "喝",
        hóu: "喉猴",
        "pù,pū": "铺",
        hēi: "黑",
        guō: "锅郭",
        ruì: "锐瑞",
        duǎn: "短",
        é: "鹅额讹俄",
        děng: "等",
        kuāng: "筐",
        shuì: "税睡",
        "zhù,zhú": "筑",
        shāi: "筛",
        "dá,dā": "答",
        ào: "傲澳懊",
        pái: "牌徘",
        "bǎo,bǔ,pù": "堡",
        "ào,yù": "奥",
        "fān,pān": "番",
        "là,xī": "腊",
        huá: "猾滑",
        rán: "然燃",
        chán: "馋缠蝉",
        mán: "蛮馒",
        tòng: "痛",
        shàn: "善擅膳赡",
        zūn: "尊遵",
        pǔ: "普谱圃浦",
        "gǎng,jiǎng": "港",
        "céng,zēng": "曾",
        wēn: "温瘟",
        kě: "渴",
        zhā: "渣",
        duò: "惰舵跺",
        gài: "溉概丐钙",
        kuì: "愧",
        "yú,tōu": "愉",
        wō: "窝蜗",
        cuàn: "窜篡",
        qún: "裙群",
        "qiáng,qiǎng,jiàng": "强",
        "shǔ,zhǔ": "属",
        "zhōu,yù": "粥",
        sǎo: "嫂",
        huǎn: "缓",
        piàn: "骗",
        mō: "摸",
        "shè,niè": "摄",
        "tián,zhèn": "填",
        gǎo: "搞稿镐",
        suàn: "蒜算",
        "méng,mēng,měng": "蒙",
        "jìn,jīn": "禁",
        lóu: "楼娄",
        lài: "赖癞",
        "lù,liù": "碌",
        pèng: "碰",
        léi: "雷",
        báo: "雹",
        dū: "督",
        nuǎn: "暖",
        xiē: "歇楔蝎",
        kuà: "跨胯",
        "tiào,táo": "跳",
        "é,yǐ": "蛾",
        sǎng: "嗓",
        qiǎn: "遣谴",
        cuò: "错挫措锉",
        ǎi: "矮蔼",
        shǎ: "傻",
        cuī: "催摧崔",
        tuǐ: "腿",
        chù: "触矗",
        "jiě,jiè,xiè": "解",
        "shù,shǔ,shuò": "数",
        mǎn: "满",
        "liū,liù": "溜",
        gǔn: "滚",
        "sāi,sài,sè": "塞",
        "pì,bì": "辟",
        dié: "叠蝶谍碟",
        "fèng,féng": "缝",
        qiáng: "墙",
        "piě,piē": "撇",
        zhāi: "摘斋",
        shuāi: "摔",
        "mó,mú": "模",
        "bǎng,bàng": "榜",
        zhà: "榨乍诈",
        niàng: "酿",
        zāo: "遭糟",
        suān: "酸",
        "shang,cháng": "裳",
        sòu: "嗽",
        là: "蜡辣",
        qiāo: "锹敲跷",
        zhuàn: "赚撰",
        wěn: "稳吻紊",
        bí: "鼻荸",
        mó: "膜魔馍摹蘑",
        "xiān,xiǎn": "鲜",
        "yí,nǐ": "疑",
        "gāo,gào": "膏",
        zhē: "遮",
        duān: "端",
        màn: "漫慢曼幔",
        "piāo,piào,piǎo": "漂",
        lòu: "漏陋",
        sài: "赛",
        nèn: "嫩",
        dèng: "凳邓瞪",
        "suō,sù": "缩",
        "qù,cù": "趣",
        "sā,sǎ": "撒",
        "tàng,tāng": "趟",
        chēng: "撑",
        zēng: "增憎",
        cáo: "槽曹",
        "héng,hèng": "横",
        piāo: "飘",
        "mán,mén": "瞒",
        tí: "题蹄啼",
        yǐng: "影颖",
        "bào,pù": "暴",
        tà: "踏蹋",
        kào: "靠铐",
        pì: "僻屁譬",
        tǎng: "躺",
        dé: "德",
        "mó,mā": "摩",
        shú: "熟秫赎",
        "hú,hū,hù": "糊",
        "pī,pǐ": "劈",
        cháo: "潮巢",
        cāo: "操糙",
        "yàn,yān": "燕",
        diān: "颠掂",
        "báo,bó,bò": "薄",
        cān: "餐",
        xǐng: "醒",
        zhěng: "整拯",
        zuǐ: "嘴",
        zèng: "赠",
        "mó,mò": "磨",
        níng: "凝狞柠",
        "jiǎo,zhuó": "缴",
        cā: "擦",
        "cáng,zàng": "藏",
        "fán,pó": "繁",
        "bì,bei": "臂",
        bèng: "蹦泵",
        pān: "攀潘",
        "chàn,zhàn": "颤",
        "jiāng,qiáng": "疆",
        rǎng: "壤攘",
        "jiáo,jué,jiào": "嚼",
        "rǎng,rāng": "嚷",
        chǔn: "蠢",
        "lù,lòu": "露",
        "náng,nāng": "囊",
        dǎi: "歹",
        rǒng: "冗",
        "hāng,bèn": "夯",
        "āo,wā": "凹",
        "féng,píng": "冯",
        yū: "迂淤",
        "xū,yù": "吁",
        "lèi,lē": "肋",
        kōu: "抠",
        "lūn,lún": "抡",
        "jiè,gài": "芥",
        "xīn,xìn": "芯",
        "chā,chà": "杈",
        "xiāo,xiào": "肖",
        "zhī,zī": "吱",
        "ǒu,ōu,òu": "呕",
        "nà,nè": "呐",
        "qiàng,qiāng": "呛",
        "tún,dùn": "囤",
        "kēng,háng": "吭",
        shǔn: "吮",
        "diàn,tián": "佃",
        "sì,cì": "伺",
        zhǒu: "肘帚",
        "diàn,tián,shèng": "甸",
        "páo,bào": "刨",
        lìn: "吝赁躏",
        "duì,ruì,yuè": "兑",
        zhuì: "坠缀赘",
        "kē,kě": "坷",
        "tuò,tà,zhí": "拓",
        "fú,bì": "拂",
        "nǐng,níng,nìng": "拧",
        "ào,ǎo,niù": "拗",
        "kē,hē": "苛",
        "yān,yǎn": "奄",
        "hē,a,kē": "呵",
        "gā,kā": "咖",
        biǎn: "贬匾",
        "jiǎo,yáo": "侥",
        "chà,shā": "刹",
        āng: "肮",
        wèng: "瓮",
        "nüè,yào": "疟",
        páng: "庞螃",
        "máng,méng": "氓",
        "gē,yì": "疙",
        "jǔ,jù": "沮",
        "zú,cù": "卒",
        nìng: "泞",
        chǒng: "宠",
        "wǎn,yuān": "宛",
        "mí,mǐ": "弥",
        "qì,qiè,xiè": "契",
        "xié,jiā": "挟",
        "duò,duǒ": "垛",
        jiá: "荚颊",
        "zhà,shān,shi,cè": "栅",
        "bó,bèi": "勃",
        "zhóu,zhòu": "轴",
        nüè: "虐",
        "liē,liě,lié,lie": "咧",
        dǔn: "盹",
        xūn: "勋",
        "yo,yō": "哟",
        mī: "咪",
        "qiào,xiào": "俏",
        "hóu,hòu": "侯",
        pēi: "胚",
        tāi: "胎",
        luán: "峦",
        sà: "飒萨",
        shuò: "烁",
        xuàn: "炫",
        "píng,bǐng": "屏",
        "nà,nuó": "娜",
        "pá,bà": "耙",
        gěng: "埂耿梗",
        niè: "聂镊孽",
        mǎng: "莽",
        "qī,xī": "栖",
        "jiǎ,gǔ": "贾",
        chěng: "逞",
        pēng: "砰烹",
        "láo,lào": "唠",
        "bàng,bèng": "蚌",
        "gōng,zhōng": "蚣",
        "li,lǐ,lī": "哩",
        suō: "唆梭嗦",
        hēng: "哼",
        zāng: "赃",
        qiào: "峭窍撬",
        mǎo: "铆",
        ǎn: "俺",
        sǒng: "耸",
        "juè,jué": "倔",
        "yīn,yān,yǐn": "殷",
        guàng: "逛",
        něi: "馁",
        "wō,guō": "涡",
        "lào,luò": "烙",
        nuò: "诺懦糯",
        zhūn: "谆",
        "niǎn,niē": "捻",
        qiā: "掐",
        "yè,yē": "掖",
        "chān,xiān,càn,shǎn": "掺",
        "dǎn,shàn": "掸",
        "fēi,fěi": "菲",
        "qián,gān": "乾",
        shē: "奢赊",
        "shuò,shí": "硕",
        "luō,luó,luo": "啰",
        shá: "啥",
        "hǔ,xià": "唬",
        tuò: "唾",
        bēng: "崩",
        "dāng,chēng": "铛",
        "xiǎn,xǐ": "铣",
        "jiǎo,jiáo": "矫",
        tiáo: "笤",
        "kuǐ,guī": "傀",
        xìn: "衅",
        dōu: "兜",
        "jì,zhài": "祭",
        xiáo: "淆",
        "tǎng,chǎng": "淌",
        "chún,zhūn": "淳",
        shuàn: "涮",
        dāng: "裆",
        "wèi,yù": "尉",
        "duò,huī": "堕",
        "chuò,chāo": "绰",
        "bēng,běng,bèng": "绷",
        "zōng,zèng": "综",
        "zhuó,zuó": "琢",
        "chuǎi,chuài,chuāi,tuán,zhuī": "揣",
        "péng,bāng": "彭",
        chān: "搀",
        cuō: "搓",
        sāo: "搔",
        yē: "椰",
        "zhuī,chuí": "椎",
        "léng,lēng,líng": "棱",
        hān: "酣憨",
        sū: "酥",
        záo: "凿",
        "qiào,qiáo": "翘",
        "zhā,chā": "喳",
        bǒ: "跛",
        "há,gé": "蛤",
        "qiàn,kàn": "嵌",
        bāi: "掰",
        "yān,ā": "腌",
        wàn: "腕",
        "dūn,duì": "敦",
        "kuì,huì": "溃",
        jiǒng: "窘",
        "sāo,sǎo": "骚",
        pìn: "聘",
        bǎ: "靶",
        xuē: "靴薛",
        hāo: "蒿",
        léng: "楞",
        "kǎi,jiē": "楷",
        "pín,bīn": "频",
        zhuī: "锥",
        tuí: "颓",
        sāi: "腮",
        "liú,liù": "馏",
        "nì,niào": "溺",
        qǐn: "寝",
        luǒ: "裸",
        miù: "谬",
        "jiǎo,chāo": "剿",
        "áo,āo": "熬",
        niān: "蔫",
        "màn,wàn": "蔓",
        "chá,chā": "碴",
        "xūn,xùn": "熏",
        tiǎn: "舔",
        sēng: "僧",
        "da,dá": "瘩",
        guǎ: "寡",
        "tuì,tùn": "褪",
        niǎn: "撵碾",
        "liáo,liāo": "撩",
        "cuō,zuǒ": "撮",
        ruǐ: "蕊",
        "cháo,zhāo": "嘲",
        biē: "憋鳖",
        "hēi,mò": "嘿",
        "zhuàng,chuáng": "幢",
        "jī,qǐ": "稽",
        lǒu: "篓",
        lǐn: "凛檩",
        "biě,biē": "瘪",
        "liáo,lào,lǎo": "潦",
        "chéng,dèng": "澄",
        "lèi,léi": "擂",
        piáo: "瓢",
        shà: "霎",
        "mò,má": "蟆",
        qué: "瘸",
        "liáo,liǎo": "燎",
        "liào,liǎo": "瞭",
        "sào,sāo": "臊",
        "mí,méi": "糜",
        ái: "癌",
        tún: "臀",
        "huò,huō,huá": "豁",
        "pù,bào": "瀑",
        chuō: "戳",
        "zǎn,cuán": "攒",
        cèng: "蹭",
        "bò,bǒ": "簸",
        "bó,bù": "簿",
        bìn: "鬓",
        suǐ: "髓",
        ráng: "瓤"
    };

    /***/
},
/* 3 */
/***/function (module, exports) {
    // 带音标字符。
    "use strict";

    module.exports = {
        ā: "a1",
        á: "a2",
        ǎ: "a3",
        à: "a4",
        ē: "e1",
        é: "e2",
        ě: "e3",
        è: "e4",
        ō: "o1",
        ó: "o2",
        ǒ: "o3",
        ò: "o4",
        ī: "i1",
        í: "i2",
        ǐ: "i3",
        ì: "i4",
        ū: "u1",
        ú: "u2",
        ǔ: "u3",
        ù: "u4",
        ü: "v0",
        ǘ: "v2",
        ǚ: "v3",
        ǜ: "v4",
        ń: "n2",
        ň: "n3",
        "": "m2"
    };

    /***/
},
/* 4 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var assign = __webpack_require__(1);
    // XXX: Symbol when web support.
    var PINYIN_STYLE = {
        NORMAL: 0, // 普通风格，不带音标。
        TONE: 1, // 标准风格，音标在韵母的第一个字母上。
        TONE2: 2, // 声调以数字形式在拼音之后，使用数字 0~4 标识。
        TO3NE: 5, // 声调以数字形式在声母之后，使用数字 0~4 标识。
        INITIALS: 3, // 仅需要声母部分。
        FIRST_LETTER: 4
    };
    var DEFAULT_OPTIONS = {
        style: PINYIN_STYLE.TONE, // 风格
        segment: false, // 分词。
        heteronym: false
    };

    // 声母表。
    var INITIALS = "b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s".split(",");
    // 韵母表。
    //const FINALS = "ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v".split(",");
    // 带音标字符。
    var PHONETIC_SYMBOL = __webpack_require__(3);
    var RE_PHONETIC_SYMBOL = new RegExp("([" + Object.keys(PHONETIC_SYMBOL).join("") + "])", "g");
    var RE_TONE2 = /([aeoiuvnm])([0-4])$/;

    /*
     * 格式化拼音为声母（Initials）形式。
     * @param {String}
     * @return {String}
     */
    function initials(pinyin) {
        for (var i = 0, l = INITIALS.length; i < l; i++) {
            if (pinyin.indexOf(INITIALS[i]) === 0) {
                return INITIALS[i];
            }
        }
        return "";
    }

    var Pinyin = function () {
        function Pinyin(dict) {
            _classCallCheck(this, Pinyin);

            this._dict = dict;
        }

        _createClass(Pinyin, [{
            key: "convert",

            // @param {String} hans 要转为拼音的目标字符串（汉字）。
            // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。
            // @return {Array} 返回的拼音列表。
            value: function convert(hans, options) {
                if (typeof hans !== "string") {
                    return [];
                }

                options = assign({}, DEFAULT_OPTIONS, options);

                var pys = [];
                var nohans = "";

                for (var i = 0, firstCharCode = undefined, words = undefined, l = hans.length; i < l; i++) {
                    words = hans[i];
                    firstCharCode = words.charCodeAt(0);

                    if (this._dict[firstCharCode]) {
                        // ends of non-chinese words.
                        if (nohans.length > 0) {
                            pys.push([nohans]);
                            nohans = ""; // reset non-chinese words.
                        }

                        pys.push(this.single_pinyin(words, options));
                    } else {
                        nohans += words;
                    }
                }

                // 清理最后的非中文字符串。
                if (nohans.length > 0) {
                    pys.push([nohans]);
                    nohans = ""; // reset non-chinese words.
                }
                return pys;
            }
        }, {
            key: "single_pinyin",

            // 单字拼音转换。
            // @param {String} han, 单个汉字
            // @return {Array} 返回拼音列表，多音字会有多个拼音项。
            value: function single_pinyin(han, options) {
                if (typeof han !== "string") {
                    return [];
                }
                if (han.length !== 1) {
                    return this.single_pinyin(han.charAt(0), options);
                }

                var hanCode = han.charCodeAt(0);

                if (!this._dict[hanCode]) {
                    return [han];
                }

                var pys = this._dict[hanCode].split(",");
                if (!options.heteronym) {
                    return [Pinyin.toFixed(pys[0], options.style)];
                }

                // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。
                var py_cached = {};
                var pinyins = [];
                for (var i = 0, py = undefined, l = pys.length; i < l; i++) {
                    py = Pinyin.toFixed(pys[i], options.style);
                    if (py_cached.hasOwnProperty(py)) {
                        continue;
                    }
                    py_cached[py] = py;

                    pinyins.push(py);
                }
                return pinyins;
            }
        }, {
            key: "compare",

            /**
             * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。
             *
             * @param {String} hanA 汉字字符串 A。
             * @return {String} hanB 汉字字符串 B。
             * @return {Number} 返回 -1，0，或 1。
             */
            value: function compare(hanA, hanB) {
                var pinyinA = this.convert(hanA, DEFAULT_OPTIONS);
                var pinyinB = this.convert(hanB, DEFAULT_OPTIONS);
                return String(pinyinA).localeCompare(pinyinB);
            }
        }], [{
            key: "toFixed",

            /**
             * 格式化拼音风格。
             *
             * @param {String} pinyin TONE 风格的拼音。
             * @param {ENUM} style 目标转换的拼音风格。
             * @return {String} 转换后的拼音。
             */
            value: function toFixed(pinyin, style) {
                var tone = ""; // 声调。
                var first_letter = undefined;
                var py = undefined;
                switch (style) {
                    case PINYIN_STYLE.INITIALS:
                        return initials(pinyin);

                    case PINYIN_STYLE.FIRST_LETTER:
                        first_letter = pinyin.charAt(0);
                        if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {
                            first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);
                        }
                        return first_letter;

                    case PINYIN_STYLE.NORMAL:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, "$1");
                        });

                    case PINYIN_STYLE.TO3NE:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic];
                        });

                    case PINYIN_STYLE.TONE2:
                        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {
                            // 声调数值。
                            tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$2");

                            return PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$1");
                        });
                        return py + tone;

                    case PINYIN_STYLE.TONE:
                    default:
                        return pinyin;
                }
            }
        }, {
            key: "STYLE_NORMAL",
            get: function get() {
                return PINYIN_STYLE.NORMAL;
            }
        }, {
            key: "STYLE_TONE",
            get: function get() {
                return PINYIN_STYLE.TONE;
            }
        }, {
            key: "STYLE_TONE2",
            get: function get() {
                return PINYIN_STYLE.TONE2;
            }
        }, {
            key: "STYLE_TO3NE",
            get: function get() {
                return PINYIN_STYLE.TO3NE;
            }
        }, {
            key: "STYLE_INITIALS",
            get: function get() {
                return PINYIN_STYLE.INITIALS;
            }
        }, {
            key: "STYLE_FIRST_LETTER",
            get: function get() {
                return PINYIN_STYLE.FIRST_LETTER;
            }
        }, {
            key: "DEFAULT_OPTIONS",
            get: function get() {
                return DEFAULT_OPTIONS;
            }
        }]);

        return Pinyin;
    }();

    module.exports = Pinyin;
    // 仅保留首字母。
    // 多音字

    /***/
},
/* 5 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    // 解压拼音库。
    // @param {Object} dict_combo, 压缩的拼音库。
    // @param {Object} 解压的拼音库。

    function buildPinyinCache(dict_combo) {
        var hans = undefined;
        var uncomboed = {};

        for (var py in dict_combo) {
            hans = dict_combo[py];
            for (var i = 0, han = undefined, l = hans.length; i < l; i++) {
                han = hans.charCodeAt(i);
                if (!uncomboed.hasOwnProperty(han)) {
                    uncomboed[han] = py;
                } else {
                    uncomboed[han] += "," + py;
                }
            }
        }

        return uncomboed;
    }

    var PINYIN_DICT = buildPinyinCache(__webpack_require__(2));
    var Pinyin = __webpack_require__(4);
    var pinyin = new Pinyin(PINYIN_DICT);

    module.exports = pinyin.convert.bind(pinyin);
    module.exports.compare = pinyin.compare.bind(pinyin);
    module.exports.STYLE_NORMAL = Pinyin.STYLE_NORMAL;
    module.exports.STYLE_TONE = Pinyin.STYLE_TONE;
    module.exports.STYLE_TONE2 = Pinyin.STYLE_TONE2;
    module.exports.STYLE_TO3NE = Pinyin.STYLE_TO3NE;
    module.exports.STYLE_INITIALS = Pinyin.STYLE_INITIALS;
    module.exports.STYLE_FIRST_LETTER = Pinyin.STYLE_FIRST_LETTER;

    /***/
}
/******/
]);
//# sourceMappingURL=bundle.js.map

/***/ }),
/* 11 */
/***/ (function(module, exports) {

this["pinyin"] = /******/function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/var installedModules = {}; // The require function
    /******/
    /******/ /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports; // Create a new module (and put it into the cache)
        /******/
        /******/ /******/var module = installedModules[moduleId] = {
            /******/exports: {},
            /******/id: moduleId,
            /******/loaded: false
            /******/
        }; // Execute the module function
        /******/
        /******/ /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded
        /******/
        /******/ /******/module.loaded = true; // Return the exports of the module
        /******/
        /******/ /******/return module.exports;
        /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/__webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/__webpack_require__.c = installedModules; // __webpack_public_path__
    /******/
    /******/ /******/__webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/return __webpack_require__(0);
    /******/
}(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    module.exports = __webpack_require__(5);

    /***/
},
/* 1 */
/***/function (module, exports) {
    /* eslint-disable no-unused-vars */
    "use strict";

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
        }

        return Object(val);
    }

    module.exports = Object.assign || function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }

            if (Object.getOwnPropertySymbols) {
                symbols = Object.getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }

        return to;
    };

    /***/
},
/* 2 */
/***/function (module, exports) {
    "use strict";

    module.exports = {
        èr: "二贰",
        shí: "十时实蚀",
        yǐ: "乙已以蚁倚",
        yī: "一衣医依伊揖壹",
        "chǎng,ān,hàn": "厂",
        "dīng,zhēng": "丁",
        qī: "七戚欺漆柒凄嘁",
        "bǔ,bo": "卜",
        rén: "人仁",
        rù: "入褥",
        jiǔ: "九久酒玖灸韭",
        ér: "儿而",
        bā: "八巴疤叭芭捌笆",
        "jǐ,jī": "几",
        "le,liǎo": "了",
        lì: "力历厉立励利例栗粒吏沥荔俐莉砾雳痢",
        dāo: "刀",
        nǎi: "乃奶",
        sān: "三叁",
        yòu: "又右幼诱佑",
        yú: "于余鱼娱渔榆愚隅逾舆",
        shì: "士示世市式势事侍饰试视柿是适室逝释誓拭恃嗜",
        "gān,gàn": "干",
        gōng: "工弓公功攻宫恭躬",
        kuī: "亏盔窥",
        tǔ: "土",
        cùn: "寸",
        "dà,dài,tài": "大",
        cái: "才材财裁",
        xià: "下夏",
        zhàng: "丈仗帐胀障杖账",
        "yǔ,yù,yú": "与",
        "shàng,shǎng": "上",
        "wàn,mò": "万",
        kǒu: "口",
        xiǎo: "小晓",
        jīn: "巾斤今金津筋襟",
        shān: "山删衫珊",
        qiān: "千迁牵谦签",
        qǐ: "乞企启起",
        chuān: "川穿",
        "gè,gě": "个各",
        sháo: "勺芍",
        yì: "亿义艺忆议亦异役译易疫益谊意毅翼屹抑邑绎奕逸肄溢",
        jí: "及吉级极即急疾集籍棘辑嫉",
        fán: "凡烦矾樊",
        xī: "夕西吸希析牺息悉惜稀锡溪熄膝昔晰犀熙嬉蟋",
        wán: "丸完玩顽",
        "me,mó,ma,yāo": "么",
        "guǎng,ān": "广",
        "wáng,wú": "亡",
        mén: "门们",
        shī: "尸失师诗狮施湿虱",
        zhī: "之支汁芝肢脂蜘",
        jǐ: "己挤脊",
        zǐ: "子紫姊籽滓",
        wèi: "卫未位味畏胃喂慰谓猬蔚魏",
        yě: "也冶野",
        "nǚ,rǔ": "女",
        rèn: "刃认韧纫",
        fēi: "飞非啡",
        xí: "习席袭媳",
        mǎ: "马码玛",
        "chā,chá,chǎ": "叉",
        fēng: "丰封疯峰锋蜂枫",
        xiāng: "乡香箱厢湘镶",
        jǐng: "井警阱",
        "wáng,wàng": "王",
        kāi: "开揩",
        tiān: "天添",
        wú: "无吴芜梧蜈",
        "fū,fú": "夫",
        zhuān: "专砖",
        yuán: "元园原圆援缘源袁猿辕",
        yún: "云匀耘",
        "zhā,zā,zhá": "扎",
        mù: "木目牧墓幕暮慕沐募睦穆",
        wǔ: "五午伍武侮舞捂鹉",
        tīng: "厅听",
        "bù,fǒu": "不",
        "qū,ōu": "区",
        quǎn: "犬",
        tài: "太态泰汰",
        yǒu: "友",
        "chē,jū": "车",
        pǐ: "匹",
        yóu: "尤由邮犹油游",
        jù: "巨拒具俱剧距惧锯聚炬",
        yá: "牙芽崖蚜涯衙",
        bǐ: "比彼笔鄙匕秕",
        jiē: "皆阶接街秸",
        hù: "互户护沪",
        "qiè,qiē": "切",
        "wǎ,wà": "瓦",
        zhǐ: "止旨址纸指趾",
        "tún,zhūn": "屯",
        "shǎo,shào": "少",
        rì: "日",
        "zhōng,zhòng": "中",
        gāng: "冈刚纲缸肛",
        "nèi,nà": "内",
        bèi: "贝备倍辈狈惫焙",
        shuǐ: "水",
        "jiàn,xiàn": "见",
        niú: "牛",
        shǒu: "手守首",
        máo: "毛矛茅锚",
        qì: "气弃汽器迄泣",
        shēng: "升生声牲笙甥",
        "cháng,zhǎng": "长",
        "shén,shí": "什",
        "piàn,piān": "片",
        "pú,pū": "仆",
        "huà,huā": "化",
        bì: "币必毕闭毙碧蔽弊避壁庇蓖痹璧",
        "chóu,qiú": "仇",
        "zhuǎ,zhǎo": "爪",
        "jǐn,jìn": "仅",
        réng: "仍",
        "fù,fǔ": "父",
        "cóng,zòng": "从",
        fǎn: "反返",
        jiè: "介戒届界借诫",
        xiōng: "凶兄胸匈汹",
        "fēn,fèn": "分",
        fá: "乏伐罚阀筏",
        cāng: "仓苍舱沧",
        yuè: "月阅悦跃越岳粤",
        "shì,zhī": "氏",
        wù: "勿务物误悟雾坞晤",
        qiàn: "欠歉",
        "fēng,fěng": "风",
        dān: "丹耽",
        wū: "乌污呜屋巫诬",
        fèng: "凤奉",
        "gōu,gòu": "勾",
        wén: "文闻蚊",
        "liù,lù": "六",
        huǒ: "火伙",
        fāng: "方芳",
        "dǒu,dòu": "斗",
        "wèi,wéi": "为",
        dìng: "订定锭",
        jì: "计记技忌际季剂迹既继寄绩妓荠寂鲫冀",
        xīn: "心辛欣新薪锌",
        "chǐ,chě": "尺",
        yǐn: "引饮蚓瘾",
        chǒu: "丑",
        kǒng: "孔恐",
        duì: "队对",
        bàn: "办半扮伴瓣绊",
        "yǔ,yú": "予",
        yǔn: "允陨",
        quàn: "劝",
        shū: "书叔殊梳舒疏输蔬抒枢淑",
        shuāng: "双霜",
        yù: "玉育狱浴预域欲遇御裕愈誉芋郁喻寓豫",
        huàn: "幻换唤患宦涣焕痪",
        kān: "刊堪勘",
        mò: "末沫漠墨默茉陌寞",
        jī: "击饥圾机肌鸡积基激讥叽唧畸箕",
        "dǎ,dá": "打",
        qiǎo: "巧",
        "zhèng,zhēng": "正症挣",
        pū: "扑",
        "bā,pá": "扒",
        gān: "甘肝竿柑",
        qù: "去",
        rēng: "扔",
        gǔ: "古谷股鼓",
        běn: "本",
        "jié,jiē": "节结",
        "shù,shú,zhú": "术",
        bǐng: "丙柄饼秉禀",
        "kě,kè": "可",
        zuǒ: "左",
        bù: "布步怖部埠",
        "shí,dàn": "石",
        lóng: "龙聋隆咙胧窿",
        yà: "轧亚讶",
        miè: "灭蔑",
        píng: "平评凭瓶萍坪",
        dōng: "东冬",
        "kǎ,qiǎ": "卡",
        "běi,bèi": "北",
        yè: "业页夜液谒腋",
        jiù: "旧救就舅臼疚",
        shuài: "帅蟀",
        guī: "归规闺硅瑰",
        "zhàn,zhān": "占",
        dàn: "旦但诞淡蛋氮",
        "qiě,jū": "且",
        "yè,xié": "叶",
        jiǎ: "甲钾",
        dīng: "叮盯",
        shēn: "申伸身深呻绅",
        "hào,háo": "号",
        diàn: "电店垫殿玷淀惦奠",
        tián: "田甜恬",
        shǐ: "史使始驶矢屎",
        "zhī,zhǐ": "只",
        yāng: "央殃秧鸯",
        diāo: "叼雕刁碉",
        jiào: "叫轿较窖酵",
        lìng: "另",
        "dāo,tāo": "叨",
        sì: "四寺饲肆",
        tàn: "叹炭探碳",
        qiū: "丘秋蚯",
        hé: "禾河荷盒",
        fù: "付负妇附咐赴复傅富腹覆赋缚",
        dài: "代带贷怠袋逮戴",
        xiān: "仙先掀锨",
        yí: "仪宜姨移遗夷胰",
        bái: "白",
        "zǎi,zǐ,zī": "仔",
        chì: "斥赤翅",
        tā: "他它塌",
        guā: "瓜刮",
        hū: "乎呼忽",
        cóng: "丛",
        "lìng,líng,lǐng": "令",
        yòng: "用",
        shuǎi: "甩",
        yìn: "印",
        "lè,yuè": "乐",
        "jù,gōu": "句",
        cōng: "匆葱聪囱",
        fàn: "犯饭泛范贩",
        cè: "册厕测策",
        wài: "外",
        "chù,chǔ": "处",
        niǎo: "鸟",
        bāo: "包胞苞褒",
        zhǔ: "主煮嘱拄",
        shǎn: "闪陕",
        lán: "兰拦栏蓝篮澜",
        "tóu,tou": "头",
        huì: "汇绘贿惠慧讳诲晦秽",
        hàn: "汉旱捍悍焊撼翰憾",
        tǎo: "讨",
        xué: "穴学",
        xiě: "写",
        "níng,nìng,zhù": "宁",
        ràng: "让",
        lǐ: "礼李里理鲤",
        xùn: "训讯迅汛驯逊殉",
        yǒng: "永咏泳勇蛹踊",
        mín: "民",
        chū: "出初",
        ní: "尼",
        sī: "司丝私斯撕嘶",
        liáo: "辽疗僚聊寥嘹缭",
        jiā: "加佳嘉枷",
        nú: "奴",
        "zhào,shào": "召",
        biān: "边编鞭蝙",
        pí: "皮疲脾啤",
        yùn: "孕运韵酝蕴",
        "fā,fà": "发",
        shèng: "圣胜剩",
        "tái,tāi": "台苔",
        jiū: "纠究揪鸠",
        mǔ: "母亩牡拇姆",
        "káng,gāng": "扛",
        xíng: "刑形型邢",
        dòng: "动冻栋洞",
        kǎo: "考烤拷",
        kòu: "扣寇",
        tuō: "托拖脱",
        lǎo: "老",
        gǒng: "巩汞拱",
        zhí: "执直侄值职植",
        kuò: "扩阔廓",
        yáng: "扬阳杨洋",
        "dì,de": "地",
        "sǎo,sào": "扫",
        "chǎng,cháng": "场",
        ěr: "耳尔饵",
        máng: "芒忙盲茫",
        xiǔ: "朽",
        "pǔ,pò,pō,piáo": "朴",
        quán: "权全泉拳痊",
        "guò,guo,guō": "过",
        chén: "臣尘辰沉陈晨忱",
        zài: "再在",
        xié: "协胁斜携鞋谐",
        "yā,yà": "压",
        yàn: "厌艳宴验雁焰砚唁谚堰",
        "yǒu,yòu": "有",
        cún: "存",
        bǎi: "百摆",
        "kuā,kuà": "夸",
        jiàng: "匠酱",
        duó: "夺踱",
        huī: "灰挥恢辉徽",
        dá: "达",
        sǐ: "死",
        liè: "列劣烈猎",
        guǐ: "轨鬼诡",
        "xié,yá,yé,yú,xú": "邪",
        "jiá,jiā,gā,xiá": "夹",
        chéng: "成呈诚承城程惩橙",
        mài: "迈麦卖",
        "huà,huá": "划",
        zhì: "至志帜制质治致秩智置挚掷窒滞稚",
        cǐ: "此",
        zhēn: "贞针侦珍真斟榛",
        jiān: "尖奸歼坚肩艰兼煎",
        guāng: "光",
        "dāng,dàng": "当",
        zǎo: "早枣澡蚤藻",
        "tù,tǔ": "吐",
        "xià,hè": "吓",
        chóng: "虫崇",
        tuán: "团",
        "tóng,tòng": "同",
        "qū,qǔ": "曲",
        diào: "吊钓掉",
        yīn: "因阴音姻茵",
        chī: "吃嗤痴",
        "ma,má,mǎ": "吗",
        yǔ: "屿宇羽",
        fān: "帆翻",
        huí: "回茴蛔",
        "qǐ,kǎi": "岂",
        zé: "则责",
        suì: "岁碎穗祟遂隧",
        ròu: "肉",
        "zhū,shú": "朱",
        wǎng: "网往枉",
        nián: "年",
        diū: "丢",
        shé: "舌",
        zhú: "竹逐烛",
        qiáo: "乔侨桥瞧荞憔",
        wěi: "伟伪苇纬萎",
        "chuán,zhuàn": "传",
        pāng: "乓",
        pīng: "乒",
        "xiū,xǔ": "休",
        fú: "伏扶俘浮符幅福凫芙袱辐蝠",
        yōu: "优忧悠幽",
        yán: "延严言岩炎沿盐颜阎蜒檐",
        jiàn: "件建荐贱剑健舰践鉴键箭涧",
        "rèn,rén": "任",
        "huá,huà,huā": "华",
        "jià,jiè,jie": "价",
        shāng: "伤商",
        "fèn,bīn": "份",
        fǎng: "仿访纺",
        "yǎng,áng": "仰",
        zì: "自字",
        "xiě,xuè": "血",
        xiàng: "向项象像橡",
        "sì,shì": "似",
        hòu: "后厚候",
        zhōu: "舟州周洲",
        "háng,xíng": "行",
        "huì,kuài": "会",
        shā: "杀纱杉砂",
        "hé,gě": "合",
        zhào: "兆赵照罩",
        zhòng: "众仲",
        yé: "爷",
        sǎn: "伞",
        "chuàng,chuāng": "创",
        duǒ: "朵躲",
        wēi: "危威微偎薇巍",
        xún: "旬寻巡询循",
        zá: "杂砸",
        míng: "名明鸣铭螟",
        duō: "多哆",
        zhēng: "争征睁筝蒸怔狰",
        sè: "色涩瑟",
        zhuàng: "壮状撞",
        "chōng,chòng": "冲",
        bīng: "冰兵",
        zhuāng: "庄装妆桩",
        qìng: "庆",
        liú: "刘留流榴琉硫瘤",
        "qí,jì,zī,zhāi": "齐",
        cì: "次赐",
        jiāo: "交郊浇娇骄胶椒焦蕉礁",
        chǎn: "产铲阐",
        wàng: "妄忘旺望",
        chōng: "充",
        wèn: "问",
        chuǎng: "闯",
        "yáng,xiáng": "羊",
        "bìng,bīng": "并",
        dēng: "灯登蹬",
        mǐ: "米",
        guān: "关官棺",
        "hàn,hán": "汗",
        jué: "决绝掘诀爵",
        jiāng: "江姜僵缰",
        "tāng,shāng": "汤",
        chí: "池驰迟持弛",
        "xīng,xìng": "兴",
        zhái: "宅",
        ān: "安氨庵鞍",
        jiǎng: "讲奖桨蒋",
        jūn: "军均君钧",
        "xǔ,hǔ": "许",
        fěng: "讽",
        "lùn,lún": "论",
        nóng: "农浓脓",
        shè: "设社舍涉赦",
        "nà,nǎ,nèi,nā": "那",
        "jìn,jǐn": "尽",
        dǎo: "导岛蹈捣祷",
        "sūn,xùn": "孙",
        zhèn: "阵振震镇",
        shōu: "收",
        fáng: "防妨房肪",
        rú: "如儒蠕",
        mā: "妈",
        "xì,hū": "戏",
        "hǎo,hào": "好",
        "tā,jiě": "她",
        "guān,guàn": "观冠",
        huān: "欢",
        "hóng,gōng": "红",
        mǎi: "买",
        "xiān,qiàn": "纤",
        "jì,jǐ": "纪济",
        "yuē,yāo": "约",
        shòu: "寿受授售兽瘦",
        "nòng,lòng": "弄",
        jìn: "进近晋浸",
        wéi: "违围唯维桅",
        "yuǎn,yuàn": "远",
        tūn: "吞",
        tán: "坛谈痰昙谭潭檀",
        fǔ: "抚斧府俯辅腐甫脯",
        "huài,pēi,pī,péi": "坏",
        rǎo: "扰",
        pī: "批披坯霹",
        zhǎo: "找沼",
        chě: "扯",
        zǒu: "走",
        chāo: "抄钞超",
        bà: "坝爸霸",
        gòng: "贡",
        "zhé,shé,zhē": "折",
        "qiǎng,qiāng,chēng": "抢",
        zhuā: "抓",
        xiào: "孝笑效哮啸",
        pāo: "抛",
        tóu: "投",
        kàng: "抗炕",
        fén: "坟焚",
        kēng: "坑",
        dǒu: "抖陡蚪",
        "ké,qiào": "壳",
        "fāng,fáng": "坊",
        niǔ: "扭纽钮",
        kuài: "块快筷",
        "bǎ,bà": "把",
        bào: "报抱爆豹",
        jié: "劫杰洁捷截竭",
        què: "却确鹊",
        huā: "花",
        fēn: "芬吩纷氛",
        qín: "芹琴禽勤秦擒",
        láo: "劳牢",
        lú: "芦炉卢庐颅",
        "gān,gǎn": "杆",
        kè: "克刻客课",
        "sū,sù": "苏",
        dù: "杜渡妒镀",
        "gàng,gāng": "杠",
        cūn: "村",
        qiú: "求球囚",
        xìng: "杏幸性姓",
        "gèng,gēng": "更",
        liǎng: "两",
        "lì,lí": "丽",
        shù: "束述树竖恕庶墅漱",
        dòu: "豆逗痘",
        "hái,huán": "还",
        "fǒu,pǐ": "否",
        lái: "来莱",
        lián: "连怜帘莲联廉镰",
        "xiàn,xuán": "县",
        "zhù,chú": "助",
        dāi: "呆",
        kuàng: "旷况矿框眶",
        "ya,yā": "呀",
        zú: "足族",
        dūn: "吨蹲墩",
        kùn: "困",
        nán: "男",
        "chǎo,chāo": "吵",
        "yuán,yún,yùn": "员",
        chuàn: "串",
        chuī: "吹炊",
        "ba,bā": "吧",
        hǒu: "吼",
        gǎng: "岗",
        "bié,biè": "别",
        "dīng,dìng": "钉",
        gào: "告",
        wǒ: "我",
        luàn: "乱",
        tū: "秃突凸",
        xiù: "秀袖绣锈嗅",
        "gū,gù": "估",
        měi: "每美",
        "hé,hē,hè": "何",
        "tǐ,tī,bèn": "体",
        "bó,bǎi,bà": "伯",
        zuò: "作坐座做",
        líng: "伶灵铃陵零龄玲凌菱蛉翎",
        dī: "低堤滴",
        "yòng,yōng": "佣",
        nǐ: "你拟",
        zhù: "住注驻柱祝铸贮蛀",
        zào: "皂灶造燥躁噪",
        "fó,fú,bì,bó": "佛",
        chè: "彻撤澈",
        tuǒ: "妥椭",
        lín: "邻林临琳磷鳞",
        hán: "含寒函涵韩",
        chà: "岔衩",
        cháng: "肠尝常偿",
        "dù,dǔ": "肚",
        "guī,jūn,qiū": "龟",
        miǎn: "免勉娩冕缅",
        "jiǎo,jué": "角",
        kuáng: "狂",
        "tiáo,tiāo": "条",
        luǎn: "卵",
        yíng: "迎盈营蝇赢荧莹萤",
        "xì,jì": "系",
        chuáng: "床",
        kù: "库裤酷",
        "yìng,yīng": "应",
        lěng: "冷",
        "zhè,zhèi": "这",
        xù: "序叙绪续絮蓄旭恤酗婿",
        xián: "闲贤弦咸衔嫌涎舷",
        "jiān,jiàn": "间监",
        pàn: "判盼叛畔",
        "mēn,mèn": "闷",
        wāng: "汪",
        "dì,tì,tuí": "弟",
        "shā,shà": "沙",
        "shà,shā": "煞",
        càn: "灿",
        wò: "沃卧握",
        "méi,mò": "没",
        gōu: "沟钩",
        "shěn,chén": "沈",
        huái: "怀槐徊淮",
        sòng: "宋送诵颂讼",
        hóng: "宏虹洪鸿",
        qióng: "穷琼",
        zāi: "灾栽",
        liáng: "良梁粮粱",
        zhèng: "证郑政",
        bǔ: "补捕哺",
        sù: "诉肃素速塑粟溯",
        "shí,zhì": "识",
        cí: "词辞慈磁祠瓷雌",
        zhěn: "诊枕疹",
        "niào,suī": "尿",
        céng: "层",
        jú: "局菊橘",
        "wěi,yǐ": "尾",
        zhāng: "张章彰樟",
        gǎi: "改",
        lù: "陆录鹿路赂",
        "ē,ā": "阿",
        zǔ: "阻组祖诅",
        miào: "妙庙",
        yāo: "妖腰邀夭吆",
        nǔ: "努",
        "jìn,jìng": "劲",
        rěn: "忍",
        qū: "驱屈岖蛆躯",
        chún: "纯唇醇",
        nà: "纳钠捺",
        bó: "驳脖博搏膊舶渤",
        "zòng,zǒng": "纵",
        "wén,wèn": "纹",
        lǘ: "驴",
        huán: "环",
        qīng: "青轻倾清蜻氢卿",
        xiàn: "现限线宪陷馅羡献腺",
        biǎo: "表",
        "mǒ,mò,mā": "抹",
        lǒng: "拢垄",
        "dān,dàn,dǎn": "担",
        bá: "拔跋",
        jiǎn: "拣茧俭捡检减剪简柬碱",
        tǎn: "坦毯袒",
        chōu: "抽",
        yā: "押鸦鸭",
        guǎi: "拐",
        pāi: "拍",
        zhě: "者",
        dǐng: "顶鼎",
        yōng: "拥庸",
        "chāi,cā": "拆",
        dǐ: "抵",
        "jū,gōu": "拘",
        lā: "垃",
        "lā,lá": "拉",
        "bàn,pàn": "拌",
        zhāo: "招昭",
        pō: "坡泼颇",
        bō: "拨波玻菠播",
        "zé,zhái": "择",
        tái: "抬",
        "qí,jī": "其奇",
        qǔ: "取娶",
        kǔ: "苦",
        mào: "茂贸帽貌",
        "ruò,rě": "若",
        miáo: "苗描瞄",
        "píng,pēng": "苹",
        yīng: "英樱鹰莺婴缨鹦",
        qié: "茄",
        jīng: "茎京经惊晶睛精荆兢鲸",
        "zhī,qí": "枝",
        bēi: "杯悲碑卑",
        "guì,jǔ": "柜",
        bǎn: "板版",
        sōng: "松",
        qiāng: "枪腔",
        gòu: "构购够垢",
        "sàng,sāng": "丧",
        huà: "画话桦",
        huò: "或货获祸惑霍",
        "cì,cī": "刺",
        "yǔ,yù": "雨语",
        "bēn,bèn": "奔",
        fèn: "奋粪愤忿",
        hōng: "轰烘",
        "qī,qì": "妻",
        ōu: "欧殴鸥",
        qǐng: "顷请",
        "zhuǎn,zhuàn,zhuǎi": "转",
        zhǎn: "斩盏展",
        ruǎn: "软",
        lún: "轮仑伦沦",
        dào: "到盗悼道稻",
        chǐ: "齿耻侈",
        kěn: "肯垦恳啃",
        hǔ: "虎",
        "xiē,suò": "些",
        lǔ: "虏鲁卤",
        shèn: "肾渗慎",
        shàng: "尚",
        guǒ: "果裹",
        kūn: "昆坤",
        guó: "国",
        chāng: "昌猖",
        chàng: "畅唱",
        diǎn: "典点碘",
        gù: "固故顾雇",
        áng: "昂",
        zhōng: "忠终钟盅衷",
        "ne,ní": "呢",
        àn: "岸按案暗",
        "tiě,tiē,tiè,": "帖",
        luó: "罗萝锣箩骡螺逻",
        kǎi: "凯慨",
        "lǐng,líng": "岭",
        bài: "败拜",
        tú: "图徒途涂屠",
        chuí: "垂锤捶",
        "zhī,zhì": "知织",
        guāi: "乖",
        gǎn: "秆赶敢感橄",
        "hé,hè,huó,huò,hú": "和",
        "gòng,gōng": "供共",
        "wěi,wēi": "委",
        "cè,zè,zhāi": "侧",
        pèi: "佩配沛",
        "pò,pǎi": "迫",
        "de,dì,dí": "的",
        pá: "爬",
        suǒ: "所索锁琐",
        jìng: "径竞竟敬静境镜靖",
        mìng: "命",
        "cǎi,cài": "采",
        niàn: "念",
        tān: "贪摊滩瘫",
        rǔ: "乳辱",
        pín: "贫",
        fū: "肤麸孵敷",
        fèi: "肺废沸费吠",
        zhǒng: "肿",
        péng: "朋棚蓬膨硼鹏澎篷",
        "fú,fù": "服",
        féi: "肥",
        hūn: "昏婚荤",
        tù: "兔",
        hú: "狐胡壶湖蝴弧葫",
        gǒu: "狗苟",
        bǎo: "饱宝保",
        xiǎng: "享响想",
        biàn: "变遍辨辩辫",
        "dǐ,de": "底",
        "jìng,chēng": "净",
        fàng: "放",
        nào: "闹",
        zhá: "闸铡",
        "juàn,juǎn": "卷",
        "quàn,xuàn": "券",
        "dān,shàn,chán": "单",
        chǎo: "炒",
        "qiǎn,jiān": "浅",
        fǎ: "法",
        "xiè,yì": "泄",
        lèi: "泪类",
        zhān: "沾粘毡瞻",
        "pō,bó": "泊",
        "pào,pāo": "泡",
        xiè: "泻卸屑械谢懈蟹",
        "ní,nì": "泥",
        "zé,shì": "泽",
        pà: "怕帕",
        guài: "怪",
        zōng: "宗棕踪",
        shěn: "审婶",
        zhòu: "宙昼皱骤咒",
        "kōng,kòng,kǒng": "空",
        "láng,làng": "郎",
        chèn: "衬趁",
        gāi: "该",
        "xiáng,yáng": "详",
        "lì,dài": "隶",
        jū: "居鞠驹",
        "shuā,shuà": "刷",
        mèng: "孟梦",
        gū: "孤姑辜咕沽菇箍",
        "jiàng,xiáng": "降",
        mèi: "妹昧媚",
        jiě: "姐",
        jià: "驾架嫁稼",
        "cān,shēn,cēn,sān": "参",
        liàn: "练炼恋链",
        xì: "细隙",
        shào: "绍哨",
        tuó: "驼驮鸵",
        guàn: "贯惯灌罐",
        zòu: "奏揍",
        chūn: "春椿",
        bāng: "帮邦梆",
        "dú,dài": "毒",
        guà: "挂卦褂",
        kuǎ: "垮",
        "kuà,kū": "挎",
        náo: "挠",
        "dǎng,dàng": "挡",
        shuān: "拴栓",
        tǐng: "挺艇",
        "kuò,guā": "括",
        "shí,shè": "拾",
        "tiāo,tiǎo": "挑",
        wā: "挖蛙洼",
        pīn: "拼",
        "shèn,shén": "甚",
        mǒu: "某",
        nuó: "挪",
        gé: "革阁格隔",
        "xiàng,hàng": "巷",
        cǎo: "草",
        chá: "茶察茬",
        dàng: "荡档",
        huāng: "荒慌",
        róng: "荣绒容熔融茸蓉溶榕",
        "nán,nā": "南",
        biāo: "标彪膘",
        yào: "药耀",
        kū: "枯哭窟",
        "xiāng,xiàng": "相",
        "chá,zhā": "查",
        liǔ: "柳",
        "bǎi,bó,bò": "柏",
        "yào,yāo": "要",
        wāi: "歪",
        "yán,yàn": "研",
        lí: "厘狸离犁梨璃黎漓篱",
        "qì,qiè": "砌",
        miàn: "面",
        kǎn: "砍坎",
        shuǎ: "耍",
        nài: "耐奈",
        cán: "残蚕惭",
        zhàn: "战站栈绽蘸",
        "bèi,bēi": "背",
        lǎn: "览懒揽缆榄",
        "shěng,xǐng": "省",
        "xiāo,xuē": "削",
        zhǎ: "眨",
        "hǒng,hōng,hòng": "哄",
        xiǎn: "显险",
        "mào,mò": "冒",
        "yǎ,yā": "哑",
        yìng: "映硬",
        zuó: "昨",
        xīng: "星腥猩",
        pā: "趴",
        guì: "贵桂跪刽",
        "sī,sāi": "思",
        xiā: "虾瞎",
        "mǎ,mā,mà": "蚂",
        suī: "虽",
        pǐn: "品",
        mà: "骂",
        "huá,huā": "哗",
        "yè,yàn,yān": "咽",
        "zán,zǎ": "咱",
        "hā,hǎ,hà": "哈",
        yǎo: "咬舀",
        "nǎ,něi,na,né": "哪",
        "hāi,ké": "咳",
        xiá: "峡狭霞匣侠暇辖",
        "gǔ,gū": "骨",
        "gāng,gàng": "钢",
        tiē: "贴",
        "yào,yuè": "钥",
        "kàn,kān": "看",
        jǔ: "矩举",
        zěn: "怎",
        xuǎn: "选癣",
        "zhòng,zhǒng,chóng": "种",
        miǎo: "秒渺藐",
        kē: "科棵颗磕蝌",
        "biàn,pián": "便",
        "zhòng,chóng": "重",
        liǎ: "俩",
        duàn: "段断缎锻",
        cù: "促醋簇",
        shùn: "顺瞬",
        xiū: "修羞",
        sú: "俗",
        qīn: "侵钦",
        "xìn,shēn": "信",
        huáng: "皇黄煌凰惶蝗蟥",
        "zhuī,duī": "追",
        jùn: "俊峻骏竣",
        "dài,dāi": "待",
        xū: "须虚需",
        hěn: "很狠",
        dùn: "盾顿钝",
        lǜ: "律虑滤氯",
        pén: "盆",
        "shí,sì,yì": "食",
        dǎn: "胆",
        táo: "逃桃陶萄淘",
        pàng: "胖",
        "mài,mò": "脉",
        dú: "独牍",
        jiǎo: "狡饺绞脚搅",
        yuàn: "怨院愿",
        ráo: "饶",
        wān: "弯湾豌",
        āi: "哀哎埃",
        "jiāng,jiàng": "将浆",
        tíng: "亭庭停蜓廷",
        liàng: "亮谅辆晾",
        "dù,duó": "度",
        chuāng: "疮窗",
        "qīn,qìng": "亲",
        zī: "姿资滋咨",
        dì: "帝递第蒂缔",
        "chà,chā,chāi,cī": "差",
        yǎng: "养氧痒",
        qián: "前钱钳潜黔",
        mí: "迷谜靡",
        nì: "逆昵匿腻",
        "zhà,zhá": "炸",
        zǒng: "总",
        làn: "烂滥",
        "pào,páo,bāo": "炮",
        tì: "剃惕替屉涕",
        "sǎ,xǐ": "洒",
        zhuó: "浊啄灼茁卓酌",
        "xǐ,xiǎn": "洗",
        qià: "洽恰",
        pài: "派湃",
        huó: "活",
        rǎn: "染",
        héng: "恒衡",
        hún: "浑魂",
        nǎo: "恼脑",
        "jué,jiào": "觉",
        hèn: "恨",
        xuān: "宣轩喧",
        qiè: "窃怯",
        "biǎn,piān": "扁",
        ǎo: "袄",
        shén: "神",
        "shuō,shuì,yuè": "说",
        tuì: "退蜕",
        chú: "除厨锄雏橱",
        méi: "眉梅煤霉玫枚媒楣",
        hái: "孩",
        wá: "娃",
        "lǎo,mǔ": "姥",
        nù: "怒",
        hè: "贺赫褐鹤",
        róu: "柔揉蹂",
        bǎng: "绑膀",
        lěi: "垒蕾儡",
        rào: "绕",
        "gěi,jǐ": "给",
        luò: "骆洛",
        "luò,lào": "络",
        tǒng: "统桶筒捅",
        gēng: "耕羹",
        hào: "耗浩",
        bān: "班般斑搬扳颁",
        zhū: "珠株诸猪蛛",
        lāo: "捞",
        fěi: "匪诽",
        "zǎi,zài": "载",
        "mái,mán": "埋",
        "shāo,shào": "捎稍",
        zhuō: "捉桌拙",
        niē: "捏",
        kǔn: "捆",
        "dū,dōu": "都",
        sǔn: "损笋",
        juān: "捐鹃",
        zhé: "哲辙",
        rè: "热",
        wǎn: "挽晚碗惋婉",
        "ái,āi": "挨",
        "mò,mù": "莫",
        "è,wù,ě,wū": "恶",
        tóng: "桐铜童彤瞳",
        "xiào,jiào": "校",
        "hé,hú": "核",
        yàng: "样漾",
        gēn: "根跟",
        gē: "哥鸽割歌戈",
        chǔ: "础储楚",
        pò: "破魄",
        tào: "套",
        chái: "柴豺",
        dǎng: "党",
        mián: "眠绵棉",
        shài: "晒",
        jǐn: "紧锦谨",
        "yūn,yùn": "晕",
        "huàng,huǎng": "晃",
        shǎng: "晌赏",
        ēn: "恩",
        "ài,āi": "唉",
        "ā,á,ǎ,à,a": "啊",
        "bà,ba,pí": "罢",
        zéi: "贼",
        tiě: "铁",
        "zuàn,zuān": "钻",
        "qiān,yán": "铅",
        quē: "缺",
        tè: "特",
        "chéng,shèng": "乘",
        dí: "敌笛涤嘀嫡",
        zū: "租",
        chèng: "秤",
        "mì,bì": "秘泌",
        "chēng,chèn,chèng": "称",
        tòu: "透",
        zhài: "债寨",
        "dào,dǎo": "倒",
        "tǎng,cháng": "倘",
        "chàng,chāng": "倡",
        juàn: "倦绢眷",
        "chòu,xiù": "臭",
        "shè,yè,yì": "射",
        xú: "徐",
        háng: "航杭",
        ná: "拿",
        wēng: "翁嗡",
        diē: "爹跌",
        ài: "爱碍艾隘",
        "gē,gé": "胳搁",
        cuì: "脆翠悴粹",
        zàng: "脏葬",
        láng: "狼廊琅榔",
        féng: "逢",
        è: "饿扼遏愕噩鳄",
        "shuāi,cuī": "衰",
        gāo: "高糕羔篙",
        zhǔn: "准",
        bìng: "病",
        téng: "疼腾誊藤",
        "liáng,liàng": "凉量",
        táng: "唐堂塘膛糖棠搪",
        pōu: "剖",
        "chù,xù": "畜",
        "páng,bàng": "旁磅",
        lǚ: "旅屡吕侣铝缕履",
        fěn: "粉",
        liào: "料镣",
        shāo: "烧",
        yān: "烟淹",
        tāo: "涛掏滔",
        lào: "涝酪",
        zhè: "浙蔗",
        xiāo: "消宵销萧硝箫嚣",
        hǎi: "海",
        "zhǎng,zhàng": "涨",
        làng: "浪",
        rùn: "润闰",
        tàng: "烫",
        "yǒng,chōng": "涌",
        huǐ: "悔毁",
        "qiāo,qiǎo": "悄",
        hài: "害亥骇",
        "jiā,jia,jie": "家",
        kuān: "宽",
        bīn: "宾滨彬缤濒",
        zhǎi: "窄",
        lǎng: "朗",
        "dú,dòu": "读",
        zǎi: "宰",
        "shàn,shān": "扇",
        "shān,shàn": "苫",
        wà: "袜",
        xiáng: "祥翔",
        shuí: "谁",
        páo: "袍咆",
        "bèi,pī": "被",
        "tiáo,diào,zhōu": "调",
        yuān: "冤鸳渊",
        "bō,bāo": "剥",
        ruò: "弱",
        péi: "陪培赔",
        niáng: "娘",
        tōng: "通",
        "néng,nài": "能",
        "nán,nàn,nuó": "难",
        sāng: "桑",
        pěng: "捧",
        dǔ: "堵赌睹",
        yǎn: "掩眼演衍",
        duī: "堆",
        "pái,pǎi": "排",
        tuī: "推",
        "jiào,jiāo": "教",
        lüè: "掠略",
        "jù,jū": "据",
        kòng: "控",
        "zhù,zhuó,zhe": "著",
        "jūn,jùn": "菌",
        "lè,lēi": "勒",
        méng: "萌盟檬朦",
        cài: "菜",
        tī: "梯踢剔",
        "shāo,sào": "梢",
        "fù,pì": "副",
        "piào,piāo": "票",
        shuǎng: "爽",
        "shèng,chéng": "盛",
        "què,qiāo,qiǎo": "雀",
        xuě: "雪",
        "chí,shi": "匙",
        xuán: "悬玄漩",
        "mī,mí": "眯",
        "la,lā": "啦",
        "shé,yí": "蛇",
        "lèi,léi,lěi": "累",
        "zhǎn,chán": "崭",
        "quān,juàn,juān": "圈",
        yín: "银吟淫",
        bèn: "笨",
        "lóng,lǒng": "笼",
        mǐn: "敏皿闽悯",
        nín: "您",
        ǒu: "偶藕",
        tōu: "偷",
        piān: "偏篇翩",
        "dé,děi,de": "得",
        "jiǎ,jià": "假",
        pán: "盘",
        chuán: "船",
        cǎi: "彩睬踩",
        lǐng: "领",
        liǎn: "脸敛",
        "māo,máo": "猫",
        měng: "猛锰",
        cāi: "猜",
        háo: "毫豪壕嚎",
        má: "麻",
        guǎn: "馆管",
        còu: "凑",
        hén: "痕",
        kāng: "康糠慷",
        "xuán,xuàn": "旋",
        "zhe,zhuó,zháo,zhāo": "着",
        "lǜ,shuài": "率",
        "gài,gě,hé": "盖",
        cū: "粗",
        "lín,lìn": "淋",
        "qú,jù": "渠",
        "jiàn,jiān": "渐溅",
        "hùn,hún": "混",
        pó: "婆",
        qíng: "情晴擎",
        cǎn: "惨",
        "sù,xiǔ,xiù": "宿",
        yáo: "窑谣摇遥肴姚",
        móu: "谋",
        mì: "密蜜觅",
        huǎng: "谎恍幌",
        "tán,dàn": "弹",
        suí: "随",
        "yǐn,yìn": "隐",
        "jǐng,gěng": "颈",
        shéng: "绳",
        qí: "骑棋旗歧祈脐畦崎鳍",
        chóu: "绸酬筹稠愁畴",
        "lǜ,lù": "绿",
        dā: "搭",
        kuǎn: "款",
        tǎ: "塔",
        "qū,cù": "趋",
        "tí,dī,dǐ": "提",
        "jiē,qì": "揭",
        xǐ: "喜徙",
        sōu: "搜艘",
        chā: "插",
        "lǒu,lōu": "搂",
        "qī,jī": "期",
        rě: "惹",
        "sàn,sǎn": "散",
        dǒng: "董懂",
        "gě,gé": "葛",
        pú: "葡菩蒲",
        "zhāo,cháo": "朝",
        "luò,là,lào": "落",
        kuí: "葵魁",
        bàng: "棒傍谤",
        "yǐ,yī": "椅",
        sēn: "森",
        "gùn,hùn": "棍",
        bī: "逼",
        "zhí,shi": "殖",
        "xià,shà": "厦",
        "liè,liě": "裂",
        xióng: "雄熊",
        zàn: "暂赞",
        yǎ: "雅",
        chǎng: "敞",
        zhǎng: "掌",
        shǔ: "暑鼠薯黍蜀署曙",
        zuì: "最罪醉",
        hǎn: "喊罕",
        "jǐng,yǐng": "景",
        lǎ: "喇",
        "pēn,pèn": "喷",
        "pǎo,páo": "跑",
        chuǎn: "喘",
        "hē,hè,yè": "喝",
        hóu: "喉猴",
        "pù,pū": "铺",
        hēi: "黑",
        guō: "锅郭",
        ruì: "锐瑞",
        duǎn: "短",
        é: "鹅额讹俄",
        děng: "等",
        kuāng: "筐",
        shuì: "税睡",
        "zhù,zhú": "筑",
        shāi: "筛",
        "dá,dā": "答",
        ào: "傲澳懊",
        pái: "牌徘",
        "bǎo,bǔ,pù": "堡",
        "ào,yù": "奥",
        "fān,pān": "番",
        "là,xī": "腊",
        huá: "猾滑",
        rán: "然燃",
        chán: "馋缠蝉",
        mán: "蛮馒",
        tòng: "痛",
        shàn: "善擅膳赡",
        zūn: "尊遵",
        pǔ: "普谱圃浦",
        "gǎng,jiǎng": "港",
        "céng,zēng": "曾",
        wēn: "温瘟",
        kě: "渴",
        zhā: "渣",
        duò: "惰舵跺",
        gài: "溉概丐钙",
        kuì: "愧",
        "yú,tōu": "愉",
        wō: "窝蜗",
        cuàn: "窜篡",
        qún: "裙群",
        "qiáng,qiǎng,jiàng": "强",
        "shǔ,zhǔ": "属",
        "zhōu,yù": "粥",
        sǎo: "嫂",
        huǎn: "缓",
        piàn: "骗",
        mō: "摸",
        "shè,niè": "摄",
        "tián,zhèn": "填",
        gǎo: "搞稿镐",
        suàn: "蒜算",
        "méng,mēng,měng": "蒙",
        "jìn,jīn": "禁",
        lóu: "楼娄",
        lài: "赖癞",
        "lù,liù": "碌",
        pèng: "碰",
        léi: "雷",
        báo: "雹",
        dū: "督",
        nuǎn: "暖",
        xiē: "歇楔蝎",
        kuà: "跨胯",
        "tiào,táo": "跳",
        "é,yǐ": "蛾",
        sǎng: "嗓",
        qiǎn: "遣谴",
        cuò: "错挫措锉",
        ǎi: "矮蔼",
        shǎ: "傻",
        cuī: "催摧崔",
        tuǐ: "腿",
        chù: "触矗",
        "jiě,jiè,xiè": "解",
        "shù,shǔ,shuò": "数",
        mǎn: "满",
        "liū,liù": "溜",
        gǔn: "滚",
        "sāi,sài,sè": "塞",
        "pì,bì": "辟",
        dié: "叠蝶谍碟",
        "fèng,féng": "缝",
        qiáng: "墙",
        "piě,piē": "撇",
        zhāi: "摘斋",
        shuāi: "摔",
        "mó,mú": "模",
        "bǎng,bàng": "榜",
        zhà: "榨乍诈",
        niàng: "酿",
        zāo: "遭糟",
        suān: "酸",
        "shang,cháng": "裳",
        sòu: "嗽",
        là: "蜡辣",
        qiāo: "锹敲跷",
        zhuàn: "赚撰",
        wěn: "稳吻紊",
        bí: "鼻荸",
        mó: "膜魔馍摹蘑",
        "xiān,xiǎn": "鲜",
        "yí,nǐ": "疑",
        "gāo,gào": "膏",
        zhē: "遮",
        duān: "端",
        màn: "漫慢曼幔",
        "piāo,piào,piǎo": "漂",
        lòu: "漏陋",
        sài: "赛",
        nèn: "嫩",
        dèng: "凳邓瞪",
        "suō,sù": "缩",
        "qù,cù": "趣",
        "sā,sǎ": "撒",
        "tàng,tāng": "趟",
        chēng: "撑",
        zēng: "增憎",
        cáo: "槽曹",
        "héng,hèng": "横",
        piāo: "飘",
        "mán,mén": "瞒",
        tí: "题蹄啼",
        yǐng: "影颖",
        "bào,pù": "暴",
        tà: "踏蹋",
        kào: "靠铐",
        pì: "僻屁譬",
        tǎng: "躺",
        dé: "德",
        "mó,mā": "摩",
        shú: "熟秫赎",
        "hú,hū,hù": "糊",
        "pī,pǐ": "劈",
        cháo: "潮巢",
        cāo: "操糙",
        "yàn,yān": "燕",
        diān: "颠掂",
        "báo,bó,bò": "薄",
        cān: "餐",
        xǐng: "醒",
        zhěng: "整拯",
        zuǐ: "嘴",
        zèng: "赠",
        "mó,mò": "磨",
        níng: "凝狞柠",
        "jiǎo,zhuó": "缴",
        cā: "擦",
        "cáng,zàng": "藏",
        "fán,pó": "繁",
        "bì,bei": "臂",
        bèng: "蹦泵",
        pān: "攀潘",
        "chàn,zhàn": "颤",
        "jiāng,qiáng": "疆",
        rǎng: "壤攘",
        "jiáo,jué,jiào": "嚼",
        "rǎng,rāng": "嚷",
        chǔn: "蠢",
        "lù,lòu": "露",
        "náng,nāng": "囊",
        dǎi: "歹",
        rǒng: "冗",
        "hāng,bèn": "夯",
        "āo,wā": "凹",
        "féng,píng": "冯",
        yū: "迂淤",
        "xū,yù": "吁",
        "lèi,lē": "肋",
        kōu: "抠",
        "lūn,lún": "抡",
        "jiè,gài": "芥",
        "xīn,xìn": "芯",
        "chā,chà": "杈",
        "xiāo,xiào": "肖",
        "zhī,zī": "吱",
        "ǒu,ōu,òu": "呕",
        "nà,nè": "呐",
        "qiàng,qiāng": "呛",
        "tún,dùn": "囤",
        "kēng,háng": "吭",
        shǔn: "吮",
        "diàn,tián": "佃",
        "sì,cì": "伺",
        zhǒu: "肘帚",
        "diàn,tián,shèng": "甸",
        "páo,bào": "刨",
        lìn: "吝赁躏",
        "duì,ruì,yuè": "兑",
        zhuì: "坠缀赘",
        "kē,kě": "坷",
        "tuò,tà,zhí": "拓",
        "fú,bì": "拂",
        "nǐng,níng,nìng": "拧",
        "ào,ǎo,niù": "拗",
        "kē,hē": "苛",
        "yān,yǎn": "奄",
        "hē,a,kē": "呵",
        "gā,kā": "咖",
        biǎn: "贬匾",
        "jiǎo,yáo": "侥",
        "chà,shā": "刹",
        āng: "肮",
        wèng: "瓮",
        "nüè,yào": "疟",
        páng: "庞螃",
        "máng,méng": "氓",
        "gē,yì": "疙",
        "jǔ,jù": "沮",
        "zú,cù": "卒",
        nìng: "泞",
        chǒng: "宠",
        "wǎn,yuān": "宛",
        "mí,mǐ": "弥",
        "qì,qiè,xiè": "契",
        "xié,jiā": "挟",
        "duò,duǒ": "垛",
        jiá: "荚颊",
        "zhà,shān,shi,cè": "栅",
        "bó,bèi": "勃",
        "zhóu,zhòu": "轴",
        nüè: "虐",
        "liē,liě,lié,lie": "咧",
        dǔn: "盹",
        xūn: "勋",
        "yo,yō": "哟",
        mī: "咪",
        "qiào,xiào": "俏",
        "hóu,hòu": "侯",
        pēi: "胚",
        tāi: "胎",
        luán: "峦",
        sà: "飒萨",
        shuò: "烁",
        xuàn: "炫",
        "píng,bǐng": "屏",
        "nà,nuó": "娜",
        "pá,bà": "耙",
        gěng: "埂耿梗",
        niè: "聂镊孽",
        mǎng: "莽",
        "qī,xī": "栖",
        "jiǎ,gǔ": "贾",
        chěng: "逞",
        pēng: "砰烹",
        "láo,lào": "唠",
        "bàng,bèng": "蚌",
        "gōng,zhōng": "蚣",
        "li,lǐ,lī": "哩",
        suō: "唆梭嗦",
        hēng: "哼",
        zāng: "赃",
        qiào: "峭窍撬",
        mǎo: "铆",
        ǎn: "俺",
        sǒng: "耸",
        "juè,jué": "倔",
        "yīn,yān,yǐn": "殷",
        guàng: "逛",
        něi: "馁",
        "wō,guō": "涡",
        "lào,luò": "烙",
        nuò: "诺懦糯",
        zhūn: "谆",
        "niǎn,niē": "捻",
        qiā: "掐",
        "yè,yē": "掖",
        "chān,xiān,càn,shǎn": "掺",
        "dǎn,shàn": "掸",
        "fēi,fěi": "菲",
        "qián,gān": "乾",
        shē: "奢赊",
        "shuò,shí": "硕",
        "luō,luó,luo": "啰",
        shá: "啥",
        "hǔ,xià": "唬",
        tuò: "唾",
        bēng: "崩",
        "dāng,chēng": "铛",
        "xiǎn,xǐ": "铣",
        "jiǎo,jiáo": "矫",
        tiáo: "笤",
        "kuǐ,guī": "傀",
        xìn: "衅",
        dōu: "兜",
        "jì,zhài": "祭",
        xiáo: "淆",
        "tǎng,chǎng": "淌",
        "chún,zhūn": "淳",
        shuàn: "涮",
        dāng: "裆",
        "wèi,yù": "尉",
        "duò,huī": "堕",
        "chuò,chāo": "绰",
        "bēng,běng,bèng": "绷",
        "zōng,zèng": "综",
        "zhuó,zuó": "琢",
        "chuǎi,chuài,chuāi,tuán,zhuī": "揣",
        "péng,bāng": "彭",
        chān: "搀",
        cuō: "搓",
        sāo: "搔",
        yē: "椰",
        "zhuī,chuí": "椎",
        "léng,lēng,líng": "棱",
        hān: "酣憨",
        sū: "酥",
        záo: "凿",
        "qiào,qiáo": "翘",
        "zhā,chā": "喳",
        bǒ: "跛",
        "há,gé": "蛤",
        "qiàn,kàn": "嵌",
        bāi: "掰",
        "yān,ā": "腌",
        wàn: "腕",
        "dūn,duì": "敦",
        "kuì,huì": "溃",
        jiǒng: "窘",
        "sāo,sǎo": "骚",
        pìn: "聘",
        bǎ: "靶",
        xuē: "靴薛",
        hāo: "蒿",
        léng: "楞",
        "kǎi,jiē": "楷",
        "pín,bīn": "频",
        zhuī: "锥",
        tuí: "颓",
        sāi: "腮",
        "liú,liù": "馏",
        "nì,niào": "溺",
        qǐn: "寝",
        luǒ: "裸",
        miù: "谬",
        "jiǎo,chāo": "剿",
        "áo,āo": "熬",
        niān: "蔫",
        "màn,wàn": "蔓",
        "chá,chā": "碴",
        "xūn,xùn": "熏",
        tiǎn: "舔",
        sēng: "僧",
        "da,dá": "瘩",
        guǎ: "寡",
        "tuì,tùn": "褪",
        niǎn: "撵碾",
        "liáo,liāo": "撩",
        "cuō,zuǒ": "撮",
        ruǐ: "蕊",
        "cháo,zhāo": "嘲",
        biē: "憋鳖",
        "hēi,mò": "嘿",
        "zhuàng,chuáng": "幢",
        "jī,qǐ": "稽",
        lǒu: "篓",
        lǐn: "凛檩",
        "biě,biē": "瘪",
        "liáo,lào,lǎo": "潦",
        "chéng,dèng": "澄",
        "lèi,léi": "擂",
        piáo: "瓢",
        shà: "霎",
        "mò,má": "蟆",
        qué: "瘸",
        "liáo,liǎo": "燎",
        "liào,liǎo": "瞭",
        "sào,sāo": "臊",
        "mí,méi": "糜",
        ái: "癌",
        tún: "臀",
        "huò,huō,huá": "豁",
        "pù,bào": "瀑",
        chuō: "戳",
        "zǎn,cuán": "攒",
        cèng: "蹭",
        "bò,bǒ": "簸",
        "bó,bù": "簿",
        bìn: "鬓",
        suǐ: "髓",
        ráng: "瓤"
    };

    /***/
},
/* 3 */
/***/function (module, exports) {
    // 带音标字符。
    "use strict";

    module.exports = {
        ā: "a1",
        á: "a2",
        ǎ: "a3",
        à: "a4",
        ē: "e1",
        é: "e2",
        ě: "e3",
        è: "e4",
        ō: "o1",
        ó: "o2",
        ǒ: "o3",
        ò: "o4",
        ī: "i1",
        í: "i2",
        ǐ: "i3",
        ì: "i4",
        ū: "u1",
        ú: "u2",
        ǔ: "u3",
        ù: "u4",
        ü: "v0",
        ǘ: "v2",
        ǚ: "v3",
        ǜ: "v4",
        ń: "n2",
        ň: "n3",
        "": "m2"
    };

    /***/
},
/* 4 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var assign = __webpack_require__(1);
    // XXX: Symbol when web support.
    var PINYIN_STYLE = {
        NORMAL: 0, // 普通风格，不带音标。
        TONE: 1, // 标准风格，音标在韵母的第一个字母上。
        TONE2: 2, // 声调以数字形式在拼音之后，使用数字 0~4 标识。
        TO3NE: 5, // 声调以数字形式在声母之后，使用数字 0~4 标识。
        INITIALS: 3, // 仅需要声母部分。
        FIRST_LETTER: 4
    };
    var DEFAULT_OPTIONS = {
        style: PINYIN_STYLE.TONE, // 风格
        segment: false, // 分词。
        heteronym: false
    };

    // 声母表。
    var INITIALS = "b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s".split(",");
    // 韵母表。
    //const FINALS = "ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v".split(",");
    // 带音标字符。
    var PHONETIC_SYMBOL = __webpack_require__(3);
    var RE_PHONETIC_SYMBOL = new RegExp("([" + Object.keys(PHONETIC_SYMBOL).join("") + "])", "g");
    var RE_TONE2 = /([aeoiuvnm])([0-4])$/;

    /*
     * 格式化拼音为声母（Initials）形式。
     * @param {String}
     * @return {String}
     */
    function initials(pinyin) {
        for (var i = 0, l = INITIALS.length; i < l; i++) {
            if (pinyin.indexOf(INITIALS[i]) === 0) {
                return INITIALS[i];
            }
        }
        return "";
    }

    var Pinyin = function () {
        function Pinyin(dict) {
            _classCallCheck(this, Pinyin);

            this._dict = dict;
        }

        _createClass(Pinyin, [{
            key: "convert",

            // @param {String} hans 要转为拼音的目标字符串（汉字）。
            // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。
            // @return {Array} 返回的拼音列表。
            value: function convert(hans, options) {
                if (typeof hans !== "string") {
                    return [];
                }

                options = assign({}, DEFAULT_OPTIONS, options);

                var pys = [];
                var nohans = "";

                for (var i = 0, firstCharCode = undefined, words = undefined, l = hans.length; i < l; i++) {
                    words = hans[i];
                    firstCharCode = words.charCodeAt(0);

                    if (this._dict[firstCharCode]) {
                        // ends of non-chinese words.
                        if (nohans.length > 0) {
                            pys.push([nohans]);
                            nohans = ""; // reset non-chinese words.
                        }

                        pys.push(this.single_pinyin(words, options));
                    } else {
                        nohans += words;
                    }
                }

                // 清理最后的非中文字符串。
                if (nohans.length > 0) {
                    pys.push([nohans]);
                    nohans = ""; // reset non-chinese words.
                }
                return pys;
            }
        }, {
            key: "single_pinyin",

            // 单字拼音转换。
            // @param {String} han, 单个汉字
            // @return {Array} 返回拼音列表，多音字会有多个拼音项。
            value: function single_pinyin(han, options) {
                if (typeof han !== "string") {
                    return [];
                }
                if (han.length !== 1) {
                    return this.single_pinyin(han.charAt(0), options);
                }

                var hanCode = han.charCodeAt(0);

                if (!this._dict[hanCode]) {
                    return [han];
                }

                var pys = this._dict[hanCode].split(",");
                if (!options.heteronym) {
                    return [Pinyin.toFixed(pys[0], options.style)];
                }

                // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。
                var py_cached = {};
                var pinyins = [];
                for (var i = 0, py = undefined, l = pys.length; i < l; i++) {
                    py = Pinyin.toFixed(pys[i], options.style);
                    if (py_cached.hasOwnProperty(py)) {
                        continue;
                    }
                    py_cached[py] = py;

                    pinyins.push(py);
                }
                return pinyins;
            }
        }, {
            key: "compare",

            /**
             * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。
             *
             * @param {String} hanA 汉字字符串 A。
             * @return {String} hanB 汉字字符串 B。
             * @return {Number} 返回 -1，0，或 1。
             */
            value: function compare(hanA, hanB) {
                var pinyinA = this.convert(hanA, DEFAULT_OPTIONS);
                var pinyinB = this.convert(hanB, DEFAULT_OPTIONS);
                return String(pinyinA).localeCompare(pinyinB);
            }
        }], [{
            key: "toFixed",

            /**
             * 格式化拼音风格。
             *
             * @param {String} pinyin TONE 风格的拼音。
             * @param {ENUM} style 目标转换的拼音风格。
             * @return {String} 转换后的拼音。
             */
            value: function toFixed(pinyin, style) {
                var tone = ""; // 声调。
                var first_letter = undefined;
                var py = undefined;
                switch (style) {
                    case PINYIN_STYLE.INITIALS:
                        return initials(pinyin);

                    case PINYIN_STYLE.FIRST_LETTER:
                        first_letter = pinyin.charAt(0);
                        if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {
                            first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);
                        }
                        return first_letter;

                    case PINYIN_STYLE.NORMAL:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, "$1");
                        });

                    case PINYIN_STYLE.TO3NE:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic];
                        });

                    case PINYIN_STYLE.TONE2:
                        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {
                            // 声调数值。
                            tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$2");

                            return PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$1");
                        });
                        return py + tone;

                    case PINYIN_STYLE.TONE:
                    default:
                        return pinyin;
                }
            }
        }, {
            key: "STYLE_NORMAL",
            get: function get() {
                return PINYIN_STYLE.NORMAL;
            }
        }, {
            key: "STYLE_TONE",
            get: function get() {
                return PINYIN_STYLE.TONE;
            }
        }, {
            key: "STYLE_TONE2",
            get: function get() {
                return PINYIN_STYLE.TONE2;
            }
        }, {
            key: "STYLE_TO3NE",
            get: function get() {
                return PINYIN_STYLE.TO3NE;
            }
        }, {
            key: "STYLE_INITIALS",
            get: function get() {
                return PINYIN_STYLE.INITIALS;
            }
        }, {
            key: "STYLE_FIRST_LETTER",
            get: function get() {
                return PINYIN_STYLE.FIRST_LETTER;
            }
        }, {
            key: "DEFAULT_OPTIONS",
            get: function get() {
                return DEFAULT_OPTIONS;
            }
        }]);

        return Pinyin;
    }();

    module.exports = Pinyin;
    // 仅保留首字母。
    // 多音字

    /***/
},
/* 5 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    // 解压拼音库。
    // @param {Object} dict_combo, 压缩的拼音库。
    // @param {Object} 解压的拼音库。

    function buildPinyinCache(dict_combo) {
        var hans = undefined;
        var uncomboed = {};

        for (var py in dict_combo) {
            hans = dict_combo[py];
            for (var i = 0, han = undefined, l = hans.length; i < l; i++) {
                han = hans.charCodeAt(i);
                if (!uncomboed.hasOwnProperty(han)) {
                    uncomboed[han] = py;
                } else {
                    uncomboed[han] += "," + py;
                }
            }
        }

        return uncomboed;
    }

    var PINYIN_DICT = buildPinyinCache(__webpack_require__(2));
    var Pinyin = __webpack_require__(4);
    var pinyin = new Pinyin(PINYIN_DICT);

    module.exports = pinyin.convert.bind(pinyin);
    module.exports.compare = pinyin.compare.bind(pinyin);
    module.exports.STYLE_NORMAL = Pinyin.STYLE_NORMAL;
    module.exports.STYLE_TONE = Pinyin.STYLE_TONE;
    module.exports.STYLE_TONE2 = Pinyin.STYLE_TONE2;
    module.exports.STYLE_TO3NE = Pinyin.STYLE_TO3NE;
    module.exports.STYLE_INITIALS = Pinyin.STYLE_INITIALS;
    module.exports.STYLE_FIRST_LETTER = Pinyin.STYLE_FIRST_LETTER;

    /***/
}
/******/
]);
//# sourceMappingURL=bundle.js.map

/***/ }),
/* 12 */
/***/ (function(module, exports) {

this["pinyin"] = /******/function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/var installedModules = {}; // The require function
    /******/
    /******/ /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports; // Create a new module (and put it into the cache)
        /******/
        /******/ /******/var module = installedModules[moduleId] = {
            /******/exports: {},
            /******/id: moduleId,
            /******/loaded: false
            /******/
        }; // Execute the module function
        /******/
        /******/ /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded
        /******/
        /******/ /******/module.loaded = true; // Return the exports of the module
        /******/
        /******/ /******/return module.exports;
        /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/__webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/__webpack_require__.c = installedModules; // __webpack_public_path__
    /******/
    /******/ /******/__webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/return __webpack_require__(0);
    /******/
}(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    module.exports = __webpack_require__(5);

    /***/
},
/* 1 */
/***/function (module, exports) {
    /* eslint-disable no-unused-vars */
    "use strict";

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
        }

        return Object(val);
    }

    module.exports = Object.assign || function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }

            if (Object.getOwnPropertySymbols) {
                symbols = Object.getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }

        return to;
    };

    /***/
},
/* 2 */
/***/function (module, exports) {
    "use strict";

    module.exports = {
        èr: "二贰",
        shí: "十时实蚀",
        yǐ: "乙已以蚁倚",
        yī: "一衣医依伊揖壹",
        "chǎng,ān,hàn": "厂",
        "dīng,zhēng": "丁",
        qī: "七戚欺漆柒凄嘁",
        "bǔ,bo": "卜",
        rén: "人仁",
        rù: "入褥",
        jiǔ: "九久酒玖灸韭",
        ér: "儿而",
        bā: "八巴疤叭芭捌笆",
        "jǐ,jī": "几",
        "le,liǎo": "了",
        lì: "力历厉立励利例栗粒吏沥荔俐莉砾雳痢",
        dāo: "刀",
        nǎi: "乃奶",
        sān: "三叁",
        yòu: "又右幼诱佑",
        yú: "于余鱼娱渔榆愚隅逾舆",
        shì: "士示世市式势事侍饰试视柿是适室逝释誓拭恃嗜",
        "gān,gàn": "干",
        gōng: "工弓公功攻宫恭躬",
        kuī: "亏盔窥",
        tǔ: "土",
        cùn: "寸",
        "dà,dài,tài": "大",
        cái: "才材财裁",
        xià: "下夏",
        zhàng: "丈仗帐胀障杖账",
        "yǔ,yù,yú": "与",
        "shàng,shǎng": "上",
        "wàn,mò": "万",
        kǒu: "口",
        xiǎo: "小晓",
        jīn: "巾斤今金津筋襟",
        shān: "山删衫珊",
        qiān: "千迁牵谦签",
        qǐ: "乞企启起",
        chuān: "川穿",
        "gè,gě": "个各",
        sháo: "勺芍",
        yì: "亿义艺忆议亦异役译易疫益谊意毅翼屹抑邑绎奕逸肄溢",
        jí: "及吉级极即急疾集籍棘辑嫉",
        fán: "凡烦矾樊",
        xī: "夕西吸希析牺息悉惜稀锡溪熄膝昔晰犀熙嬉蟋",
        wán: "丸完玩顽",
        "me,mó,ma,yāo": "么",
        "guǎng,ān": "广",
        "wáng,wú": "亡",
        mén: "门们",
        shī: "尸失师诗狮施湿虱",
        zhī: "之支汁芝肢脂蜘",
        jǐ: "己挤脊",
        zǐ: "子紫姊籽滓",
        wèi: "卫未位味畏胃喂慰谓猬蔚魏",
        yě: "也冶野",
        "nǚ,rǔ": "女",
        rèn: "刃认韧纫",
        fēi: "飞非啡",
        xí: "习席袭媳",
        mǎ: "马码玛",
        "chā,chá,chǎ": "叉",
        fēng: "丰封疯峰锋蜂枫",
        xiāng: "乡香箱厢湘镶",
        jǐng: "井警阱",
        "wáng,wàng": "王",
        kāi: "开揩",
        tiān: "天添",
        wú: "无吴芜梧蜈",
        "fū,fú": "夫",
        zhuān: "专砖",
        yuán: "元园原圆援缘源袁猿辕",
        yún: "云匀耘",
        "zhā,zā,zhá": "扎",
        mù: "木目牧墓幕暮慕沐募睦穆",
        wǔ: "五午伍武侮舞捂鹉",
        tīng: "厅听",
        "bù,fǒu": "不",
        "qū,ōu": "区",
        quǎn: "犬",
        tài: "太态泰汰",
        yǒu: "友",
        "chē,jū": "车",
        pǐ: "匹",
        yóu: "尤由邮犹油游",
        jù: "巨拒具俱剧距惧锯聚炬",
        yá: "牙芽崖蚜涯衙",
        bǐ: "比彼笔鄙匕秕",
        jiē: "皆阶接街秸",
        hù: "互户护沪",
        "qiè,qiē": "切",
        "wǎ,wà": "瓦",
        zhǐ: "止旨址纸指趾",
        "tún,zhūn": "屯",
        "shǎo,shào": "少",
        rì: "日",
        "zhōng,zhòng": "中",
        gāng: "冈刚纲缸肛",
        "nèi,nà": "内",
        bèi: "贝备倍辈狈惫焙",
        shuǐ: "水",
        "jiàn,xiàn": "见",
        niú: "牛",
        shǒu: "手守首",
        máo: "毛矛茅锚",
        qì: "气弃汽器迄泣",
        shēng: "升生声牲笙甥",
        "cháng,zhǎng": "长",
        "shén,shí": "什",
        "piàn,piān": "片",
        "pú,pū": "仆",
        "huà,huā": "化",
        bì: "币必毕闭毙碧蔽弊避壁庇蓖痹璧",
        "chóu,qiú": "仇",
        "zhuǎ,zhǎo": "爪",
        "jǐn,jìn": "仅",
        réng: "仍",
        "fù,fǔ": "父",
        "cóng,zòng": "从",
        fǎn: "反返",
        jiè: "介戒届界借诫",
        xiōng: "凶兄胸匈汹",
        "fēn,fèn": "分",
        fá: "乏伐罚阀筏",
        cāng: "仓苍舱沧",
        yuè: "月阅悦跃越岳粤",
        "shì,zhī": "氏",
        wù: "勿务物误悟雾坞晤",
        qiàn: "欠歉",
        "fēng,fěng": "风",
        dān: "丹耽",
        wū: "乌污呜屋巫诬",
        fèng: "凤奉",
        "gōu,gòu": "勾",
        wén: "文闻蚊",
        "liù,lù": "六",
        huǒ: "火伙",
        fāng: "方芳",
        "dǒu,dòu": "斗",
        "wèi,wéi": "为",
        dìng: "订定锭",
        jì: "计记技忌际季剂迹既继寄绩妓荠寂鲫冀",
        xīn: "心辛欣新薪锌",
        "chǐ,chě": "尺",
        yǐn: "引饮蚓瘾",
        chǒu: "丑",
        kǒng: "孔恐",
        duì: "队对",
        bàn: "办半扮伴瓣绊",
        "yǔ,yú": "予",
        yǔn: "允陨",
        quàn: "劝",
        shū: "书叔殊梳舒疏输蔬抒枢淑",
        shuāng: "双霜",
        yù: "玉育狱浴预域欲遇御裕愈誉芋郁喻寓豫",
        huàn: "幻换唤患宦涣焕痪",
        kān: "刊堪勘",
        mò: "末沫漠墨默茉陌寞",
        jī: "击饥圾机肌鸡积基激讥叽唧畸箕",
        "dǎ,dá": "打",
        qiǎo: "巧",
        "zhèng,zhēng": "正症挣",
        pū: "扑",
        "bā,pá": "扒",
        gān: "甘肝竿柑",
        qù: "去",
        rēng: "扔",
        gǔ: "古谷股鼓",
        běn: "本",
        "jié,jiē": "节结",
        "shù,shú,zhú": "术",
        bǐng: "丙柄饼秉禀",
        "kě,kè": "可",
        zuǒ: "左",
        bù: "布步怖部埠",
        "shí,dàn": "石",
        lóng: "龙聋隆咙胧窿",
        yà: "轧亚讶",
        miè: "灭蔑",
        píng: "平评凭瓶萍坪",
        dōng: "东冬",
        "kǎ,qiǎ": "卡",
        "běi,bèi": "北",
        yè: "业页夜液谒腋",
        jiù: "旧救就舅臼疚",
        shuài: "帅蟀",
        guī: "归规闺硅瑰",
        "zhàn,zhān": "占",
        dàn: "旦但诞淡蛋氮",
        "qiě,jū": "且",
        "yè,xié": "叶",
        jiǎ: "甲钾",
        dīng: "叮盯",
        shēn: "申伸身深呻绅",
        "hào,háo": "号",
        diàn: "电店垫殿玷淀惦奠",
        tián: "田甜恬",
        shǐ: "史使始驶矢屎",
        "zhī,zhǐ": "只",
        yāng: "央殃秧鸯",
        diāo: "叼雕刁碉",
        jiào: "叫轿较窖酵",
        lìng: "另",
        "dāo,tāo": "叨",
        sì: "四寺饲肆",
        tàn: "叹炭探碳",
        qiū: "丘秋蚯",
        hé: "禾河荷盒",
        fù: "付负妇附咐赴复傅富腹覆赋缚",
        dài: "代带贷怠袋逮戴",
        xiān: "仙先掀锨",
        yí: "仪宜姨移遗夷胰",
        bái: "白",
        "zǎi,zǐ,zī": "仔",
        chì: "斥赤翅",
        tā: "他它塌",
        guā: "瓜刮",
        hū: "乎呼忽",
        cóng: "丛",
        "lìng,líng,lǐng": "令",
        yòng: "用",
        shuǎi: "甩",
        yìn: "印",
        "lè,yuè": "乐",
        "jù,gōu": "句",
        cōng: "匆葱聪囱",
        fàn: "犯饭泛范贩",
        cè: "册厕测策",
        wài: "外",
        "chù,chǔ": "处",
        niǎo: "鸟",
        bāo: "包胞苞褒",
        zhǔ: "主煮嘱拄",
        shǎn: "闪陕",
        lán: "兰拦栏蓝篮澜",
        "tóu,tou": "头",
        huì: "汇绘贿惠慧讳诲晦秽",
        hàn: "汉旱捍悍焊撼翰憾",
        tǎo: "讨",
        xué: "穴学",
        xiě: "写",
        "níng,nìng,zhù": "宁",
        ràng: "让",
        lǐ: "礼李里理鲤",
        xùn: "训讯迅汛驯逊殉",
        yǒng: "永咏泳勇蛹踊",
        mín: "民",
        chū: "出初",
        ní: "尼",
        sī: "司丝私斯撕嘶",
        liáo: "辽疗僚聊寥嘹缭",
        jiā: "加佳嘉枷",
        nú: "奴",
        "zhào,shào": "召",
        biān: "边编鞭蝙",
        pí: "皮疲脾啤",
        yùn: "孕运韵酝蕴",
        "fā,fà": "发",
        shèng: "圣胜剩",
        "tái,tāi": "台苔",
        jiū: "纠究揪鸠",
        mǔ: "母亩牡拇姆",
        "káng,gāng": "扛",
        xíng: "刑形型邢",
        dòng: "动冻栋洞",
        kǎo: "考烤拷",
        kòu: "扣寇",
        tuō: "托拖脱",
        lǎo: "老",
        gǒng: "巩汞拱",
        zhí: "执直侄值职植",
        kuò: "扩阔廓",
        yáng: "扬阳杨洋",
        "dì,de": "地",
        "sǎo,sào": "扫",
        "chǎng,cháng": "场",
        ěr: "耳尔饵",
        máng: "芒忙盲茫",
        xiǔ: "朽",
        "pǔ,pò,pō,piáo": "朴",
        quán: "权全泉拳痊",
        "guò,guo,guō": "过",
        chén: "臣尘辰沉陈晨忱",
        zài: "再在",
        xié: "协胁斜携鞋谐",
        "yā,yà": "压",
        yàn: "厌艳宴验雁焰砚唁谚堰",
        "yǒu,yòu": "有",
        cún: "存",
        bǎi: "百摆",
        "kuā,kuà": "夸",
        jiàng: "匠酱",
        duó: "夺踱",
        huī: "灰挥恢辉徽",
        dá: "达",
        sǐ: "死",
        liè: "列劣烈猎",
        guǐ: "轨鬼诡",
        "xié,yá,yé,yú,xú": "邪",
        "jiá,jiā,gā,xiá": "夹",
        chéng: "成呈诚承城程惩橙",
        mài: "迈麦卖",
        "huà,huá": "划",
        zhì: "至志帜制质治致秩智置挚掷窒滞稚",
        cǐ: "此",
        zhēn: "贞针侦珍真斟榛",
        jiān: "尖奸歼坚肩艰兼煎",
        guāng: "光",
        "dāng,dàng": "当",
        zǎo: "早枣澡蚤藻",
        "tù,tǔ": "吐",
        "xià,hè": "吓",
        chóng: "虫崇",
        tuán: "团",
        "tóng,tòng": "同",
        "qū,qǔ": "曲",
        diào: "吊钓掉",
        yīn: "因阴音姻茵",
        chī: "吃嗤痴",
        "ma,má,mǎ": "吗",
        yǔ: "屿宇羽",
        fān: "帆翻",
        huí: "回茴蛔",
        "qǐ,kǎi": "岂",
        zé: "则责",
        suì: "岁碎穗祟遂隧",
        ròu: "肉",
        "zhū,shú": "朱",
        wǎng: "网往枉",
        nián: "年",
        diū: "丢",
        shé: "舌",
        zhú: "竹逐烛",
        qiáo: "乔侨桥瞧荞憔",
        wěi: "伟伪苇纬萎",
        "chuán,zhuàn": "传",
        pāng: "乓",
        pīng: "乒",
        "xiū,xǔ": "休",
        fú: "伏扶俘浮符幅福凫芙袱辐蝠",
        yōu: "优忧悠幽",
        yán: "延严言岩炎沿盐颜阎蜒檐",
        jiàn: "件建荐贱剑健舰践鉴键箭涧",
        "rèn,rén": "任",
        "huá,huà,huā": "华",
        "jià,jiè,jie": "价",
        shāng: "伤商",
        "fèn,bīn": "份",
        fǎng: "仿访纺",
        "yǎng,áng": "仰",
        zì: "自字",
        "xiě,xuè": "血",
        xiàng: "向项象像橡",
        "sì,shì": "似",
        hòu: "后厚候",
        zhōu: "舟州周洲",
        "háng,xíng": "行",
        "huì,kuài": "会",
        shā: "杀纱杉砂",
        "hé,gě": "合",
        zhào: "兆赵照罩",
        zhòng: "众仲",
        yé: "爷",
        sǎn: "伞",
        "chuàng,chuāng": "创",
        duǒ: "朵躲",
        wēi: "危威微偎薇巍",
        xún: "旬寻巡询循",
        zá: "杂砸",
        míng: "名明鸣铭螟",
        duō: "多哆",
        zhēng: "争征睁筝蒸怔狰",
        sè: "色涩瑟",
        zhuàng: "壮状撞",
        "chōng,chòng": "冲",
        bīng: "冰兵",
        zhuāng: "庄装妆桩",
        qìng: "庆",
        liú: "刘留流榴琉硫瘤",
        "qí,jì,zī,zhāi": "齐",
        cì: "次赐",
        jiāo: "交郊浇娇骄胶椒焦蕉礁",
        chǎn: "产铲阐",
        wàng: "妄忘旺望",
        chōng: "充",
        wèn: "问",
        chuǎng: "闯",
        "yáng,xiáng": "羊",
        "bìng,bīng": "并",
        dēng: "灯登蹬",
        mǐ: "米",
        guān: "关官棺",
        "hàn,hán": "汗",
        jué: "决绝掘诀爵",
        jiāng: "江姜僵缰",
        "tāng,shāng": "汤",
        chí: "池驰迟持弛",
        "xīng,xìng": "兴",
        zhái: "宅",
        ān: "安氨庵鞍",
        jiǎng: "讲奖桨蒋",
        jūn: "军均君钧",
        "xǔ,hǔ": "许",
        fěng: "讽",
        "lùn,lún": "论",
        nóng: "农浓脓",
        shè: "设社舍涉赦",
        "nà,nǎ,nèi,nā": "那",
        "jìn,jǐn": "尽",
        dǎo: "导岛蹈捣祷",
        "sūn,xùn": "孙",
        zhèn: "阵振震镇",
        shōu: "收",
        fáng: "防妨房肪",
        rú: "如儒蠕",
        mā: "妈",
        "xì,hū": "戏",
        "hǎo,hào": "好",
        "tā,jiě": "她",
        "guān,guàn": "观冠",
        huān: "欢",
        "hóng,gōng": "红",
        mǎi: "买",
        "xiān,qiàn": "纤",
        "jì,jǐ": "纪济",
        "yuē,yāo": "约",
        shòu: "寿受授售兽瘦",
        "nòng,lòng": "弄",
        jìn: "进近晋浸",
        wéi: "违围唯维桅",
        "yuǎn,yuàn": "远",
        tūn: "吞",
        tán: "坛谈痰昙谭潭檀",
        fǔ: "抚斧府俯辅腐甫脯",
        "huài,pēi,pī,péi": "坏",
        rǎo: "扰",
        pī: "批披坯霹",
        zhǎo: "找沼",
        chě: "扯",
        zǒu: "走",
        chāo: "抄钞超",
        bà: "坝爸霸",
        gòng: "贡",
        "zhé,shé,zhē": "折",
        "qiǎng,qiāng,chēng": "抢",
        zhuā: "抓",
        xiào: "孝笑效哮啸",
        pāo: "抛",
        tóu: "投",
        kàng: "抗炕",
        fén: "坟焚",
        kēng: "坑",
        dǒu: "抖陡蚪",
        "ké,qiào": "壳",
        "fāng,fáng": "坊",
        niǔ: "扭纽钮",
        kuài: "块快筷",
        "bǎ,bà": "把",
        bào: "报抱爆豹",
        jié: "劫杰洁捷截竭",
        què: "却确鹊",
        huā: "花",
        fēn: "芬吩纷氛",
        qín: "芹琴禽勤秦擒",
        láo: "劳牢",
        lú: "芦炉卢庐颅",
        "gān,gǎn": "杆",
        kè: "克刻客课",
        "sū,sù": "苏",
        dù: "杜渡妒镀",
        "gàng,gāng": "杠",
        cūn: "村",
        qiú: "求球囚",
        xìng: "杏幸性姓",
        "gèng,gēng": "更",
        liǎng: "两",
        "lì,lí": "丽",
        shù: "束述树竖恕庶墅漱",
        dòu: "豆逗痘",
        "hái,huán": "还",
        "fǒu,pǐ": "否",
        lái: "来莱",
        lián: "连怜帘莲联廉镰",
        "xiàn,xuán": "县",
        "zhù,chú": "助",
        dāi: "呆",
        kuàng: "旷况矿框眶",
        "ya,yā": "呀",
        zú: "足族",
        dūn: "吨蹲墩",
        kùn: "困",
        nán: "男",
        "chǎo,chāo": "吵",
        "yuán,yún,yùn": "员",
        chuàn: "串",
        chuī: "吹炊",
        "ba,bā": "吧",
        hǒu: "吼",
        gǎng: "岗",
        "bié,biè": "别",
        "dīng,dìng": "钉",
        gào: "告",
        wǒ: "我",
        luàn: "乱",
        tū: "秃突凸",
        xiù: "秀袖绣锈嗅",
        "gū,gù": "估",
        měi: "每美",
        "hé,hē,hè": "何",
        "tǐ,tī,bèn": "体",
        "bó,bǎi,bà": "伯",
        zuò: "作坐座做",
        líng: "伶灵铃陵零龄玲凌菱蛉翎",
        dī: "低堤滴",
        "yòng,yōng": "佣",
        nǐ: "你拟",
        zhù: "住注驻柱祝铸贮蛀",
        zào: "皂灶造燥躁噪",
        "fó,fú,bì,bó": "佛",
        chè: "彻撤澈",
        tuǒ: "妥椭",
        lín: "邻林临琳磷鳞",
        hán: "含寒函涵韩",
        chà: "岔衩",
        cháng: "肠尝常偿",
        "dù,dǔ": "肚",
        "guī,jūn,qiū": "龟",
        miǎn: "免勉娩冕缅",
        "jiǎo,jué": "角",
        kuáng: "狂",
        "tiáo,tiāo": "条",
        luǎn: "卵",
        yíng: "迎盈营蝇赢荧莹萤",
        "xì,jì": "系",
        chuáng: "床",
        kù: "库裤酷",
        "yìng,yīng": "应",
        lěng: "冷",
        "zhè,zhèi": "这",
        xù: "序叙绪续絮蓄旭恤酗婿",
        xián: "闲贤弦咸衔嫌涎舷",
        "jiān,jiàn": "间监",
        pàn: "判盼叛畔",
        "mēn,mèn": "闷",
        wāng: "汪",
        "dì,tì,tuí": "弟",
        "shā,shà": "沙",
        "shà,shā": "煞",
        càn: "灿",
        wò: "沃卧握",
        "méi,mò": "没",
        gōu: "沟钩",
        "shěn,chén": "沈",
        huái: "怀槐徊淮",
        sòng: "宋送诵颂讼",
        hóng: "宏虹洪鸿",
        qióng: "穷琼",
        zāi: "灾栽",
        liáng: "良梁粮粱",
        zhèng: "证郑政",
        bǔ: "补捕哺",
        sù: "诉肃素速塑粟溯",
        "shí,zhì": "识",
        cí: "词辞慈磁祠瓷雌",
        zhěn: "诊枕疹",
        "niào,suī": "尿",
        céng: "层",
        jú: "局菊橘",
        "wěi,yǐ": "尾",
        zhāng: "张章彰樟",
        gǎi: "改",
        lù: "陆录鹿路赂",
        "ē,ā": "阿",
        zǔ: "阻组祖诅",
        miào: "妙庙",
        yāo: "妖腰邀夭吆",
        nǔ: "努",
        "jìn,jìng": "劲",
        rěn: "忍",
        qū: "驱屈岖蛆躯",
        chún: "纯唇醇",
        nà: "纳钠捺",
        bó: "驳脖博搏膊舶渤",
        "zòng,zǒng": "纵",
        "wén,wèn": "纹",
        lǘ: "驴",
        huán: "环",
        qīng: "青轻倾清蜻氢卿",
        xiàn: "现限线宪陷馅羡献腺",
        biǎo: "表",
        "mǒ,mò,mā": "抹",
        lǒng: "拢垄",
        "dān,dàn,dǎn": "担",
        bá: "拔跋",
        jiǎn: "拣茧俭捡检减剪简柬碱",
        tǎn: "坦毯袒",
        chōu: "抽",
        yā: "押鸦鸭",
        guǎi: "拐",
        pāi: "拍",
        zhě: "者",
        dǐng: "顶鼎",
        yōng: "拥庸",
        "chāi,cā": "拆",
        dǐ: "抵",
        "jū,gōu": "拘",
        lā: "垃",
        "lā,lá": "拉",
        "bàn,pàn": "拌",
        zhāo: "招昭",
        pō: "坡泼颇",
        bō: "拨波玻菠播",
        "zé,zhái": "择",
        tái: "抬",
        "qí,jī": "其奇",
        qǔ: "取娶",
        kǔ: "苦",
        mào: "茂贸帽貌",
        "ruò,rě": "若",
        miáo: "苗描瞄",
        "píng,pēng": "苹",
        yīng: "英樱鹰莺婴缨鹦",
        qié: "茄",
        jīng: "茎京经惊晶睛精荆兢鲸",
        "zhī,qí": "枝",
        bēi: "杯悲碑卑",
        "guì,jǔ": "柜",
        bǎn: "板版",
        sōng: "松",
        qiāng: "枪腔",
        gòu: "构购够垢",
        "sàng,sāng": "丧",
        huà: "画话桦",
        huò: "或货获祸惑霍",
        "cì,cī": "刺",
        "yǔ,yù": "雨语",
        "bēn,bèn": "奔",
        fèn: "奋粪愤忿",
        hōng: "轰烘",
        "qī,qì": "妻",
        ōu: "欧殴鸥",
        qǐng: "顷请",
        "zhuǎn,zhuàn,zhuǎi": "转",
        zhǎn: "斩盏展",
        ruǎn: "软",
        lún: "轮仑伦沦",
        dào: "到盗悼道稻",
        chǐ: "齿耻侈",
        kěn: "肯垦恳啃",
        hǔ: "虎",
        "xiē,suò": "些",
        lǔ: "虏鲁卤",
        shèn: "肾渗慎",
        shàng: "尚",
        guǒ: "果裹",
        kūn: "昆坤",
        guó: "国",
        chāng: "昌猖",
        chàng: "畅唱",
        diǎn: "典点碘",
        gù: "固故顾雇",
        áng: "昂",
        zhōng: "忠终钟盅衷",
        "ne,ní": "呢",
        àn: "岸按案暗",
        "tiě,tiē,tiè,": "帖",
        luó: "罗萝锣箩骡螺逻",
        kǎi: "凯慨",
        "lǐng,líng": "岭",
        bài: "败拜",
        tú: "图徒途涂屠",
        chuí: "垂锤捶",
        "zhī,zhì": "知织",
        guāi: "乖",
        gǎn: "秆赶敢感橄",
        "hé,hè,huó,huò,hú": "和",
        "gòng,gōng": "供共",
        "wěi,wēi": "委",
        "cè,zè,zhāi": "侧",
        pèi: "佩配沛",
        "pò,pǎi": "迫",
        "de,dì,dí": "的",
        pá: "爬",
        suǒ: "所索锁琐",
        jìng: "径竞竟敬静境镜靖",
        mìng: "命",
        "cǎi,cài": "采",
        niàn: "念",
        tān: "贪摊滩瘫",
        rǔ: "乳辱",
        pín: "贫",
        fū: "肤麸孵敷",
        fèi: "肺废沸费吠",
        zhǒng: "肿",
        péng: "朋棚蓬膨硼鹏澎篷",
        "fú,fù": "服",
        féi: "肥",
        hūn: "昏婚荤",
        tù: "兔",
        hú: "狐胡壶湖蝴弧葫",
        gǒu: "狗苟",
        bǎo: "饱宝保",
        xiǎng: "享响想",
        biàn: "变遍辨辩辫",
        "dǐ,de": "底",
        "jìng,chēng": "净",
        fàng: "放",
        nào: "闹",
        zhá: "闸铡",
        "juàn,juǎn": "卷",
        "quàn,xuàn": "券",
        "dān,shàn,chán": "单",
        chǎo: "炒",
        "qiǎn,jiān": "浅",
        fǎ: "法",
        "xiè,yì": "泄",
        lèi: "泪类",
        zhān: "沾粘毡瞻",
        "pō,bó": "泊",
        "pào,pāo": "泡",
        xiè: "泻卸屑械谢懈蟹",
        "ní,nì": "泥",
        "zé,shì": "泽",
        pà: "怕帕",
        guài: "怪",
        zōng: "宗棕踪",
        shěn: "审婶",
        zhòu: "宙昼皱骤咒",
        "kōng,kòng,kǒng": "空",
        "láng,làng": "郎",
        chèn: "衬趁",
        gāi: "该",
        "xiáng,yáng": "详",
        "lì,dài": "隶",
        jū: "居鞠驹",
        "shuā,shuà": "刷",
        mèng: "孟梦",
        gū: "孤姑辜咕沽菇箍",
        "jiàng,xiáng": "降",
        mèi: "妹昧媚",
        jiě: "姐",
        jià: "驾架嫁稼",
        "cān,shēn,cēn,sān": "参",
        liàn: "练炼恋链",
        xì: "细隙",
        shào: "绍哨",
        tuó: "驼驮鸵",
        guàn: "贯惯灌罐",
        zòu: "奏揍",
        chūn: "春椿",
        bāng: "帮邦梆",
        "dú,dài": "毒",
        guà: "挂卦褂",
        kuǎ: "垮",
        "kuà,kū": "挎",
        náo: "挠",
        "dǎng,dàng": "挡",
        shuān: "拴栓",
        tǐng: "挺艇",
        "kuò,guā": "括",
        "shí,shè": "拾",
        "tiāo,tiǎo": "挑",
        wā: "挖蛙洼",
        pīn: "拼",
        "shèn,shén": "甚",
        mǒu: "某",
        nuó: "挪",
        gé: "革阁格隔",
        "xiàng,hàng": "巷",
        cǎo: "草",
        chá: "茶察茬",
        dàng: "荡档",
        huāng: "荒慌",
        róng: "荣绒容熔融茸蓉溶榕",
        "nán,nā": "南",
        biāo: "标彪膘",
        yào: "药耀",
        kū: "枯哭窟",
        "xiāng,xiàng": "相",
        "chá,zhā": "查",
        liǔ: "柳",
        "bǎi,bó,bò": "柏",
        "yào,yāo": "要",
        wāi: "歪",
        "yán,yàn": "研",
        lí: "厘狸离犁梨璃黎漓篱",
        "qì,qiè": "砌",
        miàn: "面",
        kǎn: "砍坎",
        shuǎ: "耍",
        nài: "耐奈",
        cán: "残蚕惭",
        zhàn: "战站栈绽蘸",
        "bèi,bēi": "背",
        lǎn: "览懒揽缆榄",
        "shěng,xǐng": "省",
        "xiāo,xuē": "削",
        zhǎ: "眨",
        "hǒng,hōng,hòng": "哄",
        xiǎn: "显险",
        "mào,mò": "冒",
        "yǎ,yā": "哑",
        yìng: "映硬",
        zuó: "昨",
        xīng: "星腥猩",
        pā: "趴",
        guì: "贵桂跪刽",
        "sī,sāi": "思",
        xiā: "虾瞎",
        "mǎ,mā,mà": "蚂",
        suī: "虽",
        pǐn: "品",
        mà: "骂",
        "huá,huā": "哗",
        "yè,yàn,yān": "咽",
        "zán,zǎ": "咱",
        "hā,hǎ,hà": "哈",
        yǎo: "咬舀",
        "nǎ,něi,na,né": "哪",
        "hāi,ké": "咳",
        xiá: "峡狭霞匣侠暇辖",
        "gǔ,gū": "骨",
        "gāng,gàng": "钢",
        tiē: "贴",
        "yào,yuè": "钥",
        "kàn,kān": "看",
        jǔ: "矩举",
        zěn: "怎",
        xuǎn: "选癣",
        "zhòng,zhǒng,chóng": "种",
        miǎo: "秒渺藐",
        kē: "科棵颗磕蝌",
        "biàn,pián": "便",
        "zhòng,chóng": "重",
        liǎ: "俩",
        duàn: "段断缎锻",
        cù: "促醋簇",
        shùn: "顺瞬",
        xiū: "修羞",
        sú: "俗",
        qīn: "侵钦",
        "xìn,shēn": "信",
        huáng: "皇黄煌凰惶蝗蟥",
        "zhuī,duī": "追",
        jùn: "俊峻骏竣",
        "dài,dāi": "待",
        xū: "须虚需",
        hěn: "很狠",
        dùn: "盾顿钝",
        lǜ: "律虑滤氯",
        pén: "盆",
        "shí,sì,yì": "食",
        dǎn: "胆",
        táo: "逃桃陶萄淘",
        pàng: "胖",
        "mài,mò": "脉",
        dú: "独牍",
        jiǎo: "狡饺绞脚搅",
        yuàn: "怨院愿",
        ráo: "饶",
        wān: "弯湾豌",
        āi: "哀哎埃",
        "jiāng,jiàng": "将浆",
        tíng: "亭庭停蜓廷",
        liàng: "亮谅辆晾",
        "dù,duó": "度",
        chuāng: "疮窗",
        "qīn,qìng": "亲",
        zī: "姿资滋咨",
        dì: "帝递第蒂缔",
        "chà,chā,chāi,cī": "差",
        yǎng: "养氧痒",
        qián: "前钱钳潜黔",
        mí: "迷谜靡",
        nì: "逆昵匿腻",
        "zhà,zhá": "炸",
        zǒng: "总",
        làn: "烂滥",
        "pào,páo,bāo": "炮",
        tì: "剃惕替屉涕",
        "sǎ,xǐ": "洒",
        zhuó: "浊啄灼茁卓酌",
        "xǐ,xiǎn": "洗",
        qià: "洽恰",
        pài: "派湃",
        huó: "活",
        rǎn: "染",
        héng: "恒衡",
        hún: "浑魂",
        nǎo: "恼脑",
        "jué,jiào": "觉",
        hèn: "恨",
        xuān: "宣轩喧",
        qiè: "窃怯",
        "biǎn,piān": "扁",
        ǎo: "袄",
        shén: "神",
        "shuō,shuì,yuè": "说",
        tuì: "退蜕",
        chú: "除厨锄雏橱",
        méi: "眉梅煤霉玫枚媒楣",
        hái: "孩",
        wá: "娃",
        "lǎo,mǔ": "姥",
        nù: "怒",
        hè: "贺赫褐鹤",
        róu: "柔揉蹂",
        bǎng: "绑膀",
        lěi: "垒蕾儡",
        rào: "绕",
        "gěi,jǐ": "给",
        luò: "骆洛",
        "luò,lào": "络",
        tǒng: "统桶筒捅",
        gēng: "耕羹",
        hào: "耗浩",
        bān: "班般斑搬扳颁",
        zhū: "珠株诸猪蛛",
        lāo: "捞",
        fěi: "匪诽",
        "zǎi,zài": "载",
        "mái,mán": "埋",
        "shāo,shào": "捎稍",
        zhuō: "捉桌拙",
        niē: "捏",
        kǔn: "捆",
        "dū,dōu": "都",
        sǔn: "损笋",
        juān: "捐鹃",
        zhé: "哲辙",
        rè: "热",
        wǎn: "挽晚碗惋婉",
        "ái,āi": "挨",
        "mò,mù": "莫",
        "è,wù,ě,wū": "恶",
        tóng: "桐铜童彤瞳",
        "xiào,jiào": "校",
        "hé,hú": "核",
        yàng: "样漾",
        gēn: "根跟",
        gē: "哥鸽割歌戈",
        chǔ: "础储楚",
        pò: "破魄",
        tào: "套",
        chái: "柴豺",
        dǎng: "党",
        mián: "眠绵棉",
        shài: "晒",
        jǐn: "紧锦谨",
        "yūn,yùn": "晕",
        "huàng,huǎng": "晃",
        shǎng: "晌赏",
        ēn: "恩",
        "ài,āi": "唉",
        "ā,á,ǎ,à,a": "啊",
        "bà,ba,pí": "罢",
        zéi: "贼",
        tiě: "铁",
        "zuàn,zuān": "钻",
        "qiān,yán": "铅",
        quē: "缺",
        tè: "特",
        "chéng,shèng": "乘",
        dí: "敌笛涤嘀嫡",
        zū: "租",
        chèng: "秤",
        "mì,bì": "秘泌",
        "chēng,chèn,chèng": "称",
        tòu: "透",
        zhài: "债寨",
        "dào,dǎo": "倒",
        "tǎng,cháng": "倘",
        "chàng,chāng": "倡",
        juàn: "倦绢眷",
        "chòu,xiù": "臭",
        "shè,yè,yì": "射",
        xú: "徐",
        háng: "航杭",
        ná: "拿",
        wēng: "翁嗡",
        diē: "爹跌",
        ài: "爱碍艾隘",
        "gē,gé": "胳搁",
        cuì: "脆翠悴粹",
        zàng: "脏葬",
        láng: "狼廊琅榔",
        féng: "逢",
        è: "饿扼遏愕噩鳄",
        "shuāi,cuī": "衰",
        gāo: "高糕羔篙",
        zhǔn: "准",
        bìng: "病",
        téng: "疼腾誊藤",
        "liáng,liàng": "凉量",
        táng: "唐堂塘膛糖棠搪",
        pōu: "剖",
        "chù,xù": "畜",
        "páng,bàng": "旁磅",
        lǚ: "旅屡吕侣铝缕履",
        fěn: "粉",
        liào: "料镣",
        shāo: "烧",
        yān: "烟淹",
        tāo: "涛掏滔",
        lào: "涝酪",
        zhè: "浙蔗",
        xiāo: "消宵销萧硝箫嚣",
        hǎi: "海",
        "zhǎng,zhàng": "涨",
        làng: "浪",
        rùn: "润闰",
        tàng: "烫",
        "yǒng,chōng": "涌",
        huǐ: "悔毁",
        "qiāo,qiǎo": "悄",
        hài: "害亥骇",
        "jiā,jia,jie": "家",
        kuān: "宽",
        bīn: "宾滨彬缤濒",
        zhǎi: "窄",
        lǎng: "朗",
        "dú,dòu": "读",
        zǎi: "宰",
        "shàn,shān": "扇",
        "shān,shàn": "苫",
        wà: "袜",
        xiáng: "祥翔",
        shuí: "谁",
        páo: "袍咆",
        "bèi,pī": "被",
        "tiáo,diào,zhōu": "调",
        yuān: "冤鸳渊",
        "bō,bāo": "剥",
        ruò: "弱",
        péi: "陪培赔",
        niáng: "娘",
        tōng: "通",
        "néng,nài": "能",
        "nán,nàn,nuó": "难",
        sāng: "桑",
        pěng: "捧",
        dǔ: "堵赌睹",
        yǎn: "掩眼演衍",
        duī: "堆",
        "pái,pǎi": "排",
        tuī: "推",
        "jiào,jiāo": "教",
        lüè: "掠略",
        "jù,jū": "据",
        kòng: "控",
        "zhù,zhuó,zhe": "著",
        "jūn,jùn": "菌",
        "lè,lēi": "勒",
        méng: "萌盟檬朦",
        cài: "菜",
        tī: "梯踢剔",
        "shāo,sào": "梢",
        "fù,pì": "副",
        "piào,piāo": "票",
        shuǎng: "爽",
        "shèng,chéng": "盛",
        "què,qiāo,qiǎo": "雀",
        xuě: "雪",
        "chí,shi": "匙",
        xuán: "悬玄漩",
        "mī,mí": "眯",
        "la,lā": "啦",
        "shé,yí": "蛇",
        "lèi,léi,lěi": "累",
        "zhǎn,chán": "崭",
        "quān,juàn,juān": "圈",
        yín: "银吟淫",
        bèn: "笨",
        "lóng,lǒng": "笼",
        mǐn: "敏皿闽悯",
        nín: "您",
        ǒu: "偶藕",
        tōu: "偷",
        piān: "偏篇翩",
        "dé,děi,de": "得",
        "jiǎ,jià": "假",
        pán: "盘",
        chuán: "船",
        cǎi: "彩睬踩",
        lǐng: "领",
        liǎn: "脸敛",
        "māo,máo": "猫",
        měng: "猛锰",
        cāi: "猜",
        háo: "毫豪壕嚎",
        má: "麻",
        guǎn: "馆管",
        còu: "凑",
        hén: "痕",
        kāng: "康糠慷",
        "xuán,xuàn": "旋",
        "zhe,zhuó,zháo,zhāo": "着",
        "lǜ,shuài": "率",
        "gài,gě,hé": "盖",
        cū: "粗",
        "lín,lìn": "淋",
        "qú,jù": "渠",
        "jiàn,jiān": "渐溅",
        "hùn,hún": "混",
        pó: "婆",
        qíng: "情晴擎",
        cǎn: "惨",
        "sù,xiǔ,xiù": "宿",
        yáo: "窑谣摇遥肴姚",
        móu: "谋",
        mì: "密蜜觅",
        huǎng: "谎恍幌",
        "tán,dàn": "弹",
        suí: "随",
        "yǐn,yìn": "隐",
        "jǐng,gěng": "颈",
        shéng: "绳",
        qí: "骑棋旗歧祈脐畦崎鳍",
        chóu: "绸酬筹稠愁畴",
        "lǜ,lù": "绿",
        dā: "搭",
        kuǎn: "款",
        tǎ: "塔",
        "qū,cù": "趋",
        "tí,dī,dǐ": "提",
        "jiē,qì": "揭",
        xǐ: "喜徙",
        sōu: "搜艘",
        chā: "插",
        "lǒu,lōu": "搂",
        "qī,jī": "期",
        rě: "惹",
        "sàn,sǎn": "散",
        dǒng: "董懂",
        "gě,gé": "葛",
        pú: "葡菩蒲",
        "zhāo,cháo": "朝",
        "luò,là,lào": "落",
        kuí: "葵魁",
        bàng: "棒傍谤",
        "yǐ,yī": "椅",
        sēn: "森",
        "gùn,hùn": "棍",
        bī: "逼",
        "zhí,shi": "殖",
        "xià,shà": "厦",
        "liè,liě": "裂",
        xióng: "雄熊",
        zàn: "暂赞",
        yǎ: "雅",
        chǎng: "敞",
        zhǎng: "掌",
        shǔ: "暑鼠薯黍蜀署曙",
        zuì: "最罪醉",
        hǎn: "喊罕",
        "jǐng,yǐng": "景",
        lǎ: "喇",
        "pēn,pèn": "喷",
        "pǎo,páo": "跑",
        chuǎn: "喘",
        "hē,hè,yè": "喝",
        hóu: "喉猴",
        "pù,pū": "铺",
        hēi: "黑",
        guō: "锅郭",
        ruì: "锐瑞",
        duǎn: "短",
        é: "鹅额讹俄",
        děng: "等",
        kuāng: "筐",
        shuì: "税睡",
        "zhù,zhú": "筑",
        shāi: "筛",
        "dá,dā": "答",
        ào: "傲澳懊",
        pái: "牌徘",
        "bǎo,bǔ,pù": "堡",
        "ào,yù": "奥",
        "fān,pān": "番",
        "là,xī": "腊",
        huá: "猾滑",
        rán: "然燃",
        chán: "馋缠蝉",
        mán: "蛮馒",
        tòng: "痛",
        shàn: "善擅膳赡",
        zūn: "尊遵",
        pǔ: "普谱圃浦",
        "gǎng,jiǎng": "港",
        "céng,zēng": "曾",
        wēn: "温瘟",
        kě: "渴",
        zhā: "渣",
        duò: "惰舵跺",
        gài: "溉概丐钙",
        kuì: "愧",
        "yú,tōu": "愉",
        wō: "窝蜗",
        cuàn: "窜篡",
        qún: "裙群",
        "qiáng,qiǎng,jiàng": "强",
        "shǔ,zhǔ": "属",
        "zhōu,yù": "粥",
        sǎo: "嫂",
        huǎn: "缓",
        piàn: "骗",
        mō: "摸",
        "shè,niè": "摄",
        "tián,zhèn": "填",
        gǎo: "搞稿镐",
        suàn: "蒜算",
        "méng,mēng,měng": "蒙",
        "jìn,jīn": "禁",
        lóu: "楼娄",
        lài: "赖癞",
        "lù,liù": "碌",
        pèng: "碰",
        léi: "雷",
        báo: "雹",
        dū: "督",
        nuǎn: "暖",
        xiē: "歇楔蝎",
        kuà: "跨胯",
        "tiào,táo": "跳",
        "é,yǐ": "蛾",
        sǎng: "嗓",
        qiǎn: "遣谴",
        cuò: "错挫措锉",
        ǎi: "矮蔼",
        shǎ: "傻",
        cuī: "催摧崔",
        tuǐ: "腿",
        chù: "触矗",
        "jiě,jiè,xiè": "解",
        "shù,shǔ,shuò": "数",
        mǎn: "满",
        "liū,liù": "溜",
        gǔn: "滚",
        "sāi,sài,sè": "塞",
        "pì,bì": "辟",
        dié: "叠蝶谍碟",
        "fèng,féng": "缝",
        qiáng: "墙",
        "piě,piē": "撇",
        zhāi: "摘斋",
        shuāi: "摔",
        "mó,mú": "模",
        "bǎng,bàng": "榜",
        zhà: "榨乍诈",
        niàng: "酿",
        zāo: "遭糟",
        suān: "酸",
        "shang,cháng": "裳",
        sòu: "嗽",
        là: "蜡辣",
        qiāo: "锹敲跷",
        zhuàn: "赚撰",
        wěn: "稳吻紊",
        bí: "鼻荸",
        mó: "膜魔馍摹蘑",
        "xiān,xiǎn": "鲜",
        "yí,nǐ": "疑",
        "gāo,gào": "膏",
        zhē: "遮",
        duān: "端",
        màn: "漫慢曼幔",
        "piāo,piào,piǎo": "漂",
        lòu: "漏陋",
        sài: "赛",
        nèn: "嫩",
        dèng: "凳邓瞪",
        "suō,sù": "缩",
        "qù,cù": "趣",
        "sā,sǎ": "撒",
        "tàng,tāng": "趟",
        chēng: "撑",
        zēng: "增憎",
        cáo: "槽曹",
        "héng,hèng": "横",
        piāo: "飘",
        "mán,mén": "瞒",
        tí: "题蹄啼",
        yǐng: "影颖",
        "bào,pù": "暴",
        tà: "踏蹋",
        kào: "靠铐",
        pì: "僻屁譬",
        tǎng: "躺",
        dé: "德",
        "mó,mā": "摩",
        shú: "熟秫赎",
        "hú,hū,hù": "糊",
        "pī,pǐ": "劈",
        cháo: "潮巢",
        cāo: "操糙",
        "yàn,yān": "燕",
        diān: "颠掂",
        "báo,bó,bò": "薄",
        cān: "餐",
        xǐng: "醒",
        zhěng: "整拯",
        zuǐ: "嘴",
        zèng: "赠",
        "mó,mò": "磨",
        níng: "凝狞柠",
        "jiǎo,zhuó": "缴",
        cā: "擦",
        "cáng,zàng": "藏",
        "fán,pó": "繁",
        "bì,bei": "臂",
        bèng: "蹦泵",
        pān: "攀潘",
        "chàn,zhàn": "颤",
        "jiāng,qiáng": "疆",
        rǎng: "壤攘",
        "jiáo,jué,jiào": "嚼",
        "rǎng,rāng": "嚷",
        chǔn: "蠢",
        "lù,lòu": "露",
        "náng,nāng": "囊",
        dǎi: "歹",
        rǒng: "冗",
        "hāng,bèn": "夯",
        "āo,wā": "凹",
        "féng,píng": "冯",
        yū: "迂淤",
        "xū,yù": "吁",
        "lèi,lē": "肋",
        kōu: "抠",
        "lūn,lún": "抡",
        "jiè,gài": "芥",
        "xīn,xìn": "芯",
        "chā,chà": "杈",
        "xiāo,xiào": "肖",
        "zhī,zī": "吱",
        "ǒu,ōu,òu": "呕",
        "nà,nè": "呐",
        "qiàng,qiāng": "呛",
        "tún,dùn": "囤",
        "kēng,háng": "吭",
        shǔn: "吮",
        "diàn,tián": "佃",
        "sì,cì": "伺",
        zhǒu: "肘帚",
        "diàn,tián,shèng": "甸",
        "páo,bào": "刨",
        lìn: "吝赁躏",
        "duì,ruì,yuè": "兑",
        zhuì: "坠缀赘",
        "kē,kě": "坷",
        "tuò,tà,zhí": "拓",
        "fú,bì": "拂",
        "nǐng,níng,nìng": "拧",
        "ào,ǎo,niù": "拗",
        "kē,hē": "苛",
        "yān,yǎn": "奄",
        "hē,a,kē": "呵",
        "gā,kā": "咖",
        biǎn: "贬匾",
        "jiǎo,yáo": "侥",
        "chà,shā": "刹",
        āng: "肮",
        wèng: "瓮",
        "nüè,yào": "疟",
        páng: "庞螃",
        "máng,méng": "氓",
        "gē,yì": "疙",
        "jǔ,jù": "沮",
        "zú,cù": "卒",
        nìng: "泞",
        chǒng: "宠",
        "wǎn,yuān": "宛",
        "mí,mǐ": "弥",
        "qì,qiè,xiè": "契",
        "xié,jiā": "挟",
        "duò,duǒ": "垛",
        jiá: "荚颊",
        "zhà,shān,shi,cè": "栅",
        "bó,bèi": "勃",
        "zhóu,zhòu": "轴",
        nüè: "虐",
        "liē,liě,lié,lie": "咧",
        dǔn: "盹",
        xūn: "勋",
        "yo,yō": "哟",
        mī: "咪",
        "qiào,xiào": "俏",
        "hóu,hòu": "侯",
        pēi: "胚",
        tāi: "胎",
        luán: "峦",
        sà: "飒萨",
        shuò: "烁",
        xuàn: "炫",
        "píng,bǐng": "屏",
        "nà,nuó": "娜",
        "pá,bà": "耙",
        gěng: "埂耿梗",
        niè: "聂镊孽",
        mǎng: "莽",
        "qī,xī": "栖",
        "jiǎ,gǔ": "贾",
        chěng: "逞",
        pēng: "砰烹",
        "láo,lào": "唠",
        "bàng,bèng": "蚌",
        "gōng,zhōng": "蚣",
        "li,lǐ,lī": "哩",
        suō: "唆梭嗦",
        hēng: "哼",
        zāng: "赃",
        qiào: "峭窍撬",
        mǎo: "铆",
        ǎn: "俺",
        sǒng: "耸",
        "juè,jué": "倔",
        "yīn,yān,yǐn": "殷",
        guàng: "逛",
        něi: "馁",
        "wō,guō": "涡",
        "lào,luò": "烙",
        nuò: "诺懦糯",
        zhūn: "谆",
        "niǎn,niē": "捻",
        qiā: "掐",
        "yè,yē": "掖",
        "chān,xiān,càn,shǎn": "掺",
        "dǎn,shàn": "掸",
        "fēi,fěi": "菲",
        "qián,gān": "乾",
        shē: "奢赊",
        "shuò,shí": "硕",
        "luō,luó,luo": "啰",
        shá: "啥",
        "hǔ,xià": "唬",
        tuò: "唾",
        bēng: "崩",
        "dāng,chēng": "铛",
        "xiǎn,xǐ": "铣",
        "jiǎo,jiáo": "矫",
        tiáo: "笤",
        "kuǐ,guī": "傀",
        xìn: "衅",
        dōu: "兜",
        "jì,zhài": "祭",
        xiáo: "淆",
        "tǎng,chǎng": "淌",
        "chún,zhūn": "淳",
        shuàn: "涮",
        dāng: "裆",
        "wèi,yù": "尉",
        "duò,huī": "堕",
        "chuò,chāo": "绰",
        "bēng,běng,bèng": "绷",
        "zōng,zèng": "综",
        "zhuó,zuó": "琢",
        "chuǎi,chuài,chuāi,tuán,zhuī": "揣",
        "péng,bāng": "彭",
        chān: "搀",
        cuō: "搓",
        sāo: "搔",
        yē: "椰",
        "zhuī,chuí": "椎",
        "léng,lēng,líng": "棱",
        hān: "酣憨",
        sū: "酥",
        záo: "凿",
        "qiào,qiáo": "翘",
        "zhā,chā": "喳",
        bǒ: "跛",
        "há,gé": "蛤",
        "qiàn,kàn": "嵌",
        bāi: "掰",
        "yān,ā": "腌",
        wàn: "腕",
        "dūn,duì": "敦",
        "kuì,huì": "溃",
        jiǒng: "窘",
        "sāo,sǎo": "骚",
        pìn: "聘",
        bǎ: "靶",
        xuē: "靴薛",
        hāo: "蒿",
        léng: "楞",
        "kǎi,jiē": "楷",
        "pín,bīn": "频",
        zhuī: "锥",
        tuí: "颓",
        sāi: "腮",
        "liú,liù": "馏",
        "nì,niào": "溺",
        qǐn: "寝",
        luǒ: "裸",
        miù: "谬",
        "jiǎo,chāo": "剿",
        "áo,āo": "熬",
        niān: "蔫",
        "màn,wàn": "蔓",
        "chá,chā": "碴",
        "xūn,xùn": "熏",
        tiǎn: "舔",
        sēng: "僧",
        "da,dá": "瘩",
        guǎ: "寡",
        "tuì,tùn": "褪",
        niǎn: "撵碾",
        "liáo,liāo": "撩",
        "cuō,zuǒ": "撮",
        ruǐ: "蕊",
        "cháo,zhāo": "嘲",
        biē: "憋鳖",
        "hēi,mò": "嘿",
        "zhuàng,chuáng": "幢",
        "jī,qǐ": "稽",
        lǒu: "篓",
        lǐn: "凛檩",
        "biě,biē": "瘪",
        "liáo,lào,lǎo": "潦",
        "chéng,dèng": "澄",
        "lèi,léi": "擂",
        piáo: "瓢",
        shà: "霎",
        "mò,má": "蟆",
        qué: "瘸",
        "liáo,liǎo": "燎",
        "liào,liǎo": "瞭",
        "sào,sāo": "臊",
        "mí,méi": "糜",
        ái: "癌",
        tún: "臀",
        "huò,huō,huá": "豁",
        "pù,bào": "瀑",
        chuō: "戳",
        "zǎn,cuán": "攒",
        cèng: "蹭",
        "bò,bǒ": "簸",
        "bó,bù": "簿",
        bìn: "鬓",
        suǐ: "髓",
        ráng: "瓤"
    };

    /***/
},
/* 3 */
/***/function (module, exports) {
    // 带音标字符。
    "use strict";

    module.exports = {
        ā: "a1",
        á: "a2",
        ǎ: "a3",
        à: "a4",
        ē: "e1",
        é: "e2",
        ě: "e3",
        è: "e4",
        ō: "o1",
        ó: "o2",
        ǒ: "o3",
        ò: "o4",
        ī: "i1",
        í: "i2",
        ǐ: "i3",
        ì: "i4",
        ū: "u1",
        ú: "u2",
        ǔ: "u3",
        ù: "u4",
        ü: "v0",
        ǘ: "v2",
        ǚ: "v3",
        ǜ: "v4",
        ń: "n2",
        ň: "n3",
        "": "m2"
    };

    /***/
},
/* 4 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var assign = __webpack_require__(1);
    // XXX: Symbol when web support.
    var PINYIN_STYLE = {
        NORMAL: 0, // 普通风格，不带音标。
        TONE: 1, // 标准风格，音标在韵母的第一个字母上。
        TONE2: 2, // 声调以数字形式在拼音之后，使用数字 0~4 标识。
        TO3NE: 5, // 声调以数字形式在声母之后，使用数字 0~4 标识。
        INITIALS: 3, // 仅需要声母部分。
        FIRST_LETTER: 4
    };
    var DEFAULT_OPTIONS = {
        style: PINYIN_STYLE.TONE, // 风格
        segment: false, // 分词。
        heteronym: false
    };

    // 声母表。
    var INITIALS = "b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s".split(",");
    // 韵母表。
    //const FINALS = "ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v".split(",");
    // 带音标字符。
    var PHONETIC_SYMBOL = __webpack_require__(3);
    var RE_PHONETIC_SYMBOL = new RegExp("([" + Object.keys(PHONETIC_SYMBOL).join("") + "])", "g");
    var RE_TONE2 = /([aeoiuvnm])([0-4])$/;

    /*
     * 格式化拼音为声母（Initials）形式。
     * @param {String}
     * @return {String}
     */
    function initials(pinyin) {
        for (var i = 0, l = INITIALS.length; i < l; i++) {
            if (pinyin.indexOf(INITIALS[i]) === 0) {
                return INITIALS[i];
            }
        }
        return "";
    }

    var Pinyin = function () {
        function Pinyin(dict) {
            _classCallCheck(this, Pinyin);

            this._dict = dict;
        }

        _createClass(Pinyin, [{
            key: "convert",

            // @param {String} hans 要转为拼音的目标字符串（汉字）。
            // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。
            // @return {Array} 返回的拼音列表。
            value: function convert(hans, options) {
                if (typeof hans !== "string") {
                    return [];
                }

                options = assign({}, DEFAULT_OPTIONS, options);

                var pys = [];
                var nohans = "";

                for (var i = 0, firstCharCode = undefined, words = undefined, l = hans.length; i < l; i++) {
                    words = hans[i];
                    firstCharCode = words.charCodeAt(0);

                    if (this._dict[firstCharCode]) {
                        // ends of non-chinese words.
                        if (nohans.length > 0) {
                            pys.push([nohans]);
                            nohans = ""; // reset non-chinese words.
                        }

                        pys.push(this.single_pinyin(words, options));
                    } else {
                        nohans += words;
                    }
                }

                // 清理最后的非中文字符串。
                if (nohans.length > 0) {
                    pys.push([nohans]);
                    nohans = ""; // reset non-chinese words.
                }
                return pys;
            }
        }, {
            key: "single_pinyin",

            // 单字拼音转换。
            // @param {String} han, 单个汉字
            // @return {Array} 返回拼音列表，多音字会有多个拼音项。
            value: function single_pinyin(han, options) {
                if (typeof han !== "string") {
                    return [];
                }
                if (han.length !== 1) {
                    return this.single_pinyin(han.charAt(0), options);
                }

                var hanCode = han.charCodeAt(0);

                if (!this._dict[hanCode]) {
                    return [han];
                }

                var pys = this._dict[hanCode].split(",");
                if (!options.heteronym) {
                    return [Pinyin.toFixed(pys[0], options.style)];
                }

                // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。
                var py_cached = {};
                var pinyins = [];
                for (var i = 0, py = undefined, l = pys.length; i < l; i++) {
                    py = Pinyin.toFixed(pys[i], options.style);
                    if (py_cached.hasOwnProperty(py)) {
                        continue;
                    }
                    py_cached[py] = py;

                    pinyins.push(py);
                }
                return pinyins;
            }
        }, {
            key: "compare",

            /**
             * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。
             *
             * @param {String} hanA 汉字字符串 A。
             * @return {String} hanB 汉字字符串 B。
             * @return {Number} 返回 -1，0，或 1。
             */
            value: function compare(hanA, hanB) {
                var pinyinA = this.convert(hanA, DEFAULT_OPTIONS);
                var pinyinB = this.convert(hanB, DEFAULT_OPTIONS);
                return String(pinyinA).localeCompare(pinyinB);
            }
        }], [{
            key: "toFixed",

            /**
             * 格式化拼音风格。
             *
             * @param {String} pinyin TONE 风格的拼音。
             * @param {ENUM} style 目标转换的拼音风格。
             * @return {String} 转换后的拼音。
             */
            value: function toFixed(pinyin, style) {
                var tone = ""; // 声调。
                var first_letter = undefined;
                var py = undefined;
                switch (style) {
                    case PINYIN_STYLE.INITIALS:
                        return initials(pinyin);

                    case PINYIN_STYLE.FIRST_LETTER:
                        first_letter = pinyin.charAt(0);
                        if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {
                            first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);
                        }
                        return first_letter;

                    case PINYIN_STYLE.NORMAL:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, "$1");
                        });

                    case PINYIN_STYLE.TO3NE:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic];
                        });

                    case PINYIN_STYLE.TONE2:
                        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {
                            // 声调数值。
                            tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$2");

                            return PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$1");
                        });
                        return py + tone;

                    case PINYIN_STYLE.TONE:
                    default:
                        return pinyin;
                }
            }
        }, {
            key: "STYLE_NORMAL",
            get: function get() {
                return PINYIN_STYLE.NORMAL;
            }
        }, {
            key: "STYLE_TONE",
            get: function get() {
                return PINYIN_STYLE.TONE;
            }
        }, {
            key: "STYLE_TONE2",
            get: function get() {
                return PINYIN_STYLE.TONE2;
            }
        }, {
            key: "STYLE_TO3NE",
            get: function get() {
                return PINYIN_STYLE.TO3NE;
            }
        }, {
            key: "STYLE_INITIALS",
            get: function get() {
                return PINYIN_STYLE.INITIALS;
            }
        }, {
            key: "STYLE_FIRST_LETTER",
            get: function get() {
                return PINYIN_STYLE.FIRST_LETTER;
            }
        }, {
            key: "DEFAULT_OPTIONS",
            get: function get() {
                return DEFAULT_OPTIONS;
            }
        }]);

        return Pinyin;
    }();

    module.exports = Pinyin;
    // 仅保留首字母。
    // 多音字

    /***/
},
/* 5 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    // 解压拼音库。
    // @param {Object} dict_combo, 压缩的拼音库。
    // @param {Object} 解压的拼音库。

    function buildPinyinCache(dict_combo) {
        var hans = undefined;
        var uncomboed = {};

        for (var py in dict_combo) {
            hans = dict_combo[py];
            for (var i = 0, han = undefined, l = hans.length; i < l; i++) {
                han = hans.charCodeAt(i);
                if (!uncomboed.hasOwnProperty(han)) {
                    uncomboed[han] = py;
                } else {
                    uncomboed[han] += "," + py;
                }
            }
        }

        return uncomboed;
    }

    var PINYIN_DICT = buildPinyinCache(__webpack_require__(2));
    var Pinyin = __webpack_require__(4);
    var pinyin = new Pinyin(PINYIN_DICT);

    module.exports = pinyin.convert.bind(pinyin);
    module.exports.compare = pinyin.compare.bind(pinyin);
    module.exports.STYLE_NORMAL = Pinyin.STYLE_NORMAL;
    module.exports.STYLE_TONE = Pinyin.STYLE_TONE;
    module.exports.STYLE_TONE2 = Pinyin.STYLE_TONE2;
    module.exports.STYLE_TO3NE = Pinyin.STYLE_TO3NE;
    module.exports.STYLE_INITIALS = Pinyin.STYLE_INITIALS;
    module.exports.STYLE_FIRST_LETTER = Pinyin.STYLE_FIRST_LETTER;

    /***/
}
/******/
]);
//# sourceMappingURL=bundle.js.map

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("resize-observer-polyfill");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("sortablejs");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/util");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("deepmerge");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("babel-helper-vue-jsx-merge-props");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("mime");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/popup");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("dayjs");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(22);


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "resize-observer-polyfill"
var external_resize_observer_polyfill_ = __webpack_require__(13);
var external_resize_observer_polyfill_default = /*#__PURE__*/__webpack_require__.n(external_resize_observer_polyfill_);

// CONCATENATED MODULE: ./src/utils/resize-event.js


var isServer = typeof window === "undefined";

/* istanbul ignore next */
var resizeHandler = function resizeHandler(entries) {
  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var entry = _ref;

    var listeners = entry.target.__resizeListeners__ || [];
    if (listeners.length) {
      listeners.forEach(function (fn) {
        fn();
      });
    }
  }
};

/* istanbul ignore next */
var resize_event_addResizeListener = function addResizeListener(element, fn) {
  if (isServer) return;
  if (!element.__resizeListeners__) {
    element.__resizeListeners__ = [];
    element.__ro__ = new external_resize_observer_polyfill_default.a(resizeHandler);
    element.__ro__.observe(element);
  }
  element.__resizeListeners__.push(fn);
};

/* istanbul ignore next */
var removeResizeListener = function removeResizeListener(element, fn) {
  if (!element || !element.__resizeListeners__) return;
  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
  if (!element.__resizeListeners__.length) {
    element.__ro__.disconnect();
  }
};
// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(2);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./src/utils/scrollbar-width.js


var scrollBarWidth = void 0;

/* harmony default export */ var scrollbar_width = (function () {
  if (external_vue_default.a.prototype.$isServer) return 0;
  if (scrollBarWidth !== undefined) return scrollBarWidth;

  var outer = document.createElement("div");
  outer.className = "el-scrollbar__wrap";
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);

  var widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";

  var inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);

  var widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  scrollBarWidth = widthNoScroll - widthWithScroll;

  return scrollBarWidth;
});
// CONCATENATED MODULE: ./src/utils/types.js
function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}

function types_isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

function isHtmlElement(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
}

var isFunction = function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
};

var types_isUndefined = function isUndefined(val) {
  return val === void 0;
};

var isDefined = function isDefined(val) {
  return val !== undefined && val !== null;
};
// CONCATENATED MODULE: ./src/utils/util.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




var util_hasOwnProperty = Object.prototype.hasOwnProperty;

function noop() {}

function hasOwn(obj, key) {
  return util_hasOwnProperty.call(obj, key);
}

function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

var getValueByPath = function getValueByPath(object, prop) {
  prop = prop || "";
  var paths = prop.split(".");
  var current = object;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};

function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, ".$1");
  path = path.replace(/^\./, "");

  var keyArr = path.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error("please transfer a valid prop path to form item!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}

var generateId = function generateId() {
  return Math.floor(Math.random() * 10000);
};

var valueEquals = function valueEquals(a, b) {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
var arrayFindIndex = function arrayFindIndex(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};

var arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};

// coerce truthy value to array
var coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};

var util_isIE = function isIE() {
  return !external_vue_default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};

var util_isEdge = function isEdge() {
  return !external_vue_default.a.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
};

var autoprefixer = function autoprefixer(style) {
  if ((typeof style === "undefined" ? "undefined" : _typeof(style)) !== "object") return style;
  var rules = ["transform", "transition", "animation"];
  var prefixes = ["ms-", "webkit-"];
  rules.forEach(function (rule) {
    var value = style[rule];
    if (rule && value) {
      prefixes.forEach(function (prefix) {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};

var kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, "$1-$2").replace(hyphenateRE, "$1-$2").toLowerCase();
};

var util_capitalize = function capitalize(str) {
  if (!isString(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var util_looseEqual = function looseEqual(a, b) {
  var isObjectA = types_isObject(a);
  var isObjectB = types_isObject(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};

var arrayEquals = function arrayEquals(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];

  if (arrayA.length !== arrayB.length) {
    return false;
  }

  for (var i = 0; i < arrayA.length; i++) {
    if (!util_looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }

  return true;
};

var util_isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return util_looseEqual(value1, value2);
};

var isEmpty = function isEmpty(val) {
  // null or undefined
  if (val == null) return true;

  if (typeof val === "boolean") return false;

  if (typeof val === "number") return !val;

  if (val instanceof Error) return val.message === "";

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case "[object String]":
    case "[object Array]":
      return !val.length;

    // Map or Set or File
    case "[object File]":
    case "[object Map]":
    case "[object Set]":
      {
        return !val.size;
      }
    // Plain Object
    case "[object Object]":
      {
        return !Object.keys(val).length;
      }
  }

  return false;
};
// CONCATENATED MODULE: ./src/utils/dom.js
var dom_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* istanbul ignore next */



var dom_isServer = external_vue_default.a.prototype.$isServer;
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var ieVersion = dom_isServer ? 0 : Number(document.documentMode);

/* istanbul ignore next */
var trim = function trim(string) {
  return (string || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
/* istanbul ignore next */
var camelCase = function camelCase(name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, "Moz$1");
};

/* istanbul ignore next */
var on = function () {
  if (!dom_isServer && document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var off = function () {
  if (!dom_isServer && document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var once = function once(el, event, fn) {
  var listener = function listener() {
    if (fn) {
      fn.apply(this, arguments);
    }
    off(el, event, listener);
  };
  on(el, event, listener);
};

/* istanbul ignore next */
function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
  }
}

/* istanbul ignore next */
function addClass(el, cls) {
  if (!el) return;
  var curClass = el.className;
  var classes = (cls || "").split(" ");

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " " + clsName;
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}

/* istanbul ignore next */
function removeClass(el, cls) {
  if (!el || !cls) return;
  var classes = cls.split(" ");
  var curClass = " " + el.className + " ";

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" " + clsName + " ", " ");
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}

/* istanbul ignore next */
var getStyle = ieVersion < 9 ? function (element, styleName) {
  if (dom_isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "styleFloat";
  }
  try {
    switch (styleName) {
      case "opacity":
        try {
          return element.filters.item("alpha").opacity / 100;
        } catch (e) {
          return 1.0;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function (element, styleName) {
  if (dom_isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "cssFloat";
  }
  try {
    var computed = document.defaultView.getComputedStyle(element, "");
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};

/* istanbul ignore next */
function setStyle(element, styleName, value) {
  if (!element || !styleName) return;

  if ((typeof styleName === "undefined" ? "undefined" : dom_typeof(styleName)) === "object") {
    for (var prop in styleName) {
      if (styleName.hasOwnProperty(prop)) {
        setStyle(element, prop, styleName[prop]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === "opacity" && ieVersion < 9) {
      element.style.filter = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
    } else {
      element.style[styleName] = value;
    }
  }
}

var isScroll = function isScroll(el, vertical) {
  if (dom_isServer) return;

  var determinedDirection = vertical !== null || vertical !== undefined;
  var overflow = determinedDirection ? vertical ? getStyle(el, "overflow-y") : getStyle(el, "overflow-x") : getStyle(el, "overflow");

  return overflow.match(/(scroll|auto)/);
};

var getScrollContainer = function getScrollContainer(el, vertical) {
  if (dom_isServer) return;

  var parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent)) {
      return window;
    }
    if (isScroll(parent, vertical)) {
      return parent;
    }
    parent = parent.parentNode;
  }

  return parent;
};

var isInContainer = function isInContainer(el, container) {
  if (dom_isServer || !el || !container) return false;

  var elRect = el.getBoundingClientRect();
  var containerRect = void 0;

  if ([window, document, document.documentElement, null, undefined].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }

  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
// CONCATENATED MODULE: ./packages/scrollbar/src/util.js
var BAR_MAP = {
    vertical: {
        offset: "offsetHeight",
        scroll: "scrollTop",
        scrollSize: "scrollHeight",
        size: "height",
        key: "vertical",
        axis: "Y",
        client: "clientY",
        direction: "top"
    },
    horizontal: {
        offset: "offsetWidth",
        scroll: "scrollLeft",
        scrollSize: "scrollWidth",
        size: "width",
        key: "horizontal",
        axis: "X",
        client: "clientX",
        direction: "left"
    }
};

function renderThumbStyle(_ref) {
    var move = _ref.move,
        size = _ref.size,
        bar = _ref.bar;

    var style = {};
    var translate = "translate" + bar.axis + "(" + move + "%)";

    style[bar.size] = size;
    style.transform = translate;
    style.msTransform = translate;
    style.webkitTransform = translate;

    return style;
}
// CONCATENATED MODULE: ./packages/scrollbar/src/bar.js



/* istanbul ignore next */
/* harmony default export */ var src_bar = ({
  name: 'Bar',

  props: {
    vertical: Boolean,
    size: String,
    move: Number
  },

  computed: {
    bar: function bar() {
      return BAR_MAP[this.vertical ? 'vertical' : 'horizontal'];
    },
    wrap: function wrap() {
      return this.$parent.wrap;
    }
  },

  render: function render(h) {
    var size = this.size,
        move = this.move,
        bar = this.bar;

    return h(
      'div',
      {
        'class': ['el-scrollbar__bar', 'is-' + bar.key],
        on: {
          'mousedown': this.clickTrackHandler
        }
      },
      [h('div', {
        ref: 'thumb',
        'class': 'el-scrollbar__thumb',
        on: {
          'mousedown': this.clickThumbHandler
        },

        style: renderThumbStyle({ size: size, move: move, bar: bar }) })]
    );
  },


  methods: {
    clickThumbHandler: function clickThumbHandler(e) {
      // prevent click event of right button
      if (e.ctrlKey || e.button === 2) {
        return;
      }
      this.startDrag(e);
      this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
    },
    clickTrackHandler: function clickTrackHandler(e) {
      var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
      var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
      var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];

      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
    },
    startDrag: function startDrag(e) {
      e.stopImmediatePropagation();
      this.cursorDown = true;

      on(document, 'mousemove', this.mouseMoveDocumentHandler);
      on(document, 'mouseup', this.mouseUpDocumentHandler);
      document.onselectstart = function () {
        return false;
      };
    },
    mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
      if (this.cursorDown === false) return;
      var prevPage = this[this.bar.axis];

      if (!prevPage) return;

      var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
      var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];

      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
    },
    mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
      this.cursorDown = false;
      this[this.bar.axis] = 0;
      off(document, 'mousemove', this.mouseMoveDocumentHandler);
      document.onselectstart = null;
    }
  },

  destroyed: function destroyed() {
    off(document, 'mouseup', this.mouseUpDocumentHandler);
  }
});
// EXTERNAL MODULE: external "jquery"
var external_jquery_ = __webpack_require__(3);
var external_jquery_default = /*#__PURE__*/__webpack_require__.n(external_jquery_);

// CONCATENATED MODULE: ./packages/scrollbar/src/main.js
// reference https://github.com/noeldelgado/gemini-scrollbar/blob/master/index.js







/* istanbul ignore next */
/* harmony default export */ var main = ({
    name: "DgScrollbar",

    components: { Bar: src_bar },

    props: {
        native: Boolean,
        wrapStyle: {},
        wrapClass: {},
        viewClass: {},
        viewStyle: {},
        noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
        tag: {
            type: String,
            default: "div"
        },
        // 加载锁定 tangDM++
        busyLoading: {
            type: Boolean,
            default: false
        },
        // 触顶或触左，滚动条位置偏移一小段距离
        loadDistance: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0,
            cacheScrollHeight: null,
            cacheScrollWidth: null
        };
    },


    computed: {
        wrap: function wrap() {
            return this.$refs.wrap;
        }
    },

    render: function render(h) {
        var gutter = scrollbar_width();
        var style = this.wrapStyle;

        if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";

            if (Array.isArray(this.wrapStyle)) {
                style = toObject(this.wrapStyle);
                style.marginRight = style.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
                style += gutterStyle;
            } else {
                style = gutterStyle;
            }
        }
        var view = h(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
        }, this.$slots.default);
        var wrap = h(
            "div",
            {
                ref: "wrap",
                style: style,
                on: {
                    "scroll": this.handleScroll
                },

                "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
            },
            [[view]]
        );
        var nodes = void 0;

        if (!this.native) {
            nodes = [wrap, h(src_bar, {
                attrs: { move: this.moveX, size: this.sizeWidth }
            }), h(src_bar, {
                attrs: { vertical: true, move: this.moveY, size: this.sizeHeight }
            })];
        } else {
            nodes = [h(
                "div",
                { ref: "wrap", "class": [this.wrapClass, "el-scrollbar__wrap"], style: style },
                [[view]]
            )];
        }
        return h("div", { class: "el-scrollbar" }, nodes);
    },


    methods: {
        handleScroll: function handleScroll() {
            var wrap = this.wrap;

            // create-start author:tangDM #若内容没超出，则不滚动
            if (wrap.scrollHeight === wrap.clientHeight) return false;
            // create-end author:tangDM

            this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
            this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;

            // create-start author:tangDM
            // emit for listening scroll event
            this.$emit("scroll-event", wrap);

            // added for scrollbar go to content 's top side
            this.scrollToTopEvent();

            // added for scrollbar go to content 's bottom side
            this.scrollToBottomEvent();

            // added for scrollbar go to content 's left side
            this.scrollToLeftEvent();

            // added for scrollbar go to content 's right side
            this.scrollToRightEvent();
            // create-end author:tangDM
        },

        /**
         * 滚动条滚动到顶部触发事件
         *
         * create-start author:tangDM
         */
        scrollToTopEvent: function scrollToTopEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容高度
            this.cacheScrollHeight = wrap.scrollHeight;

            if (wrap.scrollTop === 0 && !this.busyLoading) {
                this.$emit("scroll-top");
            }
        },

        /**
         * 滚动条滚动到底部触发事件
         *
         * create-start author:tangDM
         */
        scrollToBottomEvent: function scrollToBottomEvent() {
            var _this = this;

            var wrap = this.wrap;

            // 更新缓存的滚动内容高度
            this.cacheScrollHeight = wrap.scrollHeight;

            // 检测是否滚动到底部
            if (wrap.scrollTop && wrap.scrollTop + wrap.clientHeight === wrap.scrollHeight && !this.busyLoading) {
                this.$nextTick(function () {
                    _this.$emit("scroll-bottom");
                });
            }
        },

        /**
         * 滚动条滚动到左侧触发事件
         *
         * create-start author:tangDM
         */
        scrollToLeftEvent: function scrollToLeftEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容宽度
            this.cacheScrollWidth = wrap.scrollWidth;

            if (wrap.scrollLeft === 0 && !this.busyLoading) {
                this.$emit("scroll-left");
            }
        },

        /**
         * 滚动条滚动到右侧触发事件
         *
         * create-start author:tangDM
         */
        scrollToRightEvent: function scrollToRightEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容宽度
            this.cacheScrollWidth = wrap.scrollWidth;

            if (wrap.scrollLeft + wrap.clientWidth === wrap.scrollWidth && !this.busyLoading) {
                this.$emit("scroll-right");
            }
        },

        /**
         * 滚动条滚动置顶
         *
         * create-start author:tangDM
         */
        goScrollToTop: function goScrollToTop() {
            this.goScrollToYAxis(0);
        },

        /**
         * 滚动条滚动置底
         *
         * create-start author:tangDM
         */
        goScrollToBottom: function goScrollToBottom() {
            this.goScrollToYAxis(this.wrap.scrollHeight);
        },

        /**
         * 滚动到 YAxis 指定的位置
         *
         * @param y 滚动到的位置值
         * @param animateTime 滚动执行的时间
         * @param callback [Function] 回调方法
         *
         * create-start author:tangDM
         */
        goScrollToYAxis: function goScrollToYAxis(y) {
            var animateTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
            var callback = arguments[2];

            external_jquery_default()(this.wrap).animate({
                scrollTop: y
            }, animateTime, function () {
                callback && callback();
            });

            this.moveY = y * 100 / this.wrap.clientHeight;
        },


        /**
         * 滚动到 XAxis 指定的位置
         *
         * @param x 滚动到的位置值
         * @param animateTime 滚动执行的时间
         * @param callback [Function] 回调方法
         *
         * create-start author:tangDM
         */
        goScrollToXAxis: function goScrollToXAxis(x) {
            var animateTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
            var callback = arguments[2];

            external_jquery_default()(this.wrap).animate({
                scrollLeft: x
            }, animateTime, function () {
                callback && callback();
            });

            this.moveX = x / this.wrap.clientWidth;
        },

        /**
         * 重置滚动条的尺寸
         *
         * create-start author:tangDM
         */
        update: function update() {
            var heightPercentage = void 0,
                widthPercentage = void 0;
            var wrap = this.wrap;
            if (!wrap) return;

            heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
            widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;

            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";

            // create-start author:tangDM #更新滚动位置
            this.wrap.scrollTop = this.loadDistance && this.cacheScrollHeight && wrap.scrollTop === 0 ? wrap.scrollHeight - this.cacheScrollHeight : wrap.scrollTop;
            this.wrap.scrollLeft = this.loadDistance && this.cacheScrollWidth && wrap.scrollLeft === 0 ? wrap.scrollWidth - this.cacheScrollWidth : wrap.scrollLeft;
            // create-end
        }
    },

    mounted: function mounted() {
        if (this.native) return;
        this.$nextTick(this.update);
        !this.noresize && resize_event_addResizeListener(this.$refs.resize, this.update);
    },
    beforeDestroy: function beforeDestroy() {
        if (this.native) return;
        !this.noresize && removeResizeListener(this.$refs.resize, this.update);
    }
});
// CONCATENATED MODULE: ./packages/scrollbar/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var scrollbar = (main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio-group/src/main.vue?vue&type=template&id=af339c2c&
var mainvue_type_template_id_af339c2c_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "el-radio-group",
    _vm._g(
      _vm._b(
        {
          staticClass: "dg-radio-group",
          attrs: { disabled: _vm.disabled },
          model: {
            value: _vm.val,
            callback: function($$v) {
              _vm.val = $$v
            },
            expression: "val"
          }
        },
        "el-radio-group",
        _vm.$attrs,
        false
      ),
      _vm.listeners
    ),
    [
      _vm.type === "button"
        ? _vm._l(_vm.itemsWithDisabled, function(item, index) {
            return _c(
              "dg-radio-button",
              {
                key: index,
                class: { "is-lace": _vm.isLace && !_vm.disabled },
                attrs: {
                  "call-of": _vm.callOff,
                  label: item[_vm.defaultProp.value],
                  disabled: item[_vm.defaultProp.disabled]
                }
              },
              [_vm._v(_vm._s(item[_vm.defaultProp.label]))]
            )
          })
        : _vm._l(_vm.itemsWithDisabled, function(item, index) {
            return _c(
              "dg-radio",
              {
                key: index,
                class: { "dg-radio-group__vertical": _vm.vertical },
                attrs: {
                  "call-of": _vm.callOff,
                  label: item[_vm.defaultProp.value],
                  disabled: item[_vm.defaultProp.disabled]
                }
              },
              [_vm._v(_vm._s(item[_vm.defaultProp.label]))]
            )
          })
    ],
    2
  )
}
var staticRenderFns = []
mainvue_type_template_id_af339c2c_render._withStripped = true


// CONCATENATED MODULE: ./packages/radio-group/src/main.vue?vue&type=template&id=af339c2c&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&
var mainvue_type_template_id_ddcdb848_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "label",
    {
      staticClass: "el-radio dg-radio",
      class: [
        _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
        { "is-disabled": _vm.isDisabled },
        { "is-focus": _vm.focus },
        { "is-bordered": _vm.border },
        { "is-checked": _vm.model === _vm.label }
      ],
      attrs: {
        role: "radio",
        "aria-checked": _vm.model === _vm.label,
        "aria-disabled": _vm.isDisabled,
        tabindex: _vm.tabIndex
      },
      on: {
        keydown: function($event) {
          if (
            !$event.type.indexOf("key") &&
            _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])
          ) {
            return null
          }
          $event.stopPropagation()
          $event.preventDefault()
          _vm.model = _vm.isDisabled ? _vm.model : _vm.label
        }
      }
    },
    [
      _c(
        "span",
        {
          staticClass: "el-radio__input",
          class: {
            "is-disabled": _vm.isDisabled,
            "is-checked": _vm.model === _vm.label
          }
        },
        [
          _c("span", { staticClass: "el-radio__inner" }),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            ref: "radio",
            staticClass: "el-radio__original",
            attrs: {
              type: "radio",
              "aria-hidden": "true",
              name: _vm.name,
              disabled: _vm.isDisabled,
              tabindex: "-1"
            },
            domProps: {
              value: _vm.label,
              checked: _vm._q(_vm.model, _vm.label)
            },
            on: {
              focus: function($event) {
                _vm.focus = true
              },
              click: _vm.handleClick,
              change: [
                function($event) {
                  _vm.model = _vm.label
                },
                _vm.handleChange
              ],
              blur: function($event) {
                _vm.focus = false
              }
            }
          })
        ]
      ),
      _c(
        "span",
        {
          staticClass: "el-radio__label",
          on: {
            keydown: function($event) {
              $event.stopPropagation()
            }
          }
        },
        [
          _vm._t("default"),
          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
        ],
        2
      )
    ]
  )
}
var mainvue_type_template_id_ddcdb848_staticRenderFns = []
mainvue_type_template_id_ddcdb848_render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgRadio',

    mixins: [external_element_ui_["Radio"]],

    props: {
        // 是否关闭再次点击取消功能
        callOff: Boolean
    },

    methods: {
        // create
        handleClick: function handleClick() {
            var bool = this.model === this.label;
            this.$emit('has-click', this.label);
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleClick', this.label);
                this.dispatch('DgRadioGroup', 'handleClick', this.label);
            }
            // 如果前后值相等且关闭取消，则不让继续触发
            if (bool && this.callOff) {
                return;
            }
            var val = bool ? '' : this.label;
            this.$emit('input', val);
            this.$emit('change', val);
            // 兼容 <el-radio-group> & <dg-radio-group> 两种方式。注：这两种组件不能使用包含关系。
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleChange', val);
                this.dispatch('DgRadioGroup', 'handleChange', val);
            }
        },


        // update
        handleChange: function handleChange() {
            var _this = this;

            this.$nextTick(function () {
                // 如果前后值相等则不让触发 change 事件
                if (_this.model === _this.label) {
                    return;
                }
                _this.$emit('change', _this.model);
                if (_this.isGroup) {
                    _this.dispatch('ElRadioGroup', 'handleChange', _this.model);
                    _this.dispatch('DgRadioGroup', 'handleChange', _this.model); // lutz+
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

// CONCATENATED MODULE: ./packages/radio/src/main.vue





/* normalize component */

var main_component = normalizeComponent(
  src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_ddcdb848_render,
  mainvue_type_template_id_ddcdb848_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
main_component.options.__file = "packages/radio/src/main.vue"
/* harmony default export */ var src_main = (main_component.exports);
// CONCATENATED MODULE: ./packages/radio/index.js


/* istanbul ignore next */
src_main.install = function (Vue) {
    Vue.component(src_main.name, src_main);
};

/* harmony default export */ var packages_radio = (src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-button.vue?vue&type=template&id=18a77a32&
var radio_buttonvue_type_template_id_18a77a32_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "label",
    {
      staticClass: "el-radio-button",
      class: [
        _vm.size ? "el-radio-button--" + _vm.size : "",
        { "is-active": _vm.value === _vm.label },
        { "is-disabled": _vm.isDisabled },
        { "is-focus": _vm.focus }
      ],
      attrs: {
        role: "radio",
        "aria-checked": _vm.value === _vm.label,
        "aria-disabled": _vm.isDisabled,
        tabindex: _vm.tabIndex
      },
      on: {
        keydown: function($event) {
          if (
            !$event.type.indexOf("key") &&
            _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])
          ) {
            return null
          }
          $event.stopPropagation()
          $event.preventDefault()
          _vm.value = _vm.isDisabled ? _vm.value : _vm.label
        }
      }
    },
    [
      _c("input", {
        directives: [
          {
            name: "model",
            rawName: "v-model",
            value: _vm.value,
            expression: "value"
          }
        ],
        staticClass: "el-radio-button__orig-radio",
        attrs: {
          type: "radio",
          name: _vm.name,
          disabled: _vm.isDisabled,
          tabindex: "-1"
        },
        domProps: { value: _vm.label, checked: _vm._q(_vm.value, _vm.label) },
        on: {
          click: _vm.handleClick,
          change: [
            function($event) {
              _vm.value = _vm.label
            },
            _vm.handleChange
          ],
          focus: function($event) {
            _vm.focus = true
          },
          blur: function($event) {
            _vm.focus = false
          }
        }
      }),
      _c(
        "span",
        {
          staticClass: "el-radio-button__inner",
          style: _vm.value === _vm.label ? _vm.activeStyle : null,
          on: {
            keydown: function($event) {
              $event.stopPropagation()
            }
          }
        },
        [
          _vm._t("default"),
          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
        ],
        2
      )
    ]
  )
}
var radio_buttonvue_type_template_id_18a77a32_staticRenderFns = []
radio_buttonvue_type_template_id_18a77a32_render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue?vue&type=template&id=18a77a32&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/radio-button.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var radio_buttonvue_type_script_lang_js_ = ({
    name: 'DgRadioButton',

    mixins: [external_element_ui_["RadioButton"]],

    props: {
        // 是否关闭再次点击取消功能
        callOff: Boolean
    },

    methods: {
        // create
        handleClick: function handleClick() {
            var bool = this.value === this.label;
            this.$emit('has-click', this.label);
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleClick', this.label);
                this.dispatch('DgRadioGroup', 'handleClick', this.label);
            }
            // 如果前后值相等且关闭取消，则不让继续触发
            if (bool && this.callOff) {
                return;
            }
            var val = bool ? '' : this.label;
            this.$emit('input', val);
            this.$emit('change', val);
            // 兼容 <el-radio-group> & <dg-radio-group> 两种方式。注：这两种组件不能使用包含关系。
            if (this._radioGroup) {
                this.dispatch('ElRadioGroup', 'handleChange', val);
                this.dispatch('DgRadioGroup', 'handleChange', val);
            }
        },


        // update
        handleChange: function handleChange() {
            var _this = this;

            this.$nextTick(function () {
                // 如果前后值相等则不让触发 change 事件
                if (_this.value === _this.label) {
                    return;
                }
                _this.$emit('change', _this.value);
                if (_this._radioGroup) {
                    _this.dispatch('ElRadioGroup', 'handleChange', _this.value);
                    _this.dispatch('DgRadioGroup', 'handleChange', _this.value);
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_radio_buttonvue_type_script_lang_js_ = (radio_buttonvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/radio/src/radio-button.vue





/* normalize component */

var radio_button_component = normalizeComponent(
  src_radio_buttonvue_type_script_lang_js_,
  radio_buttonvue_type_template_id_18a77a32_render,
  radio_buttonvue_type_template_id_18a77a32_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var radio_button_api; }
radio_button_component.options.__file = "packages/radio/src/radio-button.vue"
/* harmony default export */ var radio_button = (radio_button_component.exports);
// CONCATENATED MODULE: ./packages/radio-button/index.js


/* istanbul ignore next */
radio_button.install = function (Vue) {
  Vue.component(radio_button.name, radio_button);
};

/* harmony default export */ var packages_radio_button = (radio_button);
// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// CONCATENATED MODULE: ./src/dg-utils/shear.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: lutz
 * @Date: 2019-06-05 17:05:32
 * @Last Modified by: lutz
 * @Last Modified time: 2019-12-06 08:58:43
 */



/**
 * 修改组件属性或对象的属性
 * 深度克隆
 * @param {Object} cpm
 * @param {Array|Object} hook 生命周期函数和组件属性；数组默认删除，对象默认替换（恒等undefined，默认删除）
 * @param {Array|Object} watch 监听属性的修改
 * @return {Object}
 */
function complex(cpm, hook, watch) {
    var component = external_lodash_default.a.cloneDeep(cpm);

    if (hook) {
        if (external_lodash_default.a.isArray(hook)) {
            hook.forEach(function (item) {
                delete component[item];
            });
        } else if (external_lodash_default.a.isObject(hook)) {
            for (var key in hook) {
                if (hook[key] === void 0) {
                    delete component[key];
                } else {
                    component[key] = hook[key];
                }
            }
        }
    }

    if (watch) {
        if (external_lodash_default.a.isArray(watch) && component.watch) {
            watch.forEach(function (item) {
                delete component.watch[item];
            });
        } else if (external_lodash_default.a.isObject(watch)) {
            for (var _key in watch) {
                if (watch[_key] === void 0) {
                    delete component.watch[_key];
                } else {
                    component.watch[_key] = watch[_key];
                }
            }
        }
    }

    return component;
}

/**
 * 删除对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {array} filterArr 需要删除的属性名称
 *
 * @return {object}
 */
function shear_filterObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var newObj = _extends({}, obj);
    filterArr.forEach(function (item) {
        delete newObj[item];
    });
    return newObj;
}

/**
 * 替换对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {object} filterObj 需要替换的属性名称，undefined则会删除对象上属性
 *
 * @return {object}
 */
function replaceObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var newObj = _extends({}, obj, filterObj);
    Object.keys(filterObj).forEach(function (item) {
        if (filterObj[item] === void 0) {
            delete newObj[item];
        }
    });
    return newObj;
}

/**
 * 根据参数操作对象
 * 浅拷贝
 * demo
 * a) 过滤undefined
 *  var obj = { input: void 0, change() { console.log('change') } }
 *  complexObj(obj, null, true) // { change: f }
 *  obj // { input: undefined, change: f }
 *
 * b) 删除属性
 *  var obj = { a: 2, b: 3 }, arr = ['a', 'c']
 *  complexObj(obj, arr) // { b: 3 }
 *  obj // {a: 2, b: 3}
 *
 * c) 替换属性
 *  var obj = { a: 2, b: 3 }, fobj = { a: void 0, c: 9, b: 4 }
 *  complexObj(obj, fobj) // { b: 4, c: 9 }
 *  obj // {a: 2, b: 3}
 *
 *
 * @param {object} obj 需要操作的对象
 * @param {array|object} filterVal 数组：需要删除的属性名称，对象：需要替换的属性名称，undefined则会删除对象上属性
 * @param {boolen} filterNull 是否过滤 undefined
 *
 * @return {object}
 */
function complexObj(obj, filterVal) {
    var filterNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var newObj = _extends({}, obj);

    if (external_lodash_default.a.isArray(filterVal)) {
        newObj = shear_filterObj(obj, filterVal);
    } else if (external_lodash_default.a.isObject(filterVal)) {
        newObj = replaceObj(obj, filterVal);
    }

    // 过滤 undefined
    if (filterNull) {
        Object.keys(newObj).forEach(function (item) {
            if (newObj[item] === void 0) {
                delete newObj[item];
            }
        });
    }

    return newObj;
}

var hyphenateRE = /\B([A-Z])/g;

/**
 * 将驼峰转换成-隔开
 * hyphenate('ElTable') => "el-table"
 * @param {string} str
 * @return {string}
 */
var hyphenate = function hyphenate(str) {
    return str.replace(hyphenateRE, "-$1").toLowerCase();
};

/**
 * 获取指定组件的参数值
 * @param cmp 组件对象，如ElTable
 * @param instance  当前组件对象,调用时，传this
 * @param filterObject 过滤属性值，{name:"11",sex:(props,val)=>val,age:undefined} 属性undefined 删除属性
 */
function shear_getCmpProps(cmp, instance) {
    var filterObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // 如果不是组件函数，则生成组件函数，主要是把混合的属性合并在一起
    if (!external_lodash_default.a.isFunction(cmp)) {
        cmp = instance.constructor.extend(cmp);
    }
    // 传入属性值+默认的值
    var propsData = _extends({}, instance.$attrs, instance.$props);

    // 过滤属性值
    var cmpProps = {};
    external_lodash_default.a.forOwn(cmp.options.props, function (value, key) {
        var propValue = propsData[key] || propsData[hyphenate(key)];
        // 过滤组件属性
        if (filterObj.hasOwnProperty(key)) {
            propValue = external_lodash_default.a.isFunction(filterObj[key]) ? filterObj[key](propsData, propValue) : filterObj[key];
        }

        // 过滤 undefined
        if (propValue !== undefined) {
            cmpProps[key] = propValue;
        }
    });

    return cmpProps;
}

/**
 * 获取组件的事件对象
 * @param instance
 * @param filterObj {click:"handleClick",change:(evt)=>val,input:undefined} 属性undefined 删除属性
 * @returns {*}
 */
function shear_getCmpEvents(instance) {
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var listeners = external_lodash_default.a.clone(instance.$listeners);
    external_lodash_default.a.forOwn(filterObj, function (val, key) {
        if (val && external_lodash_default.a.isString(val)) {
            listeners[key] = instance[val];
        } else if (val && external_lodash_default.a.isFunction(val)) {
            listeners[key] = val;
        } else if (val === undefined) {
            delete listeners[key];
        }
    });
    return listeners;
}

/**
 * 根据组件参数是，require、import获取组件的对象
 * @param type
 * @returns {type}
 */
function getCmpType(type) {
    if (external_lodash_default.a.isObject(type) && type.default) {
        type = type.default;
    }
    if (type && type instanceof Promise) {
        var promise = type;
        type = function type(resolve, reject) {
            promise.then(function (obj) {
                resolve(obj);
            });
        };
    }
    return type;
}

/**
 * 从$attrs获取匹配的属性
 * @param instance
 * @param reg
 */
function getCmpPropsFromAttrs(instance, reg) {
    var attr = instance.$attrs;
    var obj = {};

    Object.keys(attr).map(function (item) {
        if (reg.test(item)) {
            obj[item.replace(reg, "")] = attr[item];
        }
    });

    return obj;
}
// CONCATENATED MODULE: ./src/dg-utils/data-convert.js
/*
 * @Author: lutz
 * @Date: 2019-06-24 11:16:27
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-01 15:15:41
 * @Last Modified by: huangjq
 * @Last Modified time: 2020-07-24 11:10:20
 */



/**
 * string to array
 * @param {any} val 需要处理的数据
 * @param {string} seq 字符串分隔符
 * @param {boolen} clone 是否深度拷贝
 * @param {array} dataSource 数据源
 * @param {string|number} dataSourceValueName 数据源需要匹配字段
 *
 * @return {array}
 */
function str2arr(val) {
    var seq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
    var clone = arguments[2];
    var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var dataSourceValueName = arguments[4];
    var isDataSourceChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (external_lodash_default.a.isNil(val) || val === '') {
        return [];
    }

    if (external_lodash_default.a.isArray(val)) {
        return clone ? external_lodash_default.a.cloneDeep(val) : val;
    }

    var data = val.toString().split(seq);

    // 数据源必须是数组 && 长度大于0 && 展示数据必须是数组
    if (external_lodash_default.a.isArray(dataSource) && dataSource.length && external_lodash_default.a.isArray(data)) {
        // 对象数组 或 数组的截取第一个数据判断数字类型
        if (dataSourceValueName != null && external_lodash_default.a.isNumber(dataSource[0][dataSourceValueName]) || !dataSourceValueName && external_lodash_default.a.isNumber(dataSource[0])) {
            data = data.map(function (item) {
                return Number(item);
            });
        }
    }

    if (isDataSourceChanged) {
        // huangjq 2020/07/24
        // 数据源改变后，有些原有的value不存在了，重新过滤
        var keys = [];
        dataSource.map(function (item) {
            return keys.push(item[dataSourceValueName]);
        });
        data = data.filter(function (item) {
            return keys.indexOf(item) > -1;
        });
    }

    return data;
}

/**
 * 将数据转换成指定数据类型
 * @param {*} val
 * @param {Array|String|Object} type 需要转换的类型
 * @param {String} seq 分隔符
 */
function data2type(val, type) {
    var seq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    var bool = external_lodash_default.a['is' + type] && external_lodash_default.a['is' + type](val);

    if (bool) {
        return val;
    }

    // 为保证选项可选中，这里不能将数字转成字符串
    if (external_lodash_default.a.isNumber(val) && type === 'String') {
        return val;
    }

    if (external_lodash_default.a.isArray(val) && type === 'String') {
        return val.sort().join(seq);
    }

    if (external_lodash_default.a.isString(val) && type === 'Array') {
        return val.split(seq);
    }

    var map = {
        String: '',
        Array: [],
        Object: {}
    };

    return map[type];
}

/**
 * 两个数组合并成不重复的数组
 * @param {Array} exp
 * @param {Array} val
 */
function uniqArr(exp, val) {
    if (external_lodash_default.a.isArray(exp) && external_lodash_default.a.isArray(val)) {
        return external_lodash_default.a.union(exp, val);
    }

    return [];
}
// CONCATENATED MODULE: ./src/dg-mixins/convert.js
var convert_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* harmony default export */ var convert = ({
    props: {
        valueName: String,
        labelName: String,
        disabledName: [String, Function],
        childrenName: String,
        isLeafName: String
    },
    computed: {
        defaultProp: function defaultProp() {
            var valueName = this.valueName,
                labelName = this.labelName,
                childrenName = this.childrenName,
                disabledName = this.disabledName,
                isLeafName = this.isLeafName;

            var _ref = this.props || {},
                value = _ref.value,
                label = _ref.label,
                children = _ref.children,
                disabled = _ref.disabled,
                isLeaf = _ref.isLeaf,
                other = _objectWithoutProperties(_ref, ['value', 'label', 'children', 'disabled', 'isLeaf']);

            return convert_extends({}, other, {
                value: valueName || value || 'value',
                label: labelName || label || 'label',
                disabled: disabledName || disabled || 'disabled',
                children: childrenName || children || 'children',
                isLeaf: isLeafName || isLeaf || 'isLeaf'
            });
        }
    }
});
// CONCATENATED MODULE: ./src/dg-mixins/itemsWithDisabled.js
/*
@author lutz
@updateDate 2019-06-18
@describe
    props
        data {array} 组件数据源,透传到 $data.dataSource
        disabled-value {array|string} 禁用项
        seq {string} 分隔符（命名参考: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html）
        output-format {string} enum["String", "Array"]
    data
        dataSource {array} 数据源
    computed
        itemsWithDisabled @return {array<object>} 添加禁用状态到数据源
    watch
        data => dataSource 兼容组件 $props.data 对 $data.dataSource 值变化
*/




/* harmony default export */ var dg_mixins_itemsWithDisabled = ({
    mixins: [convert],
    props: {
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabledValue: {
            type: [String, Array],
            default: function _default() {
                return [];
            }
        },
        seq: { type: String, default: ',' },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        }
    },
    watch: {
        data: function data(val) {
            this.dataSource = val;
        },

        // dataSource 触发 data改变的方法
        dataSource: function dataSource(val) {
            this.$emit('change-data', val);
        }
    },
    data: function data() {
        return { dataSource: this.data };
    },

    computed: {
        itemsWithDisabled: function itemsWithDisabled() {
            var dataSource = this.dataSource,
                disabledValue = this.disabledValue,
                seq = this.seq,
                defaultProp = this.defaultProp;

            var disabledArr = str2arr(disabledValue, seq, true, dataSource, defaultProp.value);
            if (disabledArr.length < 1) {
                return dataSource;
            }
            // 深度拷贝,避免污染数据源($data)
            var data = external_lodash_default.a.cloneDeep(dataSource);
            data.forEach(function (item) {
                var isInclude = external_lodash_default.a.includes(disabledArr, item[defaultProp.value]);
                // 这里if中的布尔值要分开写否则会报错
                if (isInclude) {
                    item[defaultProp.disabled] = true;
                }
            });
            return data;
        }
    }
});
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio-group/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//









/* harmony default export */ var radio_group_src_mainvue_type_script_lang_js_ = ({
    name: 'DgRadioGroup',

    componentName: 'DgRadioGroup',

    mixins: [dg_mixins_itemsWithDisabled],

    components: {
        ElRadioGroup: external_element_ui_["RadioGroup"],
        DgRadioButton: packages_radio_button,
        DgRadio: packages_radio
    },

    props: {
        // 默认选中值
        value: {
            required: true
        },
        disabled: Boolean,
        // 显示类型，默认为 radio 类型，可选项为 按钮类型
        type: {
            type: String,
            default: ''
        },
        // 是否垂直排列，按钮样式下无效
        vertical: {
            type: Boolean,
            default: false
        },
        // dg-radio callOff
        callOff: Boolean,
        // 是否花边展示
        isLace: {
            type: Boolean,
            default: false
        }
    },

    computed: {
        val: {
            get: function get() {
                var value = this.value,
                    seq = this.seq;

                return data2type(value, 'String', seq);
            },
            set: function set(val) {
                this.hookData(val);
            }
        },

        /* 创建原因：
          input 触发两次且值与 output-format 不同
          change 触发两次
        */
        listeners: function listeners() {
            return shear_filterObj(this.$listeners, ['input', 'change']);
        }
    },

    methods: {
        // 触发 input、change 事件
        hookData: function hookData(val) {
            var outputFormat = this.outputFormat,
                seq = this.seq,
                getLable = this.getLable;

            this.$emit('input', data2type(val, outputFormat, seq), getLable(val));
            this.$emit('change', val, getLable(val));
        },

        // 用于获取当前选中的对象 { label, value }
        getLable: function getLable(val) {
            var itemsWithDisabled = this.itemsWithDisabled,
                defaultProp = this.defaultProp;

            return external_lodash_default.a.find(itemsWithDisabled, function (item) {
                return val === item[defaultProp.value];
            });
        }
    },

    created: function created() {
        var _this = this;

        this.$on('handleChange', function (val) {
            var outputFormat = _this.outputFormat,
                seq = _this.seq,
                value = _this.value,
                callOff = _this.callOff,
                getLable = _this.getLable;
            // call-off 关闭

            if (callOff) {
                return;
            }
            // 需要触发置空的 input、change 事件
            if (value !== '' && val === '') {
                _this.$emit('input', data2type(val, outputFormat, seq), getLable(val));
                _this.$emit('change', val, getLable(val));
            }
        });
        this.$on('handleClick', function (val) {
            _this.$emit('has-click', val);
        });
    }
});
// CONCATENATED MODULE: ./packages/radio-group/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_radio_group_src_mainvue_type_script_lang_js_ = (radio_group_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/radio-group/src/main.vue





/* normalize component */

var src_main_component = normalizeComponent(
  packages_radio_group_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_af339c2c_render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
src_main_component.options.__file = "packages/radio-group/src/main.vue"
/* harmony default export */ var radio_group_src_main = (src_main_component.exports);
// CONCATENATED MODULE: ./packages/radio-group/index.js


/* istanbul ignore next */
radio_group_src_main.install = function (Vue) {
    Vue.component(radio_group_src_main.name, radio_group_src_main);
};

/* harmony default export */ var radio_group = (radio_group_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox-group/src/main.vue?vue&type=template&id=aaa58b6c&
var mainvue_type_template_id_aaa58b6c_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-checkbox-group" },
    [
      _vm.showQuick
        ? _c(
            "div",
            {
              class: {
                "dg-checkbox-group__row": _vm.row,
                "dg-checkbox-group__margin": _vm.row,
                "dg-checkbox-group__quick": !_vm.row
              }
            },
            [
              _vm.checkAll
                ? _c(
                    "el-checkbox",
                    {
                      attrs: {
                        size: _vm.size,
                        indeterminate: _vm.isIndeterminate,
                        disabled: _vm.checkAllDisabled || _vm.disabled
                      },
                      model: {
                        value: _vm.isCheckedAll,
                        callback: function($$v) {
                          _vm.isCheckedAll = $$v
                        },
                        expression: "isCheckedAll"
                      }
                    },
                    [
                      _vm._v(
                        "\n            " +
                          _vm._s(_vm.checkAllText) +
                          "\n        "
                      )
                    ]
                  )
                : _vm._e(),
              _vm.inverse
                ? _c(
                    "el-checkbox",
                    {
                      attrs: { disabled: _vm.disabled, size: _vm.size },
                      model: {
                        value: _vm.isInverse,
                        callback: function($$v) {
                          _vm.isInverse = $$v
                        },
                        expression: "isInverse"
                      }
                    },
                    [_vm._v("反选")]
                  )
                : _vm._e()
            ],
            1
          )
        : _vm._e(),
      _c(
        "el-checkbox-group",
        _vm._b(
          {
            class: {
              "dg-checkbox-group__row": _vm.row && !_vm.vertical
            },
            attrs: { disabled: _vm.disabled, size: _vm.size },
            model: {
              value: _vm.valueArray,
              callback: function($$v) {
                _vm.valueArray = $$v
              },
              expression: "valueArray"
            }
          },
          "el-checkbox-group",
          _vm.$attrs,
          false
        ),
        _vm._l(_vm.itemsWithDisabled, function(item, key) {
          return _c(
            _vm.com,
            {
              key: key,
              tag: "component",
              class: {
                "dg-checkbox-group__vertical": _vm.vertical,
                "dg-checkbox-group__quick": _vm.vertical,
                "is-lace": _vm.isLace && !_vm.disabled
              },
              attrs: {
                label: item[_vm.defaultProp.value],
                disabled: item[_vm.defaultProp.disabled],
                border: _vm.border && _vm.type != "button" && !_vm.vertical
              }
            },
            [_vm._v(_vm._s(item[_vm.defaultProp.label]))]
          )
        }),
        1
      )
    ],
    1
  )
}
var mainvue_type_template_id_aaa58b6c_staticRenderFns = []
mainvue_type_template_id_aaa58b6c_render._withStripped = true


// CONCATENATED MODULE: ./packages/checkbox-group/src/main.vue?vue&type=template&id=aaa58b6c&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/checkbox-group/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var checkbox_group_src_mainvue_type_script_lang_js_ = ({
    name: 'DgCheckboxGroup',

    mixins: [dg_mixins_itemsWithDisabled],

    components: {
        ElCheckboxGroup: external_element_ui_["CheckboxGroup"],
        ElCheckboxButton: external_element_ui_["CheckboxButton"],
        ElCheckbox: external_element_ui_["Checkbox"]
    },

    props: {
        disabled: Boolean,
        value: {
            required: true
        },
        // 全选
        checkAll: Boolean,
        // 全选文字
        checkAllText: {
            type: String,
            default: '全选'
        },
        // 全选禁用
        checkAllDisabled: {
            type: Boolean,
            default: false
        },
        // 反选
        inverse: Boolean,
        // 渲染组件类型
        type: {
            type: String,
            default: ''
        },
        /* 以下属性仅在 type !== button 时生效 */
        // 全选、反选 是否同行显示
        row: Boolean,
        // 带有边框
        border: Boolean,
        // 垂直排列
        vertical: Boolean,
        // 尺寸大小
        size: {
            type: String,
            default: ''
        },
        // 是否花边展示
        isLace: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            valueArray: []
        };
    },

    watch: {
        value: {
            immediate: true,
            deep: true,
            handler: function handler(val) {
                var value = this.value,
                    seq = this.seq,
                    dataSource = this.dataSource,
                    defaultProp = this.defaultProp;

                this.valueArray = str2arr(value, seq, true, dataSource, defaultProp.value);
            }
        },
        valueArray: function valueArray(newVal, oldVal) {
            if (newVal.length !== oldVal.length || newVal.toString() !== oldVal.toString()) {
                this.returnsVal(newVal);
            }
        },
        dataSource: function dataSource(newDataSource, oldDataSource) {
            var value = this.value,
                seq = this.seq,
                dataSource = this.dataSource,
                defaultProp = this.defaultProp;

            if (this.valueArray.length > 0) {
                this.valueArray = str2arr(value, seq, true, newDataSource, defaultProp.value, true);
            }
        }
    },

    computed: {
        // 是否显示全选或反选
        showQuick: function showQuick() {
            return this.checkAll || this.inverse;
        },


        // 需要渲染组件 PS:PC端没问题,在移动端或微信渲染这种写法有问题
        com: function com() {
            return this.type == 'button' ? external_element_ui_["CheckboxButton"] : external_element_ui_["Checkbox"];
        },


        // 对数据进行处理
        valueArr: {
            get: function get() {
                var value = this.value,
                    seq = this.seq,
                    dataSource = this.dataSource,
                    defaultProp = this.defaultProp;

                return str2arr(value, seq, true, dataSource, defaultProp.value);
            },
            set: function set(val) {
                this.returnsVal(val);
            }
        },

        // 反选的监听事件
        isInverse: {
            get: function get() {
                return false;
            },
            set: function set(val) {
                var valueArr = this.valueArr,
                    filterVal = this.filterVal;

                var selectArr = external_lodash_default.a.difference(filterVal(), valueArr);
                this.valueArray = selectArr;
            }
        },

        // 监听全选状态 全选的勾选状态
        isCheckedAll: {
            get: function get() {
                var valueArr = this.valueArr,
                    filterVal = this.filterVal;

                return valueArr.length && valueArr.length === filterVal().length;
            },
            set: function set(val) {
                var filterVal = this.filterVal,
                    lockDisabledVal = this.lockDisabledVal;

                var data = val ? uniqArr(lockDisabledVal(), filterVal()) : lockDisabledVal();
                this.valueArray = data;
            }
        },

        // 全选的状态 @return {boolean} element-ui>el-checkbox 的 indeterminate状态
        isIndeterminate: function isIndeterminate() {
            var valueArr = this.valueArr,
                filterVal = this.filterVal;

            return valueArr.length > 0 && valueArr.length < filterVal().length;
        }
    },

    methods: {
        // 过滤禁选选项后的值 @return {array<string|number>}
        filterVal: function filterVal() {
            var itemsWithDisabled = this.itemsWithDisabled;
            var _defaultProp = this.defaultProp,
                value = _defaultProp.value,
                disabled = _defaultProp.disabled;

            return itemsWithDisabled.filter(function (item) {
                return !item[disabled];
            }).map(function (item) {
                return item[value];
            });
        },


        // 选中且禁用属性的值 @return {array<string|number>}
        lockDisabledVal: function lockDisabledVal() {
            var valueArr = this.valueArr,
                itemsWithDisabled = this.itemsWithDisabled;
            var _defaultProp2 = this.defaultProp,
                value = _defaultProp2.value,
                disabled = _defaultProp2.disabled;

            var data = [];
            itemsWithDisabled.forEach(function (item) {
                if (item[disabled] && valueArr.indexOf(item[value]) !== -1) {
                    data.push(item[value]);
                }
            });
            return data;
        },


        // input、change事件触发
        returnsVal: function returnsVal(val) {
            var outputFormat = this.outputFormat,
                seq = this.seq;

            var data = data2type(val, outputFormat, seq);
            this.$emit('input', data);
            this.$emit('change', data);
        }
    }
});
// CONCATENATED MODULE: ./packages/checkbox-group/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_checkbox_group_src_mainvue_type_script_lang_js_ = (checkbox_group_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/checkbox-group/src/main.vue





/* normalize component */

var checkbox_group_src_main_component = normalizeComponent(
  packages_checkbox_group_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_aaa58b6c_render,
  mainvue_type_template_id_aaa58b6c_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var src_main_api; }
checkbox_group_src_main_component.options.__file = "packages/checkbox-group/src/main.vue"
/* harmony default export */ var checkbox_group_src_main = (checkbox_group_src_main_component.exports);
// CONCATENATED MODULE: ./packages/checkbox-group/index.js


/* istanbul ignore next */
checkbox_group_src_main.install = function (Vue) {
    Vue.component(checkbox_group_src_main.name, checkbox_group_src_main);
};

/* harmony default export */ var checkbox_group = (checkbox_group_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/main.vue?vue&type=template&id=6a5ec4a3&
var mainvue_type_template_id_6a5ec4a3_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "el-select",
    _vm._g(
      _vm._b(
        {
          staticClass: "dg-select",
          attrs: {
            group: _vm.group,
            multiple: _vm.multiple,
            data: _vm.itemsWithDisabled,
            "default-prop": _vm.defaultProp
          },
          model: {
            value: _vm.model,
            callback: function($$v) {
              _vm.model = $$v
            },
            expression: "model"
          }
        },
        "el-select",
        _vm.$attrs,
        false
      ),
      _vm.$listeners
    ),
    [
      _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2),
      _vm.hasSlots
        ? [_vm._t("default")]
        : _vm.group
        ? _vm._l(_vm.groupItems, function(item) {
            return _c(
              "el-option-group",
              { key: item.label, attrs: { label: item.label } },
              _vm._l(item.options, function(child) {
                return _c("el-option", {
                  key: child[_vm.defaultProp.value],
                  attrs: {
                    label: child[_vm.defaultProp.label],
                    value: child[_vm.defaultProp.value],
                    disabled: child[_vm.defaultProp.disabled]
                  }
                })
              }),
              1
            )
          })
        : _vm._l(_vm.itemsWithDisabled, function(item) {
            return _c("el-option", {
              key: item[_vm.defaultProp.value],
              attrs: {
                label: item[_vm.defaultProp.label],
                value: item[_vm.defaultProp.value],
                disabled: item[_vm.defaultProp.disabled]
              }
            })
          })
    ],
    2
  )
}
var mainvue_type_template_id_6a5ec4a3_staticRenderFns = []
mainvue_type_template_id_6a5ec4a3_render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/main.vue?vue&type=template&id=6a5ec4a3&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=template&id=0e4aade6&
var selectvue_type_template_id_0e4aade6_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "clickoutside",
          rawName: "v-clickoutside",
          value: _vm.handleClose,
          expression: "handleClose"
        }
      ],
      staticClass: "el-select",
      class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.toggleMenu($event)
        }
      }
    },
    [
      _vm.multiple
        ? _c(
            "div",
            {
              ref: "tags",
              staticClass: "el-select__tags",
              style: {
                "max-width": _vm.inputWidth - 32 + "px",
                width: "100%",
                overflow: "hidden"
              }
            },
            [
              _vm.collapseTags && _vm.selected.length
                ? _c(
                    "span",
                    [
                      _c(
                        "el-tag",
                        {
                          attrs: {
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: _vm.selected[0].hitState,
                            "disable-transitions": ""
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, _vm.selected[0])
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: _vm.selected[0].currentLabel }
                            },
                            [_vm._v(_vm._s(_vm.selected[0].currentLabel))]
                          )
                        ]
                      ),
                      _vm.selected.length > 1
                        ? _c(
                            "el-tag",
                            {
                              attrs: {
                                closable: false,
                                size: _vm.collapseTagSize,
                                "disable-transitions": ""
                              }
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "el-select__tags-text" },
                                [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                              )
                            ]
                          )
                        : _vm._e()
                    ],
                    1
                  )
                : _vm._e(),
              !_vm.collapseTags && !_vm.dragTags
                ? _c(
                    "transition-group",
                    { on: { "after-leave": _vm.resetInputHeight } },
                    _vm._l(_vm.selected, function(item) {
                      return _c(
                        "el-tag",
                        {
                          key: _vm.getValueKey(item),
                          attrs: {
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: item.hitState,
                            "disable-transitions": ""
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, item)
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: item.currentLabel }
                            },
                            [_vm._v(_vm._s(item.currentLabel))]
                          )
                        ]
                      )
                    }),
                    1
                  )
                : _vm._e(),
              !_vm.collapseTags && _vm.dragTags
                ? _c(
                    "transition",
                    { on: { "after-leave": _vm.resetInputHeight } },
                    [
                      _c(
                        "div",
                        {
                          ref: "tagContent",
                          staticClass: "dg-drag-tags__content",
                          style: [{ width: _vm.tagItemLength + "px" }],
                          on: {
                            mousedown: function($event) {
                              $event.stopPropagation()
                              return _vm.handleDragStart($event)
                            }
                          }
                        },
                        _vm._l(_vm.selected, function(item) {
                          return _c(
                            "el-tag",
                            {
                              key: _vm.getValueKey(item),
                              ref: "tagItem",
                              refInFor: true,
                              attrs: {
                                closable: !_vm.selectDisabled,
                                size: _vm.collapseTagSize,
                                hit: item.hitState,
                                "disable-transitions": ""
                              },
                              on: {
                                close: function($event) {
                                  return _vm.deleteTag($event, item)
                                }
                              }
                            },
                            [
                              _c(
                                "span",
                                {
                                  staticClass: "el-select__tags-text",
                                  attrs: { title: item.currentLabel }
                                },
                                [_vm._v(_vm._s(item.currentLabel))]
                              )
                            ]
                          )
                        }),
                        1
                      )
                    ]
                  )
                : _vm._e(),
              _vm.filterable
                ? _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.query,
                        expression: "query"
                      }
                    ],
                    ref: "input",
                    staticClass: "el-select__input",
                    class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                    style: {
                      "flex-grow": "1",
                      width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                      "max-width": _vm.inputWidth - 42 + "px"
                    },
                    attrs: {
                      type: "text",
                      disabled: _vm.selectDisabled,
                      autocomplete: _vm.autoComplete || _vm.autocomplete
                    },
                    domProps: { value: _vm.query },
                    on: {
                      focus: _vm.handleFocus,
                      blur: function($event) {
                        _vm.softFocus = false
                      },
                      click: function($event) {
                        $event.stopPropagation()
                      },
                      keyup: _vm.managePlaceholder,
                      keydown: [
                        _vm.resetInputState,
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "down", 40, $event.key, [
                              "Down",
                              "ArrowDown"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("next")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "up", 38, $event.key, [
                              "Up",
                              "ArrowUp"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("prev")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.selectOption($event)
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "esc", 27, $event.key, [
                              "Esc",
                              "Escape"
                            ])
                          ) {
                            return null
                          }
                          $event.stopPropagation()
                          $event.preventDefault()
                          _vm.visible = false
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "delete",
                              [8, 46],
                              $event.key,
                              ["Backspace", "Delete", "Del"]
                            )
                          ) {
                            return null
                          }
                          return _vm.deletePrevTag($event)
                        }
                      ],
                      compositionstart: _vm.handleComposition,
                      compositionupdate: _vm.handleComposition,
                      compositionend: _vm.handleComposition,
                      input: [
                        function($event) {
                          if ($event.target.composing) {
                            return
                          }
                          _vm.query = $event.target.value
                        },
                        _vm.debouncedQueryChange
                      ]
                    }
                  })
                : _vm._e()
            ],
            1
          )
        : _vm._e(),
      _c(
        "el-input",
        {
          ref: "reference",
          class: { "is-focus": _vm.visible },
          attrs: {
            type: "text",
            placeholder: _vm.currentPlaceholder,
            name: _vm.name,
            id: _vm.id,
            autocomplete: _vm.autoComplete || _vm.autocomplete,
            size: _vm.selectSize,
            disabled: _vm.selectDisabled,
            readonly: _vm.readonly,
            "validate-event": false
          },
          on: { focus: _vm.handleFocus, blur: _vm.handleBlur },
          nativeOn: {
            keyup: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            keydown: [
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("next")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("prev")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                ) {
                  return null
                }
                $event.preventDefault()
                return _vm.selectOption($event)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                _vm.visible = false
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
                ) {
                  return null
                }
                _vm.visible = false
              }
            ],
            paste: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            mouseenter: function($event) {
              _vm.inputHovering = true
            },
            mouseleave: function($event) {
              _vm.inputHovering = false
            }
          },
          model: {
            value: _vm.selectedLabel,
            callback: function($$v) {
              _vm.selectedLabel = $$v
            },
            expression: "selectedLabel"
          }
        },
        [
          _vm.$slots.prefix
            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
            : _vm._e(),
          _c("template", { slot: "suffix" }, [
            _c("i", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.showClose,
                  expression: "!showClose"
                }
              ],
              class: [
                "el-select__caret",
                "el-input__icon",
                "el-icon-" + _vm.iconClass
              ]
            }),
            _vm.showClose
              ? _c("i", {
                  staticClass:
                    "el-select__caret el-input__icon el-icon-circle-close",
                  on: { click: _vm.handleClearClick }
                })
              : _vm._e()
          ])
        ],
        2
      ),
      _c(
        "transition",
        {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "before-enter": _vm.handleMenuEnter,
            "after-leave": _vm.doDestroy
          }
        },
        [
          _c(
            "el-select-menu",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody }
            },
            [
              _c(
                "el-scrollbar",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.options.length > 0 && !_vm.loading,
                      expression: "options.length > 0 && !loading"
                    }
                  ],
                  ref: "scrollbar",
                  class: {
                    "is-empty":
                      !_vm.allowCreate &&
                      _vm.query &&
                      _vm.filteredOptionsCount === 0
                  },
                  attrs: {
                    tag: "ul",
                    "wrap-class": "el-select-dropdown__wrap",
                    "view-class": "el-select-dropdown__list"
                  }
                },
                [
                  _vm.showNewOption
                    ? _c("el-option", {
                        attrs: { value: _vm.query, created: "" }
                      })
                    : _vm._e(),
                  _vm._t("default")
                ],
                2
              ),
              _vm.emptyText &&
              (!_vm.allowCreate ||
                _vm.loading ||
                (_vm.allowCreate && _vm.options.length === 0))
                ? [
                    _vm.$slots.empty
                      ? _vm._t("empty")
                      : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                          _vm._v(
                            "\n          " +
                              _vm._s(_vm.emptyText) +
                              "\n        "
                          )
                        ])
                  ]
                : _vm._e()
            ],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var selectvue_type_template_id_0e4aade6_staticRenderFns = []
selectvue_type_template_id_0e4aade6_render._withStripped = true


// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=template&id=0e4aade6&

// EXTERNAL MODULE: external "throttle-debounce/debounce"
var debounce_ = __webpack_require__(6);
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/select.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








// add author: tangdm descript: overwrite SelectMenu 's minWidth
external_element_ui_["Select"].components.ElSelectMenu.watch['$parent.inputWidth'] = function () {
    this.minWidth = Math.max(this.$parent.$el.getBoundingClientRect().width, this.$parent.$el.clientWidth) + 'px';
};

var Select = complex(external_element_ui_["Select"], ['created', 'mounted']);

/* harmony default export */ var selectvue_type_script_lang_js_ = ({
    mixins: [Select],

    props: {
        // add author: tangdm
        dragTags: Boolean,
        defaultProp: Object
    },

    data: function data() {
        return {
            // add author: tangdm descript: drag status for flag
            dragStatus: false,
            // add author: tangdm descript: count tag's item length
            tagItemLength: 0
        };
    },


    watch: {
        selectDisabled: function selectDisabled() {
            var _this = this;

            // create author:lutz describe:!multiple不渲染
            if (!this.multiple) {
                return;
            }
            this.$nextTick(function () {
                _this.resetInputHeight();
            });
        },


        // add author: tangdm
        selected: function selected() {
            var _this2 = this;

            this.$nextTick(function () {
                // 检测判断标签值是否存在
                if (_this2.$refs.tagContent) {
                    _this2.$refs.tagContent.style.transform = 'translateX(0px)';
                }

                // 计算标签数量值的长度
                var count = 0;
                var tagItem = _this2.$refs.tagItem;
                if (tagItem) {
                    tagItem.forEach(function (item) {
                        count += item.$el.offsetWidth + 8;
                    });
                }
                _this2.tagItemLength = count;
            });
        }
    },

    methods: {
        resetInputHeight: function resetInputHeight() {
            var _this3 = this;

            if (this.collapseTags && !this.filterable) return;
            this.$nextTick(function () {
                if (!_this3.$refs.reference) return;
                var inputChildNodes = _this3.$refs.reference.$el.childNodes;
                var input = [].filter.call(inputChildNodes, function (item) {
                    return item.tagName === 'INPUT';
                })[0];
                var tags = _this3.$refs.tags;
                var sizeInMap = _this3.initialInputHeight || 40;

                // update author: tangdm descript: 不同分辨率兼容高度问题
                // [code] input.style.height = this.selected.length === 0
                //        ? sizeInMap + 'px'
                //        : Math.max(
                //        tags ? (tags.clientHeight + (tags.clientHeight > sizeInMap ? 6 : 0)) : 0,
                //        sizeInMap
                // ) + 'px';

                input.style.height = _this3.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tags.clientHeight : 0, sizeInMap) + 'px';
                if (_this3.visible && _this3.emptyText !== false) {
                    _this3.broadcast('ElSelectDropdown', 'updatePopper');
                }
            });
        },
        toggleMenu: function toggleMenu() {
            // update author: tangdm descript: 拖拽状态判断
            if (this.dragStatus) {
                this.dragStatus = false;
                return false;
            }

            if (!this.selectDisabled) {
                if (this.menuVisibleOnFocus) {
                    this.menuVisibleOnFocus = false;
                } else {
                    this.visible = !this.visible;
                }
                if (this.visible) {
                    (this.$refs.input || this.$refs.reference).focus();
                }
            }
        },


        // @update @author:lutz @descript:添加 change 事件参数
        emitChange: function emitChange(val) {
            var getLabel = this.getLabel;

            if (!valueEquals(this.value, val)) {
                this.$emit('change', val, getLabel(val));
            }
        },


        // @add @author:lutz @descript:获取过滤值
        getLabel: function getLabel(val) {
            var data = this.$attrs.data;
            var value = this.defaultProp.value;

            return external_lodash_default.a.isArray(val) ? external_lodash_default.a.intersectionBy(data, val.map(function (item) {
                var _ref;

                return _ref = {}, _ref[value] = item, _ref;
            }), value) : external_lodash_default.a.find(data, function (item) {
                return val === item[value];
            });
        },
        resetInputWidth: function resetInputWidth() {
            // update author: tangdm [code] this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
            // descript: element count item's width for error in layers.
            this.inputWidth = Math.max(this.$refs.reference.$el.getBoundingClientRect().width, this.$refs.reference.$el.clientWidth);
        },


        /**
         * 拖拽标签移动位置
         *
         * @param evt 事件
         * add author: tangdm
         */
        handleDragStart: function handleDragStart(evt) {
            var _this4 = this;

            // 初始化位置
            var disX = evt.clientX - this.$refs.tagContent.offsetLeft;

            // transform 当前的位置
            var transform = this.$refs.tagContent.style.transform;
            var position = transform.match(/-[0-9]+|[0-9]+/g);
            var positionValue = position ? Number(position[0]) : 0;

            // 移动位置变化
            document.onmousemove = function (e) {
                // 拖动的位置距离 支持正负值
                var dragWidth = Number(positionValue) + e.clientX - disX;
                var wrapWidth = _this4.inputWidth - 42;

                // 可拖动的区域宽度 185 为视图的可视宽度
                var dragAreaWidth = _this4.tagItemLength > wrapWidth ? wrapWidth - _this4.tagItemLength : 0;

                // 判断拖拽状态
                if (dragWidth) _this4.dragStatus = true;

                // 调整后拖动的位置距离
                dragWidth = dragWidth > 0 ? 0 : dragWidth < dragAreaWidth ? dragAreaWidth : dragWidth;

                // 更新 transfrom 的值
                _this4.$refs.tagContent.style.transform = 'translateX(' + dragWidth + 'px)';
            };

            // 鼠标上移，移除监听
            document.onmouseup = function (e) {
                document.onmousemove = null;
                document.onmouseup = null;
            };
        }
    },

    created: function created() {
        var _this5 = this;

        this.cachedPlaceHolder = this.currentPlaceholder = this.placeholder;
        if (this.multiple && !Array.isArray(this.value)) {
            this.$emit('input', []);
        }
        if (!this.multiple && Array.isArray(this.value)) {
            this.$emit('input', '');
        }

        this.debouncedOnInputChange = debounce_default()(this.debounce, function () {
            _this5.onInputChange();
        });

        this.debouncedQueryChange = debounce_default()(this.debounce, function (e) {
            _this5.handleQueryChange(e.target.value);
        });

        this.$on('handleOptionClick', this.handleOptionSelect);
        this.$on('setSelected', this.setSelected);
    },
    mounted: function mounted() {
        var _this6 = this;

        if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
            this.currentPlaceholder = '';
        }
        resize_event_addResizeListener(this.$el, this.handleResize);

        var reference = this.$refs.reference;
        if (reference && reference.$el) {
            var sizeMap = {
                medium: 36,
                small: 32,
                mini: 28
            };
            var input = reference.$el.querySelector('input');

            // add author: tangdm descript: 增加分辨率识别
            var clientBodyWidth = document.body.clientWidth;
            var autoFixedHeight = clientBodyWidth < 1366 ? 24 : clientBodyWidth < 1681 ? 28 : 32;

            // update author: tangdm [code] this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];
            this.initialInputHeight = sizeMap[this.selectSize] || autoFixedHeight;
        }
        if (this.remote && this.multiple) {
            this.resetInputHeight();
        }
        this.$nextTick(function () {
            if (reference && reference.$el) {
                // update author: tangdm [code] this.inputWidth = reference.$el.getBoundingClientRect().width;
                _this6.inputWidth = Math.max(reference.$el.getBoundingClientRect().width, reference.$el.clientWidth);
            }
        });
        this.setSelected();
    }
});
// CONCATENATED MODULE: ./packages/select/src/select.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_selectvue_type_script_lang_js_ = (selectvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/select/src/select.vue





/* normalize component */

var select_component = normalizeComponent(
  src_selectvue_type_script_lang_js_,
  selectvue_type_template_id_0e4aade6_render,
  selectvue_type_template_id_0e4aade6_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var select_api; }
select_component.options.__file = "packages/select/src/select.vue"
/* harmony default export */ var src_select = (select_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/select/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var select_src_mainvue_type_script_lang_js_ = ({
    name: 'DgSelect',

    mixins: [dg_mixins_itemsWithDisabled],

    components: {
        ElSelect: src_select,
        ElOptionGroup: external_element_ui_["OptionGroup"],
        ElOption: external_element_ui_["Option"]
    },

    props: {
        // 默认选中值
        value: {
            required: true
        },
        // 是否分组
        group: {
            type: Boolean,
            default: false
        },
        // 分组字段名称
        groupName: {
            type: String,
            default: 'group'
        },
        // 多选
        multiple: {
            type: Boolean,
            default: false
        }
    },

    computed: {
        hasSlots: function hasSlots() {
            return this.$slots && this.$slots.default && this.$slots.default.length > 0;
        },

        model: {
            get: function get() {
                // 数据转换 mulitiple ? <Array> : <String>
                var value = this.value,
                    seq = this.seq,
                    multiple = this.multiple;

                return multiple ? str2arr(value, seq) : data2type(value, 'String', seq);
            },
            set: function set(val) {
                var outputFormat = this.outputFormat,
                    seq = this.seq;
                // this.$emit('input', data2type(val, outputFormat, seq));
            }
        },

        // 组装分组数据项
        // 例子：[{value：'1', label:'11', group:'A'}, {value：'2', label:'22', group:'A'}]
        //       => { label:'A', options：[{value:'1', label:'11'}, {value: '2', lable: '22'}]}
        groupItems: function groupItems() {
            var groupName = this.groupName;

            var groupObject = {},
                groupArray = [];
            this.itemsWithDisabled.forEach(function (item) {
                var groupVal = item[groupName];
                if (!groupObject[groupVal]) {
                    groupObject[groupVal] = { label: groupVal, options: [] };
                }
                groupObject[groupVal].options.push(item);
            });
            // 将对象转数组
            for (var key in groupObject) {
                groupArray.push(groupObject[key]);
            }
            return groupArray;
        }
    }
});
// CONCATENATED MODULE: ./packages/select/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_select_src_mainvue_type_script_lang_js_ = (select_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/select/src/main.vue





/* normalize component */

var select_src_main_component = normalizeComponent(
  packages_select_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_6a5ec4a3_render,
  mainvue_type_template_id_6a5ec4a3_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var select_src_main_api; }
select_src_main_component.options.__file = "packages/select/src/main.vue"
/* harmony default export */ var select_src_main = (select_src_main_component.exports);
// CONCATENATED MODULE: ./packages/select/index.js


/* istanbul ignore next */
select_src_main.install = function (Vue) {
    Vue.component(select_src_main.name, select_src_main);
};

/* harmony default export */ var packages_select = (select_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/main.vue?vue&type=template&id=5c654dd8&
var mainvue_type_template_id_5c654dd8_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-transfer" },
    [
      _vm.type === "tree"
        ? [
            _c(
              "transfer-tree",
              _vm._g(
                _vm._b(
                  { attrs: { value: _vm.value, data: _vm.dataSource } },
                  "transfer-tree",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.$slots["left-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "left-footer" },
                        slot: "left-footer"
                      },
                      [_vm._t("left-footer")],
                      2
                    )
                  : _vm._e(),
                _vm.$slots["right-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "right-footer" },
                        slot: "right-footer"
                      },
                      [_vm._t("right-footer")],
                      2
                    )
                  : _vm._e()
              ]
            )
          ]
        : _vm.type === "table"
        ? [
            _c(
              "transfer-table",
              _vm._g(
                _vm._b(
                  { attrs: { value: _vm.value, data: _vm.dataSource } },
                  "transfer-table",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.$slots["left-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "left-footer" },
                        slot: "left-footer"
                      },
                      [_vm._t("left-footer")],
                      2
                    )
                  : _vm._e(),
                _vm.$slots["right-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "right-footer" },
                        slot: "right-footer"
                      },
                      [_vm._t("right-footer")],
                      2
                    )
                  : _vm._e()
              ]
            )
          ]
        : [
            _c(
              "div",
              [
                _c(
                  "el-transfer",
                  _vm._g(
                    _vm._b(
                      {
                        attrs: {
                          value: _vm.value,
                          props: _vm.defaultProps,
                          data: _vm.dataSource
                        },
                        scopedSlots: _vm._u(
                          [
                            {
                              key: "default",
                              fn: function(ref) {
                                var option = ref.option
                                return _c(
                                  "span",
                                  {},
                                  [
                                    _vm._t(
                                      "content-area",
                                      [
                                        _vm._v(
                                          _vm._s(
                                            option[_vm.defaultProps.label]
                                          ) + "\n          "
                                        )
                                      ],
                                      { option: option }
                                    )
                                  ],
                                  2
                                )
                              }
                            }
                          ],
                          null,
                          true
                        )
                      },
                      "el-transfer",
                      _vm.$attrs,
                      false
                    ),
                    _vm.$listeners
                  ),
                  [
                    _vm.$slots["left-footer"]
                      ? _c(
                          "div",
                          {
                            staticClass: "transfer-footer",
                            attrs: { slot: "left-footer" },
                            slot: "left-footer"
                          },
                          [_vm._t("left-footer")],
                          2
                        )
                      : _vm._e(),
                    _vm.$slots["right-footer"]
                      ? _c(
                          "div",
                          {
                            staticClass: "transfer-footer",
                            attrs: { slot: "right-footer" },
                            slot: "right-footer"
                          },
                          [_vm._t("right-footer")],
                          2
                        )
                      : _vm._e()
                  ]
                )
              ],
              1
            )
          ]
    ],
    2
  )
}
var mainvue_type_template_id_5c654dd8_staticRenderFns = []
mainvue_type_template_id_5c654dd8_render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/main.vue?vue&type=template&id=5c654dd8&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-tree.vue?vue&type=template&id=2d98c0f5&
var transfer_treevue_type_template_id_2d98c0f5_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-tree-transfer" }, [
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              ref: "checkBoxLeft",
              attrs: { indeterminate: _vm.sourceIsIndeterminate },
              on: { change: _vm.sourceAllBoxCheck },
              model: {
                value: _vm.sourceCheckAll,
                callback: function($$v) {
                  _vm.sourceCheckAll = $$v
                },
                expression: "sourceCheckAll"
              }
            },
            [
              _vm.titles[0] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[0]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-left")
        ],
        2
      ),
      _c("div", { staticClass: "el-transfer-panel__body" }, [
        _c(
          "div",
          {
            staticClass: "el-transfer-panel__list",
            staticStyle: { padding: "0" }
          },
          [
            _vm.filterable
              ? _c(
                  "el-input",
                  {
                    staticClass: "el-transfer-panel__filter",
                    attrs: { placeholder: _vm.placeholder, size: "small" },
                    model: {
                      value: _vm.filterFrom,
                      callback: function($$v) {
                        _vm.filterFrom = $$v
                      },
                      expression: "filterFrom"
                    }
                  },
                  [
                    _c("i", {
                      class: ["el-input__icon", "el-icon-search"],
                      attrs: { slot: "prefix" },
                      slot: "prefix"
                    })
                  ]
                )
              : _vm._e(),
            _c("el-tree", {
              ref: "from-tree",
              class: [_vm.filterable ? "is-filterable" : ""],
              attrs: {
                data: _vm.sourceData,
                "show-checkbox": "",
                "node-key": _vm.valueName,
                "default-expanded-keys": _vm.sourceExpandedKeys,
                props: _vm.treeProps,
                "filter-node-method": _vm.filterNodeFrom,
                "default-expand-all": _vm.openAll,
                "render-content": _vm.renderContent,
                "default-checked-keys": _vm.sourceCheckKeys
              },
              on: { check: _vm.sourceTreeChecked }
            })
          ],
          1
        )
      ]),
      _vm.$slots["left-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("left-footer")],
            2
          )
        : _vm._e()
    ]),
    _c(
      "div",
      { staticClass: "el-transfer__buttons" },
      [
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.targetDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToSource($event)
              }
            }
          },
          [
            _c("i", { staticClass: "el-icon-arrow-left" }),
            _vm.buttonTexts[0] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))])
              : _vm._e()
          ]
        ),
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.sourceDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToTarget($event)
              }
            }
          },
          [
            _vm.buttonTexts[1] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))])
              : _vm._e(),
            _c("i", { staticClass: "el-icon-arrow-right" })
          ]
        )
      ],
      1
    ),
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              ref: "checkBoxRight",
              attrs: { indeterminate: _vm.targetIsIndeterminate },
              on: { change: _vm.targetAllBoxCheck },
              model: {
                value: _vm.targetCheckAll,
                callback: function($$v) {
                  _vm.targetCheckAll = $$v
                },
                expression: "targetCheckAll"
              }
            },
            [
              _vm.titles[1] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[1]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-right")
        ],
        2
      ),
      _c("div", { staticClass: "el-transfer-panel__body" }, [
        _c(
          "div",
          {
            staticClass: "el-transfer-panel__list",
            staticStyle: { padding: "0" }
          },
          [
            _vm.filterable && _vm.accept !== "list"
              ? _c(
                  "el-input",
                  {
                    staticClass: "el-transfer-panel__filter",
                    attrs: { placeholder: _vm.placeholder, size: "small" },
                    model: {
                      value: _vm.filterTo,
                      callback: function($$v) {
                        _vm.filterTo = $$v
                      },
                      expression: "filterTo"
                    }
                  },
                  [
                    _c("i", {
                      class: ["el-input__icon", "el-icon-search"],
                      attrs: { slot: "prefix" },
                      slot: "prefix"
                    })
                  ]
                )
              : _vm._e(),
            _vm.accept === "tree"
              ? [
                  _c("el-tree", {
                    ref: "to-tree",
                    class: [_vm.filterable ? "is-filterable" : ""],
                    attrs: {
                      data: _vm.targetData,
                      "show-checkbox": "",
                      "node-key": _vm.valueName,
                      "default-expanded-keys": _vm.targetExpandedKeys,
                      props: _vm.treeProps,
                      "filter-node-method": _vm.filterNodeTo,
                      "default-expand-all": _vm.openAll,
                      "render-content": _vm.renderContent,
                      "default-checked-keys": _vm.targetCheckKeys
                    },
                    on: { check: _vm.toTreeChecked }
                  })
                ]
              : _vm._e(),
            _vm.accept === "list"
              ? [
                  _c(
                    "el-checkbox-group",
                    {
                      staticClass: "el-transfer-panel__list",
                      model: {
                        value: _vm.acceptCheckedKeys,
                        callback: function($$v) {
                          _vm.acceptCheckedKeys = $$v
                        },
                        expression: "acceptCheckedKeys"
                      }
                    },
                    _vm._l(_vm.acceptData, function(item, index) {
                      return _c(
                        "el-checkbox",
                        {
                          key: index,
                          staticClass: "el-transfer-panel__item",
                          attrs: {
                            label: item.id,
                            disabled: item[_vm.disabledName],
                            title: item[_vm.labelName]
                          }
                        },
                        [_vm._v(_vm._s(item[_vm.labelName]))]
                      )
                    }),
                    1
                  )
                ]
              : _vm._e()
          ],
          2
        )
      ]),
      _vm.$slots["right-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("right-footer")],
            2
          )
        : _vm._e()
    ])
  ])
}
var transfer_treevue_type_template_id_2d98c0f5_staticRenderFns = []
transfer_treevue_type_template_id_2d98c0f5_render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue?vue&type=template&id=2d98c0f5&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-tree.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var transfer_treevue_type_script_lang_js_ = ({
    name: 'TransferTree',
    props: {
        leftDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        rightDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: []
        },
        // 值的字段名称
        valueName: {
            type: String,
            default: 'value'
        },
        // 显示的字段名称
        labelName: {
            type: String,
            default: 'label'
        },
        // 禁用值的名称
        disabledName: {
            type: String,
            default: 'disabled'
        },
        // 子节点数组的名称
        childrenName: {
            type: String,
            default: 'children'
        },
        // 父级节点名称
        pidName: {
            type: String,
            default: 'pid'
        },
        // 标题配置
        titles: {
            type: Array,
            default: function _default() {
                return ['源列表', '目标列表'];
            }
        },
        // 按钮文本配置
        buttonTexts: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 穿梭后是否展开节点
        transferOpenNode: {
            type: Boolean,
            default: false
        },
        // 筛选 placeholder
        placeholder: {
            type: String,
            default: '输入关键字进行过滤'
        },
        // 是否展开所有节点
        openAll: {
            type: Boolean,
            default: true
        },
        // 自定义树节点
        renderContent: Function,
        // 是否启用筛选
        filterable: {
            type: Boolean,
            default: false
        },
        // 目标数据的展现形式，仅在 `type` 参数值为 `tree` 时生效，可选项为 `list`
        accept: {
            type: String,
            default: 'tree'
        }
    },
    data: function data() {
        return {
            // 内部数据配置项
            dataSource: this.data,
            // props 的字段别名
            treeProps: {
                label: this.labelName,
                children: this.childrenName,
                disabled: this.disabledName
            },
            // 是否半选源列表数据状态
            sourceIsIndeterminate: false,
            // 是否半选源列表数据状态
            sourceCheckAll: false,
            // 是否半选目标列表数据状态
            targetIsIndeterminate: false,
            // 是否半选目标列表数据状态
            targetCheckAll: false,
            // 源数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            sourceCheckKeys: [],
            // 目标数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            targetCheckKeys: [],
            // 源数据展开节点
            sourceExpandedKeys: [],
            // 目标数据展开节点
            targetExpandedKeys: [],
            // 添加按钮是否禁用
            sourceDisabled: true,
            // 移除按钮是否禁用
            targetDisabled: true,
            // 源数据筛选
            filterFrom: '',
            // 目标数据筛选
            filterTo: '',
            // 目标列表数据勾选
            acceptCheckedKeys: []
        };
    },

    computed: {
        /**
         * 源列表数据监听
         *
         * @return {Array}
         */
        sourceData: function sourceData() {
            var _this = this;

            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this.pidName] = 0;
            });

            // 构造除去选中值 `this.selectedKeyValue` 的源数据
            return this.constructTreeBox(this.selectedKeyValue, _treeData);
        },

        /**
         * 目标列表数据监听
         *
         */
        targetData: function targetData() {
            var _this2 = this;

            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this2.pidName] = 0;
            });

            // 构造除去反向选中值 `this.unselectedKeyValue` 的目标树数据
            return this.constructTreeBox(this.unselectedKeyValue, _treeData);
        },

        /**
         * 接收列表数据
         *
         * @return {Array}
         */
        acceptData: function acceptData() {
            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 目标列表数据
            var _selectedList = [];

            // 获取选中值列表选项数据
            this.constructListBox(this.value, _treeData, _selectedList);

            return _selectedList;
        },

        /**
         * 过滤掉禁用的数据
         * 
         * @return { Array }
         */
        filterAcceptData: function filterAcceptData() {
            var _this3 = this;

            return this.acceptData.filter(function (item) {
                return !item[_this3.disabledName];
            });
        },

        /**
         * 查找所有选中的 key 值
         *
         * @return {Array}
         */
        selectedKeyValue: function selectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.cloneDeep(this.value);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },

        /**
         * 查找所有未选中的 key 值
         *
         * @return {Array}
         */
        unselectedKeyValue: function unselectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.difference(this.allKeyValue(true), this.selectedKeyValue);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },

        /**
         * 检测按钮文本值
         *
         */
        hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
        }
    },

    watch: {
        // 监听数据
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        },
        // 目标列表数据 状态检测
        acceptCheckedKeys: function acceptCheckedKeys(val) {
            var _this4 = this;

            // 检测是否存在可选值
            var existValue = [];
            val.forEach(function (p) {
                var filterValue = _this4.filterAcceptData.filter(function (item) {
                    return item[_this4.valueName] === p;
                });
                if (filterValue.length > 0) {
                    existValue.push(p);
                }
            });

            if (existValue.length > 0) {
                // 穿梭按钮是否禁用
                this.targetDisabled = false;
                // 总半选是否开启
                this.targetIsIndeterminate = true;

                // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
                var allCheck = existValue;
                if (allCheck.length == this.acceptData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
            }
        },

        // 源数据 状态监测
        sourceCheckKeys: function sourceCheckKeys(val) {
            // val -> obj, data -> keyArray
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.sourceDisabled = false;
                // 总半选是否开启
                this.sourceIsIndeterminate = true;

                // 默认数据个数
                var data = this.allKeyValue(true, this.sourceData);

                if (val.length == data.length) {
                    // 关闭半选 开启全选
                    this.sourceIsIndeterminate = false;
                    this.sourceCheckAll = true;
                } else {
                    this.sourceIsIndeterminate = true;
                    this.sourceCheckAll = false;
                }
            } else {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
            }
        },

        // 目标树数据 状态监测
        targetCheckKeys: function targetCheckKeys(val) {
            var _this5 = this;

            // 穿梭按钮是否禁用
            this.targetDisabled = false;
            // 总半选是否开启
            this.targetIsIndeterminate = false;

            // 列表类型
            if (this.accept === 'list') {

                // 检测监听到真实的值
                var existValue = [];
                val.forEach(function (p) {
                    var filterValue = _this5.filterAcceptData.filter(function (item) {
                        return item[_this5.valueName] === p;
                    });
                    if (filterValue.length > 0) {
                        existValue.push(p);
                    }
                });

                // 不选中时， 全部关闭
                if (existValue.length <= 0) {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                    return;
                }

                if (existValue.length === this.acceptData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                // 不选中时， 全部关闭
                if (val.length > 0) {
                    var data = this.allKeyValue(true, this.targetData);

                    if (val.length === data.length) {
                        // 关闭半选 开启全选
                        this.targetIsIndeterminate = false;
                        this.targetCheckAll = true;
                    } else {
                        this.targetIsIndeterminate = true;
                        this.targetCheckAll = false;
                    }
                } else {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                }
            }
        },

        // 左侧 数据筛选
        filterFrom: function filterFrom(val) {
            this.$refs['from-tree'].filter(val);
        },

        // 右侧 数据筛选（目前未对目标列表数据做筛选）
        filterTo: function filterTo(val) {
            this.$refs['to-tree'].filter(val);
        }
    },

    components: {
        ElTransfer: external_element_ui_["Transfer"]
    },

    methods: {
        /**
         * 加入左侧穿梭框
         *
         */
        addToSource: function addToSource() {
            var _this6 = this;

            // 初始化
            var keys = [];

            // 检测接入数据的方式
            if (this.accept === 'list') {
                keys = this.acceptCheckedKeys;
            } else {
                keys = this.$refs['to-tree'].getCheckedKeys(true);
            }
            var _newValue = external_lodash_default.a.difference(this.value, keys);

            // 触发输入框的改变
            this.$emit('input', _newValue);
            // 触发 change 事件的改变
            this.$emit('change', _newValue, 'left', keys);

            // 处理完毕按钮恢复禁用状态
            this.targetCheckKeys = [];
            this.$refs.checkBoxRight.$el.control.checked = false;

            // 目标数据节点展开
            if (this.transferOpenNode) {
                this.sourceExpandedKeys = keys;
            }

            // 重置过滤值
            if (this.filterFrom) {
                var defaults = this.filterFrom;
                this.filterFrom = "";

                // 延迟执行
                this.$nextTick(function () {
                    _this6.filterFrom = defaults;
                });
            }

            // 清空检索值
            this.filterTo = "";
        },

        /**
         * 加入右侧穿梭框
         *
         */
        addToTarget: function addToTarget() {
            var _this7 = this;

            var keys = this.$refs['from-tree'].getCheckedKeys(true);

            var _newValue = external_lodash_default.a.union(this.value, keys);

            // 触发输入框的改变
            this.$emit('input', _newValue);

            // 触发 change 事件的改变
            this.$emit('change', _newValue, 'right', keys);

            // 处理完毕按钮恢复禁用状态
            this.sourceCheckKeys = [];
            this.$refs.checkBoxLeft.$el.control.checked = false;

            // 清空选中数据
            if (this.accept === 'list') {
                this.acceptCheckedKeys = [];
            }

            // 目标数据节点展开
            if (this.transferOpenNode) {
                this.targetExpandedKeys = keys;
            }

            // 重置过滤值
            if (this.filterTo) {
                var defaults = this.filterTo;
                this.filterTo = "";

                // 延迟执行
                this.$nextTick(function () {
                    _this7.filterTo = defaults;
                });
            }

            // 清空检索值
            this.filterFrom = "";
        },

        /**
         * 源列表数据全选改变状态
         *
         * @param val
         */
        sourceAllBoxCheck: function sourceAllBoxCheck(val) {
            if (this.sourceData.length == 0) {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
                return;
            }

            if (val) {
                var node = this.$refs['from-tree'].store.root;
                var keys = this.getVisibleNodeKeys(node);

                this.sourceCheckKeys = keys;
                this.$refs['from-tree'].setCheckedKeys(keys);
            } else {
                this.$refs['from-tree'].setCheckedNodes([]);
                this.sourceCheckKeys = [];
            }
        },

        /**
         * 目标列表数据全选改变状态
         *
         * @param val
         */
        targetAllBoxCheck: function targetAllBoxCheck(val) {
            var _this8 = this;

            // 列表类型接收收据
            if (this.accept === 'list') {

                // 检测是否存在可选列表值
                if (this.filterAcceptData.length == 0) return;

                if (val) {
                    // 获取可选列表值的 Key 值数据
                    var selectedValue = this.filterAcceptData.map(function (item) {
                        return item[_this8.valueName];
                    });

                    this.targetCheckKeys = selectedValue;
                    this.acceptCheckedKeys = selectedValue;
                } else {
                    this.targetCheckKeys = [];
                    this.acceptCheckedKeys = [];
                }
            } else {
                if (this.targetData.length == 0) {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                    return;
                }

                if (val) {
                    var node = this.$refs['to-tree'].store.root;
                    var keys = this.getVisibleNodeKeys(node);

                    this.targetCheckKeys = keys;
                    this.$refs['to-tree'].setCheckedKeys(keys);
                } else {
                    this.$refs['to-tree'].setCheckedNodes([]);
                    this.targetCheckKeys = [];
                }
            }
        },

        /**
         * 源列表数据选中事件 - 是否禁用穿梭按钮
         *
         * @param nodeObj
         * @param treeObj
         */
        sourceTreeChecked: function sourceTreeChecked(nodeObj, treeObj) {
            var _this9 = this;

            // 查找父节点
            var pids = treeObj.checkedNodes.map(function (p) {
                return p[_this9.pidName];
            });

            // 过滤后的元素
            var filterKeys = external_lodash_default.a.difference(treeObj.checkedKeys, pids);
            this.sourceCheckKeys = filterKeys;

            this.$emit('left-check-change', nodeObj, treeObj);
        },

        // 目标树选中事件 - 是否禁用穿梭按钮
        toTreeChecked: function toTreeChecked(nodeObj, treeObj) {
            var _this10 = this;

            // 查找父节点
            var pids = treeObj.checkedNodes.map(function (p) {
                return p[_this10.pidName];
            });

            // 过滤后的元素
            var filterKeys = external_lodash_default.a.difference(treeObj.checkedKeys, pids);
            this.targetCheckKeys = filterKeys;

            this.$emit('right-check-change', nodeObj, treeObj);
        },

        /**
         * 源列表数据 筛选
         *
         */
        filterNodeFrom: function filterNodeFrom(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-from']) {
                return this.$attrs['filter-node-from'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        /**
         * 目标列表数据 筛选
         *
         * @param value
         * @param data
         */
        filterNodeTo: function filterNodeTo(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-to']) {
                return this.$attrs['filter-node-to'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        /**
         * 递归函数 获取目标树结构数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructTreeBox: function constructTreeBox(value, data) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return data;

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructTreeBox(value, base[self.childrenName]);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data = _data.filter(function (base) {
                    return base[self.valueName] !== item;
                });
            });

            return _data;
        },

        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false
         * @param val [Array] data
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = data ? external_lodash_default.a.cloneDeep(data) : external_lodash_default.a.cloneDeep(this.dataSource);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.childrenName]);
                    }

                    return base;
                });

                data.forEach(function (item) {
                    if (val) {
                        if (item[self.childrenName] && item[self.childrenName].length === 0) {
                            _treeAllKey.push(item[self.valueName]);
                        }
                    } else {
                        _treeAllKey.push(item[self.valueName]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },

        /**
         * 构建目标列表数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructListBox: function constructListBox(value, data, selectedList) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return [];

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructListBox(value, base[self.childrenName], selectedList);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data.forEach(function (base) {
                    if (base[self.valueName] === item) {
                        selectedList.push(base);
                    }
                });
            });

            return _data;
        },

        /**
         * 获取可视化的子节点的值
         * 
         * @node node
         */
        getVisibleNodeKeys: function getVisibleNodeKeys(node) {
            var _this11 = this;

            // 节点 keys 数组
            var keys = [];

            // 节点的数据
            if (node.childNodes.length > 0) {
                node.childNodes.forEach(function (node) {
                    var childKeys = _this11.getVisibleNodeKeys(node);
                    keys = external_lodash_default.a.concat(childKeys, keys);
                });
            }

            if (node.visible && node.isLeaf && !node.disabled) {
                keys.push(node.key);
            }

            return keys;
        }
    },

    created: function created() {
        this.sourceCheckKeys = this.leftDefaultChecked;
        this.targetCheckKeys = this.rightDefaultChecked;
        if (this.accept === 'list') {
            this.acceptCheckedKeys = this.rightDefaultChecked;
        }
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_transfer_treevue_type_script_lang_js_ = (transfer_treevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue





/* normalize component */

var transfer_tree_component = normalizeComponent(
  src_transfer_treevue_type_script_lang_js_,
  transfer_treevue_type_template_id_2d98c0f5_render,
  transfer_treevue_type_template_id_2d98c0f5_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var transfer_tree_api; }
transfer_tree_component.options.__file = "packages/transfer/src/transfer-tree.vue"
/* harmony default export */ var transfer_tree = (transfer_tree_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-table.vue?vue&type=template&id=0fb0f587&scoped=true&
var transfer_tablevue_type_template_id_0fb0f587_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-table-transfer" }, [
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              attrs: { indeterminate: _vm.sourceIsIndeterminate },
              on: { change: _vm.sourceAllBoxCheck },
              model: {
                value: _vm.sourceCheckAll,
                callback: function($$v) {
                  _vm.sourceCheckAll = $$v
                },
                expression: "sourceCheckAll"
              }
            },
            [
              _vm.titles[0] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[0]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-left")
        ],
        2
      ),
      _c(
        "div",
        { staticClass: "el-transfer-panel__body" },
        [
          _vm.filterable
            ? _c(
                "el-input",
                {
                  staticClass: "el-transfer-panel__filter",
                  class: { "el-transfer-panel__search": _vm.filterable },
                  attrs: { placeholder: _vm.filterPlaceholder, size: "small" },
                  model: {
                    value: _vm.filterFrom,
                    callback: function($$v) {
                      _vm.filterFrom = $$v
                    },
                    expression: "filterFrom"
                  }
                },
                [
                  _c("i", {
                    class: ["el-input__icon", "el-icon-search"],
                    attrs: { slot: "prefix" },
                    slot: "prefix"
                  })
                ]
              )
            : _vm._e(),
          _c(
            "el-table",
            {
              ref: "multipleSourceTable",
              staticStyle: { width: "100%" },
              attrs: {
                border: "",
                data: _vm.sourceData,
                "header-cell-style": _vm.headerCellStyle
              },
              on: { "selection-change": _vm.handleSelectionChangeSource }
            },
            [
              _c("el-table-column", { attrs: { type: "selection" } }),
              _vm._l(_vm.columnLabelNameList, function(item, index) {
                return _c("el-table-column", {
                  key: "sourceId" + item.val + index,
                  attrs: {
                    prop: item.val,
                    label: item.label,
                    "show-overflow-tooltip": ""
                  }
                })
              })
            ],
            2
          )
        ],
        1
      ),
      _vm.$slots["left-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("left-footer")],
            2
          )
        : _vm._e()
    ]),
    _c(
      "div",
      { staticClass: "el-transfer__buttons" },
      [
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.targetDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToSource($event)
              }
            }
          },
          [
            _c("i", { staticClass: "el-icon-arrow-left" }),
            _vm.buttonTexts[0] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))])
              : _vm._e()
          ]
        ),
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.sourceDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToTarget($event)
              }
            }
          },
          [
            _vm.buttonTexts[1] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))])
              : _vm._e(),
            _c("i", { staticClass: "el-icon-arrow-right" })
          ]
        )
      ],
      1
    ),
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              attrs: { indeterminate: _vm.targetIsIndeterminate },
              on: { change: _vm.targetAllBoxCheck },
              model: {
                value: _vm.targetCheckAll,
                callback: function($$v) {
                  _vm.targetCheckAll = $$v
                },
                expression: "targetCheckAll"
              }
            },
            [
              _vm.titles[1] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[1]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-right")
        ],
        2
      ),
      _c(
        "div",
        { staticClass: "el-transfer-panel__body" },
        [
          _vm.filterable
            ? _c(
                "el-input",
                {
                  staticClass: "el-transfer-panel__filter",
                  class: { "el-transfer-panel__search": _vm.filterable },
                  attrs: { placeholder: _vm.filterPlaceholder, size: "small" },
                  model: {
                    value: _vm.filterTo,
                    callback: function($$v) {
                      _vm.filterTo = $$v
                    },
                    expression: "filterTo"
                  }
                },
                [
                  _c("i", {
                    class: ["el-input__icon", "el-icon-search"],
                    attrs: { slot: "prefix" },
                    slot: "prefix"
                  })
                ]
              )
            : _vm._e(),
          _c(
            "el-table",
            {
              ref: "multipleTargetTable",
              staticStyle: { width: "100%" },
              attrs: {
                border: "",
                data: _vm.targetData,
                "header-cell-style": _vm.headerCellStyle
              },
              on: { "selection-change": _vm.handleSelectionChangeTarget }
            },
            [
              _c("el-table-column", { attrs: { type: "selection" } }),
              _c("el-table-column", {
                key: "targetId" + _vm.labelName + _vm.columnName,
                attrs: {
                  prop: _vm.labelName,
                  label: _vm.columnName,
                  "show-overflow-tooltip": ""
                }
              }),
              _c("template", { slot: "empty" }, [
                _c("div", { staticStyle: { height: "100px" } }, [
                  _c("p", { staticClass: "el-transfer-panel__empty" }, [
                    _vm._v("无数据")
                  ])
                ])
              ])
            ],
            2
          )
        ],
        1
      ),
      _vm.$slots["right-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("right-footer")],
            2
          )
        : _vm._e()
    ])
  ])
}
var transfer_tablevue_type_template_id_0fb0f587_scoped_true_staticRenderFns = []
transfer_tablevue_type_template_id_0fb0f587_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue?vue&type=template&id=0fb0f587&scoped=true&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-table.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var transfer_tablevue_type_script_lang_js_ = ({
    name: "TransferTable",
    data: function data() {
        return {
            // 源数据选中key数组
            sourceCheckKeys: [],
            // 目标数据选中key数组
            targetCheckKeys: [],
            // 是否半选源列表数据状态
            sourceIsIndeterminate: false,
            // 是否半选源列表数据状态
            sourceCheckAll: false,
            // 添加按钮是否禁用
            sourceDisabled: true,
            // 移除按钮是否禁用
            targetDisabled: true,
            // 是否半选目标列表数据状态
            targetIsIndeterminate: false,
            // 是否半选目标列表数据状态
            targetCheckAll: false,
            // 右侧列名字段
            columnName: String,
            // 目标列表
            targetData: [],
            // 源列表
            sourceData: [],
            // 源数据筛选
            filterFrom: '',
            // 目标数据筛选
            filterTo: '',
            // 实际源数据
            realSourceData: [],
            // 实际目标数据
            realTargetData: []
        };
    },

    props: {
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 是否启用筛选
        filterable: {
            type: Boolean,
            default: false
        },
        // 筛选 filter-placeholder
        filterPlaceholder: {
            type: String,
            default: '输入关键字进行过滤'
        },
        // 标题配置
        titles: {
            type: Array,
            default: function _default() {
                return ['列表一', '列表二'];
            }
        },
        // 表头样式设置
        headerCellStyle: {
            type: Object,
            default: function _default() {}
        },
        // 按钮文本配置
        buttonTexts: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 右侧显示列名字段
        labelName: {
            type: String,
            default: 'label'
        },
        // 所有列名和参数对应字段
        columnLabelNameList: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        pageSize: {
            type: Number,
            default: 10
        }
    },
    methods: {
        /**
         * 源列表数据全选改变状态
         *
         * @param val
         */
        sourceAllBoxCheck: function sourceAllBoxCheck(val) {
            if (this.sourceData.length == 0) {
                return;
            }
            if (val) {
                this.sourceCheckKeys = this.sourceData;
                this.$refs.multipleSourceTable.toggleAllSelection();
            } else {
                this.sourceCheckKeys = [];
                this.$refs.multipleSourceTable.clearSelection();
            }
        },

        /**
         * 目标列表数据全选改变状态
         *
         * @param val
         */
        targetAllBoxCheck: function targetAllBoxCheck(val) {
            if (this.targetData.length == 0) {
                return;
            }
            if (val) {
                this.targetCheckKeys = this.targetData;
                this.$refs.multipleTargetTable.toggleAllSelection();
            } else {
                this.targetCheckKeys = [];
                this.$refs.multipleTargetTable.clearSelection();
            }
        },

        /**
         * 加入左侧穿梭框
         *
         */
        addToSource: function addToSource() {
            // 初始化
            var keys = this.targetCheckKeys;
            var _newValue = external_lodash_default.a.union(this.sourceData, keys);
            this.sourceData = _newValue;
            this.realSourceData = _newValue;

            var _newTarget = external_lodash_default.a.difference(this.targetData, keys);
            this.targetData = _newTarget;
            this.realTargetData = _newTarget;
            // this.toggleSelection(this.$refs.multipleSourceTable, this.sourceCheckKeys)

            // 处理完毕按钮恢复禁用状态
            this.targetCheckKeys = [];
        },

        /**
         * 加入右侧穿梭框
         *
         */
        addToTarget: function addToTarget() {
            var keys = this.sourceCheckKeys;

            var _newValue = external_lodash_default.a.union(this.targetData, keys);
            this.targetData = _newValue;
            this.realTargetData = _newValue;

            var _newSource = external_lodash_default.a.difference(this.sourceData, keys);
            this.sourceData = _newSource;
            this.realSourceData = _newSource;

            // 处理完毕按钮恢复禁用状态
            this.sourceCheckKeys = [];
        },
        handleSelectionChangeSource: function handleSelectionChangeSource(val) {
            this.sourceCheckKeys = val;
        },
        handleSelectionChangeTarget: function handleSelectionChangeTarget(val) {
            this.targetCheckKeys = val;
        },

        // 获取表格选中行数
        toggleSelection: function toggleSelection(refs, rows) {
            if (rows) {
                rows.forEach(function (row) {
                    refs.setCurrentRow(row);
                });
            } else {
                refs.clearSelection();
            }
        }
    },
    computed: {
        /**
         * 检测按钮文本值
         *
         */
        hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
        }
    },
    watch: {
        // 源数据 状态监测
        sourceCheckKeys: function sourceCheckKeys(val) {
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.sourceDisabled = false;
                // 总半选是否开启
                this.sourceIsIndeterminate = true;

                // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
                var allCheck = val;
                if (allCheck.length == this.sourceData.length) {
                    // 关闭半选 开启全选
                    this.sourceIsIndeterminate = false;
                    this.sourceCheckAll = true;
                } else {
                    this.sourceIsIndeterminate = true;
                    this.sourceCheckAll = false;
                }
            } else {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
            }
        },

        // 目标树数据 状态监测
        targetCheckKeys: function targetCheckKeys(val) {
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.targetDisabled = false;
                // 总半选是否开启
                this.targetIsIndeterminate = true;

                // 总全选是否开启
                var allCheck = val;
                if (allCheck.length == this.targetData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
            }
        },

        // 左侧 数据筛选
        filterFrom: function filterFrom(val) {
            var _this = this;

            if (val.length > 0) {
                this.sourceData = this.sourceData.filter(function (item) {
                    return item[_this.labelName].indexOf(val) > -1;
                });
            } else {
                this.sourceData = this.realSourceData;
            }
        },

        // 右侧 数据筛选
        filterTo: function filterTo(val) {
            var _this2 = this;

            if (val.length > 0) {
                this.targetData = this.targetData.filter(function (item) {
                    return item[_this2.labelName].indexOf(val) > -1;
                });
            } else {
                this.targetData = this.realTargetData;
            }
        }
    },
    created: function created() {
        var _this3 = this;

        this.realSourceData = this.data;
        if (this.data.length > 10) {
            this.sourceData = external_lodash_default.a.slice(this.data, 0, this.pageSize);
        } else {
            this.sourceData = this.data;
        }

        this.columnLabelNameList.forEach(function (item) {
            if (item.val == _this3.labelName) {
                _this3.columnName = item.label;
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_transfer_tablevue_type_script_lang_js_ = (transfer_tablevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue





/* normalize component */

var transfer_table_component = normalizeComponent(
  src_transfer_tablevue_type_script_lang_js_,
  transfer_tablevue_type_template_id_0fb0f587_scoped_true_render,
  transfer_tablevue_type_template_id_0fb0f587_scoped_true_staticRenderFns,
  false,
  null,
  "0fb0f587",
  null
  
)

/* hot reload */
if (false) { var transfer_table_api; }
transfer_table_component.options.__file = "packages/transfer/src/transfer-table.vue"
/* harmony default export */ var transfer_table = (transfer_table_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var transfer_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTransfer',

    components: {
        TransferTable: transfer_table,
        TransferTree: transfer_tree
    },

    props: {
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 支持的类型 可选项为 "tree"
        type: {
            type: String,
            default: ''
        }
    },

    watch: {
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        }
    },

    computed: {
        defaultProps: function defaultProps() {
            var _ref = this.$attrs.props || {},
                key = _ref.key,
                label = _ref.label,
                disabled = _ref.disabled;

            var valueName = this.$attrs['key-name'] || this.$attrs['value-name'] || key || 'key';
            var labelName = this.$attrs['label-name'] || label || 'label';
            var disabledName = this.$attrs['disabled-name'] || disabled || 'disabled';
            return {
                key: valueName,
                label: labelName,
                disabled: disabledName
            };
        }
    },

    data: function data() {
        return {
            dataSource: []
        };
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_transfer_src_mainvue_type_script_lang_js_ = (transfer_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/transfer/src/main.vue





/* normalize component */

var transfer_src_main_component = normalizeComponent(
  packages_transfer_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_5c654dd8_render,
  mainvue_type_template_id_5c654dd8_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var transfer_src_main_api; }
transfer_src_main_component.options.__file = "packages/transfer/src/main.vue"
/* harmony default export */ var transfer_src_main = (transfer_src_main_component.exports);
// CONCATENATED MODULE: ./packages/transfer/index.js


/* istanbul ignore next */
transfer_src_main.install = function (Vue) {
    Vue.component(transfer_src_main.name, transfer_src_main);
};

/* harmony default export */ var transfer = (transfer_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=template&id=01558241&
var mainvue_type_template_id_01558241_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "el-tree dg-tree",
      class: {
        "el-tree--highlight-current": _vm.highlightCurrent,
        "is-dragging": !!_vm.dragState.draggingNode,
        "is-drop-not-allow": !_vm.dragState.allowDrop,
        "is-drop-inner": _vm.dragState.dropType === "inner",
        "dg-tree--icon-class-style": _vm.iconClass
      },
      attrs: { role: "tree" }
    },
    [
      _vm._l(_vm.root.childNodes, function(child) {
        return _c("el-tree-node", {
          key: _vm.getNodeKey(child),
          attrs: {
            node: child,
            props: _vm.defaultProp,
            "node-key": _vm.nodeKey,
            "check-strictly": _vm.checkStrictly,
            "render-after-expand": _vm.renderAfterExpand,
            "show-checkbox": _vm.showCheckbox,
            "radio-type": _vm.radioType,
            "render-content": _vm.renderContent
          },
          on: { "node-expand": _vm.handleNodeExpand }
        })
      }),
      _vm.isEmpty
        ? _c("div", { staticClass: "el-tree__empty-block" }, [
            _c("span", { staticClass: "el-tree__empty-text" }, [
              _vm._v(_vm._s(_vm.emptyText))
            ])
          ])
        : _vm._e(),
      _c("div", {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.dragState.showDropIndicator,
            expression: "dragState.showDropIndicator"
          }
        ],
        ref: "dropIndicator",
        staticClass: "el-tree__drop-indicator"
      })
    ],
    2
  )
}
var mainvue_type_template_id_01558241_staticRenderFns = []
mainvue_type_template_id_01558241_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=template&id=01558241&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&
var tree_nodevue_type_template_id_3ba3ef0e_render = function() {
  var this$1 = this
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.node.visible,
          expression: "node.visible"
        }
      ],
      ref: "node",
      staticClass: "el-tree-node dg-tree-node",
      class: {
        "is-expanded": _vm.expanded,
        "is-current": _vm.tree.store.currentNode === _vm.node,
        "is-hidden": !_vm.node.visible,
        "is-focusable": !_vm.node.disabled,
        "is-checked": !_vm.node.disabled && _vm.node.checked,
        "is-radio": _vm.node.disabled && !_vm.node.checked && !_vm.checkStrictly
      },
      attrs: {
        role: "treeitem",
        tabindex: "-1",
        "aria-expanded": _vm.expanded,
        "aria-disabled": _vm.node.disabled,
        "aria-checked": _vm.node.checked,
        draggable: _vm.tree.draggable
      },
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.handleClick($event)
        },
        contextmenu: function($event) {
          return this$1.handleContextMenu($event)
        },
        dragstart: function($event) {
          $event.stopPropagation()
          return _vm.handleDragStart($event)
        },
        dragover: function($event) {
          $event.stopPropagation()
          return _vm.handleDragOver($event)
        },
        dragend: function($event) {
          $event.stopPropagation()
          return _vm.handleDragEnd($event)
        },
        drop: function($event) {
          $event.stopPropagation()
          return _vm.handleDrop($event)
        }
      }
    },
    [
      _c(
        "div",
        {
          staticClass: "el-tree-node__content",
          style: {
            "padding-left": (_vm.node.level - 1) * _vm.tree.indent + "px"
          }
        },
        [
          _c("span", {
            class: [
              {
                "is-leaf": _vm.node.isLeaf,
                expanded: !_vm.node.isLeaf && _vm.expanded
              },
              "el-tree-node__expand-icon",
              _vm.tree.iconClass
                ? _vm.node.isLeaf
                  ? _vm.tree.iconLeaf
                    ? _vm.tree.iconLeaf
                    : ""
                  : _vm.tree.iconClass
                : "el-icon-caret-right"
            ],
            on: {
              click: function($event) {
                $event.stopPropagation()
                return _vm.handleExpandIconClick($event)
              }
            }
          }),
          _vm.showCheckbox &&
          !(_vm.node.store.isFrozenRoot && _vm.node.level === 1)
            ? _c("el-checkbox", {
                attrs: {
                  indeterminate: _vm.node.indeterminate,
                  disabled: !!_vm.node.disabled
                },
                on: { change: _vm.handleCheckChange },
                nativeOn: {
                  click: function($event) {
                    $event.stopPropagation()
                  }
                },
                model: {
                  value: _vm.node.checked,
                  callback: function($$v) {
                    _vm.$set(_vm.node, "checked", $$v)
                  },
                  expression: "node.checked"
                }
              })
            : _vm.radioType
            ? _c(
                "dg-radio",
                {
                  attrs: {
                    label: _vm.node.data[_vm.nodeKey],
                    disabled: !!_vm.node.disabled
                  },
                  on: { change: _vm.handleRadioChange },
                  model: {
                    value: _vm.node.radio,
                    callback: function($$v) {
                      _vm.$set(_vm.node, "radio", $$v)
                    },
                    expression: "node.radio"
                  }
                },
                [_c("span")]
              )
            : _vm._e(),
          _vm.node.loading
            ? _c("span", {
                staticClass: "el-tree-node__loading-icon el-icon-loading"
              })
            : _vm._e(),
          _c("node-content", { attrs: { node: _vm.node } })
        ],
        1
      ),
      _c("el-collapse-transition", [
        !_vm.renderAfterExpand || _vm.childNodeRendered
          ? _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.expanded,
                    expression: "expanded"
                  }
                ],
                staticClass: "el-tree-node__children",
                attrs: { role: "group", "aria-expanded": _vm.expanded }
              },
              _vm._l(_vm.node.childNodes, function(child) {
                return _c("el-tree-node", {
                  key: _vm.getNodeKey(child),
                  attrs: {
                    "node-key": _vm.nodeKey,
                    "check-strictly": _vm.checkStrictly,
                    "radio-type": _vm.radioType,
                    "render-content": _vm.renderContent,
                    "render-after-expand": _vm.renderAfterExpand,
                    "show-checkbox": _vm.showCheckbox,
                    node: child
                  },
                  on: { "node-expand": _vm.handleChildNodeExpand }
                })
              }),
              1
            )
          : _vm._e()
      ])
    ],
    1
  )
}
var tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = []
tree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&

// CONCATENATED MODULE: ./src/transitions/collapse-transition.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var collapse_transition_Transition = function () {
  function Transition() {
    _classCallCheck(this, Transition);
  }

  Transition.prototype.beforeEnter = function beforeEnter(el) {
    addClass(el, 'collapse-transition');
    if (!el.dataset) el.dataset = {};

    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;

    el.style.height = '0';
    el.style.paddingTop = 0;
    el.style.paddingBottom = 0;
  };

  Transition.prototype.enter = function enter(el) {
    el.dataset.oldOverflow = el.style.overflow;
    if (el.scrollHeight !== 0) {
      el.style.height = el.scrollHeight + 'px';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    } else {
      el.style.height = '';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    }

    el.style.overflow = 'hidden';
  };

  Transition.prototype.afterEnter = function afterEnter(el) {
    // for safari: remove class then reset height is necessary
    removeClass(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
  };

  Transition.prototype.beforeLeave = function beforeLeave(el) {
    if (!el.dataset) el.dataset = {};
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.dataset.oldOverflow = el.style.overflow;

    el.style.height = el.scrollHeight + 'px';
    el.style.overflow = 'hidden';
  };

  Transition.prototype.leave = function leave(el) {
    if (el.scrollHeight !== 0) {
      // for safari: add class after set height, or it will jump to zero height suddenly, weired
      addClass(el, 'collapse-transition');
      el.style.height = 0;
      el.style.paddingTop = 0;
      el.style.paddingBottom = 0;
    }
  };

  Transition.prototype.afterLeave = function afterLeave(el) {
    removeClass(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
  };

  return Transition;
}();

/* harmony default export */ var collapse_transition = ({
  name: 'ElCollapseTransition',
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children;

    var data = {
      on: new collapse_transition_Transition()
    };

    return h('transition', data, children);
  }
});
// CONCATENATED MODULE: ./src/mixins/emitter.js
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function (child) {
    var name = child.$options.componentName;

    if (name === componentName) {
      child.$emit.apply(child, [eventName].concat(params));
    } else {
      _broadcast.apply(child, [componentName, eventName].concat([params]));
    }
  });
}
/* harmony default export */ var emitter = ({
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent = this.$parent || this.$root;
      var name = parent.$options.componentName;

      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;

        if (parent) {
          name = parent.$options.componentName;
        }
      }
      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
});
// CONCATENATED MODULE: ./packages/tree/src/model/util.js
var NODE_KEY = '$treeNodeId';

var markNodeData = function markNodeData(node, data) {
  if (!data || data[NODE_KEY]) return;
  Object.defineProperty(data, NODE_KEY, {
    value: node.id,
    enumerable: false,
    configurable: false,
    writable: false
  });
};

var util_getNodeKey = function getNodeKey(key, data) {
  if (!key) return data[NODE_KEY];
  return data[key];
};

var findNearestComponent = function findNearestComponent(element, componentName) {
  var target = element;
  while (target && target.tagName !== 'BODY') {
    if (target.__vue__ && target.__vue__.$options.name === componentName) {
      return target.__vue__;
    }
    target = target.parentNode;
  }
  return null;
};
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








/* harmony default export */ var tree_nodevue_type_script_lang_js_ = ({
    name: 'ElTreeNode',

    componentName: 'ElTreeNode',

    mixins: [emitter],

    props: {
        // create author:lutz
        checkStrictly: Boolean,
        node: {
            default: function _default() {
                return {};
            }
        },
        radioType: String,
        nodeKey: String,
        props: {},
        renderContent: Function,
        renderAfterExpand: {
            type: Boolean,
            default: true
        },
        showCheckbox: {
            type: Boolean,
            default: false
        }
    },

    components: {
        ElCollapseTransition: collapse_transition,
        DgRadio: packages_radio,
        ElCheckbox: external_element_ui_["Checkbox"],
        NodeContent: {
            props: {
                node: {
                    required: true
                }
            },
            render: function render(h) {
                var parent = this.$parent;
                var tree = parent.tree;
                var node = this.node;
                var data = node.data,
                    store = node.store;

                // add author: tangdm 增加过滤值高亮

                var temple = node.store.isHighLight && node.filter ? node.label.replace(new RegExp(node.filter + '{1}'), '<span class="dg-tree-filter__light">' + node.filter + '</span>') : node.label;

                return parent.renderContent ? parent.renderContent.call(parent._renderProxy, h, { _self: tree.$vnode.context, node: node, data: data, store: store }) : tree.$scopedSlots.default ? tree.$scopedSlots.default({ node: node, data: data }) :
                // update author: tangdm desc: 支持 `v-html` 模板语法，用于支持高亮检索词
                // <span class="el-tree-node__label">{node.label}</span>
                h('span', { 'class': 'el-tree-node__label', domProps: {
                        'innerHTML': temple
                    }
                });
            }
        }
    },

    data: function data() {
        return {
            tree: null,
            expanded: false,
            childNodeRendered: false,
            oldChecked: null,
            oldIndeterminate: null
        };
    },


    watch: {
        'node.indeterminate': function nodeIndeterminate(val) {
            this.handleSelectChange(this.node.checked, val);
        },
        'node.checked': function nodeChecked(val) {
            this.handleSelectChange(val, this.node.indeterminate);
        },
        'node.expanded': function nodeExpanded(val) {
            var _this = this;

            this.$nextTick(function () {
                return _this.expanded = val;
            });
            if (val) {
                this.childNodeRendered = true;
            }
        }
    },

    methods: {
        getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.tree.nodeKey, node.data);
        },
        handleSelectChange: function handleSelectChange(checked, indeterminate, bool) {
            if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {
                this.tree.$emit('check-change', this.node.data, checked, indeterminate);
                // create-start author:lutz  checkbox的v-model
                var _tree = this.tree,
                    seq = _tree.seq,
                    outputFormat = _tree.outputFormat;

                var data = this.tree.getCheckedKeys(false);
                this.tree.$emit('input', data2type(data, outputFormat, seq));
                // create-end
            }
            this.oldChecked = checked;
            this.indeterminate = indeterminate;
        },
        handleClick: function handleClick() {
            // create-start 单选禁用的情况展开子元素
            if (this.node.disabled && !this.node.checked) {
                this.handleExpandIconClick();
                return;
            }
            // create-end
            var store = this.tree.store;
            store.setCurrentNode(this.node);
            this.tree.$emit('current-change', store.currentNode ? store.currentNode.data : null, store.currentNode);
            this.tree.currentNode = this;
            if (this.tree.expandOnClickNode) {
                this.handleExpandIconClick();
            }

            if (this.tree.checkOnClickNode && !this.node.disabled) {
                this.handleCheckChange(null, {
                    target: { checked: !this.node.checked }
                });
            }

            // create-start author:lutz 普通单选的v-model
            // !showCheckbox && radioType === '' 非复选框的情况
            if (!this.showCheckbox && this.tree.radioType === '' && !this.node.disabled) {
                var _tree2 = this.tree,
                    seq = _tree2.seq,
                    outputFormat = _tree2.outputFormat;

                var data = this.node.data[this.nodeKey];
                var outVal = data2type(data, outputFormat, seq);
                this.tree.$emit('input', data2type(data, outputFormat, seq));
                this.dispatch('LSelect', 'handleCloseDrapdown');
            }
            // create-end

            this.tree.$emit('node-click', this.node.data, this.node, this);
        },
        handleContextMenu: function handleContextMenu(event) {
            if (this.tree._events['node-contextmenu'] && this.tree._events['node-contextmenu'].length > 0) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.tree.$emit('node-contextmenu', event, this.node.data, this.node, this);
        },
        handleExpandIconClick: function handleExpandIconClick() {
            if (this.node.isLeaf) return;
            if (this.expanded) {
                this.tree.$emit('node-collapse', this.node.data, this.node, this);
                this.node.collapse();
            } else {
                this.node.expand();
                this.$emit('node-expand', this.node.data, this.node, this);
            }
        },
        handleCheckChange: function handleCheckChange(value, ev) {
            var _this2 = this;

            // 通过勾选的值，判断父子节点是否关联
            var node = this.node;
            var checked = void 0;

            // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
            // if(node.store.isToggleContact) {
            //     checked = node.expanded ? (node.checked === value && node.selected ? !value : value) : value;
            // } else {
            checked = ev.target.checked;
            // }

            this.node.setChecked(checked, !this.tree.checkStrictly);
            this.$nextTick(function () {
                var store = _this2.tree.store;
                _this2.tree.$emit('check', _this2.node.data, {
                    checkedNodes: store.getCheckedNodes(),
                    checkedKeys: store.getCheckedKeys(),
                    halfCheckedNodes: store.getHalfCheckedNodes(),
                    halfCheckedKeys: store.getHalfCheckedKeys()
                });
            });
        },
        handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {
            this.broadcast('ElTreeNode', 'tree-node-expand', node);
            this.tree.$emit('node-expand', nodeData, node, instance);
        },
        handleDragStart: function handleDragStart(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-start', event, this);
        },
        handleDragOver: function handleDragOver(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-over', event, this);
            event.preventDefault();
        },
        handleDrop: function handleDrop(event) {
            event.preventDefault();
        },
        handleDragEnd: function handleDragEnd(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-end', event, this);
        },


        // lutz+
        /* 当单选框被点击的时候触发 $emit('radio', node.data: object, { radioNodes: array, radioKeys: array }) */
        handleRadioChange: function handleRadioChange(val) {
            var _this3 = this;

            this.$nextTick(function () {
                var store = _this3.tree.store;

                if (_this3.radioType === 'level') {
                    _this3.node.parent.childNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                } else {
                    var allNodes = store._getAllNodes().sort(function (a, b) {
                        return b.level - a.level;
                    });
                    allNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                }

                _this3.node.setRadio(val);
                var radioKeys = store.getRadioKeys();
                _this3.tree.$emit('radio', _this3.node.data, { radioNodes: store.getRadioNodes(), radioKeys: radioKeys });

                var _tree3 = _this3.tree,
                    seq = _tree3.seq,
                    outputFormat = _tree3.outputFormat;


                _this3.tree.$emit('input', data2type(radioKeys, outputFormat, seq));
                if (_this3.radioType !== 'level') {
                    _this3.dispatch('LSelect', 'handleCloseDrapdown');
                }
            });
        }
        // lutz-

    },

    created: function created() {
        var _this4 = this;

        var parent = this.$parent;

        if (parent.isTree) {
            this.tree = parent;
        } else {
            this.tree = parent.tree;
        }

        var tree = this.tree;
        if (!tree) {
            console.warn("Can not find node's tree.");
        }

        var props = tree.props || {};
        var childrenKey = props['children'] || 'children';

        this.$watch('node.data.' + childrenKey, function () {
            _this4.node.updateChildren();
        });

        if (this.node.expanded) {
            this.expanded = true;
            this.childNodeRendered = true;
        }

        if (this.tree.accordion) {
            this.$on('tree-node-expand', function (node) {
                if (_this4.node !== node) {
                    _this4.node.collapse();
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_tree_nodevue_type_script_lang_js_ = (tree_nodevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue





/* normalize component */

var tree_node_component = normalizeComponent(
  src_tree_nodevue_type_script_lang_js_,
  tree_nodevue_type_template_id_3ba3ef0e_render,
  tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var tree_node_api; }
tree_node_component.options.__file = "packages/tree/src/tree-node.vue"
/* harmony default export */ var tree_node = (tree_node_component.exports);
// CONCATENATED MODULE: ./src/utils/merge.js
/* harmony default export */ var merge = (function (target) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }

  return target;
});
// CONCATENATED MODULE: ./packages/tree/src/model/node.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function node_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var getChildState = function getChildState(node) {
    var all = true;
    var none = true;
    var allWithoutDisable = true;
    for (var i = 0, j = node.length; i < j; i++) {
        var n = node[i];
        if (n.checked !== true || n.indeterminate) {
            all = false;
            if (!n.disabled) {
                allWithoutDisable = false;
            }
        }
        if (n.checked !== false || n.indeterminate) {
            none = false;
        }
    }

    return { all: all, none: none, allWithoutDisable: allWithoutDisable, half: !all && !none };
};

var reInitChecked = function reInitChecked(node) {
    if (node.childNodes.length === 0) return;

    // add author: tangdm desc: 冻结根节点
    if (node.store.isFrozenRoot && node.level === 1) return;

    var _getChildState = getChildState(node.childNodes),
        all = _getChildState.all,
        none = _getChildState.none,
        half = _getChildState.half;

    if (all) {
        node.checked = true;
        node.indeterminate = false;
    } else if (half) {
        node.checked = false;
        node.indeterminate = true;
    } else if (none) {
        node.checked = false;
        node.indeterminate = false;
    }

    var parent = node.parent;
    if (!parent || parent.level === 0) return;

    if (!node.store.checkStrictly) {
        reInitChecked(parent);
    }
};

var getPropertyFromData = function getPropertyFromData(node, prop) {
    var props = node.store.props;
    var data = node.data || {};
    var config = props[prop];

    if (typeof config === 'function') {
        return config(data, node);
    } else if (typeof config === 'string') {
        return data[config];
    } else if (typeof config === 'undefined') {
        var dataProp = data[prop];
        return dataProp === undefined ? '' : dataProp;
    }
};

var nodeIdSeed = 0;

var node_Node = function () {
    function Node(options) {
        node_classCallCheck(this, Node);

        this.id = nodeIdSeed++;
        this.text = null;
        this.checked = false;
        this.indeterminate = false;
        this.data = null;
        this.expanded = false;
        this.parent = null;
        this.visible = true;
        // create-start author:lutz
        this.radio = null;
        // create-end
        // create-start author:tangdm desc: 标识联动状态
        this.selected = false;
        // create-end
        // create-start author:tangdm desc: 过滤值监听
        this.filter = null;
        // create-end

        for (var name in options) {
            if (options.hasOwnProperty(name)) {
                this[name] = options[name];
            }
        }

        // internal
        this.level = 0;
        this.loaded = false;
        this.childNodes = [];
        this.loading = false;

        if (this.parent) {
            this.level = this.parent.level + 1;
        }

        var store = this.store;
        if (!store) {
            throw new Error('[Node]store is required!');
        }
        store.registerNode(this);

        var props = store.props;
        if (props && typeof props.isLeaf !== 'undefined') {
            var isLeaf = getPropertyFromData(this, 'isLeaf');
            if (typeof isLeaf === 'boolean') {
                this.isLeafByUser = isLeaf;
            }
        }

        if (store.lazy !== true && this.data) {
            this.setData(this.data);

            if (store.defaultExpandAll) {
                this.expanded = true;
            }
        } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {
            this.expand();
        } else if (store.lazy && options.store.checkLeaf && !this.data[store.props.isLeaf]) {
            this.data.disabled = true;
        }

        if (!Array.isArray(this.data)) {
            markNodeData(this, this.data);
        }
        if (!this.data) return;
        var defaultExpandedKeys = store.defaultExpandedKeys;
        var key = store.key;
        if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {
            this.expand(null, store.autoExpandParent);
        }

        if (key && store.currentNodeKey !== undefined && this.key === store.currentNodeKey) {
            store.currentNode = this;
        }

        if (store.lazy) {
            store._initDefaultCheckedNode(this);
        }

        this.updateLeafState();
    }

    Node.prototype.setData = function setData(data) {
        if (!Array.isArray(data)) {
            markNodeData(this, data);
        }

        // create-start author:lutz
        // check-leaf 只能选择子节点
        var _store = this.store,
            checkLeaf = _store.checkLeaf,
            props = _store.props;

        var isObject = Object.prototype.toString.call(data) === '[object Object]';
        if (isObject && checkLeaf && data[props.children] && data[props.children].length) {
            data[props.disabled] = true;
        }
        // create-end

        this.data = data;
        this.childNodes = [];

        var children = void 0;
        if (this.level === 0 && this.data instanceof Array) {
            children = this.data;
        } else {
            children = getPropertyFromData(this, 'children') || [];
            // create-start author:lutz
            var _store2 = this.store,
                checkStrictly = _store2.checkStrictly,
                _props = _store2.props;

            var disabled = getPropertyFromData(this, 'disabled');
            var disabledName = _props.disabled;
            // 父节点禁用、节点关联(disabled && !false)开启禁用
            if (disabled && !checkStrictly) {
                children.forEach(function (item) {
                    item[disabledName] = true;
                });
            }
            // create-end
        }

        for (var i = 0, j = children.length; i < j; i++) {
            this.insertChild({ data: children[i] });
        }
    };

    Node.prototype.contains = function contains(target) {
        var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var walk = function walk(parent) {
            var children = parent.childNodes || [];
            var result = false;
            for (var i = 0, j = children.length; i < j; i++) {
                var child = children[i];
                if (child === target || deep && walk(child)) {
                    result = true;
                    break;
                }
            }
            return result;
        };

        return walk(this);
    };

    Node.prototype.remove = function remove() {
        var parent = this.parent;
        if (parent) {
            parent.removeChild(this);
        }
    };

    Node.prototype.insertChild = function insertChild(child, index, batch) {
        if (!child) throw new Error('insertChild error: child is required.');

        if (!(child instanceof Node)) {
            if (!batch) {
                var children = this.getChildren(true);
                if (children.indexOf(child.data) === -1) {
                    if (typeof index === 'undefined' || index < 0) {
                        children.push(child.data);
                    } else {
                        children.splice(index, 0, child.data);
                    }
                }
            }
            merge(child, {
                parent: this,
                store: this.store
            });
            child = new Node(child);
        }

        child.level = this.level + 1;

        if (typeof index === 'undefined' || index < 0) {
            this.childNodes.push(child);
        } else {
            this.childNodes.splice(index, 0, child);
        }

        this.updateLeafState();
    };

    Node.prototype.insertBefore = function insertBefore(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
        }
        this.insertChild(child, index);
    };

    Node.prototype.insertAfter = function insertAfter(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
            if (index !== -1) index += 1;
        }
        this.insertChild(child, index);
    };

    Node.prototype.removeChild = function removeChild(child) {
        var children = this.getChildren() || [];
        var dataIndex = children.indexOf(child.data);
        if (dataIndex > -1) {
            children.splice(dataIndex, 1);
        }

        var index = this.childNodes.indexOf(child);

        if (index > -1) {
            this.store && this.store.deregisterNode(child);
            child.parent = null;
            this.childNodes.splice(index, 1);
        }

        this.updateLeafState();
    };

    Node.prototype.removeChildByData = function removeChildByData(data) {
        var targetNode = null;

        for (var i = 0; i < this.childNodes.length; i++) {
            if (this.childNodes[i].data === data) {
                targetNode = this.childNodes[i];
                break;
            }
        }

        if (targetNode) {
            this.removeChild(targetNode);
        }
    };

    Node.prototype.expand = function expand(callback, expandParent) {
        var _this = this;

        var done = function done() {
            if (expandParent) {
                var parent = _this.parent;
                while (parent.level > 0) {
                    parent.expanded = true;
                    parent = parent.parent;
                }
            }
            _this.expanded = true;
            if (callback) callback();
        };

        if (this.shouldLoadData()) {
            this.loadData(function (data) {
                if (data instanceof Array) {
                    if (_this.checked) {
                        _this.setChecked(true, true);
                    } else if (!_this.store.checkStrictly) {
                        reInitChecked(_this);
                    }
                    done();
                }
            });
        } else {
            done();
        }
    };

    Node.prototype.doCreateChildren = function doCreateChildren(array) {
        var _this2 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        array.forEach(function (item) {
            _this2.insertChild(merge({ data: item }, defaultProps), undefined, true);
        });
    };

    Node.prototype.collapse = function collapse() {
        this.expanded = false;

        // add author: tangdm desc: 折叠状态切换
        if (this.store.isToggleContact) {
            // 折叠不关联
            if (!this.checked && this.indeterminate) {
                this.indeterminate = false;

                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
            }
        }
    };

    Node.prototype.shouldLoadData = function shouldLoadData() {
        return this.store.lazy === true && this.store.load && !this.loaded;
    };

    Node.prototype.updateLeafState = function updateLeafState() {
        if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== 'undefined') {
            this.isLeaf = this.isLeafByUser;
            return;
        }
        var childNodes = this.childNodes;
        if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
            this.isLeaf = !childNodes || childNodes.length === 0;
            return;
        }
        this.isLeaf = false;
    };

    Node.prototype.setChecked = function setChecked(value, deep, recursion, passValue) {
        var _this3 = this;

        // add author: tangdm desc: 冻结根节点
        if (this.store.isFrozenRoot && this.level === 1) return;

        // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
        if (this.store.isToggleContact) {

            // 是否当前元素
            if (!recursion) {
                // 展开状态
                if (this.expanded) {
                    var newValue = void 0;
                    if (this.isLeaf) {
                        newValue = value;
                    } else {
                        var _getChildState2 = getChildState(this.childNodes),
                            all = _getChildState2.all;

                        newValue = all;
                    }

                    // this.checked = this.selected === true ? !newValue : value;
                    this.checked = value === true;
                    this.indeterminate = false;

                    if (!this.isLeaf) {
                        // 遍历子节点
                        if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                            var _getChildState3 = getChildState(this.childNodes),
                                _all = _getChildState3.all,
                                allWithoutDisable = _getChildState3.allWithoutDisable;

                            if (!this.isLeaf && !_all && allWithoutDisable) {
                                this.checked = false;
                                value = false;
                            }

                            var handleDescendants = function handleDescendants() {
                                if (deep) {
                                    var childNodes = _this3.childNodes;
                                    for (var i = 0, j = childNodes.length; i < j; i++) {
                                        var child = childNodes[i];
                                        passValue = passValue || _this3.checked !== false;
                                        var isCheck = child.disabled ? child.checked : passValue;
                                        child.setChecked(isCheck, deep, true, passValue);
                                    }

                                    var _getChildState4 = getChildState(childNodes),
                                        half = _getChildState4.half,
                                        _all2 = _getChildState4.all;

                                    if (!_all2) {
                                        _this3.checked = _all2;
                                        _this3.indeterminate = half;
                                    }
                                }
                            };

                            // 递归子节点
                            handleDescendants();
                        }
                    }
                } else {
                    this.checked = value;
                    this.indeterminate = false;

                    // 标识折叠收缩选择的状态
                    this.selected = value === true;
                    if (this.store.checkStrictly) {
                        return;
                    }
                }

                // if (!this.store.isToggleContact) {
                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
                // }
            } else {
                // 展开状态
                if (this.expanded) {
                    this.checked = value === true;
                    this.indeterminate = false;

                    // 遍历子节点
                    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                        var _getChildState5 = getChildState(this.childNodes),
                            _all3 = _getChildState5.all,
                            _allWithoutDisable = _getChildState5.allWithoutDisable;

                        if (!this.isLeaf && !_all3 && _allWithoutDisable) {
                            this.checked = false;
                            value = false;
                        }

                        var _handleDescendants = function _handleDescendants() {
                            if (deep) {
                                var childNodes = _this3.childNodes;
                                for (var i = 0, j = childNodes.length; i < j; i++) {
                                    var child = childNodes[i];
                                    passValue = passValue || _this3.checked !== false;
                                    var isCheck = child.disabled ? child.checked : passValue;
                                    child.setChecked(isCheck, deep, true, passValue);
                                }

                                var _getChildState6 = getChildState(childNodes),
                                    half = _getChildState6.half,
                                    _all4 = _getChildState6.all;

                                if (!_all4) {
                                    _this3.checked = _all4;
                                    _this3.indeterminate = half;
                                }
                            }
                        };

                        // 递归子节点
                        _handleDescendants();
                    }
                } else {
                    this.checked = value === true;
                    this.indeterminate = value === 'half';
                }
            }
        } else {
            this.indeterminate = value === 'half';
            this.checked = value === true;

            if (this.store.checkStrictly) return;

            if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                var _getChildState7 = getChildState(this.childNodes),
                    _all5 = _getChildState7.all,
                    _allWithoutDisable2 = _getChildState7.allWithoutDisable;

                if (!this.isLeaf && !_all5 && _allWithoutDisable2) {
                    this.checked = false;
                    value = false;
                }

                var _handleDescendants2 = function _handleDescendants2() {
                    if (deep) {
                        var childNodes = _this3.childNodes;
                        for (var i = 0, j = childNodes.length; i < j; i++) {
                            var child = childNodes[i];
                            passValue = passValue || value !== false;
                            var isCheck = child.disabled ? child.checked : passValue;
                            child.setChecked(isCheck, deep, true, passValue);
                        }

                        var _getChildState8 = getChildState(childNodes),
                            half = _getChildState8.half,
                            _all6 = _getChildState8.all;

                        if (!_all6) {
                            _this3.checked = _all6;
                            _this3.indeterminate = half;
                        }
                    }
                };

                if (this.shouldLoadData()) {
                    // Only work on lazy load data.
                    this.loadData(function () {
                        _handleDescendants2();
                        reInitChecked(_this3);
                    }, {
                        checked: value !== false
                    });
                    return;
                } else {
                    _handleDescendants2();
                }
            }

            var _parent = this.parent;
            if (!_parent || _parent.level === 0) return;

            // 是否点击的当前元素
            if (!recursion) {
                reInitChecked(_parent);
            }
        }
    };

    Node.prototype.getChildren = function getChildren() {
        var forceInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        // this is data
        if (this.level === 0) return this.data;
        var data = this.data;
        if (!data) return null;

        var props = this.store.props;
        var children = 'children';
        if (props) {
            children = props.children || 'children';
        }

        if (data[children] === undefined) {
            data[children] = null;
        }

        if (forceInit && !data[children]) {
            data[children] = [];
        }

        return data[children];
    };

    Node.prototype.updateChildren = function updateChildren() {
        var _this4 = this;

        var newData = this.getChildren() || [];
        var oldData = this.childNodes.map(function (node) {
            return node.data;
        });

        var newDataMap = {};
        var newNodes = [];

        newData.forEach(function (item, index) {
            if (item[NODE_KEY]) {
                newDataMap[item[NODE_KEY]] = { index: index, data: item };
            } else {
                newNodes.push({ index: index, data: item });
            }
        });

        if (!this.store.lazy) {
            oldData.forEach(function (item) {
                if (!newDataMap[item[NODE_KEY]]) _this4.removeChildByData(item);
            });
        }

        newNodes.forEach(function (_ref) {
            var index = _ref.index,
                data = _ref.data;

            _this4.insertChild({ data: data }, index);
        });

        this.updateLeafState();
    };

    Node.prototype.loadData = function loadData(callback) {
        var _this5 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
            this.loading = true;

            var resolve = function resolve(children) {
                _this5.loaded = true;
                _this5.loading = false;
                _this5.childNodes = [];

                _this5.doCreateChildren(children, defaultProps);

                _this5.updateLeafState();

                if (callback) {
                    callback.call(_this5, children);
                }
            };

            this.store.load(this, resolve);
        } else {
            if (callback) {
                callback.call(this);
            }
        }
    };

    // create-start author:lutz
    // (radioVal: any) 写入radioVal


    Node.prototype.setRadio = function setRadio(radioVal) {
        this.radio = radioVal;
    };
    // create-end


    _createClass(Node, [{
        key: 'label',
        get: function get() {
            return getPropertyFromData(this, 'label');
        }
    }, {
        key: 'key',
        get: function get() {
            var nodeKey = this.store.key;
            if (this.data) return this.data[nodeKey];
            return null;
        }
    }, {
        key: 'disabled',
        get: function get() {
            return getPropertyFromData(this, 'disabled');
        }
    }, {
        key: 'nextSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return parent.childNodes[index + 1];
                }
            }
            return null;
        }
    }, {
        key: 'previousSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return index > 0 ? parent.childNodes[index - 1] : null;
                }
            }
            return null;
        }
    }]);

    return Node;
}();

/* harmony default export */ var model_node = (node_Node);
// CONCATENATED MODULE: ./packages/tree/src/model/tree-store.js
var tree_store_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function tree_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var tree_store_TreeStore = function () {
    function TreeStore(options) {
        var _this = this;

        tree_store_classCallCheck(this, TreeStore);

        this.currentNode = null;
        this.currentNodeKey = null;

        for (var option in options) {
            if (options.hasOwnProperty(option)) {
                this[option] = options[option];
            }
        }

        this.nodesMap = {};

        this.root = new model_node({
            data: this.data,
            store: this
        });

        if (this.lazy && this.load) {
            var loadFn = this.load;
            loadFn(this.root, function (data) {
                _this.root.doCreateChildren(data);
                _this._initDefaultCheckedNodes();
            });
        } else {
            this._initDefaultCheckedNodes();
        }
    }

    TreeStore.prototype.filter = function filter(value) {
        var filterNodeMethod = this.filterNodeMethod;
        var lazy = this.lazy;

        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                child.visible = filterNodeMethod.call(child, value, child.data, child);

                // add author: tangdm desc: 追加过滤值
                child.filter = value;

                traverse(child);
            });

            if (!node.visible && childNodes.length) {
                var allHidden = true;

                childNodes.forEach(function (child) {
                    if (child.visible) allHidden = false;
                });

                if (node.root) {
                    node.root.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.root.filter = value;
                } else {
                    node.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.filter = value;
                }
            }
            if (!value) return;

            if (node.visible && !node.isLeaf && !lazy) node.expand();
        };

        traverse(this);
    };

    TreeStore.prototype.setData = function setData(newVal) {
        var instanceChanged = newVal !== this.root.data;
        if (instanceChanged) {
            this.root.setData(newVal);
            this._initDefaultCheckedNodes();
        } else {
            this.root.updateChildren();
        }
    };

    TreeStore.prototype.getNode = function getNode(data) {
        if (data instanceof model_node) return data;
        var key = (typeof data === "undefined" ? "undefined" : tree_store_typeof(data)) !== "object" ? data : util_getNodeKey(this.key, data);
        return this.nodesMap[key] || null;
    };

    TreeStore.prototype.insertBefore = function insertBefore(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertBefore({ data: data }, refNode);
    };

    TreeStore.prototype.insertAfter = function insertAfter(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertAfter({ data: data }, refNode);
    };

    TreeStore.prototype.remove = function remove(data) {
        var node = this.getNode(data);
        if (node && node.parent) {
            node.parent.removeChild(node);
        }
    };

    TreeStore.prototype.append = function append(data, parentData) {
        var parentNode = parentData ? this.getNode(parentData) : this.root;

        if (parentNode) {
            parentNode.insertChild({ data: data });
        }
    };

    TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {
        var _this2 = this;

        var defaultCheckedKeys = this.defaultCheckedKeys || [];
        var nodesMap = this.nodesMap;

        defaultCheckedKeys.forEach(function (checkedKey) {
            var node = nodesMap[checkedKey];

            if (node) {
                node.setChecked(true, !_this2.checkStrictly);
                // create-start author:lutz
                // 给radio写入值
                if (node.store.radioType === "all" || node.store.radioType === "level") {
                    node.setRadio(node.key);
                }
                // create-end
            }
        });
    };

    TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {
        var defaultCheckedKeys = this.defaultCheckedKeys || [];

        if (defaultCheckedKeys.indexOf(node.key) !== -1) {
            node.setChecked(true, !this.checkStrictly);
        }
    };

    TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {
        if (newVal !== this.defaultCheckedKeys) {
            this.defaultCheckedKeys = newVal;
            this._initDefaultCheckedNodes();
        }
    };

    TreeStore.prototype.registerNode = function registerNode(node) {
        var key = this.key;
        if (!key || !node || !node.data) return;

        var nodeKey = node.key;
        if (nodeKey !== undefined) this.nodesMap[node.key] = node;
    };

    TreeStore.prototype.deregisterNode = function deregisterNode(node) {
        var _this3 = this;

        var key = this.key;
        if (!key || !node || !node.data) return;

        node.childNodes.forEach(function (child) {
            _this3.deregisterNode(child);
        });

        delete this.nodesMap[node.key];
    };

    TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {
        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
                    checkedNodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return checkedNodes;
    };

    TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {
        var _this4 = this;

        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        return this.getCheckedNodes(leafOnly).map(function (data) {
            return (data || {})[_this4.key];
        });
    };

    TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {
        var nodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if (child.indeterminate) {
                    nodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return nodes;
    };

    TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {
        var _this5 = this;

        return this.getHalfCheckedNodes().map(function (data) {
            return (data || {})[_this5.key];
        });
    };

    TreeStore.prototype._getAllNodes = function _getAllNodes() {
        var allNodes = [];
        var nodesMap = this.nodesMap;
        for (var nodeKey in nodesMap) {
            if (nodesMap.hasOwnProperty(nodeKey)) {
                allNodes.push(nodesMap[nodeKey]);
            }
        }

        return allNodes;
    };

    TreeStore.prototype.updateChildren = function updateChildren(key, data) {
        var node = this.nodesMap[key];
        if (!node) return;
        var childNodes = node.childNodes;
        for (var i = childNodes.length - 1; i >= 0; i--) {
            var child = childNodes[i];
            this.remove(child.data);
        }
        for (var _i = 0, j = data.length; _i < j; _i++) {
            var _child = data[_i];
            this.append(_child, node.data);
        }
    };

    TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var checkedKeys = arguments[2];

        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var cache = Object.create(null);
        var keys = Object.keys(checkedKeys);
        allNodes.forEach(function (node) {
            return node.setChecked(false, false);
        });
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            var checked = keys.indexOf(nodeKey) > -1;
            if (!checked) {
                if (node.checked && !cache[nodeKey]) {
                    node.setChecked(false, false);
                }
                continue;
            }

            var parent = node.parent;
            while (parent && parent.level > 0) {
                cache[parent.data[key]] = true;
                parent = parent.parent;
            }

            if (node.isLeaf || this.checkStrictly) {
                node.setChecked(true, false);
                continue;
            }
            node.setChecked(true, true);

            if (leafOnly) {
                (function () {
                    node.setChecked(false, false);
                    var traverse = function traverse(node) {
                        var childNodes = node.childNodes;
                        childNodes.forEach(function (child) {
                            if (!child.isLeaf) {
                                child.setChecked(false, false);
                            }
                            traverse(child);
                        });
                    };
                    traverse(node);
                })();
            }
        }
    };

    TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            checkedKeys[(item || {})[key]] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.defaultCheckedKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (key) {
            checkedKeys[key] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys) {
        var _this6 = this;

        keys = keys || [];
        this.defaultExpandedKeys = keys;

        keys.forEach(function (key) {
            var node = _this6.getNode(key);
            if (node) node.expand(null, _this6.autoExpandParent);
        });
    };

    TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {
        var node = this.getNode(data);

        if (node) {
            node.setChecked(!!checked, deep);
        }
    };

    TreeStore.prototype.getCurrentNode = function getCurrentNode() {
        return this.currentNode;
    };

    TreeStore.prototype.setCurrentNode = function setCurrentNode(node) {
        this.currentNode = node;
    };

    TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {
        var key = node[this.key];
        var currNode = this.nodesMap[key];
        this.setCurrentNode(currNode);
    };

    TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {
        if (key === null) {
            this.currentNode = null;
            return;
        }
        var node = this.getNode(key);
        if (node) {
            this.currentNode = node;
        }
    };

    // create-start


    TreeStore.prototype.setRadio = function setRadio(data, radioVal, deep) {
        var node = this.getNode(data);
        if (node) {
            node.setRadio(radioVal, deep);
        }
    };

    // 则返回目前被选中的节点所组成的数组


    TreeStore.prototype.getRadioNodes = function getRadioNodes() {
        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function (child) {
                if (child.radio != null && child.radio !== "") {
                    // null || void 0 || '' 下会被认为是没有选中
                    checkedNodes.push(child.data);
                }
                traverse(child);
            });
        };
        traverse(this);
        return checkedNodes;
    };

    // 返回目前被选中的节点的 key 所组成的数组


    TreeStore.prototype.getRadioKeys = function getRadioKeys() {
        var _this7 = this;

        return this.getRadioNodes().map(function (data) {
            return (data || {})[_this7.key];
        });
    };

    // nodes设置目前勾选节点


    TreeStore.prototype.setRadioNodes = function setRadioNodes(array) {
        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            var index = (item || {})[key];
            checkedKeys[index] = index;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    // keys设置勾选节点


    TreeStore.prototype.setRadioKeys = function setRadioKeys(keys) {
        this.defaultRadioKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (item) {
            checkedKeys[item] = item;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    TreeStore.prototype._setRadioKeys = function _setRadioKeys(key, checkedKey) {
        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var keys = Object.keys(checkedKey);
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            node.setRadio(keys.indexOf(nodeKey) !== -1 ? checkedKey[nodeKey] : null);
        }
    };

    // create-end


    return TreeStore;
}();

/* harmony default export */ var tree_store = (tree_store_TreeStore);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










var Tree = complex(external_element_ui_["Tree"], ['created', 'mounted']);

/* harmony default export */ var tree_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTree',

    mixins: [Tree, dg_mixins_itemsWithDisabled],

    components: {
        ElTreeNode: tree_node
    },

    props: {
        iconLeaf: String,
        iconClass: String,
        // 只能选择叶子节点
        checkLeaf: Boolean,
        // node-key 现在是必须的
        nodeKey: {
            type: String,
            required: true
        },
        value: {
            type: [String, Array, Number]
        },
        // element-ui 高亮显示选中
        highlightCurrent: {
            type: Boolean,
            default: function _default() {
                return true;
            }
        },
        // radio: all：整棵树只能选一个; level：同级只能选择一个; '': 不显示默认
        radioType: {
            type: String,
            default: '',
            validator: function validator(val) {
                return ['level', 'all', ''].indexOf(val) !== -1;
            }
        },
        // 是否移除默认的键盘监听事件
        noneDefaultKeyboard: {
            type: Boolean,
            default: false
        },
        // 是否在复选的模式支持展开关联且收缩失去关联 add author: tangdm
        isToggleContact: {
            type: Boolean,
            default: false
        },
        // 是否根节点冻结 add author: tangdm
        isFrozenRoot: {
            type: Boolean,
            default: false
        },
        // 是否高亮检索值 add author: tangdm
        isHighLight: {
            type: Boolean,
            default: false
        }
    },
    watch: {
        // create author:lutz
        // v-model 功能绑定数据
        value: function value(val, oldVal) {
            // debugger;
            var radioType = this.radioType,
                seq = this.seq,
                value = this.value,
                showCheckbox = this.showCheckbox,
                itemsWithDisabled = this.itemsWithDisabled,
                nodeKey = this.nodeKey;

            var valArr = str2arr(value, seq, true, itemsWithDisabled, nodeKey);

            // radio
            if (radioType === 'level' || radioType === 'all') {
                this.setRadioKeys(valArr);
            }

            // checkbox
            if (showCheckbox) {
                var checkStrictly = this.checkStrictly;

                var preCheckedArr = this.getCheckedKeys();
                var oldValArr = str2arr(preCheckedArr, seq);

                if (valArr.length && oldValArr.length && !checkStrictly) {
                    var _nodeKey = this.nodeKey;

                    var diffArr = external_lodash_default.a.difference(oldValArr, valArr);

                    // 剔除父及祖先级元素
                    var traverseParent = function traverseParent(node, valArr) {
                        var parentNode = node.parent;
                        if (parentNode && parentNode.level != 0) {
                            external_lodash_default.a.remove(valArr, function (n) {
                                return parentNode.data[_nodeKey] === n;
                            });
                            traverseParent(parentNode, valArr);
                        }
                    };

                    // 剔除所有子代及子孙元素
                    var traverseChild = function traverseChild(node, valArr) {
                        var childNodes = node.childNodes;
                        if (childNodes && childNodes.length) {
                            childNodes.forEach(function (item) {
                                external_lodash_default.a.remove(valArr, function (n) {
                                    return n === item.data[_nodeKey];
                                });
                            });
                            traverseChild(childNodes, valArr);
                        }
                    };

                    // diffArr.forEach(item => {
                    //     const node = this.getNode(item);
                    //     if (node) {
                    //         traverseParent(node, valArr);
                    //         traverseChild(node, valArr);
                    //     }
                    // });
                }
                this.setCheckedKeys(valArr);
            }

            // highlight
            if (!showCheckbox && radioType === '' && valArr.length < 2) {
                this.setCurrentKey(valArr);
            }
        },


        // create author:lutz
        dataSource: function dataSource(val) {
            this.store.setData(this.itemsWithDisabled);
        }
    },

    // describe:数据类型转换
    created: function created() {
        var _this = this;

        console.log(this.value);
        this.isTree = true;
        // create-start author:lutz
        var valArr = str2arr(this.value, this.seq, true, this.dataSource);
        var checkArr = str2arr(this.defaultCheckedKeys, this.seq, true, this.dataSource, this.nodeKey);
        var expArr = str2arr(this.defaultExpandedKeys, this.seq, true, this.dataSource, this.nodeKey);
        // create-end author:lutz
        this.store = new tree_store({
            key: this.nodeKey,
            lazy: this.lazy,
            load: this.load,
            checkLeaf: this.checkLeaf,
            checkStrictly: this.checkStrictly || this.isToggleContact,
            // add author: tangdm desc: 收缩展开是否联动
            isToggleContact: this.isToggleContact,
            // add author: tangdm desc: 是否冻结根节点
            isFrozenRoot: this.isFrozenRoot,
            // add author: tangdm desc: 是否高亮检索值
            isHighLight: this.isHighLight,

            checkDescendants: this.checkDescendants,
            // update-start  author:lutz
            data: this.dataSource,
            radioType: this.radioType,
            props: this.defaultProp,
            currentNodeKey: this.currentNodeKey || this.value,
            defaultCheckedKeys: uniqArr(valArr, checkArr),
            defaultExpandedKeys: uniqArr(valArr, expArr),
            /* [code]
                data: this.data,
                props: this.props,
                currentNodeKey: this.currentNodeKey
                defaultCheckedKeys: this.defaultCheckedKeys,
                defaultExpandedKeys: this.defaultExpandedKeys
            */
            // update-end
            autoExpandParent: this.autoExpandParent,
            defaultExpandAll: this.defaultExpandAll,
            filterNodeMethod: this.filterNodeMethod
        });

        this.root = this.store.root;

        var dragState = this.dragState;

        this.$on('tree-node-drag-start', function (event, treeNode) {
            if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {
                event.preventDefault();
                return false;
            }
            event.dataTransfer.effectAllowed = 'move';

            // wrap in try catch to address IE's error when first param is 'text/plain'
            try {
                // setData is required for draggable to work in FireFox
                // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox
                event.dataTransfer.setData('text/plain', '');
            } catch (e) {}
            dragState.draggingNode = treeNode;
            _this.$emit('node-drag-start', treeNode.node, event);
        });

        this.$on('tree-node-drag-over', function (event, treeNode) {
            var dropNode = findNearestComponent(event.target, 'ElTreeNode');
            var oldDropNode = dragState.dropNode;
            if (oldDropNode && oldDropNode !== dropNode) {
                removeClass(oldDropNode.$el, 'is-drop-inner');
            }
            var draggingNode = dragState.draggingNode;
            if (!draggingNode || !dropNode) return;

            var dropPrev = true;
            var dropInner = true;
            var dropNext = true;
            var userAllowDropInner = true;
            if (typeof _this.allowDrop === 'function') {
                dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');
                userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');
                dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');
            }
            event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';
            if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
                if (oldDropNode) {
                    _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);
                }
                _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);
            }

            if (dropPrev || dropInner || dropNext) {
                dragState.dropNode = dropNode;
            }

            if (dropNode.node.nextSibling === draggingNode.node) {
                dropNext = false;
            }
            if (dropNode.node.previousSibling === draggingNode.node) {
                dropPrev = false;
            }
            if (dropNode.node.contains(draggingNode.node, false)) {
                dropInner = false;
            }
            if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
                dropPrev = false;
                dropInner = false;
                dropNext = false;
            }

            var targetPosition = dropNode.$el.getBoundingClientRect();
            var treePosition = _this.$el.getBoundingClientRect();

            var dropType = void 0;
            var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
            var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;

            var indicatorTop = -9999;
            var distance = event.clientY - targetPosition.top;
            if (distance < targetPosition.height * prevPercent) {
                dropType = 'before';
            } else if (distance > targetPosition.height * nextPercent) {
                dropType = 'after';
            } else if (dropInner) {
                dropType = 'inner';
            } else {
                dropType = 'none';
            }

            var iconPosition = dropNode.$el.querySelector('.el-tree-node__expand-icon').getBoundingClientRect();
            var dropIndicator = _this.$refs.dropIndicator;
            if (dropType === 'before') {
                indicatorTop = iconPosition.top - treePosition.top;
            } else if (dropType === 'after') {
                indicatorTop = iconPosition.bottom - treePosition.top;
            }
            dropIndicator.style.top = indicatorTop + 'px';
            dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';

            if (dropType === 'inner') {
                addClass(dropNode.$el, 'is-drop-inner');
            } else {
                removeClass(dropNode.$el, 'is-drop-inner');
            }

            dragState.showDropIndicator = dropType === 'before' || dropType === 'after';
            dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
            dragState.dropType = dropType;
            _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);
        });

        this.$on('tree-node-drag-end', function (event) {
            var draggingNode = dragState.draggingNode,
                dropType = dragState.dropType,
                dropNode = dragState.dropNode;

            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';

            if (draggingNode && dropNode) {
                var draggingNodeCopy = {
                    data: draggingNode.node.data
                };
                if (dropType !== 'none') {
                    draggingNode.node.remove();
                }
                if (dropType === 'before') {
                    dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'after') {
                    dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'inner') {
                    dropNode.node.insertChild(draggingNodeCopy);
                }
                if (dropType !== 'none') {
                    _this.store.registerNode(draggingNodeCopy);
                }

                removeClass(dropNode.$el, 'is-drop-inner');

                _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);
                if (dropType !== 'none') {
                    _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);
                }
            }
            if (draggingNode && !dropNode) {
                _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);
            }

            dragState.showDropIndicator = false;
            dragState.draggingNode = null;
            dragState.dropNode = null;
            dragState.allowDrop = true;
        });
    },


    methods: {
        /*  radioType: 1. all：整棵树只能选一个 2. level：同级只能选择一个 3. '': 不显示默认 */
        // 返回目前被选中的节点所组成的数组
        getRadioNodes: function getRadioNodes() {
            return this.store.getRadioNodes();
        },


        // 返回目前被选中的节点所组成的数组的 key
        getRadioKeys: function getRadioKeys() {
            return this.store.getRadioKeys();
        },


        // 设置目前勾选的节点，使用此方法必须设置 node-key 属性。function (nodes: array)
        setRadioNodes: function setRadioNodes(nodes) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioNodes');
            this.store.setRadioNodes(nodes);
        },


        // 设置勾选节点所组成的数组的 key。 function(keys: array)
        setRadioKeys: function setRadioKeys(keys) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioKeys');
            this.store.setRadioKeys(keys);
        },


        // 设置radio信息。 function (data: array, radioVal: boolean, deep: boolean = false)
        setRadio: function setRadio(data, radioVal, deep) {
            this.store.setRadio(data, radioVal, deep);
        }
    },

    // edit author: tangdm descript: 去除默认的鼠标监听事件
    mounted: function mounted() {
        this.initTabIndex();
        if (!this.noneDefaultKeyboard) this.$el.addEventListener('keydown', this.handleKeydown);
    },
    updated: function updated() {
        this.treeItems = this.$el.querySelectorAll('[role=treeitem]');
        this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');
    }
});
// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_tree_src_mainvue_type_script_lang_js_ = (tree_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree/src/main.vue





/* normalize component */

var tree_src_main_component = normalizeComponent(
  packages_tree_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_01558241_render,
  mainvue_type_template_id_01558241_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var tree_src_main_api; }
tree_src_main_component.options.__file = "packages/tree/src/main.vue"
/* harmony default export */ var tree_src_main = (tree_src_main_component.exports);
// CONCATENATED MODULE: ./packages/tree/index.js


/* istanbul ignore next */
tree_src_main.install = function (Vue) {
    Vue.component(tree_src_main.name, tree_src_main);
};

/* harmony default export */ var packages_tree = (tree_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/main.vue?vue&type=template&id=2e869fa1&
var mainvue_type_template_id_2e869fa1_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "el-cascader",
    _vm._g(
      _vm._b(
        {
          staticClass: "dg-cascader",
          attrs: { props: _vm.defaultProp, options: _vm.itemsWithDisabled },
          model: {
            value: _vm.model,
            callback: function($$v) {
              _vm.model = $$v
            },
            expression: "model"
          }
        },
        "el-cascader",
        _vm.$attrs,
        false
      ),
      _vm.listeners
    )
  )
}
var mainvue_type_template_id_2e869fa1_staticRenderFns = []
mainvue_type_template_id_2e869fa1_render._withStripped = true


// CONCATENATED MODULE: ./packages/cascader/src/main.vue?vue&type=template&id=2e869fa1&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var cascader_src_mainvue_type_script_lang_js_ = ({
    name: 'DgCascader',

    mixins: [dg_mixins_itemsWithDisabled],

    components: {
        ElCascader: external_element_ui_["Cascader"]
    },

    props: {
        value: [String, Array],
        options: Array,
        props: Object
    },

    watch: {
        options: function options(val) {
            this.dataSource = val;
        }
    },

    data: function data() {
        var data = this.data,
            options = this.options;

        return {
            dataSource: data.length ? data : options
        };
    },


    computed: {
        model: {
            get: function get() {
                var value = this.value,
                    seq = this.seq,
                    dataSource = this.dataSource,
                    defaultProp = this.defaultProp;

                return str2arr(value, seq, true, dataSource, defaultProp.value);
            },
            set: function set(val) {
                var outputFormat = this.outputFormat,
                    seq = this.seq;

                this.$emit('input', data2type(val, outputFormat, seq));
                this.$emit('change', val);
            }
        },

        /* 创建原因：
            input 触发两次且值与 output-format 不同
            change 触发两次
        */
        listeners: function listeners() {
            return shear_filterObj(this.$listeners, ['input', 'change']);
        }
    }
});
// CONCATENATED MODULE: ./packages/cascader/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_cascader_src_mainvue_type_script_lang_js_ = (cascader_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/cascader/src/main.vue





/* normalize component */

var cascader_src_main_component = normalizeComponent(
  packages_cascader_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_2e869fa1_render,
  mainvue_type_template_id_2e869fa1_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var cascader_src_main_api; }
cascader_src_main_component.options.__file = "packages/cascader/src/main.vue"
/* harmony default export */ var cascader_src_main = (cascader_src_main_component.exports);
// CONCATENATED MODULE: ./packages/cascader/index.js


/* istanbul ignore next */
cascader_src_main.install = function (Vue) {
    Vue.component(cascader_src_main.name, cascader_src_main);
};

/* harmony default export */ var cascader = (cascader_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/main.vue?vue&type=template&id=dbfcea2e&
var mainvue_type_template_id_dbfcea2e_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-table" },
    [
      _c(
        "div",
        { staticClass: "dg-table__content" },
        [
          _c(
            "el-table",
            _vm._g(
              _vm._b(
                {
                  directives: [
                    {
                      name: "loading",
                      rawName: "v-loading",
                      value: _vm.loadding,
                      expression: "loadding"
                    }
                  ],
                  ref: "grid",
                  class: [
                    _vm.renderData.length === 0 && !_vm.$attrs.border
                      ? "is-hidden-border-bottom"
                      : ""
                  ],
                  attrs: {
                    data: _vm.renderData,
                    "row-key": _vm.rowKey,
                    prop: _vm.prop,
                    border: _vm.border
                  },
                  on: {
                    "selection-change": _vm.handleSelectItem,
                    "sort-change": _vm.handleSortChange
                  }
                },
                "el-table",
                _vm.attrs,
                false
              ),
              _vm.$listeners
            ),
            [
              _vm._t("default"),
              _c("template", { slot: "empty" }, [_vm._t("empty")], 2),
              _vm._t("append")
            ],
            2
          )
        ],
        1
      ),
      _vm.pagination && _vm.renderData.length > 0
        ? [
            _c(
              "el-pagination",
              _vm._b(
                {
                  staticClass: "dg-table__pagination",
                  on: {
                    "size-change": _vm.handleSizeChange,
                    "current-change": _vm.handleCurrentChange,
                    "prev-click": _vm.handlePrevClick,
                    "next-click": _vm.handleNextClick
                  }
                },
                "el-pagination",
                _vm.paginationOptions,
                false
              )
            )
          ]
        : [_vm._t("pagination")]
    ],
    2
  )
}
var mainvue_type_template_id_dbfcea2e_staticRenderFns = []
mainvue_type_template_id_dbfcea2e_render._withStripped = true


// CONCATENATED MODULE: ./packages/table/src/main.vue?vue&type=template&id=dbfcea2e&

// EXTERNAL MODULE: external "sortablejs"
var external_sortablejs_ = __webpack_require__(14);
var external_sortablejs_default = /*#__PURE__*/__webpack_require__.n(external_sortablejs_);

// CONCATENATED MODULE: ./packages/table/src/autoPageSize.js
/**
 * 此处填写文件描述
 * @Author: yangjy
 * @Date: 2019-06-06
 * @Project ui-component-v4
 */



/* harmony default export */ var autoPageSize = (function (strats, count) {
    var pageTotal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;

    var pageSize = 10;
    if (strats && external_lodash_default.a.isFunction(strats)) {
        var height = strats(document.body.clientHeight || window.innerHeight, count);
        if (height <= 0) {
            return [10, 15, 20];
        }
        pageSize = Math.floor(height / 46 - 2);
        pageSize = pageSize || 1;
    }

    // let pageTotal = Math.ceil(count / pageSize);
    var pageSizes = [];
    // 遍历页数表
    for (var i = 1; i <= pageTotal; i++) {
        pageSizes.push(pageSize * i);
    }
    return pageSizes;
});
// CONCATENATED MODULE: ./src/dg-utils/children.refs.js
function getChildrenRefs(component, ref) {
  var method = {};
  for (var key in component.methods) {
    method[key] = new Function("return this.$refs." + ref + "." + key + ".apply(this,arguments)");
  }
  return method;
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/main.vue?vue&type=script&lang=js&
var mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


// info views by https://github.com/SortableJS/Sortable







var TableRefs = getChildrenRefs(external_element_ui_["Table"], 'grid');

/* harmony default export */ var table_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTable',

    provide: function provide() {
        return {
            overflow: this.overflow,
            paginationOptions: this.paginationOptions
        };
    },


    props: {
        // 透传属性
        // ElTable.ElTableBody 使用<DgTableSelect :prop="defaultProp" />
        prop: Object,
        // 默认数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 分页类型 client | server
        pagingType: {
            type: String,
            default: 'server',
            validator: function validator(val) {
                return ['client', 'server'].indexOf(val) !== -1;
            }
        },
        // 是否可拖拽
        draggable: {
            type: Boolean,
            default: false
        },
        // 拖拽配置项
        dragProps: {
            type: Object,
            default: function _default() {}
        },
        // 是否开启分页
        pagination: {
            type: Boolean,
            default: true
        },
        // 分页配置参数
        paginationProps: {
            type: Object,
            default: function _default() {}
        },
        // 总条数
        paginationTotal: {
            type: Number,
            default: 10
        },
        // 开启是否自动计算分页条数
        autoPage: {
            type: [String, Function]
        },
        border: {
            type: Boolean,
            default: false
        },
        // 行 ID 名称
        rowKey: {
            type: [Function, String],
            default: 'id'
        },
        loading: {
            type: Boolean,
            default: false
        },
        overflow: {
            // tooltip、wrap、origin
            type: String,
            default: 'tooltip'
        },
        // 复选框默认选中值
        selectDefault: {
            type: [Number, String, Array]
        },
        // 若 selectDefault为String时的分隔符
        seq: {
            type: String,
            default: ','
        },
        tableDraggable: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            orignData: [],
            sortColumn: {},
            loadding: this.loading,
            // 默认数据
            dataSource: this.data,
            dataClient: this.data,
            // 拖拽对象
            sortable: null,
            // 分页参数配置
            paginationOptions: {
                currentPage: 1,
                pageSizes: [10, 20, 30],
                pageSize: 10,
                layout: 'total, sizes, prev, pager, next, jumper',
                total: this.paginationTotal
            },
            // 当前分页选中值
            currentSelected: []
        };
    },


    computed: {
        renderData: function renderData() {
            if (this.pagination == true && this.pagingType === 'client') {
                var column = this.sortColumn;
                var _paginationOptions = this.paginationOptions,
                    pageSize = _paginationOptions.pageSize,
                    currentPage = _paginationOptions.currentPage;

                var start = (currentPage - 1) * pageSize;

                var tmpData = [];
                if (!column.order) {
                    tmpData = this.dataClient;
                } else if (column.order === 'ascending') {
                    tmpData = external_lodash_default.a.sortBy(this.dataClient, function (item) {
                        return item[column.property];
                    });
                } else if (column.order === 'descending') {
                    tmpData = external_lodash_default.a.sortBy(this.dataClient, function (item) {
                        return -item[column.property];
                    });
                }

                this.dataSource = tmpData.slice(start, start + pageSize);
            } else if (this.pagination == false && this.pagingType === 'client') {
                this.dataSource = this.dataClient;
            }
            return this.dataSource;
        },


        // 拖拽参数配置
        dragOptions: function dragOptions() {
            return merge({
                ghostClass: 'dg-table__placeholder',
                dragClass: 'dg-table__placeholder',
                chosenClass: 'dg-table__placeholder',
                setData: this.handleDragSetData,
                onEnd: this.handleDragOnEnd
            }, this.dragProps);
        },
        attrs: function attrs() {
            return mainvue_type_script_lang_js_extends({}, shear_getCmpProps(external_element_ui_["Table"], this), { draggable: this.tableDraggable });
        }
    },

    watch: {
        selectDefault: {
            deep: true,
            immediate: true,
            handler: function handler() {
                var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                var seq = this.seq;

                var check = val;
                if (external_lodash_default.a.isString(val)) {
                    // isString
                    check = val.split(seq);
                } else if (external_lodash_default.a.isNumber(val)) {
                    // isNumber
                    check = [val];
                }
                this.currentSelected = external_lodash_default.a.uniq(check);
            }
        },
        // 监听数据
        data: {
            deep: true,
            immediate: true,
            handler: function handler(data, oldData) {
                if (this.pagingType == 'client') {
                    this.orignData = data;
                    this.dataClient = data;
                    var totalPage = Math.ceil(data.length / this.paginationOptions.pageSize);
                    if (totalPage < this.paginationOptions.currentPage) {
                        this.paginationOptions.currentPage = totalPage || 1;
                    }
                    this.paginationOptions.total = data.length;
                } else {
                    this.dataSource = data;
                }
                // 客户端数据且没有分页
                if (!this.pagination && this.pagingType === 'client') {
                    this.dataSource = this.dataClient;
                }
            }
        },
        paginationTotal: {
            handler: function handler(val) {
                this.paginationOptions.total = val;
            }
        },
        paginationProps: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                var total = this.paginationOptions.total;
                this.pagingType === 'client' && (total = this.dataClient.length);
                if (this.autoPage) {
                    var _pageSizes = autoPageSize(this.autoPage, total);
                    this.paginationOptions = merge({
                        currentPage: 1,
                        pageSizes: _pageSizes,
                        pageSize: _pageSizes[0],
                        layout: 'total, sizes, prev, pager, next, jumper',
                        total: total
                    });
                } else {
                    this.paginationOptions = merge({
                        currentPage: 1,
                        pageSizes: [10, 20, 30],
                        pageSize: 10,
                        layout: 'total, sizes, prev, pager, next, jumper',
                        total: total
                    }, val);
                }
                if (!this.paginationOptions.pageSizes.includes(this.paginationOptions.pageSize)) {
                    this.paginationOptions.pageSizes.unshift(this.paginationOptions.pageSize);
                }
            }
        },
        // 监听服务端数据
        dataSource: {
            immediate: true,
            deep: true,
            handler: function handler(val) {
                // 选中
                this.handleDefCheck();
                this.$emit('change-data', val);
            }
        }
    },

    components: {
        ElTable: external_element_ui_["Table"],
        ElPagination: external_element_ui_["Pagination"]
    },

    methods: mainvue_type_script_lang_js_extends({
        changeLoading: function changeLoading() {
            this.loadding = !this.loadding;
        },


        /**
         * 拖拽操作
         *
         */
        handleSortTable: function handleSortTable() {
            var el = this.$refs.grid.$el.querySelectorAll('.el-table__body-wrapper > table > tbody')[0];
            this.sortable = external_sortablejs_default.a.create(el, this.dragOptions);
        },


        /**
         * 拖拽配置参数
         * @param dataTransfer
         */
        handleDragSetData: function handleDragSetData(dataTransfer) {
            dataTransfer.setData('Text', '');
        },


        /**
         * 拖拽显示排序
         * @param evt
         */
        handleDragOnEnd: function handleDragOnEnd(evt) {
            var data = this.pagingType === 'client' ? this.dataClient : this.dataSource;
            var targetRow = data.splice(evt.oldIndex, 1)[0];
            data.splice(evt.newIndex, 0, targetRow);

            // 拖拽回传数据
            this.$emit('drag-end', data);
        },


        /**
         * 页数值改变方法
         *
         * @param evt
         */
        handleSizeChange: function handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.paginationOptions.currentPage = 1;
            this.$emit('change-size', val);
        },


        /**
         * 当前页改变方法
         *
         * @param evt
         */
        handleCurrentChange: function handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.$emit('change-current', val);
        },


        /**
         * 排序改变方法
         */
        handleSortChange: function handleSortChange(_ref) {
            var column = _ref.column,
                prop = _ref.prop,
                order = _ref.order;

            column && (this.sortColumn = column);
            // this.$emit('sort-change', { column, prop, order });
            this._handleSortChange({ column: column, prop: prop, order: order });
        },
        _handleSortChange: function _handleSortChange() {},


        /**
         * 点击上一页
         *
         * @param evt
         */
        handlePrevClick: function handlePrevClick(val) {
            this.$emit('click-prev', val);
        },


        /**
         * 点击下一页
         *
         * @param evt
         */
        handleNextClick: function handleNextClick(val) {
            this.$emit('click-next', val);
        },


        // /**
        //  * 选择选项值
        //  */
        // handleSelectItem(val) {
        //     // 当前页选中值
        //     this.currentSelected = val;
        // },
        /* type="selection" start */
        // 复选框操作
        handleSelectItem: function handleSelectItem(val) {
            var currentSelected = this.currentSelected,
                dataSource = this.dataSource,
                rowKey = this.rowKey;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';
            var check = val.map(function (item) {
                return item[key];
            });
            // 当前页面 key 集合
            var dataId = dataSource.map(function (item) {
                return item[key];
            });
            // 展示页面中不存在，但却选中的 key
            var beforeSelect = currentSelected.filter(function (item) {
                return !external_lodash_default.a.includes(dataId, item);
            }) || [];
            // 当前页选中值
            this.currentSelected = external_lodash_default.a.uniq([].concat(check, beforeSelect));
        },


        // 动态变化多次需要用时间获取
        getCheck: function getCheck() {
            return this.currentSelected;
        },


        // 勾选值(当前显示页、其他显示页)
        setCheck: function setCheck(rows) {
            var _this = this;

            var rowKey = this.rowKey,
                dataSource = this.dataSource,
                currentSelected = this.currentSelected;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';
            // 去除已经选中的，若没有此代码选中状态会被取消
            rows = external_lodash_default.a.difference(rows, currentSelected);
            // 当前页面需要勾选的
            var currentCheck = dataSource.filter(function (item) {
                return external_lodash_default.a.includes(rows, item[key]);
            });
            if (currentCheck && currentCheck.length) {
                currentCheck.forEach(function (row) {
                    return _this.$refs.grid.toggleRowSelection(row, true);
                });
            }
            // 其他显示页
            var otherCheck = external_lodash_default.a.difference(rows, currentCheck);
            this.currentSelected = external_lodash_default.a.uniq([].concat(currentSelected, otherCheck));
        },


        // 清空所有选中
        clearAll: function clearAll() {
            this.$refs.grid.clearSelection();
            this.currentSelected = [];
        },


        // 默认选中
        handleDefCheck: function handleDefCheck() {
            var _this2 = this;

            if (this.selectDefault === void 0) {
                return;
            }

            var currentSelected = this.currentSelected,
                rowKey = this.rowKey,
                dataSource = this.dataSource,
                typeSelect = this.typeSelect;

            var key = external_lodash_default.a.isString(rowKey) ? rowKey : 'id';

            // 兼容 reserve-selection 属性
            if (typeSelect) {
                this.$nextTick(function () {
                    var dataClient = _this2.dataClient;

                    var client = dataClient.filter(function (item) {
                        return external_lodash_default.a.includes(currentSelected, item[key]);
                    });
                    client.forEach(function (row) {
                        return _this2.$refs.grid.toggleRowSelection(row, true);
                    });
                });
                return;
            }

            if (currentSelected && currentSelected.length) {
                // IF _.isFunction => 'id'
                this.$nextTick(function () {
                    var currentSelect = dataSource.filter(function (item) {
                        return external_lodash_default.a.includes(currentSelected, item[key]);
                    });
                    currentSelect.forEach(function (row) {
                        return _this2.$refs.grid.toggleRowSelection(row, true);
                    });
                });
            }
        }
    }, TableRefs),

    created: function created() {
        var _this3 = this;

        // 初始化执行
        if (this.draggable) {
            this.$nextTick(function () {
                // 拖拽操作
                _this3.handleSortTable();
            });
        }

        // 分页配置
        if (!this.pagination) {
            return;
        }
    }
});
// CONCATENATED MODULE: ./packages/table/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_table_src_mainvue_type_script_lang_js_ = (table_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table/src/main.vue





/* normalize component */

var table_src_main_component = normalizeComponent(
  packages_table_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_dbfcea2e_render,
  mainvue_type_template_id_dbfcea2e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var table_src_main_api; }
table_src_main_component.options.__file = "packages/table/src/main.vue"
/* harmony default export */ var table_src_main = (table_src_main_component.exports);
// CONCATENATED MODULE: ./packages/table/index.js


/* istanbul ignore next */
table_src_main.install = function (Vue) {
    Vue.component(table_src_main.name, table_src_main);
};

/* harmony default export */ var table = (table_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/main.vue?vue&type=template&id=4e76510a&
var mainvue_type_template_id_4e76510a_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm.isOriginalType
    ? _c(
        "el-table-column",
        _vm._b(
          {
            attrs: { index: _vm.indexMethod },
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label) + " ")],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                "expand" == _vm.attrs.type
                  ? {
                      key: "default",
                      fn: function(scope) {
                        return [_vm._t("default", null, null, scope)]
                      }
                    }
                  : null
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        )
      )
    : _c(
        "el-table-column",
        _vm._b(
          {
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label) + " ")],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                !_vm.$slots.default
                  ? {
                      key: "default",
                      fn: function(scope) {
                        return [
                          _c(
                            _vm.cmpType,
                            _vm._g(
                              _vm._b(
                                {
                                  tag: "component",
                                  attrs: {
                                    "table-column-overflow":
                                      _vm.tableColumnOverflow || _vm.overflow,
                                    value: _vm.formatValue(scope)
                                  },
                                  on: {
                                    input: function(val) {
                                      return _vm.handleCmpInput(val, scope)
                                    }
                                  }
                                },
                                "component",
                                _vm.getCmpProps(scope),
                                false
                              ),
                              _vm.getCmpEvents(scope)
                            ),
                            [
                              _vm._l(_vm.$scopedSlots, function(val, key) {
                                return [
                                  key != "header"
                                    ? _vm._t(
                                        key,
                                        null,
                                        { formatValue: _vm.formatValue(scope) },
                                        scope
                                      )
                                    : _vm._e()
                                ]
                              })
                            ],
                            2
                          )
                        ]
                      }
                    }
                  : null
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        ),
        [_vm.$slots.default ? [_vm._t("default")] : _vm._e()],
        2
      )
}
var mainvue_type_template_id_4e76510a_staticRenderFns = []
mainvue_type_template_id_4e76510a_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-column/src/main.vue?vue&type=template&id=4e76510a&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/default-tpl.vue?vue&type=template&id=1b2c0420&
var default_tplvue_type_template_id_1b2c0420_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "span",
    { style: { "white-space": _vm.isWrap ? "normal" : "nowrap" } },
    [_vm._t("default", [_vm._v("\n    " + _vm._s(_vm.value) + "\n  ")])],
    2
  )
}
var default_tplvue_type_template_id_1b2c0420_staticRenderFns = []
default_tplvue_type_template_id_1b2c0420_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-column/src/template/default-tpl.vue?vue&type=template&id=1b2c0420&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/default-tpl.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var default_tplvue_type_script_lang_js_ = ({
    name: 'DgDefaultTpl',

    props: {
        // 数据值
        value: [String, Number, Boolean],
        scope: Object,
        tableColumnOverflow: String
    },

    computed: {
        // 是否换行:原来方式换行，悬浮换行，提示不换行
        isWrap: function isWrap() {
            var isHover = this.scope.$index == this.scope.store.states.hoverRow;
            var overflow = this.tableColumnOverflow;
            return overflow == 'origin' || overflow == 'wrap' && isHover;
        }
    }
});
// CONCATENATED MODULE: ./packages/table-column/src/template/default-tpl.vue?vue&type=script&lang=js&
 /* harmony default export */ var template_default_tplvue_type_script_lang_js_ = (default_tplvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-column/src/template/default-tpl.vue





/* normalize component */

var default_tpl_component = normalizeComponent(
  template_default_tplvue_type_script_lang_js_,
  default_tplvue_type_template_id_1b2c0420_render,
  default_tplvue_type_template_id_1b2c0420_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var default_tpl_api; }
default_tpl_component.options.__file = "packages/table-column/src/template/default-tpl.vue"
/* harmony default export */ var default_tpl = (default_tpl_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/type-tpl.vue?vue&type=template&id=692c915e&
var type_tplvue_type_template_id_692c915e_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm.sourceData.name
    ? _c(
        "div",
        { staticClass: "dg-tpl__type" },
        [
          _c(
            "dg-tag",
            {
              attrs: {
                "custom-color": "",
                effect: "light",
                color: _vm.sourceData.color,
                size: "mini"
              }
            },
            [_vm._v(_vm._s(_vm.sourceData.name))]
          )
        ],
        1
      )
    : _vm._e()
}
var type_tplvue_type_template_id_692c915e_staticRenderFns = []
type_tplvue_type_template_id_692c915e_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-column/src/template/type-tpl.vue?vue&type=template&id=692c915e&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/type-tpl.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var type_tplvue_type_script_lang_js_ = ({
    name: 'DgTypeTpl',

    props: {
        // 模板配置
        value: [String, Number, Boolean],
        // 返回函数
        fn: {
            type: [String, Number, Boolean, Object, Function],
            default: function _default(val) {
                return val;
            }
        },
        // 作用域
        scope: Object,
        // 显示配置
        options: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 类别和颜色映射
        map: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        // 颜色范围
        range: {
            type: Array,
            default: function _default() {
                return ['#ff6d4a', '#ffa32c', '#4877e8', '#67c23a'];
            }
        }
    },

    created: function created() {
        // 合并map和options
        var map = this.map;
        var options = this.options;
        options.forEach(function (item) {
            map[item.name] = item.color;
        });

        // 存储数据在表格全局store上
        var scope = this.scope;
        var store = scope.store;
        var id = scope.column.id;
        if (!store.typeColor) {
            store.typeColor = {};
            store.typeColor[id] = external_lodash_default.a.clone(map);
        } else if (!store.typeColor[id]) {
            store.typeColor[id] = external_lodash_default.a.clone(map);
        }
    },


    computed: {
        // 处理数据
        sourceData: function sourceData() {
            var typeColor = this.scope.store.typeColor[this.scope.column.id];
            var colorType = this.getColorType(typeColor);
            var name = this.value;
            if (external_lodash_default.a.isFunction(this.fn)) {
                this.fn(this.scope);
            } else if (this.fn) {
                name = this.fn;
            }

            var color = typeColor[name];
            if (!color) {
                // 颜色不存在，先从范围取，不存在随机生成
                var newColor = this.getNewColorFromRange(colorType);
                if (!newColor) {
                    newColor = this.getRandomColor();
                    while (colorType[newColor]) {
                        newColor = this.getRandomColor();
                    }
                }
                color = newColor;
            }
            typeColor[name] = color;
            return { name: name, color: color };
        },
        styleColour: function styleColour() {
            return {
                border: '1px solid ' + this.sourceData.color,
                color: this.sourceData.color
            };
        }
    },

    methods: {
        /**
         * 获取随机颜色
         * @returns {string}
         */
        getRandomColor: function getRandomColor() {
            return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);
        },

        /**
         * 获取颜色和类别的对象，如{"#33333":"类别1"}
         * @param typeColor
         */
        getColorType: function getColorType(typeColor) {
            var colorTypeObj = {};
            external_lodash_default.a.forOwn(typeColor, function (val, key) {
                colorTypeObj[val] = key;
            });
            return colorTypeObj;
        },
        getNewColorFromRange: function getNewColorFromRange(colorType) {
            var newColor = '';
            this.range.forEach(function (color) {
                if (!colorType[color]) {
                    newColor = color;
                }
            });
            return newColor;
        }
    }
});
// CONCATENATED MODULE: ./packages/table-column/src/template/type-tpl.vue?vue&type=script&lang=js&
 /* harmony default export */ var template_type_tplvue_type_script_lang_js_ = (type_tplvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-column/src/template/type-tpl.vue





/* normalize component */

var type_tpl_component = normalizeComponent(
  template_type_tplvue_type_script_lang_js_,
  type_tplvue_type_template_id_692c915e_render,
  type_tplvue_type_template_id_692c915e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var type_tpl_api; }
type_tpl_component.options.__file = "packages/table-column/src/template/type-tpl.vue"
/* harmony default export */ var type_tpl = (type_tpl_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/status-tpl.vue?vue&type=template&id=5b037909&
var status_tplvue_type_template_id_5b037909_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm.sourceData[_vm.labelName]
    ? _c("div", { staticClass: "dg-tpl__status" }, [
        _c("p", { staticClass: "dg-tpl__status--name" }, [
          _c("i", {
            staticClass: "dg-tpl__status--status",
            class: _vm.sourceData.icon,
            style: _vm.styleColour
          }),
          _c("span", { staticClass: "dg-tpl__status--label" }, [
            _vm._v(_vm._s(_vm.sourceData[_vm.labelName]))
          ])
        ])
      ])
    : _vm._e()
}
var status_tplvue_type_template_id_5b037909_staticRenderFns = []
status_tplvue_type_template_id_5b037909_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-column/src/template/status-tpl.vue?vue&type=template&id=5b037909&

// EXTERNAL MODULE: external "xe-utils"
var external_xe_utils_ = __webpack_require__(9);
var external_xe_utils_default = /*#__PURE__*/__webpack_require__.n(external_xe_utils_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/status-tpl.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var status_tplvue_type_script_lang_js_ = ({
    name: 'DgStatusTpl',

    props: {
        // 模板配置
        value: [String, Number, Boolean],
        fn: {
            type: [String, Number, Boolean, Object, Function],
            default: function _default(val) {
                return val;
            }
        },
        scope: Object,
        // 显示配置
        options: {
            type: Array,
            default: function _default() {
                return [{
                    status: '1',
                    icon: 'el-icon-success',
                    color: '#67c23a',
                    name: '已签收'
                }, {
                    status: '2',
                    icon: 'el-icon-warning',
                    color: '#f04134',
                    name: '未签收'
                }, {
                    status: '0',
                    icon: 'el-icon-info',
                    color: '#ffa32c',
                    name: '待签收'
                }];
            }
        },
        valueName: {
            type: String,
            default: 'status'
        },
        labelName: {
            type: String,
            default: 'name'
        }
    },

    computed: {
        // 处理数据
        sourceData: function sourceData() {
            var valueName = this.valueName;

            var _status = this.value;
            var _data = {};
            if (external_xe_utils_default.a.isFunction(this.fn)) {
                _status = this.fn(this.scope);
            } else if (this.fn) {
                _status = this.fn;
            }

            if (external_xe_utils_default.a.isObject(_status)) {
                return _status;
            }

            this.options.forEach(function (item) {
                if (item[valueName] === _status) {
                    _data = item;
                }
            });

            return _data;
        },
        styleColour: function styleColour() {
            return 'color: ' + this.sourceData.color + ';';
        }
    }
});
// CONCATENATED MODULE: ./packages/table-column/src/template/status-tpl.vue?vue&type=script&lang=js&
 /* harmony default export */ var template_status_tplvue_type_script_lang_js_ = (status_tplvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-column/src/template/status-tpl.vue





/* normalize component */

var status_tpl_component = normalizeComponent(
  template_status_tplvue_type_script_lang_js_,
  status_tplvue_type_template_id_5b037909_render,
  status_tplvue_type_template_id_5b037909_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var status_tpl_api; }
status_tpl_component.options.__file = "packages/table-column/src/template/status-tpl.vue"
/* harmony default export */ var status_tpl = (status_tpl_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/operation-tpl.vue?vue&type=template&id=6cb32446&
var operation_tplvue_type_template_id_6cb32446_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-tpl__operation" },
    _vm._l(_vm.buttonAllList, function(item) {
      return _c(
        "dg-button",
        {
          key: item.type,
          staticClass: "dg-tpl__operation--btn",
          attrs: { type: "text", size: "small" },
          on: {
            click: function($event) {
              $event.stopPropagation()
              return (function(e) {
                return item.call(_vm.scope, e)
              })($event)
            }
          }
        },
        [_vm._v("\n        " + _vm._s(item.name) + "\n    ")]
      )
    }),
    1
  )
}
var operation_tplvue_type_template_id_6cb32446_staticRenderFns = []
operation_tplvue_type_template_id_6cb32446_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-column/src/template/operation-tpl.vue?vue&type=template&id=6cb32446&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/template/operation-tpl.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var operation_tplvue_type_script_lang_js_ = ({
    name: 'DgOperationTpl',

    props: {
        scope: Object,
        buttons: {
            type: [Object, Array],
            default: function _default() {
                return [];
            }
        }
    },
    computed: {
        buttonAllList: function buttonAllList() {
            var buttonList = [];
            if (!external_lodash_default.a.isArray(this.buttons)) {
                external_lodash_default.a.forOwn(this.buttons, function (val, key) {
                    buttonList.push({ name: key, call: val });
                });
                return buttonList;
            }

            this.buttons.forEach(function (item) {
                if (item.name && item.call) {
                    buttonList.push({ name: item.name, call: item.call, type: item.type });
                } else {
                    for (var key in item) {
                        buttonList.push({ name: key, call: item[key] });
                    }
                }
            });
            return buttonList;
        }
    }
});
// CONCATENATED MODULE: ./packages/table-column/src/template/operation-tpl.vue?vue&type=script&lang=js&
 /* harmony default export */ var template_operation_tplvue_type_script_lang_js_ = (operation_tplvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-column/src/template/operation-tpl.vue





/* normalize component */

var operation_tpl_component = normalizeComponent(
  template_operation_tplvue_type_script_lang_js_,
  operation_tplvue_type_template_id_6cb32446_render,
  operation_tplvue_type_template_id_6cb32446_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var operation_tpl_api; }
operation_tpl_component.options.__file = "packages/table-column/src/template/operation-tpl.vue"
/* harmony default export */ var operation_tpl = (operation_tpl_component.exports);
// CONCATENATED MODULE: ./packages/table-column/src/template/index.js





/* harmony default export */ var src_template = ({
    components: {
        DefaultTpl: default_tpl,
        StatusTpl: status_tpl,
        TypeTpl: type_tpl,
        OperationTpl: operation_tpl
    }
});
// EXTERNAL MODULE: external "element-ui/lib/utils/util"
var util_ = __webpack_require__(15);

// CONCATENATED MODULE: ./packages/table-column/src/config.js


var cellStarts = {
  default: {
    order: ''
  },
  selection: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: '',
    className: 'el-table-column--selection'
  },
  expand: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ''
  },
  index: {
    width: 48,
    minWidth: 48,
    realWidth: 48,
    order: ''
  }
};

// 这些选项不应该被覆盖
var cellForced = {
  selection: {
    renderHeader: function renderHeader(h, _ref) {
      var store = _ref.store;

      return h('el-checkbox', {
        attrs: {
          disabled: store.states.data && store.states.data.length === 0,
          indeterminate: store.states.selection.length > 0 && !this.isAllSelected,

          value: this.isAllSelected },
        nativeOn: {
          'click': this.toggleAllSelection
        }
      });
    },
    renderCell: function renderCell(h, _ref2) {
      var row = _ref2.row,
          column = _ref2.column,
          store = _ref2.store,
          $index = _ref2.$index;

      return h('el-checkbox', {
        nativeOn: {
          'click': function click(event) {
            return event.stopPropagation();
          }
        },
        attrs: {
          value: store.isSelected(row),
          disabled: column.selectable ? !column.selectable.call(null, row, $index) : false
        },
        on: {
          'input': function input() {
            store.commit('rowSelectedChanged', row);
          }
        }
      });
    },
    sortable: false,
    resizable: false
  },
  index: {
    renderHeader: function renderHeader(h, _ref3) {
      var column = _ref3.column;

      return column.label || '#';
    },
    renderCell: function renderCell(h, _ref4) {
      var $index = _ref4.$index,
          column = _ref4.column;

      var i = $index + 1;
      var index = column.index;

      if (typeof index === 'number') {
        i = $index + index;
      } else if (typeof index === 'function') {
        i = index($index);
      }

      return h('div', [i]);
    },
    sortable: false
  },
  expand: {
    renderHeader: function renderHeader(h, _ref5) {
      var column = _ref5.column;

      return column.label || '';
    },
    renderCell: function renderCell(h, _ref6) {
      var row = _ref6.row,
          store = _ref6.store;

      var classes = ['el-table__expand-icon'];
      if (store.states.expandRows.indexOf(row) > -1) {
        classes.push('el-table__expand-icon--expanded');
      }
      var callback = function callback(e) {
        e.stopPropagation();
        store.toggleRowExpansion(row);
      };
      return h(
        'div',
        { 'class': classes,
          on: {
            'click': callback
          }
        },
        [h('i', { 'class': 'el-icon el-icon-arrow-right' })]
      );
    },
    sortable: false,
    resizable: false,
    className: 'el-table__expand-column'
  }
};

function defaultRenderCell(h, _ref7) {
  var row = _ref7.row,
      column = _ref7.column,
      $index = _ref7.$index;

  var property = column.property;
  var value = property && Object(util_["getPropByPath"])(row, property).v;
  if (column && column.formatter) {
    return column.formatter(row, column, value, $index);
  }
  return value;
}

function treeCellPrefix(h, _ref8) {
  var row = _ref8.row,
      treeNode = _ref8.treeNode,
      store = _ref8.store;

  if (!treeNode) return null;
  var ele = [];
  var callback = function callback(e) {
    e.stopPropagation();
    store.loadOrToggle(row);
  };
  if (treeNode.indent) {
    ele.push(h('span', { 'class': 'el-table__indent', style: { 'padding-left': treeNode.indent + 'px' } }));
  }
  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {
    var expandClasses = ['el-table__expand-icon', treeNode.expanded ? 'el-table__expand-icon--expanded' : ''];
    var iconClasses = ['el-icon-arrow-right'];
    if (treeNode.loading) {
      iconClasses = ['el-icon-loading'];
    }
    ele.push(h(
      'div',
      { 'class': expandClasses,
        on: {
          'click': callback
        }
      },
      [h('i', { 'class': iconClasses })]
    ));
  } else {
    ele.push(h('span', { 'class': 'el-table__placeholder' }));
  }
  return ele;
}
// CONCATENATED MODULE: ./packages/table-column/src/column.js



/* harmony default export */ var src_column = ({
  name: external_element_ui_["TableColumn"].name,
  mixins: [external_element_ui_["TableColumn"]],
  methods: {
    setColumnRenders: function setColumnRenders(column) {
      var _this = this;

      var h = this.$createElement;

      // const specialTypes = Object.keys(cellForced);
      // renderHeader 属性不推荐使用。
      if (this.renderHeader) {
        console.warn('[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.');
        // } else if (specialTypes.indexOf(column.type) === -1) {
      } else if (column.type !== 'selection') {
        column.renderHeader = function (h, scope) {
          var renderHeader = _this.$scopedSlots.header;
          return renderHeader ? renderHeader(scope) : column.label;
        };
      }

      var originRenderCell = column.renderCell;
      // TODO: 这里的实现调整
      if (column.type === 'expand') {
        // 对于展开行，renderCell 不允许配置的。在上一步中已经设置过，这里需要简单封装一下。
        column.renderCell = function (h, data) {
          return h(
            'div',
            { 'class': 'cell' },
            [originRenderCell(h, data)]
          );
        };
        this.owner.renderExpanded = function (h, data) {
          return _this.$scopedSlots.default ? _this.$scopedSlots.default(data) : _this.$slots.default;
        };
      } else {
        originRenderCell = originRenderCell || defaultRenderCell;
        // 对 renderCell 进行包装
        column.renderCell = function (h, data) {
          var children = null;
          if (_this.$scopedSlots.default) {
            children = _this.$scopedSlots.default(data);
          } else {
            children = originRenderCell(h, data);
          }
          var prefix = treeCellPrefix(h, data);
          var props = {
            class: 'cell',
            style: {}
          };
          if (column.showOverflowTooltip) {
            props.class += ' el-tooltip';
            props.style = { width: (data.column.realWidth || data.column.width) - 1 + 'px' };
          }
          return h(
            'div',
            props,
            [prefix, children]
          );
        };
      }
      return column;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-column/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var table_column_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTableColumn',

    mixins: [src_template],

    props: {
        // 组件属性
        cmpProps: [Object, Array],
        // 组件事件
        cmpEvents: Object,
        tableColumnOverflow: String,
        // 字典数据
        dictData: {
            type: Array,
            default: function _default() {
                return [];
            }
        }
    },

    data: function data() {
        // 表码翻译数据对象
        var codeObj = {};
        external_lodash_default.a.forEach(this.dictData, function (item) {
            codeObj[item.value] = item.label;
        });
        return {
            codeObj: codeObj
        };
    },


    watch: {
        // 监控字典数据变化，相应this.codeObj变化
        dictData: function dictData(data) {
            var _this = this;

            external_lodash_default.a.forEach(data, function (item) {
                _this.codeObj[item.value] = item.label;
            });
        }
    },

    computed: {
        // 动态组件类型转换，主要是require和import引入组件
        cmpType: function cmpType() {
            var type = getCmpType(this.$attrs.type);
            return type ? type : 'default-tpl';
        },

        // el-table-column组件的属性
        attrs: function attrs() {
            var isTooltip = this.tableColumnOverflow || this.overflow;
            var filterObj = {
                type: function type(p, _type) {
                    return external_lodash_default.a.isString(_type) ? _type : undefined;
                },
                showOverflowTooltip: function showOverflowTooltip(p, val) {
                    return isTooltip === 'tooltip' ? true : val;
                }
            };
            var result = shear_getCmpProps(src_column, this, filterObj);
            this._getCmpPropsCallback(result);
            return result;
        },

        // 是否表头插槽
        isHeaderSlot: function isHeaderSlot() {
            return this.$slots['header'] || this.$scopedSlots['header'];
        },

        // 原来的类型"selection", "index", "expand"
        isOriginalType: function isOriginalType() {
            return external_lodash_default.a.isString(this.attrs.type) && external_lodash_default.a.includes(['selection', 'index', 'expand'], this.attrs.type);
        }
    },

    inject: ['overflow', 'paginationOptions'],

    components: {
        ElTableColumn: src_column
    },

    methods: {
        _getCmpPropsCallback: function _getCmpPropsCallback() {},

        /**
         * 获取组件绑定对象
         * @param scope
         * @param cmpProps
         */
        getCmpProps: function getCmpProps(scope, reg) {
            var cmpProps = external_lodash_default.a.assign({ scope: scope }, this.cmpProps, getCmpPropsFromAttrs(this, /^cmp-props-/));
            if (reg) {
                cmpProps = external_lodash_default.a.assign(cmpProps, getCmpPropsFromAttrs(this, reg));
            }

            // 如果是函数则传入scope，返回属性值
            var bindProps = external_lodash_default.a.mapValues(cmpProps, function (val) {
                return external_lodash_default.a.isFunction(val) ? val.apply([null], [scope]) : val;
            });
            this._getCmpProps(bindProps);
            return bindProps;
        },
        _getCmpProps: function _getCmpProps() {},

        /**
         * 获取事件对象
         * @param scope
         * @param cmpEvents
         * @returns {object}
         */
        getCmpEvents: function getCmpEvents(scope, reg) {
            var cmpEventsOther = getCmpPropsFromAttrs(this, reg || /^cmp-events-/);
            var cmpEvents = external_lodash_default.a.assign({}, this.cmpEvents, cmpEventsOther);
            // 增加scope参数到末尾
            var bindEvents = external_lodash_default.a.mapValues(cmpEvents, function (cb) {
                return external_lodash_default.a.bind(cb, null, [scope]);
            });
            return bindEvents;
        },

        /**
         * 值格式化
         * @param scope
         * @returns {any}
         */
        formatValue: function formatValue(scope) {
            var _this2 = this;

            var value = external_lodash_default.a.get(scope.row, scope.column.property, '');
            if (this.attrs.formatter) {
                value = this.attrs.formatter(scope.row, scope.column, value, scope.$index);
            } else if (value != null && value !== "" && !external_lodash_default.a.isEmpty(this.codeObj)) {
                // 表码翻译
                var valueArr = [];
                var val = String(value);
                val.split(',').forEach(function (item) {
                    valueArr.push(_this2.codeObj[item] || item);
                });
                value = valueArr.join(',');
            }
            value = this._formatValue(value, scope);
            return value;
        },
        _formatValue: function _formatValue(value) {
            return value;
        },

        /**
         * 获取真实值
         * @param scope
         * @returns {String}
         */
        getValue: function getValue(scope) {
            var value = external_lodash_default.a.get(scope.row, scope.column.property, '');
            return value;
        },

        /**
         * 获取input事件处理函数
         * @param scope
         * @returns {Function}
         */
        handleCmpInput: function handleCmpInput(val, scope) {
            scope.row[scope.column.property] = val;
        },

        /**
         * 默认索引方法重写
         *
         * @param index [Number] 默认索引值
         * @return 显示的索引值
         */
        indexMethod: function indexMethod(index) {
            var _paginationOptions = this.paginationOptions,
                currentPage = _paginationOptions.currentPage,
                pageSize = _paginationOptions.pageSize;

            // 支持自定义索引

            if (this.$attrs.index) {
                return this.$attrs.index(index);
            }

            if (pageSize && currentPage) {
                return index + 1 + (currentPage - 1) * pageSize;
            } else {
                return index + 1;
            }
        }
    }
});
// CONCATENATED MODULE: ./packages/table-column/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_table_column_src_mainvue_type_script_lang_js_ = (table_column_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-column/src/main.vue





/* normalize component */

var table_column_src_main_component = normalizeComponent(
  packages_table_column_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_4e76510a_render,
  mainvue_type_template_id_4e76510a_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var table_column_src_main_api; }
table_column_src_main_component.options.__file = "packages/table-column/src/main.vue"
/* harmony default export */ var table_column_src_main = (table_column_src_main_component.exports);
// CONCATENATED MODULE: ./packages/table-column/index.js


/* istanbul ignore next */
table_column_src_main.install = function (Vue) {
    Vue.component(table_column_src_main.name, table_column_src_main);
};

/* harmony default export */ var table_column = (table_column_src_main);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form-table/src/main.vue?vue&type=script&lang=js&




/* harmony default export */ var form_table_src_mainvue_type_script_lang_js_ = ({
    name: 'DgFormTable',

    componentName: 'DgFormTable',

    mixins: [table],

    model: {
        prop: 'data'
    },

    provide: function provide() {
        return {
            overflow: this.overflow,
            formTable: this
        };
    },


    props: {
        // form表单数据的字段名称
        prop: {
            type: String,
            default: function _default() {
                var propsData = this.$options.propsData;
                return propsData['data-name'];
            },

            validator: function validator(val) {
                return val || this.$options.propsData['data-name'];
            }
        },

        // 新增数据的位置,是否加在首条
        first: {
            type: Boolean,
            default: function _default() {
                var propsData = this.$options.propsData;
                var first = false;
                if (propsData.hasOwnProperty('pagination') && propsData['pagination'] != 'false') {
                    first = true;
                }
                return first;
            }
        },
        // 新增数据模板
        dataTemplate: {
            type: [Object, Function],
            default: function _default() {
                return {};
            }
        },
        // 全局警用
        disabled: {
            type: Boolean,
            default: false
        },
        // 默认客户端分页（覆盖）
        pagingType: {
            type: String,
            default: 'client',
            validator: function validator(val) {
                return ['client', 'server'].indexOf(val) !== -1;
            }
        },
        // 默认原始的方式，换行（覆盖）
        overflow: {
            // “tooltip，wrap，origin”
            type: String,
            default: 'origin'
        },
        // 是否开启分页
        pagination: {
            type: Boolean,
            default: false
        }
    },

    created: function created() {
        this.$on('handleAddClick', this.handleAddClick);
        this.$on('handleDeleteClick', this.handleDeleteClick);
    },


    methods: {
        /**
         * 新增行数据
         */
        handleAddClick: function handleAddClick() {
            var index = this.dataClient.length;
            var row = {};
            if (this.first) {
                index = 0;
            }
            if (external_lodash_default.a.isFunction(this.dataTemplate)) {
                row = external_lodash_default.a.clone(this.dataTemplate(this.dataClient));
            } else {
                row = external_lodash_default.a.clone(this.dataTemplate);
            }
            this.dataClient.splice(index, 0, row);
            this.$emit('add', [row, index]);
            this.$emit('input', this.dataClient);
        },

        /**
         * 删除行数据
         * @param index
         */
        handleDeleteClick: function handleDeleteClick(index) {
            var row = this.dataClient[index];
            this.dataClient.splice(index, 1);
            this.$emit('del', [row, index]);
            this.$emit('input', this.dataClient);
        }
    }
});
// CONCATENATED MODULE: ./packages/form-table/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_form_table_src_mainvue_type_script_lang_js_ = (form_table_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/form-table/src/main.vue
var main_render, main_staticRenderFns




/* normalize component */

var form_table_src_main_component = normalizeComponent(
  packages_form_table_src_mainvue_type_script_lang_js_,
  main_render,
  main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var form_table_src_main_api; }
form_table_src_main_component.options.__file = "packages/form-table/src/main.vue"
/* harmony default export */ var form_table_src_main = (form_table_src_main_component.exports);
// CONCATENATED MODULE: ./packages/form-table/index.js


/* istanbul ignore next */
form_table_src_main.install = function (Vue) {
    Vue.component(form_table_src_main.name, form_table_src_main);
};

/* harmony default export */ var form_table = (form_table_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/form-table/src/form-column.vue?vue&type=template&id=2dfb52e4&
var form_columnvue_type_template_id_2dfb52e4_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm.isOriginalType
    ? _c(
        "el-table-column",
        _vm._b(
          {
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label))],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                "expand" == _vm.attrs.type
                  ? {
                      key: "default",
                      fn: function(scope) {
                        return [_vm._t("default", null, null, scope)]
                      }
                    }
                  : null
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        )
      )
    : _vm.cmpType === "opt"
    ? _c(
        "el-table-column",
        _vm._b(
          {
            attrs: { width: "80px", align: "center" },
            scopedSlots: _vm._u([
              {
                key: "header",
                fn: function(scope) {
                  return [
                    _c("i", {
                      staticClass: "el-icon-circle-plus dg-form-column__button",
                      style: _vm.formTable.disabled
                        ? { cursor: "not-allowed" }
                        : {},
                      on: {
                        click: function($event) {
                          return _vm.addItem(scope)
                        }
                      }
                    })
                  ]
                }
              },
              {
                key: "default",
                fn: function(scope) {
                  return [
                    _c("i", {
                      staticClass: "el-icon-delete dg-form-column__button",
                      style: _vm.formTable.disabled
                        ? { cursor: "not-allowed" }
                        : {},
                      on: {
                        click: function($event) {
                          return _vm.deleteItem(scope)
                        }
                      }
                    })
                  ]
                }
              }
            ])
          },
          "el-table-column",
          _vm.attrs,
          false
        )
      )
    : _c(
        "el-table-column",
        _vm._b(
          {
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label))],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                {
                  key: "default",
                  fn: function(scope) {
                    return [
                      _c(
                        "dg-form-item",
                        _vm._b(
                          {
                            class: ["dg-form-column__form-item--wrap"],
                            attrs: {
                              prop: _vm.getFormItemProp(scope),
                              rules: _vm.formItemRules
                            }
                          },
                          "dg-form-item",
                          _vm.formItemProps,
                          false
                        ),
                        [
                          _c(
                            _vm.cmpType,
                            _vm._g(
                              _vm._b(
                                {
                                  tag: "component",
                                  attrs: { disabled: _vm.formTable.disabled },
                                  model: {
                                    value: scope.row[scope.column.property],
                                    callback: function($$v) {
                                      _vm.$set(
                                        scope.row,
                                        scope.column.property,
                                        $$v
                                      )
                                    },
                                    expression:
                                      "scope.row[scope.column.property]"
                                  }
                                },
                                "component",
                                _vm.getCmpProps(scope),
                                false
                              ),
                              _vm.getCmpEvents(scope)
                            ),
                            [
                              _vm._l(_vm.$scopedSlots, function(val, key) {
                                return [
                                  key != "header"
                                    ? _vm._t(key, null, null, scope)
                                    : _vm._e()
                                ]
                              })
                            ],
                            2
                          )
                        ],
                        1
                      )
                    ]
                  }
                }
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        )
      )
}
var form_columnvue_type_template_id_2dfb52e4_staticRenderFns = []
form_columnvue_type_template_id_2dfb52e4_render._withStripped = true


// CONCATENATED MODULE: ./packages/form-table/src/form-column.vue?vue&type=template&id=2dfb52e4&

// EXTERNAL MODULE: external "async-validator"
var external_async_validator_ = __webpack_require__(7);
var external_async_validator_default = /*#__PURE__*/__webpack_require__.n(external_async_validator_);

// CONCATENATED MODULE: ./packages/form-item/src/message-CN.js
/*
 * @Author: lutz 
 * @Date: 2019-04-10 13:21:57 
 * @Last Modified by:   lutz 
 * @Last Modified time: 2019-06-10 13:21:57 
 */

/* harmony default export */ var message_CN = ({
  default: '字段上验证处在错误%s',
  required: '%s是必须的',
  enum: '%s必须是其中之一%s',
  whitespace: '%s不能为空',
  date: {
    format: '%s日期%s是无效格式%s',
    parse: '%s日期格式不能被解析,%s是无效的 ',
    invalid: '%s无效日期格式：%s'
  },
  types: {
    string: '%s不是一个字符(%s)类型',
    method: '%s不是一个%s(function)类型',
    array: '%s不是一个数组(%s)类型',
    object: '%s不是一个对象(%s)类型',
    number: '%s不是一个数字(%s)类型',
    date: '%s不是一个日期(%s)类型',
    boolean: '%s不是一个布尔(%s)类型',
    integer: '%s不是一个整型(%s)类型',
    float: '%s不是一个浮点(%s)类型',
    regexp: '%s不是一个有效正则(%s)类型',
    email: '%s不是一个有效值%s格式',
    url: '%s不是一个有效值%s格式',
    hex: '%s不是一个有效值%s格式'
  },
  string: {
    len: '%s必须等于%s字节',
    min: '%s必须大于%s字符',
    max: '%s必须小于%s字节',
    range: '%s必须在%s到%s字符内'
  },
  number: {
    len: '%s必须等于%s',
    min: '%s必须大于%s',
    max: '%s必须小于%s',
    range: '%s必须在%s到%s范围内'
  },
  array: {
    len: '%s数组长度必须等于%s',
    min: '%s数组长度必须大于%s',
    max: '%s数组长度必须小于%s',
    range: '%s数组长度必须在%s到%s范围内'
  },
  pattern: {
    mismatch: '%s的值%s不能正确匹配%s'
  }
});
// CONCATENATED MODULE: ./src/dg-utils/rules-convert.js



// 正则匹配 range[*]
var rules_convert_reg = /range\[(\S*)\]/i;
// 匹配空字符串
var reg_space = /\s+/g;
var rules_convert_seq = ",";

/**
 *  rule字段 String to Object
 *   a) require 必须值
 *   b) type 类型需求，请查看 message-CN.js 中的 types字段
 *   c) range 范围需求
 *       *range 使用 async-validator 没提供使用说明,所以提供以下类似python的范围语法
 *       range[50] => { len: 50 }
 *       range[1:] => { min: 1 }
 *       range[:100] => { max: 100 }
 *       range[1:100] => { min: 1, max: 100 }
 * @param {String} str rule 字段值
 * @returns {Object}
 */
function ruleStr2Obj() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  // 去除空格
  var rules = str.replace(reg_space, "");
  var arr = rules.split(rules_convert_seq);
  rules = {};
  // mgs.types中匹配类型
  var type = external_lodash_default.a.intersection(arr, Object.keys(message_CN.types));
  // 如果多个匹配则取第一个
  if (type && type.length) {
    rules.type = type[0];
  }
  // require: true?
  if (arr && arr.length && arr.indexOf("required") !== -1) {
    rules.required = true;
  }
  arr.forEach(function (item) {
    if (rules_convert_reg.test(item)) {
      var substr = item.match(rules_convert_reg);
      if (substr) {
        var valStr = substr[1];
        // ~-1 === 0
        if (~valStr.indexOf(":")) {
          var val = valStr.split(":");
          if (val[0]) {
            rules.min = parseInt(val[0]);
          }

          if (val[1]) {
            rules.max = parseInt(val[1]);
          }
        } else {
          rules.len = parseInt(valStr);
        }
      }
    }
  });
  return rules;
}

/**
 * formItem 或 form 中 rule 字段的转换
 * @param {*} rules rule 字段值
 * @param {Enum} type ['formItem', 'form'] 对应字母的组件
 * @returns {Array|Object}
 */
function ruleChange(rules, type) {
  // 防止void 0、null、0、''、NaN情况
  if (!rules) {
    return;
  }
  var selfRules = rules;
  if (type === "formItem" && external_lodash_default.a.isString(rules)) {
    selfRules = ruleStr2Obj(rules);
  }
  if (type === "form") {
    selfRules = {};
    for (var key in rules) {
      var item = rules[key];
      selfRules[key] = external_lodash_default.a.isString(item) ? ruleStr2Obj(item) : item;
    }
  }
  return selfRules;
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form-item/src/main.vue?vue&type=script&lang=js&




 // async-validator 的一个中文翻译文件


/* harmony default export */ var form_item_src_mainvue_type_script_lang_js_ = ({
    name: 'DgFormItem',

    mixins: [external_element_ui_["FormItem"]],

    props: {
        rules: [Object, Array, String],
        // label 如果为空的时候使用
        tlabel: String
    },

    methods: {
        // update author:lutz
        validate: function validate(trigger) {
            var _this = this;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            this.validateDisabled = false;
            var rules = this.getFilteredRule(trigger);
            if ((!rules || rules.length === 0) && this.required === undefined) {
                callback();
                return true;
            }
            this.validateState = 'validating';
            var descriptor = {};

            // update-start author:lutz
            // 过滤空值 [{}] || [0] || [''] || [null] || [void 0] || [NaN] 这种情况
            // const filer = _.isArray(rules) ? rules.filter(item => item && Object.keys(item).length) : [];
            if (rules && rules.length /* && filer.length */) {
                    rules.forEach(function (rule, i) {
                        if (!rule.message) {
                            /**
                             * BUG修复
                             * 描述:
                             *      const rules = [{ required: true }, { type: 'number', message: '年龄必须为数字值'}]
                             * 在下列条件同时满足时会触发：
                             *      1. rules[0].message === void 0
                             *      2. rules[0].required === true
                             *
                             * 原因：
                             *      async-validator 默认 type: 'string'
                             */
                            if (Object.keys(rule).length === 1 && rule.required) {
                                rule.message = (_this.label || _this.tlable || '') + '\u662F\u5FC5\u987B\u5B57\u6BB5';
                            } else {
                                rule.fullField = _this.label || _this.tlable || ''; // 请慎用fullField, 特别是在rules是array的时候
                            }
                        }
                        delete rule.trigger;
                        // form-table 中获取 index, parseInt(fullField.split('.')[1]);
                    });
                }
            /* [code]
                if (rules && rules.length > 0) {
                    rules.forEach(rule => {
                        delete rule.trigger;
                    });
                }
            */
            // update-end

            descriptor[this.prop] = rules;
            var validator = new external_async_validator_default.a(descriptor);

            // create author:lutz
            validator.messages(message_CN); // 使用中文版本

            var model = {};
            model[this.prop] = this.fieldValue;
            validator.validate(model, { firstFields: true }, function (errors, invalidFields) {
                _this.validateState = !errors ? 'success' : 'error';
                _this.validateMessage = errors ? _this.changeMsg(errors[0].message) : '';
                callback(_this.validateMessage, invalidFields);
                _this.elForm && _this.elForm.$emit('validate', _this.prop, !errors, _this.validateMessage || null);
            });
        },


        // creat author:lutz 修改 message; async-validator 会自带(string)、(function)这样的类型
        changeMsg: function changeMsg() {
            var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            var reg = /\([a-z]+\)/;
            return msg.replace(reg, '');
        },


        // update author:lutz
        getRules: function getRules() {
            // update-start author:lutz
            var formRules = ruleChange(this.form.rules, 'form');
            var selfRules = ruleChange(this.rules, 'formItem');
            /* [code]
                let formRules = this.form.rules;
                const selfRules = this.rules;
            */
            // update-end

            var requiredRule = this.required !== undefined ? { required: !!this.required } : [];
            var prop = getPropByPath(formRules, this.prop || '');
            formRules = formRules ? prop.o[this.prop || ''] || prop.v : [];
            return [].concat(selfRules || formRules || []).concat(requiredRule);
        }
    }
});
// CONCATENATED MODULE: ./packages/form-item/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_form_item_src_mainvue_type_script_lang_js_ = (form_item_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/form-item/src/main.vue
var src_main_render, src_main_staticRenderFns




/* normalize component */

var form_item_src_main_component = normalizeComponent(
  packages_form_item_src_mainvue_type_script_lang_js_,
  src_main_render,
  src_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var form_item_src_main_api; }
form_item_src_main_component.options.__file = "packages/form-item/src/main.vue"
/* harmony default export */ var form_item_src_main = (form_item_src_main_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/form-table/src/form-column.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var form_columnvue_type_script_lang_js_ = ({
    name: 'DgFormColumn',

    mixins: [emitter, table_column],

    inject: ['formTable'],

    components: { DgFormItem: form_item_src_main },

    props: {
        // options 默认操作列表
        del: Function,
        add: Function,
        prop: String
    },

    computed: {
        // 表单项的props参数
        formItemProps: function formItemProps() {
            var props = shear_getCmpProps(form_item_src_main, this, {
                labelWidth: '0',
                label: undefined,
                tlabel: function tlabel(props) {
                    return props['label'];
                }
            });
            return props;
        },

        // 获取最近的表单
        form: function form() {
            var parent = this.$parent;
            var parentName = parent.$options.componentName;
            while (parentName !== 'ElForm') {
                if (parentName === 'ElFormItem') {
                    this.isNested = true;
                }
                parent = parent.$parent;
                parentName = parent.$options.componentName;
            }
            return parent;
        },

        // 合并获取校验规则，从form获取对应的字段的规则，和列设置的规则，优先列设置的规则
        formItemRules: function formItemRules() {
            var prop = this.formTable.prop;
            return this.rules || prop && this.form.rules && this.form.rules[prop][this.prop] || {};
        }
    },

    methods: {
        /**
         * 获取formItem的prop属性，获取table的prop，拼成'formData.0.age'或者‘0.age'的字符串
         * @param scope
         * @returns {string}
         */
        getFormItemProp: function getFormItemProp(scope) {
            return this.formTable.prop ? this.formTable.prop + '.' + scope.$index + '.' + scope.column.property : scope.$index + '.' + scope.column.property;
        },
        addItem: function addItem(scope) {
            if (this.formTable.disabled) {
                return;
            }
            if (this.add) {
                this.add(scope.row, scope.$index);
            } else {
                this.dispatch('DgFormTable', 'handleAddClick', scope.$index);
            }
        },
        deleteItem: function deleteItem(scope) {
            if (this.formTable.disabled) {
                return;
            }

            if (this.del) {
                this.del(scope.row, scope.$index);
            } else {
                this.dispatch('DgFormTable', 'handleDeleteClick', scope.$index);
            }
        }
    }
});
// CONCATENATED MODULE: ./packages/form-table/src/form-column.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_form_columnvue_type_script_lang_js_ = (form_columnvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/form-table/src/form-column.vue





/* normalize component */

var form_column_component = normalizeComponent(
  src_form_columnvue_type_script_lang_js_,
  form_columnvue_type_template_id_2dfb52e4_render,
  form_columnvue_type_template_id_2dfb52e4_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var form_column_api; }
form_column_component.options.__file = "packages/form-table/src/form-column.vue"
/* harmony default export */ var form_column = (form_column_component.exports);
// CONCATENATED MODULE: ./packages/form-column/index.js


/* istanbul ignore next */
form_column.install = function (Vue) {
  Vue.component(form_column.name, form_column);
};

/* harmony default export */ var packages_form_column = (form_column);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/main.vue?vue&type=template&id=76177bbe&
var mainvue_type_template_id_76177bbe_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-upload" },
    [
      _vm.listType === "button"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  {
                    class: { "dg-upload--button": !_vm.disabled },
                    attrs: { "list-slot": _vm.$scopedSlots.fileList }
                  },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _c(
                  "el-button",
                  {
                    attrs: { icon: "el-icon-upload2", disabled: _vm.disabled }
                  },
                  [_vm._v("文件上传")]
                ),
                _vm.tipMsg !== false && (_vm.tipMsg || _vm.message)
                  ? _c(
                      "div",
                      {
                        staticClass: "el-upload__tip",
                        attrs: { slot: "tip" },
                        slot: "tip"
                      },
                      [_vm._v(_vm._s(_vm.tipMsg || _vm.message))]
                    )
                  : _vm._e()
              ],
              1
            )
          ]
        : _vm.listType === "avatar"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { staticClass: "dg-upload__image avatar-uploader" },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.imageUrl
                  ? _c("img", {
                      staticClass: "avatar",
                      attrs: {
                        src: _vm.getImg(_vm.imageUrl),
                        onerror: _vm.error
                      }
                    })
                  : _c("div", [
                      _c("i", {
                        class: [
                          "el-icon-plus",
                          "avatar-uploader-icon",
                          _vm.disabled ? "dg-upload--content is-disabled" : ""
                        ]
                      }),
                      _c("p", { staticClass: "dg-upload--text" }, [
                        _vm._v("上传")
                      ])
                    ])
              ]
            )
          ]
        : _vm.listType === "viewer" && !_vm.showOne
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { staticStyle: { display: "inline-block" } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _c(
                  "div",
                  {
                    class: [
                      "el-upload el-upload--text",
                      _vm.disabled ? "dg-upload--content is-disabled" : ""
                    ]
                  },
                  [
                    _c("i", {
                      staticClass: "el-icon-plus avatar-uploader-icon"
                    }),
                    _c(
                      "p",
                      {
                        staticClass: "dg-upload--text",
                        staticStyle: { margin: "0" }
                      },
                      [_vm._v("上传")]
                    )
                  ]
                )
              ]
            ),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(img, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: { src: _vm.getImg(img._url), onerror: _vm.error }
                  })
                ])
              }),
              0
            )
          ]
        : _vm.listType === "viewer" && _vm.showOne
        ? [
            _c(
              "upload",
              _vm._g(_vm._b({}, "upload", _vm._attrs, false), _vm.$listeners),
              [
                _c(
                  "div",
                  {
                    class: [
                      "dg-upload-div",
                      _vm.disabled ? "dg-upload--content is-disabled" : ""
                    ]
                  },
                  [
                    _c("i", { staticClass: "el-icon-plus" }),
                    _c("p", { staticClass: "dg-upload--text" }, [
                      _vm._v("上传")
                    ])
                  ]
                )
              ]
            ),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(img, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: { src: _vm.getImg(img._url), onerror: _vm.error }
                  })
                ])
              }),
              0
            )
          ]
        : _vm.listType === "pictureList"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { class: { "dg-upload__list": _vm.fileLength } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.fileLength < 1
                  ? _c("div", { staticClass: "dg-upload--pictureList" }, [
                      _c("i", { staticClass: "el-icon-plus" }),
                      _c("p", { staticClass: "dg-upload--text" }, [
                        _vm._v("上传")
                      ])
                    ])
                  : _c(
                      "div",
                      {
                        staticClass: "dg-upload__carousel",
                        attrs: { slot: "uploadList" },
                        slot: "uploadList"
                      },
                      [
                        _c(
                          "el-carousel",
                          _vm._b(
                            {
                              ref: "hrl",
                              attrs: {
                                height: _vm.carouselHeight,
                                "initial-index": _vm.index
                              }
                            },
                            "el-carousel",
                            _vm.carousel,
                            false
                          ),
                          _vm._l(_vm.imgList, function(item, key) {
                            return _c(
                              "el-carousel-item",
                              { key: key, attrs: { name: key + "" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: _vm.getImg(_vm.getUrl(item)),
                                    onerror: _vm.error
                                  }
                                })
                              ]
                            )
                          }),
                          1
                        ),
                        _c("span", { staticClass: "dg-upload__shade" }, [
                          _vm.iconZoom
                            ? _c("i", {
                                staticClass: "el-icon-zoom-in",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handleZoomIn($event)
                                  }
                                }
                              })
                            : _vm._e(),
                          _vm.iconDelete
                            ? _c("i", {
                                staticClass: "el-icon-delete",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handleDelete($event)
                                  }
                                }
                              })
                            : _vm._e(),
                          _vm.iconPlus
                            ? _c("i", {
                                staticClass: "el-icon-plus",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handlePlus($event)
                                  }
                                }
                              })
                            : _vm._e()
                        ])
                      ],
                      1
                    ),
                _vm.fileLength
                  ? _c("div", {
                      ref: "uploadBtn",
                      attrs: { slot: "trigger" },
                      slot: "trigger"
                    })
                  : _vm._e()
              ]
            ),
            _vm.fileLength > 1 && _vm.fileLength <= _vm.showbottom
              ? _c(
                  "ul",
                  { staticClass: "dg-upload__indicator" },
                  _vm._l(_vm.fileLength, function(item, key) {
                    return _c(
                      "li",
                      {
                        key: key,
                        class: [
                          "el-carousel__indicator",
                          "el-carousel__indicator--horizontal",
                          { "is-active": _vm.index === key }
                        ],
                        on: {
                          mouseenter: function($event) {
                            return _vm.handleIndicator("hover", key)
                          },
                          click: function($event) {
                            $event.stopPropagation()
                            return _vm.handleIndicator("click", key)
                          }
                        }
                      },
                      [_c("button", { staticClass: "el-carousel__button" })]
                    )
                  }),
                  0
                )
              : _vm._e(),
            _vm.fileLength > _vm.showbottom
              ? _c("div", { staticClass: "dg-upload__indicator-more" }, [
                  _c("i", {
                    staticClass: "el-icon-caret-left",
                    on: {
                      click: function($event) {
                        $event.stopPropagation()
                        return _vm.pageturning("prev")
                      }
                    }
                  }),
                  _c("span", { staticClass: "is-active" }, [
                    _vm._v(_vm._s(_vm.index + 1))
                  ]),
                  _c("span", [_vm._v("/" + _vm._s(_vm.fileLength))]),
                  _c("i", {
                    staticClass: "el-icon-caret-right",
                    on: {
                      click: function($event) {
                        $event.stopPropagation()
                        return _vm.pageturning("next")
                      }
                    }
                  })
                ])
              : _vm._e(),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(item, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: {
                      src: _vm.getImg(_vm.getUrl(item)),
                      onerror: _vm.error
                    }
                  })
                ])
              }),
              0
            )
          ]
        : [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { attrs: { "list-slot": _vm.$scopedSlots.fileList } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm._t("default"),
                _vm._t("trigger", null, { slot: "trigger" }),
                _vm._t("tip", null, { slot: "tip" })
              ],
              2
            )
          ]
    ],
    2
  )
}
var mainvue_type_template_id_76177bbe_staticRenderFns = []
mainvue_type_template_id_76177bbe_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/main.vue?vue&type=template&id=76177bbe&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&
var upload_listvue_type_template_id_173fedf5_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "transition-group",
    {
      class: [
        "el-upload-list",
        "el-upload-list--" + _vm.listType,
        { "is-disabled": _vm.disabled }
      ],
      attrs: { tag: "ul", name: "el-list" }
    },
    _vm._l(_vm.showOne ? _vm.files[0] : _vm.files, function(file, indx) {
      return _c(
        "li",
        {
          key: file.uid,
          class: [
            "el-upload-list__item",
            "is-" + file.status,
            _vm.focusing ? "focusing" : ""
          ],
          attrs: { tabindex: "0" },
          on: {
            keydown: function($event) {
              if (
                !$event.type.indexOf("key") &&
                _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                  "Backspace",
                  "Delete",
                  "Del"
                ])
              ) {
                return null
              }
              !_vm.disabled && _vm.$emit("remove", file)
            },
            focus: function($event) {
              _vm.focusing = true
            },
            blur: function($event) {
              _vm.focusing = false
            },
            click: function($event) {
              _vm.focusing = false
            }
          }
        },
        [
          file.status !== "uploading" &&
          ["picture-card", "picture"].indexOf(_vm.listType) > -1
            ? _c("img", {
                staticClass: "el-upload-list__item-thumbnail",
                attrs: {
                  src: _vm.serverUrl + file[_vm.defaultOpt.url],
                  onerror: _vm.error,
                  alt: ""
                }
              })
            : _vm._e(),
          _vm.$scopedSlots.default
            ? [
                _c(
                  "a",
                  {
                    staticClass: "el-upload-list__item-name",
                    on: {
                      click: function($event) {
                        return _vm.handleClick(file)
                      }
                    }
                  },
                  [_vm._t("default", null, null, file)],
                  2
                )
              ]
            : [
                _c(
                  "a",
                  {
                    staticClass: "el-upload-list__item-name",
                    on: {
                      click: function($event) {
                        return _vm.handleClick(file)
                      }
                    }
                  },
                  [
                    _c("i", { staticClass: "el-icon-paperclip" }),
                    _vm._v(
                      "\n        " +
                        _vm._s(
                          file[_vm.defaultOpt.name] +
                            " (" +
                            _vm.fileSize(file.size) +
                            ")"
                        ) +
                        "\n      "
                    )
                  ]
                )
              ],
          _c("label", { staticClass: "el-upload-list__item-status-label" }, [
            _c("i", {
              class: {
                "el-icon-upload-success": true,
                "el-icon-circle-check": _vm.listType === "text",
                "el-icon-check":
                  ["picture-card", "picture"].indexOf(_vm.listType) > -1
              }
            })
          ]),
          !_vm.disabled
            ? _c("i", {
                staticClass: "el-icon-close",
                on: {
                  click: function($event) {
                    return _vm.$emit("remove", file)
                  }
                }
              })
            : _vm._e(),
          !_vm.disabled
            ? _c("i", { staticClass: "el-icon-close-tip" }, [
                _vm._v(_vm._s(_vm.t("el.upload.deleteTip")))
              ])
            : _vm._e(),
          file.status === "uploading"
            ? _c("el-progress", {
                attrs: {
                  type: _vm.listType === "picture-card" ? "circle" : "line",
                  "stroke-width": _vm.listType === "picture-card" ? 6 : 2,
                  percentage: _vm.parsePercentage(file.percentage)
                }
              })
            : _vm._e(),
          _vm.listType === "picture-card"
            ? _c("span", { staticClass: "el-upload-list__item-actions" }, [
                _vm.handlePreview && _vm.listType === "picture-card"
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-preview",
                        on: {
                          click: function($event) {
                            return _vm.handlePreview(file, indx)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-zoom-in" })]
                    )
                  : _vm._e(),
                !_vm.disabled
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-delete",
                        on: {
                          click: function($event) {
                            return _vm.$emit("remove", file)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-delete" })]
                    )
                  : _vm._e(),
                !_vm.disabled && _vm.showUploadIcon
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-plus",
                        on: {
                          click: function($event) {
                            return _vm.$emit("upload", file)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-plus" })]
                    )
                  : _vm._e()
              ])
            : _vm._e()
        ],
        2
      )
    }),
    0
  )
}
var upload_listvue_type_template_id_173fedf5_staticRenderFns = []
upload_listvue_type_template_id_173fedf5_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&

// CONCATENATED MODULE: ./src/locale/lang/zh-CN.js
/* harmony default export */ var zh_CN = ({
  el: {
    colorpicker: {
      confirm: "确定",
      clear: "清空"
    },
    datepicker: {
      now: "此刻",
      today: "今天",
      cancel: "取消",
      clear: "清空",
      confirm: "确定",
      selectDate: "选择日期",
      selectTime: "选择时间",
      startDate: "开始日期",
      startTime: "开始时间",
      endDate: "结束日期",
      endTime: "结束时间",
      prevYear: "前一年",
      nextYear: "后一年",
      prevMonth: "上个月",
      nextMonth: "下个月",
      year: "年",
      month1: "1 月",
      month2: "2 月",
      month3: "3 月",
      month4: "4 月",
      month5: "5 月",
      month6: "6 月",
      month7: "7 月",
      month8: "8 月",
      month9: "9 月",
      month10: "10 月",
      month11: "11 月",
      month12: "12 月",
      // week: '周次',
      weeks: {
        sun: "日",
        mon: "一",
        tue: "二",
        wed: "三",
        thu: "四",
        fri: "五",
        sat: "六"
      },
      months: {
        jan: "一月",
        feb: "二月",
        mar: "三月",
        apr: "四月",
        may: "五月",
        jun: "六月",
        jul: "七月",
        aug: "八月",
        sep: "九月",
        oct: "十月",
        nov: "十一月",
        dec: "十二月"
      }
    },
    select: {
      loading: "加载中",
      noMatch: "无匹配数据",
      noData: "无数据",
      placeholder: "请选择"
    },
    cascader: {
      noMatch: "无匹配数据",
      loading: "加载中",
      placeholder: "请选择",
      noData: "暂无数据"
    },
    pagination: {
      goto: "前往",
      pagesize: "条/页",
      total: "共 {total} 条",
      pageClassifier: "页"
    },
    messagebox: {
      title: "提示",
      confirm: "确定",
      cancel: "取消",
      error: "输入的数据不合法!"
    },
    upload: {
      deleteTip: "按 delete 键可删除",
      delete: "删除",
      preview: "查看图片",
      continue: "继续上传"
    },
    table: {
      emptyText: "暂无数据",
      confirmFilter: "筛选",
      resetFilter: "重置",
      clearFilter: "全部",
      sumText: "合计"
    },
    tree: {
      emptyText: "暂无数据"
    },
    transfer: {
      noMatch: "无匹配数据",
      noData: "无数据",
      titles: ["列表 1", "列表 2"],
      filterPlaceholder: "请输入搜索内容",
      noCheckedFormat: "共 {total} 项",
      hasCheckedFormat: "已选 {checked}/{total} 项"
    },
    image: {
      error: "加载失败"
    },
    pageHeader: {
      title: "返回"
    }
  }
});
// EXTERNAL MODULE: external "deepmerge"
var external_deepmerge_ = __webpack_require__(16);
var external_deepmerge_default = /*#__PURE__*/__webpack_require__.n(external_deepmerge_);

// CONCATENATED MODULE: ./src/locale/format.js
var format_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
/**
 *  String format template
 *  - Inspired:
 *    https://github.com/Matt-Esch/string-template/index.js
 */
/* harmony default export */ var locale_format = (function (Vue) {
  /**
   * template
   *
   * @param {String} string
   * @param {Array} ...args
   * @return {String}
   */

  function template(string) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (args.length === 1 && format_typeof(args[0]) === "object") {
      args = args[0];
    }

    if (!args || !args.hasOwnProperty) {
      args = {};
    }

    return string.replace(RE_NARGS, function (match, prefix, i, index) {
      var result = void 0;

      if (string[index - 1] === "{" && string[index + match.length] === "}") {
        return i;
      } else {
        result = hasOwn(args, i) ? args[i] : null;
        if (result === null || result === undefined) {
          return "";
        }

        return result;
      }
    });
  }

  return template;
});
// CONCATENATED MODULE: ./src/locale/index.js





var src_locale_format = locale_format(external_vue_default.a);
var lang = zh_CN;
var merged = false;
var locale_i18nHandler = function i18nHandler() {
  var vuei18n = Object.getPrototypeOf(this || external_vue_default.a).$t;
  if (typeof vuei18n === "function" && !!external_vue_default.a.locale) {
    if (!merged) {
      merged = true;
      external_vue_default.a.locale(external_vue_default.a.config.lang, external_deepmerge_default()(lang, external_vue_default.a.locale(external_vue_default.a.config.lang) || {}, { clone: true }));
    }
    return vuei18n.apply(this, arguments);
  }
};

var locale_t = function t(path, options) {
  var value = locale_i18nHandler.apply(this, arguments);
  if (value !== null && value !== undefined) return value;

  var array = path.split(".");
  var current = lang;

  for (var i = 0, j = array.length; i < j; i++) {
    var property = array[i];
    value = current[property];
    if (i === j - 1) return src_locale_format(value, options);
    if (!value) return "";
    current = value;
  }
  return "";
};

var use = function use(l) {
  lang = l || lang;
};

var i18n = function i18n(fn) {
  locale_i18nHandler = fn || locale_i18nHandler;
};

/* harmony default export */ var locale = ({ use: use, t: locale_t, i18n: i18n });
// CONCATENATED MODULE: ./src/mixins/locale.js


/* harmony default export */ var mixins_locale = ({
  methods: {
    t: function t() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return locale_t.apply(this, args);
    }
  }
});
// CONCATENATED MODULE: ./packages/upload/src/unit.js
var unit_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



// 文件单位
var unit = {
    B: 1, // 1024^0
    K: 1024, // 1024^1
    M: 1048576, // 1024^2
    G: 1073741824, // 1024^3
    T: 1099511627776 // 1024^4
};

function unit_noop() {}

function typeBySuffix() {
    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var lastIdx = str.lastIndexOf('.');
    return lastIdx === -1 ? '' : str.slice(lastIdx + 1);
}

function write2Class(type) {
    return !type ? 'el-icon-document' : 'dg-icon-' + type;
}

function round(val) {
    return external_lodash_default.a.round(val, 2);
}

function fileSize() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (size < unit.K) {
        return size + 'B';
    } else if (size < unit.M) {
        return round(size / unit.K) + 'KB';
    } else if (size < unit.G) {
        return round(size / unit.M) + 'MB';
    } else if (size < unit.T) {
        return round(size / unit.G) + 'GB';
    } else {
        return round(size / unit.T) + 'TB';
    }
}

function sizeType(size) {
    return Object.prototype.toString.call(size);
}

// 下载
function linkDown(url, fileName) {
    if ((typeof url === 'undefined' ? 'undefined' : unit_typeof(url)) == 'object' && url instanceof Blob) {
        url = URL.createObjectURL(url);
    }

    var aLink = document.createElement('a');
    aLink.href = url;
    aLink.download = fileName || '';

    var event = void 0;

    if (window.MouseEvent) {
        event = new MouseEvent('click');
    } else {
        event = document.createEvent('MouseEvents');
        event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    }

    aLink.dispatchEvent(event);
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var upload_listvue_type_script_lang_js_ = ({
    name: 'ElUploadList',

    mixins: [mixins_locale],

    data: function data() {
        return {
            focusing: false
        };
    },


    computed: {
        error: function error() {
            var errorImg = this.errorImg;

            return errorImg ? 'this.src="' + errorImg + '"; this.onerror=null;' : '';
        }
    },

    components: { ElProgress: external_element_ui_["Progress"] },

    props: {
        errorImg: String,
        // 服务器 baseURL
        serverUrl: {
            type: String,
            default: ''
        },
        showUploadIcon: Boolean,
        showOne: Boolean,
        defaultOpt: Object,
        files: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabled: {
            type: Boolean,
            default: false
        },
        handlePreview: Function,
        listType: String
    },
    methods: {
        parsePercentage: function parsePercentage(val) {
            return parseInt(val, 10);
        },
        handleClick: function handleClick(file) {
            this.handlePreview && this.handlePreview(file);
        },

        fileSize: fileSize,
        write2Class: write2Class
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_listvue_type_script_lang_js_ = (upload_listvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue





/* normalize component */

var upload_list_component = normalizeComponent(
  src_upload_listvue_type_script_lang_js_,
  upload_listvue_type_template_id_173fedf5_render,
  upload_listvue_type_template_id_173fedf5_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_list_api; }
upload_list_component.options.__file = "packages/upload/src/upload-list.vue"
/* harmony default export */ var upload_list = (upload_list_component.exports);
// EXTERNAL MODULE: external "babel-helper-vue-jsx-merge-props"
var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(17);
var external_babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);

// CONCATENATED MODULE: ./packages/upload/src/ajax.js
function getError(action, option, xhr) {
  var msg = void 0;
  if (xhr.response) {
    msg = '' + (xhr.response.error || xhr.response);
  } else if (xhr.responseText) {
    msg = '' + xhr.responseText;
  } else {
    msg = 'fail to post ' + action + ' ' + xhr.status;
  }

  var err = new Error(msg);
  err.status = xhr.status;
  err.method = 'post';
  err.url = action;
  return err;
}

function getBody(xhr) {
  var text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }

  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}

function ajax_upload(option) {
  if (typeof XMLHttpRequest === 'undefined') {
    return;
  }

  var xhr = new XMLHttpRequest();
  var action = option.action;

  if (xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }
      option.onProgress(e);
    };
  }

  var formData = new FormData();

  if (option.data) {
    Object.keys(option.data).forEach(function (key) {
      formData.append(key, option.data[key]);
    });
  }

  formData.append(option.filename, option.file, option.file.name);

  xhr.onerror = function error(e) {
    option.onError(e);
  };

  xhr.onload = function onload() {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(action, option, xhr));
    }

    option.onSuccess(getBody(xhr));
  };

  xhr.open('post', action, true);

  if (option.withCredentials && 'withCredentials' in xhr) {
    xhr.withCredentials = true;
  }

  var headers = option.headers || {};

  for (var item in headers) {
    if (headers.hasOwnProperty(item) && headers[item] !== null) {
      xhr.setRequestHeader(item, headers[item]);
    }
  }
  xhr.send(formData);
  return xhr;
}
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&
var upload_draggervue_type_template_id_7ebbf219_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      class: { "el-upload-dragger": true, "is-dragover": _vm.dragover },
      on: {
        drop: function($event) {
          $event.preventDefault()
          return _vm.onDrop($event)
        },
        dragover: function($event) {
          $event.preventDefault()
          return _vm.onDragover($event)
        },
        dragleave: function($event) {
          $event.preventDefault()
          _vm.dragover = false
        }
      }
    },
    [_vm._t("default")],
    2
  )
}
var upload_draggervue_type_template_id_7ebbf219_staticRenderFns = []
upload_draggervue_type_template_id_7ebbf219_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var upload_draggervue_type_script_lang_js_ = ({
    name: "ElUploadDrag",
    props: {
        disabled: Boolean
    },
    inject: {
        uploader: {
            default: ""
        }
    },
    data: function data() {
        return {
            dragover: false
        };
    },

    methods: {
        onDragover: function onDragover() {
            if (!this.disabled) {
                this.dragover = true;
            }
        },
        onDrop: function onDrop(e) {
            if (this.disabled || !this.uploader) return;
            var accept = this.uploader.accept;
            this.dragover = false;
            if (!accept) {
                this.$emit("file", e.dataTransfer.files);
                return;
            }
            this.$emit("file", [].slice.call(e.dataTransfer.files).filter(function (file) {
                var type = file.type,
                    name = file.name;

                var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
                var baseType = type.replace(/\/.*$/, "");
                return accept.split(",").map(function (type) {
                    return type.trim();
                }).filter(function (type) {
                    return type;
                }).some(function (acceptedType) {
                    if (/\..+$/.test(acceptedType)) {
                        return extension === acceptedType;
                    }
                    if (/\/\*$/.test(acceptedType)) {
                        return baseType === acceptedType.replace(/\/\*$/, "");
                    }
                    if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                        return type === acceptedType;
                    }
                    return false;
                });
            }));
        }
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_draggervue_type_script_lang_js_ = (upload_draggervue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue





/* normalize component */

var upload_dragger_component = normalizeComponent(
  src_upload_draggervue_type_script_lang_js_,
  upload_draggervue_type_template_id_7ebbf219_render,
  upload_draggervue_type_template_id_7ebbf219_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_dragger_api; }
upload_dragger_component.options.__file = "packages/upload/src/upload-dragger.vue"
/* harmony default export */ var upload_dragger = (upload_dragger_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload.vue?vue&type=script&lang=js&







/* harmony default export */ var uploadvue_type_script_lang_js_ = ({
    inject: ["uploader"],

    components: {
        UploadDragger: upload_dragger
    },

    props: {
        type: String,
        size: [String, Number],
        showTrigger: Boolean,
        action: {
            type: String,
            required: true
        },
        name: {
            type: String,
            default: "file"
        },
        data: Object,
        headers: Object,
        withCredentials: Boolean,
        multiple: Boolean,
        accept: String,
        onStart: Function,
        onProgress: Function,
        onSuccess: Function,
        onError: Function,
        beforeUpload: Function,
        drag: Boolean,
        onPreview: {
            type: Function,
            default: function _default() {}
        },
        onRemove: {
            type: Function,
            default: function _default() {}
        },
        fileList: Array,
        autoUpload: Boolean,
        listType: String,
        httpRequest: {
            type: Function,
            default: ajax_upload
        },
        disabled: Boolean,
        limit: Number,
        onExceed: Function
    },

    data: function data() {
        return {
            mouseover: false,
            reqs: {}
        };
    },


    methods: {
        isImage: function isImage(str) {
            return str.indexOf("image") !== -1;
        },
        handleChange: function handleChange(ev) {
            var files = ev.target.files;
            if (!files) return;
            this.uploadFiles(files);
        },
        uploadFiles: function uploadFiles(files) {
            var _this = this;

            if (this.limit && this.fileList.length + files.length > this.limit) {
                this.onExceed && this.onExceed(files, this.fileList);
                return;
            }

            var postFiles = Array.prototype.slice.call(files);
            if (!this.multiple) {
                postFiles = postFiles.slice(0, 1);
            }

            if (postFiles.length === 0) {
                return;
            }

            postFiles.forEach(function (rawFile) {
                _this.onStart(rawFile);
                if (_this.autoUpload) _this.upload(rawFile);
            });
        },
        upload: function upload(rawFile) {
            var _this2 = this;

            this.$refs.input.value = null;

            // create-start author:lutz
            // size 文件大小的拦截
            var sizeBool = true;
            var size = this.size;
            if (size) {
                var sType = sizeType(size);

                if (sType === "[object String]") {
                    var val = parseFloat(size);
                    var ut = "B";
                    size.replace(/[a-zA-Z]/i, function ($1) {
                        ut = $1;
                        size = (unit[external_lodash_default.a.upperCase($1)] || 1) * val;
                    });
                    if (size < rawFile.size) {
                        this.$message.error("\u4E0A\u4F20\u6587\u4EF6\u8D85\u51FA" + val + ut);
                        sizeBool = false;
                    }
                } else if (sType === "[object Number]") {
                    if (size < rawFile.size) {
                        this.$message.error("\u4E0A\u4F20\u6587\u4EF6\u8D85\u51FA" + size + "B");
                        sizeBool = false;
                    }
                }
            }
            if (!sizeBool) {
                return this.onRemove(null, rawFile, sizeBool);
            }
            if (!this.beforeUpload) {
                return sizeBool && this.post(rawFile, sizeBool);
            }
            /* [code]
                if (!this.beforeUpload) {
                    return this.post(rawFile);
                }
            */
            // create-end

            var before = this.beforeUpload(rawFile, sizeBool);
            if (before && before.then) {
                before.then(function (processedFile) {
                    var fileType = Object.prototype.toString.call(processedFile);

                    if (fileType === "[object File]" || fileType === "[object Blob]") {
                        if (fileType === "[object Blob]") {
                            processedFile = new File([processedFile], rawFile.name, {
                                type: rawFile.type
                            });
                        }
                        for (var p in rawFile) {
                            if (rawFile.hasOwnProperty(p)) {
                                processedFile[p] = rawFile[p];
                            }
                        }
                        _this2.post(processedFile);
                    } else {
                        _this2.post(rawFile);
                    }
                }, function () {
                    _this2.onRemove(null, rawFile, sizeBool);
                });
            } else if (before !== false) {
                this.post(rawFile);
            } else {
                this.onRemove(null, rawFile, sizeBool);
            }
        },
        abort: function abort(file) {
            var reqs = this.reqs;

            if (file) {
                var uid = file;
                if (file.uid) uid = file.uid;
                if (reqs[uid]) {
                    reqs[uid].abort();
                }
            } else {
                Object.keys(reqs).forEach(function (uid) {
                    if (reqs[uid]) reqs[uid].abort();
                    delete reqs[uid];
                });
            }
        },
        post: function post(rawFile) {
            var _this3 = this;

            var uid = rawFile.uid;

            var options = {
                headers: this.headers,
                withCredentials: this.withCredentials,
                file: rawFile,
                data: this.data,
                filename: this.name,
                action: this.action,
                onProgress: function onProgress(e) {
                    _this3.onProgress(e, rawFile);
                },
                onSuccess: function onSuccess(res) {
                    _this3.onSuccess(res, rawFile);
                    delete _this3.reqs[uid];
                },
                onError: function onError(err) {
                    _this3.onError(err, rawFile);
                    delete _this3.reqs[uid];
                }
            };
            var req = this.httpRequest(options);
            this.reqs[uid] = req;
            if (req && req.then) {
                req.then(options.onSuccess, options.onError);
            }
        },
        handleClick: function handleClick() {
            if (!this.disabled) {
                this.$refs.input.value = null;
                this.$refs.input.click();
            }
        },
        handleKeydown: function handleKeydown(e) {
            if (e.target !== e.currentTarget) return;
            if (e.keyCode === 13 || e.keyCode === 32) {
                this.handleClick();
            }
        }
    },

    render: function render(h) {
        var handleClick = this.handleClick,
            drag = this.drag,
            name = this.name,
            handleChange = this.handleChange,
            multiple = this.multiple,
            accept = this.accept,
            listType = this.listType,
            uploadFiles = this.uploadFiles,
            disabled = this.disabled,
            handleKeydown = this.handleKeydown;

        var data = {
            class: {
                "el-upload": true
            },
            on: {
                click: handleClick,
                keydown: handleKeydown
            }
        };

        data.class["el-upload--" + listType] = true;

        return h(
            "div",
            external_babel_helper_vue_jsx_merge_props_default()([data, {
                attrs: { tabindex: "0" },
                directives: [{
                    name: "show",
                    value: this.showTrigger
                }]
            }]),
            [drag ? h(
                "upload-dragger",
                {
                    attrs: { disabled: disabled },
                    on: {
                        "file": uploadFiles
                    }
                },
                [this.$slots.default]
            ) : this.$slots.default, h("input", {
                "class": "el-upload__input",
                attrs: { type: "file",

                    name: name,

                    multiple: multiple,
                    accept: accept
                },
                ref: "input", on: {
                    "change": handleChange
                }
            })]
        );
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_uploadvue_type_script_lang_js_ = (uploadvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload.vue
var upload_render, upload_staticRenderFns




/* normalize component */

var upload_component = normalizeComponent(
  src_uploadvue_type_script_lang_js_,
  upload_render,
  upload_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_api; }
upload_component.options.__file = "packages/upload/src/upload.vue"
/* harmony default export */ var src_upload = (upload_component.exports);
// CONCATENATED MODULE: ./src/mixins/migrating.js

/**
 * Show migrating guide in browser console.
 *
 * Usage:
 * import Migrating from 'main/mixins/migrating';
 *
 * mixins: [Migrating]
 *
 * add getMigratingConfig method for your component.
 *  getMigratingConfig() {
 *    return {
 *      props: {
 *        'allow-no-selection': 'allow-no-selection is removed.',
 *        'selection-mode': 'selection-mode is removed.'
 *      },
 *      events: {
 *        selectionchange: 'selectionchange is renamed to selection-change.'
 *      }
 *    };
 *  },
 */
/* harmony default export */ var migrating = ({
  mounted: function mounted() {
    if (true) return;
    if (!this.$vnode) return;

    var _getMigratingConfig = this.getMigratingConfig(),
        _getMigratingConfig$p = _getMigratingConfig.props,
        props = _getMigratingConfig$p === undefined ? {} : _getMigratingConfig$p,
        _getMigratingConfig$e = _getMigratingConfig.events,
        events = _getMigratingConfig$e === undefined ? {} : _getMigratingConfig$e;

    var _$vnode = this.$vnode,
        data = _$vnode.data,
        componentOptions = _$vnode.componentOptions;

    var definedProps = data.attrs || {};
    var definedEvents = componentOptions.listeners || {};

    for (var propName in definedProps) {
      propName = kebabCase(propName); // compatible with camel case
      if (props[propName]) {
        console.warn("[Element Migrating][" + this.$options.name + "][Attribute]: " + props[propName]);
      }
    }

    for (var eventName in definedEvents) {
      eventName = kebabCase(eventName); // compatible with camel case
      if (events[eventName]) {
        console.warn("[Element Migrating][" + this.$options.name + "][Event]: " + events[eventName]);
      }
    }
  },

  methods: {
    getMigratingConfig: function getMigratingConfig() {
      return {
        props: {},
        events: {}
      };
    }
  }
});
// EXTERNAL MODULE: external "mime"
var external_mime_ = __webpack_require__(18);
var external_mime_default = /*#__PURE__*/__webpack_require__.n(external_mime_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-main.vue?vue&type=script&lang=js&







/* harmony default export */ var upload_mainvue_type_script_lang_js_ = ({
    name: "DgUpload",

    mixins: [migrating],

    components: {
        UploadList: upload_list,
        Upload: src_upload
    },

    provide: function provide() {
        return {
            uploader: this
        };
    },


    inject: {
        elForm: {
            default: ""
        }
    },

    props: {
        // 新增属性
        serverUrl: String,
        showTrigger: {
            type: Boolean,
            default: true
        },
        showUploadIcon: Boolean,
        showOne: Boolean,
        listSlot: Function,
        defaultOpt: Object,
        size: [String, Number],
        // 原有属性
        action: String,
        headers: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        data: Object,
        multiple: Boolean,
        name: {
            type: String,
            default: "file"
        },
        drag: Boolean,
        dragger: Boolean,
        withCredentials: Boolean,
        showFileList: {
            type: Boolean,
            default: true
        },
        accept: String,
        type: {
            type: String,
            default: "select"
        },
        beforeUpload: Function,
        beforeRemove: Function,
        onRemove: {
            type: Function,
            default: unit_noop
        },
        onChange: {
            type: Function,
            default: unit_noop
        },
        onPreview: {
            type: Function
        },
        onSuccess: {
            type: Function,
            default: unit_noop
        },
        onProgress: {
            type: Function,
            default: unit_noop
        },
        onError: {
            type: Function,
            default: unit_noop
        },
        fileList: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        autoUpload: {
            type: Boolean,
            default: true
        },
        listType: {
            type: String,
            default: "text" // text,picture,picture-card
        },
        httpRequest: Function,
        disabled: Boolean,
        limit: Number,
        onExceed: {
            type: Function,
            default: unit_noop
        },
        errorImg: String
    },

    data: function data() {
        return {
            uploadFiles: [],
            dragOver: false,
            draging: false,
            tempIndex: 1
        };
    },


    computed: {
        uploadDisabled: function uploadDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
        }
    },

    watch: {
        listType: function listType(type) {
            if (type === "picture-card" || type === "picture") {
                this.uploadFiles = this.uploadFiles.map(function (file) {
                    if (!file.url && file.raw) {
                        try {
                            file.url = URL.createObjectURL(file.raw);
                        } catch (err) {
                            console.error("[Element Error][Upload]", err);
                        }
                    }
                    return file;
                });
            }
        },

        fileList: {
            immediate: true,
            handler: function handler(fileList) {
                var _this = this;

                this.uploadFiles = fileList.map(function (item) {
                    item.type = item.type || typeBySuffix(item[_this.defaultOpt.name]);
                    item.uid = item.uid || Date.now() + _this.tempIndex++;
                    item.status = item.status || "success";
                    return item;
                });
            }
        }
    },

    methods: {
        handleStart: function handleStart(rawFile) {
            rawFile.uid = Date.now() + this.tempIndex++;
            var file = {
                status: "ready",
                name: rawFile.name,
                size: rawFile.size,
                type: external_mime_default.a.getExtension(rawFile.type),
                percentage: 0,
                uid: rawFile.uid,
                raw: rawFile
            };
            if (this.listType === "picture-card" || this.listType === "picture") {
                try {
                    file.url = URL.createObjectURL(rawFile);
                } catch (err) {
                    console.error("[Element Error][Upload]", err);
                    return;
                }
            }
            this.uploadFiles.push(file);
            this.onChange(file, this.uploadFiles);
        },
        handleProgress: function handleProgress(ev, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
                this.onProgress(ev, file, this.uploadFiles);
                file.status = "uploading";
                file.percentage = ev.percent || 0;
            }
        },
        handleSuccess: function handleSuccess(res, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
                file.status = "success";
                file.response = res;

                this.onSuccess(res, file, this.uploadFiles);
                this.onChange(file, this.uploadFiles);
            }
        },
        handleError: function handleError(err, rawFile) {
            var file = this.getFile(rawFile);
            var fileList = this.uploadFiles;

            file.status = "fail";

            fileList.splice(fileList.indexOf(file), 1);

            this.onError(err, file, this.uploadFiles);
            this.onChange(file, this.uploadFiles);
        },
        handleRemove: function handleRemove(file, raw, sizeBool) {
            var _this2 = this;

            if (raw) {
                file = this.getFile(raw);
            }
            var doRemove = function doRemove() {
                _this2.abort(file);
                var fileList = _this2.uploadFiles;
                fileList.splice(fileList.indexOf(file), 1);
                _this2.onRemove(file, fileList, sizeBool);
            };

            if (!this.beforeRemove) {
                doRemove();
            } else if (typeof this.beforeRemove === "function") {
                var before = this.beforeRemove(file, this.uploadFiles, sizeBool);
                if (before && before.then) {
                    before.then(function () {
                        doRemove();
                    }, unit_noop);
                } else if (before !== false) {
                    doRemove();
                }
            }
        },
        getFile: function getFile(rawFile) {
            var fileList = this.uploadFiles;
            var target = void 0;
            fileList.every(function (item) {
                target = rawFile.uid === item.uid ? item : null;
                return !target;
            });
            return target;
        },
        abort: function abort(file) {
            this.$refs["upload-inner"].abort(file);
        },
        clearFiles: function clearFiles() {
            this.uploadFiles = [];
        },
        submit: function submit() {
            var _this3 = this;

            this.uploadFiles.filter(function (file) {
                return file.status === "ready";
            }).forEach(function (file) {
                _this3.$refs["upload-inner"].upload(file.raw);
            });
        },
        getMigratingConfig: function getMigratingConfig() {
            return {
                props: {
                    "default-file-list": "default-file-list is renamed to file-list.",
                    "show-upload-list": "show-upload-list is renamed to show-file-list.",
                    "thumbnail-mode": "thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan"
                }
            };
        }
    },

    beforeDestroy: function beforeDestroy() {
        this.uploadFiles.forEach(function (file) {
            if (file.url && file.url.indexOf("blob:") === 0) {
                URL.revokeObjectURL(file.url);
            }
        });
    },
    render: function render(h) {
        var uploadList = void 0;

        if (this.showFileList) {
            uploadList = h(
                upload_list,
                {
                    attrs: {
                        "server-url": this.serverUrl,
                        "show-upload-icon": this.showUploadIcon,
                        defaultOpt: this.defaultOpt,
                        disabled: this.uploadDisabled,
                        listType: this.listType,
                        files: this.uploadFiles,

                        handlePreview: this.onPreview,
                        "error-img": this.errorImg
                    },
                    on: {
                        "remove": this.handleRemove
                    }
                },
                [this.listSlot || this.$slots.list]
            );
        }

        var uploadData = {
            props: {
                'server-url': this.serverUrl,
                showTrigger: this.showTrigger,
                size: this.size,
                type: this.type,
                drag: this.drag,
                action: this.action,
                multiple: this.multiple,
                "before-upload": this.beforeUpload,
                "with-credentials": this.withCredentials,
                headers: this.headers,
                name: this.name,
                data: this.data,
                accept: this.accept,
                fileList: this.uploadFiles,
                autoUpload: this.autoUpload,
                listType: this.listType,
                disabled: this.uploadDisabled,
                limit: this.limit,
                "on-exceed": this.onExceed,
                "on-start": this.handleStart,
                "on-progress": this.handleProgress,
                "on-success": this.handleSuccess,
                "on-error": this.handleError,
                "on-preview": this.onPreview,
                "on-remove": this.handleRemove,
                "http-request": this.httpRequest
            },
            ref: "upload-inner"
        };

        var trigger = this.$slots.trigger || this.$slots.default;
        var uploadComponent = h(
            "upload",
            uploadData,
            [trigger]
        );

        return h("div", [this.$slots.uploadList, this.listType === "picture-card" ? uploadList : "", this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== "picture-card" ? uploadList : ""]);
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_mainvue_type_script_lang_js_ = (upload_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload-main.vue
var upload_main_render, upload_main_staticRenderFns




/* normalize component */

var upload_main_component = normalizeComponent(
  src_upload_mainvue_type_script_lang_js_,
  upload_main_render,
  upload_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_main_api; }
upload_main_component.options.__file = "packages/upload/src/upload-main.vue"
/* harmony default export */ var upload_main = (upload_main_component.exports);
// EXTERNAL MODULE: external "element-ui/lib/utils/popup/popup-manager"
var popup_manager_ = __webpack_require__(5);
var popup_manager_default = /*#__PURE__*/__webpack_require__.n(popup_manager_);

// EXTERNAL MODULE: external "viewerjs"
var external_viewerjs_ = __webpack_require__(8);
var external_viewerjs_default = /*#__PURE__*/__webpack_require__.n(external_viewerjs_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/main.vue?vue&type=script&lang=js&
var src_mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










/* harmony default export */ var upload_src_mainvue_type_script_lang_js_ = ({
    name: 'DgUpload',

    mixins: [emitter],

    inject: {
        elForm: {
            default: ""
        },
        elFormItem: {
            default: ""
        }
    },

    components: {
        Upload: upload_main,
        ElDialog: external_element_ui_["Dialog"],
        ElButton: external_element_ui_["Button"],
        ElCarousel: external_element_ui_["Carousel"],
        ElCarouselItem: external_element_ui_["CarouselItem"]
    },

    props: {
        // form
        validateEvent: {
            type: Boolean,
            default: true
        },
        action: String,
        value: [String, Array],
        leaflet: Boolean,
        showOne: Boolean,
        disabled: Boolean,
        tipMsg: [String, Boolean],
        accept: String,
        size: [String, Number],
        limit: Number,
        fileList: Array,
        listType: {
            type: String,
            default: 'text'
        },
        seq: {
            type: String,
            default: ','
        },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 请求数据处理
        reqFunction: Function,
        // 响应的数据类型
        resFunction: Function,
        // 资源服务器前缀
        serverUrl: {
            type: String,
            default: ''
        },
        props: Object,
        valueName: String,
        labelName: String,
        // 是否展示缩放图标
        iconZoom: {
            type: Boolean,
            default: false
        },
        // 是否展示删除图标
        iconDelete: {
            type: Boolean,
            default: false
        },
        // 是否展示增加图标
        iconPlus: {
            type: Boolean,
            default: false
        },
        carouselHeight: {
            type: String,
            default: '120px'
        },
        onExceed: Function,
        onPreview: Function,
        onRemove: Function,
        onSuccess: Function,
        onProgress: Function,
        errorImg: String
    },

    data: function data() {
        return {
            index: 0,
            showbottom: 3,
            dialogImageUrl: '',
            // dialogVisible: false,
            imageUrlViewer: null
        };
    },


    computed: {
        carousel: function carousel() {
            return {
                autoplay: false,
                'indicator-position': 'none',
                arrow: 'never'
            };
        },
        error: function error() {
            var errorImg = this.errorImg;

            return errorImg ? 'this.src="' + errorImg + '"; this.onerror=null;' : '';
        },
        defaultOpt: function defaultOpt() {
            var _props = this.props,
                props = _props === undefined ? {} : _props,
                labelName = this.labelName,
                valueName = this.valueName;


            return {
                name: labelName || props.name || 'name',
                url: valueName || props.url || 'url'
            };
        },
        message: function message() {
            var tipMsg = this.tipMsg,
                size = this.size,
                accept = this.accept,
                limit = this.limit;


            if (tipMsg) {
                return tipMsg;
            }

            if (tipMsg === false) {
                return false;
            }

            var arr = [];

            if (accept) {
                arr.push('\u9650\u5236\u7C7B\u578B' + accept);
            }

            if (limit) {
                arr.push('\u9650\u5236\u9009\u62E9' + limit + '\u4E2A');
            }

            if (size) {
                var sType = sizeType(size);

                if (sType === '[object String]') {
                    arr.push('\u9650\u5236\u5927\u5C0F' + size);
                } else if (sType === '[object Number]') {
                    arr.push('\u9650\u5236\u5927\u5C0F' + fileSize(size));
                }
            }

            return '\u6587\u4EF6' + arr.join('、');
        },


        // 对数据进行处理
        imgList: function imgList() {
            var _this = this;

            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            return arr.map(function (item) {
                item._url = _this.getUrl(item);
                return item;
            });
        },
        fileLength: function fileLength() {
            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            return arr.length;
        },


        // 获取文件中列表的URL
        imageUrl: function imageUrl() {
            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            if (arr.length) {
                return this.getUrl(arr[arr.length - 1]);
            }
            return '';
        },
        _attrs: function _attrs() {
            var listType = this.listType,
                $attrs = this.$attrs,
                $props = this.$props;

            var attr = src_mainvue_type_script_lang_js_extends({}, $attrs, $props);
            attr['errorImg'] = this.errorImg;
            attr.ref = 'upload';
            attr['onProgress'] = this._handleProgress;
            attr['onRemove'] = this._handleRemove;
            attr['onSuccess'] = this._handleSuccess;
            attr['onExceed'] = this._handleExceed;
            attr['onPreview'] = this._handlePreview;
            attr.action = this.action;
            attr['server-url'] = this.serverUrl;
            attr['fileList'] = this.fileValue(this.value || this.fileList);
            attr.defaultOpt = this.defaultOpt;

            if (['avatar', 'button', 'viewer', 'pictureList'].indexOf(listType) !== -1) {
                attr['listType'] = 'text';

                switch (listType) {
                    case 'button':
                        break;
                    case 'avatar':
                        attr['showFileList'] = false;
                        break;
                    case 'pictureList':
                        attr['showFileList'] = false;
                        break;
                    case 'viewer':
                        attr['listType'] = 'picture-card';
                        attr['onPreview'] = this._handleViewerPreview;
                        break;
                }
            }

            return attr;
        }
    },

    watch: {
        value: function value(val) {
            if (this.validateEvent) {
                this.dispatch('ElFormItem', 'el.form.change', [val]);
            }
        }
    },

    methods: {
        submit: function submit() {
            var _this2 = this;

            this.$nextTick(function () {
                _this2.$refs.upload.submit();
            });
        },
        abort: function abort(file) {
            var _this3 = this;

            this.$nextTick(function () {
                _this3.$refs.upload.abort(file);
            });
        },
        clearFiles: function clearFiles() {
            var _this4 = this;

            this.$nextTick(function () {
                _this4.$refs.upload.clearFiles();
            });
        },
        getImg: function getImg(url) {
            var serverUrl = this.serverUrl;

            return (/^\//.test(url) ? serverUrl + url : url
            );
        },
        getUrl: function getUrl(item) {
            var isFile = Object.prototype.toString.call(item.raw) === '[object File]';
            return item[this.defaultOpt.url] || isFile && URL.createObjectURL(item.raw) || '';
        },


        // value 或 fileList 的数据转换
        fileValue: function fileValue(val) {
            var _this5 = this;

            // 对象解构简化写法 const { name, url } = defaultOpt
            var _defaultOpt = this.defaultOpt,
                name = _defaultOpt.name,
                url = _defaultOpt.url,
                reqFunction = this.reqFunction,
                seq = this.seq;
            /*
            [BUG]
            描述
            如果没有更新 Upload (比如插入,删除等)，更新 Upload 父组件中的 $data 会造成 upload-list 重新渲
            原因
            这里不能深度拷贝，upload-list 中有 map 更新 fileList 数据
            */

            var arr = str2arr(val, seq, false);
            if (external_lodash_default.a.isString(val)) {
                arr.forEach(function (item) {
                    var _ref;

                    return _ref = {}, _ref[name] = null, _ref[url] = item, _ref._url = item, _ref;
                });
            } else {
                arr.forEach(function (item) {
                    if (!item[url]) {
                        var _url = _this5.getUrl(item);
                        item[url] = _url;
                        item._url = _url;
                    }
                });
            }
            return reqFunction ? reqFunction(arr) : arr;
        },


        // pictureList-start
        // 翻页
        pageturning: function pageturning(type) {
            var index = this.index,
                fileLength = this.fileLength;

            if (type === 'next') {
                this.index = index < fileLength - 1 ? index + 1 : fileLength - 1;
            } else {
                this.index = index > 0 ? index - 1 : 0;
            }
            this.handleIndicator(type, this.index);
        },


        // 查看
        handleZoomIn: function handleZoomIn() {
            var index = this.index,
                imgList = this.imgList,
                getUrl = this.getUrl;

            this.dialogImageUrl = getUrl(imgList[index]);
            // this.dialogVisible = true;
            this._handleViewerShow(index);
        },


        // 删除
        handleDelete: function handleDelete() {
            var index = this.index,
                imgList = this.imgList;

            var fileList = external_lodash_default.a.cloneDeep(imgList);
            var file = fileList.splice(index, 1);
            this.index = index > 0 ? index - 1 : 0;
            this.$refs.hrl.setActiveItem(this.index);
            this._handleRemove(file, fileList);
        },


        // 上传事件
        handlePlus: function handlePlus() {
            this.$refs.uploadBtn.click();
        },

        // pictureList-end

        handleIndicator: function handleIndicator(type, index) {
            var hrl = this.$refs.hrl;
            this.index = index;
            hrl.setActiveItem(index);
        },


        // 进度条控制
        _handleProgress: function _handleProgress(event, file, fileList) {
            this._handleChangeData(fileList);
            this.onProgress && this.onProgress(event, file, fileList);
        },
        _handleChangeData: function _handleChangeData(fileList) {
            var listType = this.listType,
                resFunction = this.resFunction;


            if (external_lodash_default.a.isArray(fileList) && fileList.length > 1) {
                if (listType === 'avatar') {
                    fileList = [fileList.pop()];
                }

                if (listType === 'pictureList' && this.leaflet) {
                    fileList = [fileList.pop()];
                }
            }
            this.$emit('input', resFunction ? this.resFunction(fileList) : fileList);
        },
        _handleSuccess: function _handleSuccess(res, file, fileList) {
            this._handleChangeData(fileList);
            this.onSuccess && this.onSuccess(res, file, fileList);
        },
        _handleRemove: function _handleRemove(file, fileList, sizeBool) {
            this._handleChangeData(fileList);
            this.onRemove && this.onRemove(file, fileList, sizeBool);
        },
        _handleExceed: function _handleExceed(files, fileList) {
            if (this.limit && !this.onExceed) {
                this.$message.warning('\u5F53\u524D\u9650\u5236\u9009\u62E9 ' + this.limit + ' \u4E2A\u6587\u4EF6\uFF0C\u672C\u6B21\u9009\u62E9\u4E86 ' + files.length + ' \u4E2A\u6587\u4EF6\uFF0C\u5171\u9009\u62E9\u4E86 ' + (files.length + fileList.length) + ' \u4E2A\u6587\u4EF6');
                return;
            }
            this.onExceed && this.onExceed(files, fileList);
        },
        _handlePreview: function _handlePreview(file) {
            var listType = this.listType,
                defaultOpt = this.defaultOpt,
                serverUrl = this.serverUrl;
            var name = defaultOpt.name,
                url = defaultOpt.url;


            if (file[url] && !this.onPreview && listType && listType.indexOf('picture-card') === -1) {
                linkDown(serverUrl + file[url], file[name]);
                return;
            }

            this.onPreview && this.onPreview(file);
        },
        _handleViewerPreview: function _handleViewerPreview(file, index) {
            // this.dialogVisible = true;
            this._handleViewerShow(index);
            this.index = index;
            this.onPreview && this.onPreview(file);
        },

        /**
         * 图片预览方法
         *
         * @param index
         * @return {boolean}
         * @private
         */
        _handleViewerShow: function _handleViewerShow(index) {
            // 检测是否存在图片文件
            if (!this.imageUrlViewer) return false;

            // 刷新图片数据
            this.imageUrlViewer.update();

            if (index === 'underfined') {
                this.imageUrlViewer.show();
            } else {
                this.imageUrlViewer.view(index);
            }
        }
    },

    mounted: function mounted() {
        var _this6 = this;

        this.$nextTick(function () {
            if (_this6.$refs.imageUrl) {
                _this6.imageUrlViewer = new external_viewerjs_default.a(_this6.$refs.imageUrl, {
                    zIndex: popup_manager_default.a.nextZIndex(),
                    zIndexInline: popup_manager_default.a.nextZIndex()
                });
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/upload/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_upload_src_mainvue_type_script_lang_js_ = (upload_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/main.vue





/* normalize component */

var upload_src_main_component = normalizeComponent(
  packages_upload_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_76177bbe_render,
  mainvue_type_template_id_76177bbe_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_src_main_api; }
upload_src_main_component.options.__file = "packages/upload/src/main.vue"
/* harmony default export */ var upload_src_main = (upload_src_main_component.exports);
// CONCATENATED MODULE: ./packages/upload/index.js


/* istanbul ignore next */
upload_src_main.install = function (Vue) {
  Vue.component(upload_src_main.name, upload_src_main);
};

/* harmony default export */ var packages_upload = (upload_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/viewer/src/main.vue?vue&type=template&id=7d3d3b4d&
var mainvue_type_template_id_7d3d3b4d_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { ref: "viewer", staticClass: "dg_viewer" },
    [
      _vm.$scopedSlots.listItem
        ? [_vm._t("listItem", null, { list: _vm.list })]
        : _vm._l(_vm.list, function(item, index) {
            return _c("span", { key: index, staticClass: "dg_viewer_item" }, [
              item instanceof Object
                ? _c("img", { attrs: { src: item.url, alt: item.title } })
                : _c("img", { attrs: { src: item } })
            ])
          })
    ],
    2
  )
}
var mainvue_type_template_id_7d3d3b4d_staticRenderFns = []
mainvue_type_template_id_7d3d3b4d_render._withStripped = true


// CONCATENATED MODULE: ./packages/viewer/src/main.vue?vue&type=template&id=7d3d3b4d&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/viewer/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




var TOOLBAR_OPTIONS = {
    // {key: Boolean | Number | String | Function}，{key: {show: Boolean | Number, size: String, click: Function }}， sizes: "small", "medium" (default) and "large"
    zoomIn: 1,
    zoomOut: 1,
    oneToOne: 1,
    reset: 1,
    prev: 1,
    play: 1,
    next: 1,
    rotateLeft: 1,
    rotateRight: 1,
    flipHorizontal: 1,
    flipVertical: 1
};

/* harmony default export */ var viewer_src_mainvue_type_script_lang_js_ = ({
    name: 'DgViewer',
    props: {
        images: {
            type: [String, Object, Array]
        },
        visible: {
            type: Boolean,
            default: false
        },
        inline: {
            // 是否启用内联模式
            type: Boolean,
            default: false
        },
        button: {
            // 显示右上角的按钮
            type: Boolean,
            default: true
        },
        navbar: {
            // 导航栏的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示
            type: [Boolean, Number],
            default: 1
        },
        title: {
            // 标题的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示, Function: 自定义标题内容，[Number, Function]： Function(image, imageData)
            type: [Boolean, Number, Function, Array],
            default: 1
        },
        toolbarType: {
            // 工具栏的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示
            type: [Boolean, Number],
            default: 1
        },
        toolbarOptions: {
            // 工具栏按钮的可见性和布局
            type: Object
        },
        tooltipShow: {
            // 放大或缩小时图像比率（百分比）提示
            type: Boolean,
            default: true
        },
        movable: {
            // 是否可以移动图像
            type: Boolean,
            default: true
        },
        zoomable: {
            // 是否可以放大缩小图像
            type: Boolean,
            default: true
        },
        rotatable: {
            // 是否可以旋转图像
            type: Boolean,
            default: true
        },
        scalable: {
            // 是否可以翻转图像
            type: Boolean,
            default: true
        },
        transition: {
            // 是否启用transition
            type: Boolean,
            default: true
        },
        fullscreen: {
            // 是否可以查看原始图片大小
            type: Boolean,
            default: true
        },
        keyboard: {
            // 是否启用键盘
            type: Boolean,
            default: true
        },
        backdrop: {
            // 是否启用遮罩，static不可点击遮罩关闭
            type: [Boolean, String],
            default: true
        },
        loading: {
            // 加载图像时是否显示加载动画
            type: Boolean,
            default: true
        },
        loop: {
            // 是否启用循环
            type: Boolean,
            default: true
        },
        interval: {
            // 自动循环播放时间间隔
            type: Number,
            default: 5000
        },
        minWidth: {
            // 最小宽度
            type: Number,
            default: 200
        },
        minHeight: {
            // 最小高度
            type: Number,
            default: 200
        },
        zoomRatio: {
            // 鼠标缩放图像时的比率
            type: Number,
            default: 0.1
        },
        minZoomRatio: {
            // 最小缩放图像比率
            type: Number,
            default: 0.01
        },
        maxZoomRatio: {
            // 最大缩放图像比率
            type: Number,
            default: 100
        },
        zIndex: {
            // z-index值
            type: Number,
            default: function _default() {
                return popup_manager_default.a.nextZIndex();
            }
        },
        zIndexInline: {
            // 内联模式z-index值
            type: Number,
            default: function _default() {
                return popup_manager_default.a.nextZIndex();
            }
        },
        url: {
            // 占位图片
            type: [String, Function],
            default: 'src'
        },
        container: {
            // 插入位置
            type: [Element, String],
            Default: 'body'
        },
        filter: {
            // 顾虑器
            type: Function
        },
        toggleOnDblclick: {
            // 双击功能
            type: Boolean,
            default: true
        },
        value: {
            type: Number
        }
    },
    data: function data() {
        return {
            list: [],
            index: 0,
            toolbar: '',
            closed: false
        };
    },

    watch: {
        images: function images() {
            var _this = this;

            this.$nextTick(function () {
                _this.update();
            });
        },
        visible: function visible(newVal) {
            if (this.closed === newVal) return;
            this.closed = newVal;
            if (newVal) {
                this.show();
            } else {
                this.hide();
            }
        },
        index: function index() {
            this.$emit('input', this.index);
        },
        value: function value() {
            if (!this.value && this.value !== 0) return;
            this.view(this.value);
        }
    },
    created: function created() {
        var _this2 = this;

        this._optionsInit();
        this.$nextTick(function () {
            _this2._viewerInit();
        });
    },
    beforeDestroy: function beforeDestroy() {
        this.destroy();
    },

    methods: {
        _optionsInit: function _optionsInit() {
            if (this.images instanceof Array) {
                this.list = this.images;
            } else {
                this.list = [this.images];
            }
            this.index = this.value;
            if (this.toolbarOptions) {
                this.toolbar = Object.assign(TOOLBAR_OPTIONS, this.toolbarOptions);
            } else {
                this.toolbar = this.toolbarType;
            }
            this.closed = this.visible;
        },
        _viewerInit: function _viewerInit() {
            var _this3 = this;

            this.viewer = new external_viewerjs_default.a(this.$refs.viewer, {
                initialViewIndex: this.index,
                inline: this.inline,
                button: this.button,
                navbar: this.navbar,
                title: this.title,
                toolbar: this.toolbar,
                tooltip: this.tooltipShow,
                movable: this.movable,
                zoomable: this.zoomable,
                rotatable: this.rotatable,
                scalable: this.scalable,
                transition: this.transition,
                fullscreen: this.fullscreen,
                keyboard: this.keyboard,
                backdrop: this.backdrop,
                loading: this.loading,
                loop: this.loop,
                interval: this.interval,
                minWidth: this.minWidth,
                minHeight: this.minHeight,
                zoomRatio: this.zoomRatio,
                minZoomRatio: this.minZoomRatio,
                maxZoomRatio: this.maxZoomRatio,
                zIndex: this.zIndex,
                zIndexInline: this.zIndexInline,
                url: this.url,
                container: this.container,
                filter: this.filter,
                toggleOnDblclick: this.toggleOnDblclick,
                ready: function ready(event) {
                    // 初始化ready事件
                    _this3.$emit('ready', event);
                },
                show: function show(event) {
                    // 显示事件-开始
                    _this3.$emit('show', event);
                },
                shown: function shown(event) {
                    // 显示事件-结束
                    _this3.closed = true;
                    _this3.$emit('shown', event);
                    _this3.$emit('update:visible', true);
                },
                hide: function hide(event) {
                    // 隐藏事件-开始
                    _this3.$emit('hide', event);
                },
                hidden: function hidden(event) {
                    // 隐藏事件-结束
                    _this3.closed = false;
                    _this3.$emit('hidden', event);
                    _this3.$emit('update:visible', false);
                },
                view: function view(event) {
                    // 切换事件-开始
                    _this3.$emit('view', event);
                },
                viewed: function viewed(event) {
                    // 切换事件-结束
                    _this3.index = event.detail.index;
                    _this3.$emit('viewed', event);
                },
                zoom: function zoom(event) {
                    // 缩放事件-开始
                    _this3.$emit('zoom', event);
                },
                zoomed: function zoomed(event) {
                    // 缩放事件-结束
                    _this3.$emit('zoomed', event);
                }
            });
            if (this.visible) {
                this.show();
            }
        },

        // 显示 immediate = 是否立即显示
        show: function show(immediate) {
            this.viewer.show(immediate);
            return this;
        },

        // 隐藏 immediate = 是否立即隐藏
        hide: function hide(immediate) {
            this.viewer.hide(immediate);
            return this;
        },

        // 切换到图像到索引的图像位置，如果未显示灯箱，将首先显示灯箱。index = 索引
        view: function view(index) {
            this.viewer.view(index);
            return this;
        },

        // 上一张，如果未显示灯箱，将首先显示灯箱。 loop = 是否循环
        prev: function prev(loop) {
            this.viewer.prev(loop);
            return this;
        },

        // 下一张，如果未显示灯箱，将首先显示灯箱。 loop = 是否循环
        next: function next(loop) {
            this.viewer.next(loop);
            return this;
        },

        // 移动 offsetX = '在水平方向上移动尺寸（px）', offsetX = '在垂直方向移动尺寸（px）， 不填默认与offsetX相同'
        move: function move(offsetX, offsetY) {
            this.viewer.move(offsetX, offsetY);
            return this;
        },

        // 移动到 x = '在水平方向移动到（px）', y = '在垂直方向移动到（px）， 不填默认与x相同'
        moveTo: function moveTo(x, y) {
            this.viewer.moveTo(x, x);
            return this;
        },

        // 缩放 ratio = '缩放比例，正数放大，负数缩小'， hasTooltip = '是否显示提示'
        zoom: function zoom(ratio, hasTooltip) {
            this.viewer.zoom(ratio, hasTooltip);
            return this;
        },

        // 缩放到 ratio = '缩放到大小'， hasTooltip = '是否显示提示'
        zoomTo: function zoomTo(ratio, hasTooltip) {
            this.viewer.zoomTo(ratio, hasTooltip);
            return this;
        },

        // 旋转 ratio = '旋转角度，正数顺时针，负数逆时针'
        rotate: function rotate(degree) {
            this.viewer.rotate(degree);
            return this;
        },

        // 旋转到 ratio = '旋转到角度'
        rotateTo: function rotateTo(degree) {
            this.viewer.rotateTo(degree);
            return this;
        },

        // 拉伸 scaleX = '在水平方向上拉伸比例', scaleY = '在垂直方向拉伸比例， 不填默认与scaleX相同'
        scale: function scale(scaleX, scaleY) {
            this.viewer.scale(scaleX, scaleY);
            return this;
        },

        // 水平方向上拉伸 scaleX = '在水平方向上拉伸比例'
        scaleX: function scaleX(_scaleX) {
            this.viewer.scaleX(_scaleX);
            return this;
        },

        // 垂直方向上拉伸 scaleY = '在垂直方向上拉伸比例'
        scaleY: function scaleY(_scaleY) {
            this.viewer.scaleY(_scaleY);
            return this;
        },

        // 播放 fullscreen = '是否全屏'
        play: function play(fullscreen) {
            this.viewer.play(fullscreen);
            return this;
        },

        // 停止播放
        stop: function stop() {
            this.viewer.stop();
            return this;
        },

        // 进入模态模式
        full: function full() {
            this.viewer.full();
            return this;
        },

        // 退出模态模式
        exit: function exit() {
            this.viewer.exit();
            return this;
        },

        // 显示当前比例
        tooltip: function tooltip() {
            this.viewer.tooltip();
            return this;
        },

        // 切换到在自然大小
        toggle: function toggle() {
            this.viewer.toggle();
            return this;
        },

        // 初始化
        reset: function reset() {
            this.viewer.reset();
            return this;
        },

        // 更新
        update: function update() {
            this.viewer.update();
            return this;
        },

        // 销毁
        destroy: function destroy() {
            this.viewer.destroy();
        }
    }
});
// CONCATENATED MODULE: ./packages/viewer/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_viewer_src_mainvue_type_script_lang_js_ = (viewer_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/viewer/src/main.vue





/* normalize component */

var viewer_src_main_component = normalizeComponent(
  packages_viewer_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_7d3d3b4d_render,
  mainvue_type_template_id_7d3d3b4d_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var viewer_src_main_api; }
viewer_src_main_component.options.__file = "packages/viewer/src/main.vue"
/* harmony default export */ var viewer_src_main = (viewer_src_main_component.exports);
// CONCATENATED MODULE: ./packages/viewer/index.js


/* istanbul ignore next */
viewer_src_main.install = function (Vue) {
  Vue.component(viewer_src_main.name, viewer_src_main);
};

/* harmony default export */ var viewer = (viewer_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/main.vue?vue&type=template&id=5febe2cc&
var mainvue_type_template_id_5febe2cc_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-tree-select" },
    [
      _c(
        "l-select",
        _vm._b(
          {
            attrs: {
              "tree-data": _vm.data,
              "scrollbar-class": _vm.scrollbarCls
            },
            on: {
              "visible-change": _vm.handleSelectFilerClose,
              clear: _vm.clearDeaulf
            },
            model: {
              value: _vm.val,
              callback: function($$v) {
                _vm.val = $$v
              },
              expression: "val"
            }
          },
          "l-select",
          _vm.selectProp,
          false
        ),
        [
          _c(
            "dg-tree",
            _vm._g(
              _vm._b(
                {
                  ref: "tree",
                  on: { "check-change": _vm.handleCheckChange },
                  model: {
                    value: _vm.checkedTree,
                    callback: function($$v) {
                      _vm.checkedTree = $$v
                    },
                    expression: "checkedTree"
                  }
                },
                "dg-tree",
                _vm.treeBind,
                false
              ),
              _vm.$listeners
            )
          )
        ],
        1
      )
    ],
    1
  )
}
var mainvue_type_template_id_5febe2cc_staticRenderFns = []
mainvue_type_template_id_5febe2cc_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-select/src/main.vue?vue&type=template&id=5febe2cc&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/option.vue?vue&type=template&id=ecc85670&
var optionvue_type_template_id_ecc85670_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("span", { staticClass: "el-tree-node__label" }, [
    _vm._v(_vm._s(_vm.label))
  ])
}
var optionvue_type_template_id_ecc85670_staticRenderFns = []
optionvue_type_template_id_ecc85670_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-select/src/option.vue?vue&type=template&id=ecc85670&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/option.vue?vue&type=script&lang=js&
//
//
//
//



/* harmony default export */ var optionvue_type_script_lang_js_ = ({
    mixins: [external_element_ui_["Option"]]
});
// CONCATENATED MODULE: ./packages/tree-select/src/option.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree-select/src/option.vue





/* normalize component */

var option_component = normalizeComponent(
  src_optionvue_type_script_lang_js_,
  optionvue_type_template_id_ecc85670_render,
  optionvue_type_template_id_ecc85670_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var option_api; }
option_component.options.__file = "packages/tree-select/src/option.vue"
/* harmony default export */ var src_option = (option_component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/base/select.vue?vue&type=template&id=64b53866&
var selectvue_type_template_id_64b53866_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "clickoutside",
          rawName: "v-clickoutside",
          value: _vm.handleClose,
          expression: "handleClose"
        }
      ],
      class: [
        "el-select",
        _vm.selectSize ? "el-select--" + _vm.selectSize : ""
      ],
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.toggleMenu($event)
        }
      }
    },
    [
      _vm.multiple
        ? _c(
            "div",
            {
              ref: "tags",
              staticClass: "el-select__tags",
              style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
            },
            [
              _vm.collapseTags && _vm.selected.length
                ? _c(
                    "span",
                    [
                      _c(
                        "el-tag",
                        {
                          attrs: {
                            "disable-transitions": "",
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: _vm.selected[0].hitState
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, _vm.selected[0])
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: _vm.selected[0].currentLabel }
                            },
                            [_vm._v(_vm._s(_vm.selected[0].currentLabel))]
                          )
                        ]
                      ),
                      _vm.selected.length > 1
                        ? _c(
                            "el-tag",
                            {
                              attrs: {
                                closable: false,
                                size: _vm.collapseTagSize,
                                "disable-transitions": "",
                                title: _vm.selectedOtherLabel
                              }
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "el-select__tags-text" },
                                [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                              )
                            ]
                          )
                        : _vm._e()
                    ],
                    1
                  )
                : _vm._e(),
              !_vm.collapseTags
                ? _c(
                    "transition-group",
                    { on: { "after-leave": _vm.resetInputHeight } },
                    _vm._l(_vm.selected, function(item) {
                      return _c(
                        "el-tag",
                        {
                          key: _vm.getValueKey(item),
                          attrs: {
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: item.hitState,
                            "disable-transitions": ""
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, item)
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: item.currentLabel }
                            },
                            [_vm._v(_vm._s(item.currentLabel))]
                          )
                        ]
                      )
                    }),
                    1
                  )
                : _vm._e(),
              _vm.filterable
                ? _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.query,
                        expression: "query"
                      }
                    ],
                    ref: "input",
                    staticClass: "el-select__input",
                    class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                    style: {
                      "flex-grow": "1",
                      "max-width": _vm.inputWidth - 42 + "px",
                      width: _vm.inputLength / (_vm.inputWidth - 32) + "%"
                    },
                    attrs: {
                      type: "text",
                      disabled: _vm.selectDisabled,
                      autocomplete: _vm.autoComplete || _vm.autocomplete
                    },
                    domProps: { value: _vm.query },
                    on: {
                      focus: _vm.handleFocus,
                      blur: function($event) {
                        _vm.softFocus = false
                      },
                      click: function($event) {
                        $event.stopPropagation()
                      },
                      keyup: _vm.managePlaceholder,
                      keydown: [
                        _vm.resetInputState,
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "down", 40, $event.key, [
                              "Down",
                              "ArrowDown"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("next")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "up", 38, $event.key, [
                              "Up",
                              "ArrowUp"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("prev")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.selectOption($event)
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "esc", 27, $event.key, [
                              "Esc",
                              "Escape"
                            ])
                          ) {
                            return null
                          }
                          $event.stopPropagation()
                          $event.preventDefault()
                          _vm.visible = false
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "delete",
                              [8, 46],
                              $event.key,
                              ["Backspace", "Delete", "Del"]
                            )
                          ) {
                            return null
                          }
                          return _vm.deletePrevTag($event)
                        }
                      ],
                      compositionstart: _vm.handleComposition,
                      compositionupdate: _vm.handleComposition,
                      compositionend: _vm.handleComposition,
                      input: [
                        function($event) {
                          if ($event.target.composing) {
                            return
                          }
                          _vm.query = $event.target.value
                        },
                        _vm.debouncedQueryChange
                      ]
                    }
                  })
                : _vm._e()
            ],
            1
          )
        : _vm._e(),
      _c(
        "el-input",
        {
          ref: "reference",
          class: { "is-focus": _vm.visible },
          attrs: {
            title: _vm.selectedLabel,
            type: "text",
            placeholder: _vm.currentPlaceholder,
            name: _vm.name,
            id: _vm.id,
            autocomplete: _vm.autoComplete || _vm.autocomplete,
            size: _vm.selectSize,
            disabled: _vm.selectDisabled,
            readonly: _vm.readonly,
            "validate-event": false
          },
          on: { focus: _vm.handleFocus, blur: _vm.handleBlur },
          nativeOn: {
            keyup: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            keydown: [
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("next")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("prev")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                ) {
                  return null
                }
                $event.preventDefault()
                return _vm.selectOption($event)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                _vm.visible = false
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
                ) {
                  return null
                }
                _vm.visible = false
              }
            ],
            paste: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            mouseenter: function($event) {
              _vm.inputHovering = true
            },
            mouseleave: function($event) {
              _vm.inputHovering = false
            }
          },
          model: {
            value: _vm.selectedLabel,
            callback: function($$v) {
              _vm.selectedLabel = $$v
            },
            expression: "selectedLabel"
          }
        },
        [
          _vm.$slots.prefix
            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
            : _vm._e(),
          _c("template", { slot: "suffix" }, [
            _c("i", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.showClose,
                  expression: "!showClose"
                }
              ],
              class: [
                "el-select__caret",
                "el-input__icon",
                "el-icon-" + _vm.iconClass
              ]
            }),
            _vm.showClose
              ? _c("i", {
                  staticClass:
                    "el-select__caret el-input__icon el-icon-circle-close",
                  on: { click: _vm.handleClearClick }
                })
              : _vm._e()
          ])
        ],
        2
      ),
      _c(
        "transition",
        {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "before-enter": _vm.handleMenuEnter,
            "after-leave": _vm.doDestroy
          }
        },
        [
          _c(
            "el-select-menu",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody }
            },
            [
              _vm.emptyText &&
              (!_vm.allowCreate ||
                _vm.loading ||
                (_vm.allowCreate && _vm.options.length === 0))
                ? [
                    _vm.$slots.empty
                      ? _vm._t("empty")
                      : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                          _vm._v(_vm._s(_vm.emptyText))
                        ])
                  ]
                : _vm._e(),
              _c(
                "dg-scrollbar",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.options.length > 0 && !_vm.loading,
                      expression: "options.length > 0 && !loading"
                    }
                  ],
                  ref: "scrollbar",
                  class: _vm.scrollbarCls,
                  attrs: {
                    "wrap-class": "el-select-dropdown__wrap",
                    "view-class":
                      "el-select-dropdown__list dg-select-dropdown__list"
                  },
                  on: { "scroll-bottom": _vm.handleScrollToBottom }
                },
                [_vm._t("default")],
                2
              )
            ],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var selectvue_type_template_id_64b53866_staticRenderFns = []
selectvue_type_template_id_64b53866_render._withStripped = true


// CONCATENATED MODULE: ./packages/base/select.vue?vue&type=template&id=64b53866&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/base/select.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










var selectvue_type_script_lang_js_Select = complex(external_element_ui_["Select"], ['created', 'watch', 'mounted']);

/* harmony default export */ var base_selectvue_type_script_lang_js_ = ({
    name: 'LSelect',

    componentName: 'LSelect',

    mixins: [selectvue_type_script_lang_js_Select, convert],

    components: {
        DgScrollbar: scrollbar
    },

    props: {
        // 给下拉框追加class
        scrollbarClass: String,

        seq: {
            type: String,
            default: ','
        },

        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },

        // 下拉树组件附加的数据
        treeData: {
            type: Array,
            default: function _default() {
                return [];
            }
        },

        // 追加文本翻译的数据 [{value: value, label: label}]
        translateData: {
            type: Array,
            default: function _default() {
                return [];
            }
        }
    },

    data: function data() {
        return {
            // 本地文本翻译的数据
            translateLocalData: this.translateData
        };
    },


    watch: {
        translateData: function translateData(val) {
            this.translateLocalData = val;
        },
        selectDisabled: function selectDisabled() {
            var _this = this;

            this.$nextTick(function () {
                _this.resetInputHeight();
            });
        },
        placeholder: function placeholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
        },
        value: function value(val, oldVal) {
            if (this.multiple) {
                this.resetInputHeight();
                if (val && val.length > 0 || this.$refs.input && this.query !== '') {
                    this.currentPlaceholder = '';
                } else {
                    this.currentPlaceholder = this.cachedPlaceHolder;
                }
                if (this.filterable && !this.reserveKeyword) {
                    this.query = '';
                    this.handleQueryChange(this.query);
                }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
                this.inputLength = 20;
            }
            if (!valueEquals(val, oldVal)) {
                this.dispatch('ElFormItem', 'el.form.change', val);
            }
        },
        visible: function visible(val) {
            var _this2 = this;

            if (!val) {
                this.broadcast('ElSelectDropdown', 'destroyPopper');
                if (this.$refs.input) {
                    this.$refs.input.blur();
                }
                this.query = '';

                // add author: tangdm descript: 增加搜索查询
                // this.handleQueryChange(this.query);
                this.previousQuery = null;
                this.selectedLabel = '';
                this.inputLength = 20;
                this.menuVisibleOnFocus = false;
                this.resetHoverIndex();
                this.$nextTick(function () {
                    if (_this2.$refs.input && _this2.$refs.input.value === '' && _this2.selected.length === 0) {
                        _this2.currentPlaceholder = _this2.cachedPlaceHolder;
                    }
                });
                if (!this.multiple) {
                    if (this.selected) {
                        if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                            this.selectedLabel = this.createdLabel;
                        } else {
                            this.selectedLabel = this.selected.currentLabel;
                        }
                        if (this.filterable) this.query = this.selectedLabel;
                    }

                    if (this.filterable) {
                        this.currentPlaceholder = this.cachedPlaceHolder;
                    }
                }
            } else {
                this.broadcast('ElSelectDropdown', 'updatePopper');
                if (this.filterable) {
                    this.query = this.remote ? '' : this.selectedLabel;
                    this.handleQueryChange(this.query);
                    if (this.multiple) {
                        this.$refs.input.focus();
                    } else {
                        if (!this.remote) {
                            this.broadcast('ElOption', 'queryChange', '');
                            this.broadcast('ElOptionGroup', 'queryChange');
                        }

                        if (this.selectedLabel) {
                            this.currentPlaceholder = this.selectedLabel;
                            this.selectedLabel = '';
                        }
                    }
                }
            }
            this.$emit('visible-change', val);
        },
        options: function options() {
            var _this3 = this;

            if (this.$isServer) return;
            this.$nextTick(function () {
                _this3.broadcast('ElSelectDropdown', 'updatePopper');
            });
            if (this.multiple) {
                this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll('input');
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
                this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
                this.checkDefaultFirstOption();
            }
        }
    },

    computed: {
        // update author:lutz
        showClose: function showClose() {
            var val = this.getVal();
            var hasValue = this.multiple ? Array.isArray(val) && val.length > 0 : val !== undefined && val !== null && val !== '';
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
        },
        scrollbarCls: function scrollbarCls() {
            var allowCreate = this.allowCreate,
                query = this.query,
                filteredOptionsCount = this.filteredOptionsCount,
                scrollbarClass = this.scrollbarClass;

            return [!allowCreate && query && filteredOptionsCount === 0 ? 'is-empty' : '', scrollbarClass || ''].join(' ');
        },


        // add author: tangdm descript: 增加标题显示
        selectedOtherLabel: function selectedOtherLabel() {
            if (this.selected.length > 1) {
                var labels = this.selected.map(function (p) {
                    return p.currentLabel;
                });
                var filterLabels = labels.slice(1);
                return filterLabels.join(",");
            } else {
                return "";
            }
        }
    },

    methods: {
        // 解决因树组件展开收起后引发的样式定位问题
        updatePopper: function updatePopper() {
            var _this4 = this;

            setTimeout(function () {
                _this4.broadcast('ElSelectDropdown', 'updatePopper');
            }, 300);
        },
        resetInputHeight: function resetInputHeight() {
            var _this5 = this;

            if (this.collapseTags && !this.filterable) return;
            this.$nextTick(function () {
                if (!_this5.$refs.reference) return;
                var inputChildNodes = _this5.$refs.reference.$el.childNodes;
                var input = [].filter.call(inputChildNodes, function (item) {
                    return item.tagName === 'INPUT';
                })[0];
                var tags = _this5.$refs.tags;
                var sizeInMap = _this5.initialInputHeight || 40;

                // update author: tangdm descript: 不同分辨率兼容高度问题
                // [code] input.style.height = this.selected.length === 0
                //        ? sizeInMap + 'px'
                //        : Math.max(
                //        tags ? (tags.clientHeight + (tags.clientHeight > sizeInMap ? 6 : 0)) : 0,
                //        sizeInMap
                // ) + 'px';

                input.style.height = _this5.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tags.clientHeight : 0, sizeInMap) + 'px';
                if (_this5.visible && _this5.emptyText !== false) {
                    _this5.broadcast('ElSelectDropdown', 'updatePopper');
                }
            });
        },


        // create author:lutz 下拉触发
        handleScrollToBottom: function handleScrollToBottom() {
            this.$emit('scroll-bottom');
        },


        // create author:lutz 关闭下拉框
        handleCloseDrapdown: function handleCloseDrapdown() {
            this.visible = false;
        },


        // create author:lutz 转化value数据格式
        getVal: function getVal() {
            var multiple = this.multiple,
                value = this.value,
                seq = this.seq;

            return multiple ? str2arr(value, seq, true) : data2type(value, 'String', seq);
        },
        getOption: function getOption(value) {
            var option = void 0;
            var isSearchedValue = false;
            var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
            var isNull = Object.prototype.toString.call(value).toLowerCase() === '[object null]';
            var isUndefined = Object.prototype.toString.call(value).toLowerCase() === '[object undefined]';
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
                var cachedOption = this.cachedOptions[i];
                var isEqual = isObject ? getValueByPath(cachedOption.value, this.valueKey) === getValueByPath(value, this.valueKey) : cachedOption.value === value;
                if (isEqual) {
                    // add author: tangdm descript: 追加文本翻译
                    isSearchedValue = true;

                    option = cachedOption;

                    // add author: tangdm 追加翻译缓存
                    this.translateLocalData.push({
                        label: cachedOption.currentLabel,
                        value: cachedOption.value
                    });
                    break;
                }
            }

            // add author: tangdm descript: 追加文本翻译
            if (!isSearchedValue) {
                for (var _i = 0, len = this.translateLocalData.length; _i < len; _i++) {
                    var _cachedOption = this.translateLocalData[_i];
                    _cachedOption.currentLabel = _cachedOption.label;
                    var _isEqual = isObject ? getValueByPath(_cachedOption.value, this.valueKey) === getValueByPath(value, this.valueKey) : _cachedOption.value === value;
                    if (_isEqual) {
                        isSearchedValue = true;
                        option = _cachedOption;
                        break;
                    }
                }
            }
            if (option) return option;
            var label = !isObject && !isNull && !isUndefined ? value : '';
            var newOption = {
                value: value,
                currentLabel: label
            };
            if (this.multiple) {
                newOption.hitState = false;
            }
            return newOption;
        },


        // update author:lutz
        setSelected: function setSelected() {
            var _this6 = this;

            var val = this.getVal();

            if (!this.multiple) {
                var option = this.getOption(val);
                if (option.created) {
                    this.createdLabel = option.currentLabel;
                    this.createdSelected = true;
                } else {
                    this.createdSelected = false;
                }
                this.selectedLabel = option.currentLabel;
                this.selected = option;
                if (this.filterable) this.query = this.selectedLabel;
                return;
            }

            var result = [];
            if (Array.isArray(val)) {
                val.forEach(function (value) {
                    var obj = _this6.getOption(value);
                    result.push(obj);
                });
            }
            this.selected = result;
            this.$nextTick(function () {
                _this6.resetInputHeight();
            });
        },


        // update author:lutz
        // update author: tangdm descript: repair the only one data for un-delete tag
        deleteTag: function deleteTag(event, tag) {
            var val = this.getVal();
            var index = this.selected.indexOf(tag);
            if (index > -1 && !this.selectDisabled) {
                var value = val.slice();
                value.splice(index, 1);
                if (value.length === 0) value = "";
                this.$emit('input', value);
                this.emitChange(value);
                this.$emit('remove-tag', tag.value);
            }
            event.stopPropagation();
        },


        // update author:lutz
        deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
                var val = this.getVal().slice();
                val.pop();
                var outputFormat = this.outputFormat,
                    seq = this.seq;

                val = data2type(val, outputFormat, seq);
                this.$emit('input', val);
                this.emitChange(val);
            }
        }
    },

    // update author:lutz
    created: function created() {
        var _this7 = this;

        this.cachedPlaceHolder = this.currentPlaceholder = this.placeholder;

        this.debouncedOnInputChange = debounce_default()(this.debounce, function () {
            _this7.onInputChange();
        });

        this.debouncedQueryChange = debounce_default()(this.debounce, function (e) {
            _this7.handleQueryChange(e.target.value);
        });

        this.$on('handleCloseDrapdown', this.handleCloseDrapdown);
        this.$on('handleOptionClick', this.handleOptionSelect);
        this.$on('setSelected', this.setSelected);
    },


    // update author:lutz
    mounted: function mounted() {
        var _this8 = this;

        var val = this.getVal();
        if (this.multiple && Array.isArray(val) && val.length > 0) {
            this.currentPlaceholder = '';
        }
        resize_event_addResizeListener(this.$el, this.handleResize);
        var reference = this.$refs.reference;
        if (reference && reference.$el) {
            var sizeMap = { medium: 36, small: 32, mini: 28 };

            // add author: tangdm descript: 增加分辨率识别
            var clientBodyWidth = document.body.clientWidth;
            var autoFixedHeight = clientBodyWidth < 1366 ? 24 : clientBodyWidth < 1681 ? 28 : 32;

            // update author: tangdm [code] this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];
            this.initialInputHeight = sizeMap[this.selectSize] || autoFixedHeight;
        }
        if (this.remote && this.multiple) {
            this.resetInputHeight();
        }
        this.$nextTick(function () {
            if (reference && reference.$el) {
                _this8.inputWidth = reference.$el.getBoundingClientRect().width;
            }
        });
        this.setSelected();
    }
});
// CONCATENATED MODULE: ./packages/base/select.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_base_selectvue_type_script_lang_js_ = (base_selectvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/base/select.vue





/* normalize component */

var base_select_component = normalizeComponent(
  packages_base_selectvue_type_script_lang_js_,
  selectvue_type_template_id_64b53866_render,
  selectvue_type_template_id_64b53866_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var base_select_api; }
base_select_component.options.__file = "packages/base/select.vue"
/* harmony default export */ var base_select = (base_select_component.exports);
// EXTERNAL MODULE: ./packages/tree-select/src/pinyin.js
var pinyin = __webpack_require__(10);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/main.vue?vue&type=script&lang=js&
var mainvue_type_script_lang_js_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var tree_select_src_mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//











// 继承树的方法
var TreeRefs = {};
packages_tree.mixins.forEach(function (item) {
    if (item.name === 'ElTree') {
        TreeRefs = getChildrenRefs(packages_tree.mixins[0], 'tree');
    }
});

/* harmony default export */ var tree_select_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTreeSelect',

    mixins: [convert],

    components: {
        LSelect: base_select,
        DgTree: packages_tree
    },

    props: {
        treeProps: Object,
        //  别名参数
        props: Object,
        // 只能选择叶子节点需要与checkStrictly配合使用
        checkLeaf: Boolean,
        // 是否开启多选
        multiple: Boolean,
        disabled: Boolean,
        data: {
            type: Array,
            required: false
        },
        scrollbarClass: String,
        clearable: Boolean,
        // 是否父子关联 checked 生效
        checkStrictly: Boolean,
        radioType: {
            type: String,
            default: ''
        },
        value: { required: true },
        // 数据分割符号
        seq: {
            type: String,
            default: ','
        },
        // 输出的数据类型
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 过滤节点的方法
        filterNodeMethod: Function,
        // 可显示的类型
        visibleType: {
            type: String,
            default: 'all',
            validator: function validator(val) {
                return ['all', 'leaf', 'branch', 'all_with_indeterminate'].indexOf(val) !== -1;
            }
        }
    },

    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            // select 传值的搜索条件
            filterText: '',
            // 树会导致 v-model value 值变化两次，增加缓存控制
            filterTreeCacheVal: this.value,
            // 别名属性
            alias: {
                value: 'id',
                label: 'label',
                children: 'children',
                disabled: 'disabled',
                isLeaf: 'isLeaf'
            }
        };
    },


    watch: {
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        },
        props: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.alias = merge(this.alias, val);
            }
        },
        filterText: function filterText(val) {
            this.$refs.tree.filter(val);
        }
    },

    computed: {
        /**
         * 选择框组件数据处理
         */
        val: {
            get: function get() {
                var value = this.value,
                    seq = this.seq;

                // 过滤数据

                var filterValue = this.filterNodeKey(value);

                return data2type(filterValue, 'String', seq);
            },
            set: function set(val) {
                var _this = this;

                var tree = this.$refs.tree;

                if (!val) val = [];

                if (this.visibleType === 'branch') {
                    if (val.length === 0) tree.setCheckedKeys(val);

                    val.forEach(function (item) {
                        var nodes = tree.getNode(item);
                        var keys = _this.allKeyNodes(nodes.childNodes);
                        val = external_lodash_default.a.concat(val, keys);
                    });

                    tree.setCheckedKeys(val);
                } else {
                    // 对数据进行过滤
                    tree.setCheckedKeys(val);
                }
                this.setTreeOrSelectData(val);
            }
        },
        /**
         * 树组件数据处理
         *
         */
        checkedTree: {
            get: function get() {
                var value = this.value,
                    seq = this.seq;


                return data2type(value, 'String', seq);
            },
            set: function set(val) {
                // change 事件触发
                this.setTreeOrSelectData(val);
            }
        },

        /**
         * 滚动条样式
         *
         */
        scrollbarCls: function scrollbarCls() {
            return 'dg-tree-select__scrollbar ' + this.scrollbarClass;
        },


        /**
         * 合并 tree Props
         *
         */
        treeBind: function treeBind() {
            return merge({}, this.treeProps, {
                data: this.dataSource,
                props: this.alias,
                'node-key': this.alias.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': external_lodash_default.a.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-after-expand': false,
                'render-content': this.renderContent
            });
        },


        /**
         * 合并 select Props
         *
         */
        selectProp: function selectProp() {
            return merge({}, this.$attrs, {
                disabled: this.disabled,
                multiple: this.multiple,
                clearable: this.clearable,
                seq: this.seq,
                'output-format': this.outputFormat,
                'filter-method': this.handleSelectFiler
            });
        }
    },

    created: function created() {
        console && console.warn && console.warn("dg-tree-select组件在接下来的版本将要移除，请使用dg-tree-drop");
    },


    methods: tree_select_src_mainvue_type_script_lang_js_extends({
        /**
         * 检索值
         *
         * @param query [String] 查询文本
         */
        handleSelectFiler: function handleSelectFiler(query) {
            this.filterText = query;
        },


        /**
         * 设置树或选择框的事件触发
         *
         */
        setTreeOrSelectData: function setTreeOrSelectData(val) {
            var outputFormat = this.outputFormat,
                seq = this.seq;

            // 值类型转化, 若是多选的话，val 的值为 []，需要值进行转化

            if (val && val.length === 0) val = '';

            // 过滤树会触发 父级选择框半选或全选状态
            if (val !== this.filterTreeCacheVal) {
                // 更新缓存值
                this.filterTreeCacheVal = val;

                // 获取选中的树节点值
                var tree = this.$refs.tree;
                var nodes = this.multiple ? tree.getCheckedNodes() : tree.getCurrentNode();

                // 触发 input or change 事件改变
                this.$emit('input', data2type(val, outputFormat, seq), nodes);
                this.$emit('change', data2type(val, outputFormat, seq), nodes);
            }
        },


        // tree 过滤是否显示true or false
        filterNode: function filterNode() {
            var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var data = arguments[1];

            if (!query) {
                return true;
            }

            var label = this.defaultProp.label;

            var labelValue = external_lodash_default.a.toUpper(data[label]);

            query = external_lodash_default.a.toUpper(query);

            if (labelValue.indexOf(query) !== -1) {
                return true;
            }

            var toPinyin = Object(pinyin["pinyin"])(labelValue, {
                heteronym: true, // 多音
                style: pinyin["pinyin"].STYLE_NORMAL // 无声调
            });

            if (toPinyin && toPinyin.length > 0) {
                var str = '';
                for (var key in toPinyin) {
                    str += toPinyin[key].join('');
                }
                str = external_lodash_default.a.toUpper(str);
                toPinyin = str;
            }

            return toPinyin.indexOf(query) !== -1;
        },


        /**
         * 置空 tree 选中状态
         *
         */
        handleSelectFilerClose: function handleSelectFilerClose(bool) {
            var val = this.val;

            if (bool) {
                /*
                    BUG描述
                        form reset 多触发选中，照成父组件数据的change
                    修复：
                        this.value === '' 下拉打开的时候判断，清空选中数据
                */
                if (external_lodash_default.a.isEmpty(val) || val.length < 1) {
                    this.clearDeaulf();
                }
            } else {
                this.filterText = '';
            }
        },


        /**
         * 清空检索值
         *
         */
        clearDeaulf: function clearDeaulf() {
            var tree = this.$refs.tree;

            // 清空检索值
            this.filterText = '';

            // 清空选中数据及状态
            tree.setRadioKeys([]);
            tree.setCurrentKey(null);
            this.$emit("input", "");
        },


        /**
         * 过滤类型数据
         *
         * @param value 文本数据值
         * @return value 过滤后的文本数据值
         */
        filterNodeKey: function filterNodeKey(value) {
            // 若为空数据
            if (value === null) return "";

            // 验证值是否为空，是否为空数组，为全类型
            if (typeof value === 'string' && !value || (typeof value === 'undefined' ? 'undefined' : mainvue_type_script_lang_js_typeof(value)) === 'object' && value.length === 0 || this.visibleType === 'all') {
                return value;
            }

            // 若是多选情况，过滤
            if (this.multiple) {
                var tree = this.$refs.tree;
                if (!tree) {
                    return value;
                }

                var visibleType = this.visibleType,
                    defaultProp = this.defaultProp;
                var keyId = defaultProp.value,
                    children = defaultProp.children;

                // 获取选中节点

                var getCheckNodes = function getCheckNodes(leafOnly, includeHalfChecked) {
                    var needId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                    var check = tree.getCheckedNodes(leafOnly, includeHalfChecked);
                    return needId ? check.map(function (item) {
                        return item[keyId];
                    }) : check;
                };

                switch (visibleType) {
                    case 'leaf':
                        {
                            return getCheckNodes(true, false);
                        }
                    case 'branch':
                        {
                            var allNodes = getCheckNodes(false, false, false);
                            var diffNodes = function diffNodes(allNodes) {
                                var child = [];
                                var del = []; // 剔除的id
                                // 去掉重复的选中项
                                var flatter = function flatter(arr) {
                                    arr.forEach(function (item) {
                                        var _$findIndex;

                                        var index = external_lodash_default.a.findIndex(child, (_$findIndex = {}, _$findIndex[keyId] = item[keyId], _$findIndex));
                                        if (index > -1) {
                                            del = del.concat(child.splice(index, 1));
                                        } else {
                                            var _$findIndex2;

                                            var delIndex = external_lodash_default.a.findIndex(del, (_$findIndex2 = {}, _$findIndex2[keyId] = item[keyId], _$findIndex2));
                                            if (delIndex === -1) {
                                                child.push(item);
                                            }
                                        }
                                        if (item[children] && item[children].length) {
                                            flatter(item[children]);
                                        }
                                    });
                                };
                                flatter(allNodes);
                                return child;
                            };
                            return diffNodes(allNodes).map(function (item) {
                                return item[keyId];
                            });
                        }
                    case 'all_with_indeterminate':
                        {
                            return getCheckNodes(false, true);
                        }
                }
            }

            return value;
        },


        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false 是否过滤叶子节点
         * @param val [Array] data 返回节点的 key 值
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.alias.children] && base[self.alias.children].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.alias.children]);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    if (val) {
                        if (item[self.alias.children] && item[self.alias.children].length > 0) {
                            _treeAllKey.push(item[self.alias.value]);
                        }
                    } else {
                        _treeAllKey.push(item[self.alias.value]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        allKeyNodes: function allKeyNodes(data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base.childNodes && base.childNodes.length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base.childNodes);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    _treeAllKey.push(item.key);
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        handleCheckChange: function handleCheckChange(data, checked, indeterminate) {
            var value = data2type(this.value, 'String', this.seq);

            // 若存在缓存值，则原先不归属于树节点（懒加载情况下），则进行追加文本显示
            if (this.treeBind.lazy && this.multiple) {

                // 正则表达式，是否存在 "," 分割
                var reg = /^.*[\,,].*$/;
                // 缓存字段数据
                var cacheArray = [];

                if (value) {
                    // 缓存字段是否为多个数据
                    if (reg.test(value)) {
                        cacheArray = value.split(",");
                    } else {
                        cacheArray.push(value);
                    }
                }

                // 选中字段
                if (checked) {
                    var selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var coopArray = external_lodash_default.a.concat(selectedTreeKeys, cacheArray);
                    cacheArray = external_lodash_default.a.uniq(coopArray);
                } else {
                    var nodes = this.$refs.tree.getNode(data);
                    var _selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var filterArray = this.allKeyNodes(nodes.childNodes);
                    filterArray.push(nodes.key);
                    cacheArray = external_lodash_default.a.concat(cacheArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.uniq(cacheArray);
                    filterArray = external_lodash_default.a.difference(filterArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.difference(cacheArray, filterArray);
                    cacheArray = cacheArray ? cacheArray : [];
                }

                this.$emit("input", data2type(cacheArray, 'String', this.seq));

                this.$emit("check-change", data, checked, indeterminate);
            } else {
                var _seq = this.seq,
                    outputFormat = this.outputFormat;

                var _data = this.$refs.tree.getCheckedKeys(false);
                this.$emit('input', data2type(_data, outputFormat, _seq));

                this.$emit("check-change", data, checked, indeterminate);
            }
        },


        // 渲染 option 到 tree
        renderContent: function renderContent(h, _ref) {
            var node = _ref.node,
                data = _ref.data,
                store = _ref.store;
            var _defaultProp = this.defaultProp,
                label = _defaultProp.label,
                value = _defaultProp.value,
                disabled = _defaultProp.disabled;


            return h(src_option, {
                props: {
                    key: data[value],
                    label: data[label],
                    value: data[value],
                    disabled: data[disabled]
                }
            });
        }
    }, TreeRefs)
});
// CONCATENATED MODULE: ./packages/tree-select/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_tree_select_src_mainvue_type_script_lang_js_ = (tree_select_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree-select/src/main.vue





/* normalize component */

var tree_select_src_main_component = normalizeComponent(
  packages_tree_select_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_5febe2cc_render,
  mainvue_type_template_id_5febe2cc_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var tree_select_src_main_api; }
tree_select_src_main_component.options.__file = "packages/tree-select/src/main.vue"
/* harmony default export */ var tree_select_src_main = (tree_select_src_main_component.exports);
// CONCATENATED MODULE: ./packages/tree-select/index.js


/* istanbul ignore next */
tree_select_src_main.install = function (Vue) {
    Vue.component(tree_select_src_main.name, tree_select_src_main);
};

/* harmony default export */ var tree_select = (tree_select_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-drop/src/main.vue?vue&type=template&id=793206f9&
var mainvue_type_template_id_793206f9_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-tree-select", staticStyle: { width: "202px" } },
    [
      _c(
        "l-select",
        _vm._b(
          {
            ref: "select",
            staticStyle: { width: "100%" },
            attrs: {
              "tree-data": _vm.data,
              "scrollbar-class": _vm.scrollbarCls
            },
            on: {
              "visible-change": _vm.handleSelectFilerClose,
              "remove-tag": _vm.handleRemoveTag,
              clear: _vm.clearDeaulf
            },
            model: {
              value: _vm.selectVal,
              callback: function($$v) {
                _vm.selectVal = $$v
              },
              expression: "selectVal"
            }
          },
          "l-select",
          _vm.selectProp,
          false
        ),
        [
          _vm.$slots.prefix
            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
            : _vm._e(),
          _c(
            "dg-tree",
            _vm._g(
              _vm._b(
                {
                  ref: "tree",
                  on: {
                    "check-change": _vm.handleCheckChange,
                    "node-collapse": _vm.handleTreeCollapse
                  }
                },
                "dg-tree",
                _vm.treeBind,
                false
              ),
              _vm.$listeners
            )
          )
        ],
        2
      )
    ],
    1
  )
}
var mainvue_type_template_id_793206f9_staticRenderFns = []
mainvue_type_template_id_793206f9_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-drop/src/main.vue?vue&type=template&id=793206f9&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-drop/src/option.vue?vue&type=template&id=69e9a1b5&
var optionvue_type_template_id_69e9a1b5_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("span", {
    staticClass: "el-tree-node__label",
    domProps: { innerHTML: _vm._s(_vm.filterLabel) }
  })
}
var optionvue_type_template_id_69e9a1b5_staticRenderFns = []
optionvue_type_template_id_69e9a1b5_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-drop/src/option.vue?vue&type=template&id=69e9a1b5&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-drop/src/option.vue?vue&type=script&lang=js&
//
//
//
//



/* harmony default export */ var tree_drop_src_optionvue_type_script_lang_js_ = ({
    props: {
        isHighLight: {
            type: Boolean
        },
        filter: {
            type: String
        }
    },
    mixins: [external_element_ui_["Option"]],
    computed: {
        filterLabel: function filterLabel() {

            // 增加过滤值高亮
            var temple = this.isHighLight && this.filter ? this.label.replace(new RegExp(this.filter + '{1}'), "<span class=\"dg-tree-filter__light\">" + this.filter + "</span>") : this.label;

            return temple;
        }
    }
});
// CONCATENATED MODULE: ./packages/tree-drop/src/option.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_tree_drop_src_optionvue_type_script_lang_js_ = (tree_drop_src_optionvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree-drop/src/option.vue





/* normalize component */

var src_option_component = normalizeComponent(
  packages_tree_drop_src_optionvue_type_script_lang_js_,
  optionvue_type_template_id_69e9a1b5_render,
  optionvue_type_template_id_69e9a1b5_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var src_option_api; }
src_option_component.options.__file = "packages/tree-drop/src/option.vue"
/* harmony default export */ var tree_drop_src_option = (src_option_component.exports);
// EXTERNAL MODULE: ./packages/tree-drop/src/pinyin.js
var src_pinyin = __webpack_require__(11);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-drop/src/main.vue?vue&type=script&lang=js&
var src_mainvue_type_script_lang_js_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var tree_drop_src_mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//











// 继承树的方法
var mainvue_type_script_lang_js_TreeRefs = {};
packages_tree.mixins.forEach(function (item) {
    if (item.name === 'ElTree') {
        mainvue_type_script_lang_js_TreeRefs = getChildrenRefs(packages_tree.mixins[0], 'tree');
    }
});

/* harmony default export */ var tree_drop_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTreeDrop',

    mixins: [convert],

    components: {
        LSelect: base_select,
        DgTree: packages_tree
    },

    props: {
        treeProps: Object,
        //  别名参数
        props: Object,
        // 只能选择叶子节点需要与checkStrictly配合使用
        checkLeaf: Boolean,
        // 是否开启多选
        multiple: Boolean,
        disabled: Boolean,
        data: {
            type: Array,
            required: false
        },
        scrollbarClass: String,
        clearable: Boolean,
        // 是否父子关联 checked 生效
        checkStrictly: Boolean,
        radioType: {
            type: String,
            default: ''
        },
        value: { required: true },
        // 数据分割符号
        seq: {
            type: String,
            default: ','
        },
        // 输出的数据类型
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 过滤节点的方法
        filterNodeMethod: Function,
        // 可显示的类型
        visibleType: {
            type: String,
            default: 'all',
            validator: function validator(val) {
                return ['all', 'leaf', 'branch', 'all_with_indeterminate'].indexOf(val) !== -1;
            }
        },
        valueType: {
            type: String,
            default: 'all',
            validaor: function validaor(val) {
                return ['all', 'leaf', 'branch', 'all_with_indeterminate'].indexOf(val) !== -1;
            }
        },
        lazyLoad: {
            type: Boolean,
            default: false
        },
        translateData: {
            type: Array
        }
    },

    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            // select 传值的搜索条件
            filterText: '',
            // 是否正在重新渲染中
            // 切换数组件的数据源时，会导致树重新渲染改变node的选中状态，通过这个属性进行阻断
            rerendering: false,
            // 别名属性
            alias: {
                value: 'id',
                label: 'label',
                children: 'children',
                disabled: 'disabled',
                isLeaf: 'isLeaf'
            },
            selectVal: ""
        };
    },


    watch: {
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                var _this = this;

                this.dataSource = val;

                this.$nextTick(function () {
                    // 同步下拉框值方法
                    _this.syncSelectBoxValue();
                });
            }
        },
        props: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.alias = merge(this.alias, val);
            }
        },
        filterText: function filterText(val) {
            this.$refs.tree.filter(val);
        },

        value: {
            immediate: true,
            handler: function handler(val) {
                var _this2 = this;

                var result = {};
                this.$nextTick(function () {
                    if (_this2.multiple && _this2.$refs.tree) {
                        _this2.$refs.tree.setCheckedKeys(val ? val.split ? val.split(_this2.seq) : val : []);
                        result = _this2.$refs.tree.getCheckedNodes();
                    } else {
                        result = _this2.$refs.tree.getNode(val);
                    }
                    // radio
                    if (_this2.radioType === 'level' || _this2.radioType === 'all') {
                        _this2.$refs.tree.setRadioKeys(val.split(_this2.seq));
                    }
                    var selectFilterValue = _this2.translateValueToTags(val, _this2.visibleType);
                    _this2.selectVal = data2type(selectFilterValue, 'String', _this2.seq);

                    var filterValue = _this2.translateValueToTags(val, _this2.valueType);
                    var formatValue = data2type(filterValue, 'String', _this2.seq);
                    _this2.$emit('input', formatValue, result);
                    _this2.$emit('change', formatValue, result);
                });
            }
        }
    },

    computed: {
        /**
         * 选择框组件数据处理
         */
        val: {
            // 根据值，获取下拉框的展示标签
            get: function get() {
                // 过滤数据
                return this.value;

                // const filterValue = this.translateValueToTags(this.value,this.visibleType);
                // let formatValue = data2type(filterValue, 'String', this.seq);
                // // let filterModelValue = this.translateValueToTags(this.value,this.valueType);
                // // console.log(filterModelValue);
                // // this.$emit('input', formatValue);
                // return formatValue;
            },
            set: function set(value) {
                // 初始化
                var tree = this.$refs.tree;
                // 若为空值，则进行数据转化
                if (!value) value = [];

                // 树节点勾选
                tree.setCheckedKeys(value);
                // 树节点
                this.setTreeOrSelectData(value);
            }
        },

        /**
         * 滚动条样式
         *
         */
        scrollbarCls: function scrollbarCls() {
            return 'dg-tree-select__scrollbar ' + this.scrollbarClass;
        },


        /**
         * 合并树节点的属性参数值
         *
         */
        treeBind: function treeBind() {
            var treeBind = merge({}, this.treeProps, {
                data: this.dataSource,
                props: this.alias,
                'node-key': this.alias.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': external_lodash_default.a.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-after-expand': false,
                'render-content': this.renderContent
            });
            return treeBind;
        },


        /**
         * 合并 select Props
         *
         */
        selectProp: function selectProp() {
            return merge({}, this.$attrs, {
                disabled: this.disabled,
                multiple: this.multiple,
                clearable: this.clearable,
                seq: this.seq,
                'output-format': this.outputFormat,
                'filter-method': this.handleSelectFiler,
                translateData: this.translateData || this.defaultTranslateData
            });
        }
    },

    mounted: function mounted() {
        if (this.$slots.prefix && this.$slots.prefix.length > 0) {
            var inputPaddingLeft = 0;
            if (this.$slots.prefix[0].tag == "span" && this.$slots.prefix[0].elm.textContent) {
                inputPaddingLeft = this.getByteLen(this.$slots.prefix[0].elm.textContent.trim());
                this.$refs.select.$refs.reference.$refs.input.style.paddingLeft = 'calc( ' + (inputPaddingLeft + "em") + ' + 12px )';
                this.$slots.prefix[0].elm.style.lineHeight = this.$slots.prefix[0].elm.parentElement.parentElement.offsetHeight + "px";
                this.$slots.prefix[0].elm.style.marginLeft = "8px";
            }
        }
    },


    methods: tree_drop_src_mainvue_type_script_lang_js_extends({
        getByteLen: function getByteLen(val) {
            var len = 0;
            for (var i = 0; i < val.length; i++) {
                var a = val.charAt(i);
                if (a.match(/[^\x00-\xff]/ig) != null) {
                    len += 1;
                } else {
                    len += 0.5;
                }
            }
            return len;
        },
        handleTreeCollapse: function handleTreeCollapse() {
            if (this.$refs.select) this.$refs.select.updatePopper();
        },

        /**
         * 检索值
         *
         * @param query [String] 查询文本
         */
        handleSelectFiler: function handleSelectFiler(query) {
            this.filterText = query;
        },


        /**
         * 设置树或选择框的事件触发
         *
         */
        setTreeOrSelectData: function setTreeOrSelectData(val) {
            // 初始化
            var outputFormat = this.outputFormat,
                seq = this.seq;

            var tree = this.$refs.tree;

            // 值类型转化, 若是多选的话，val 的值为 []，需要值进行转化
            if (val && val.length === 0) val = '';

            // 更新缓存值
            this.filterTreeCacheVal = val;

            // 获取选中的树节点值
            var nodes = this.multiple ? tree.getCheckedNodes() : tree.getCurrentNode();

            // 触发 input or change 事件改变
            this.$emit('input', data2type(val, outputFormat, seq), nodes);
            this.$emit('change', data2type(val, outputFormat, seq), nodes);
        },


        /**
         * tree 过滤是否显示true or false
         *
         */
        filterNode: function filterNode() {
            var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var data = arguments[1];

            if (!query) {
                return true;
            }

            var label = this.defaultProp.label;

            var labelValue = external_lodash_default.a.toUpper(data[label]);

            query = external_lodash_default.a.toUpper(query);

            if (labelValue.indexOf(query) !== -1) {
                return true;
            }

            var toPinyin = Object(src_pinyin["pinyin"])(labelValue, {
                heteronym: true, // 多音
                style: src_pinyin["pinyin"].STYLE_NORMAL // 无声调
            });

            if (toPinyin && toPinyin.length > 0) {
                var str = '';
                for (var key in toPinyin) {
                    str += toPinyin[key].join('');
                }
                str = external_lodash_default.a.toUpper(str);
                toPinyin = str;
            }

            return toPinyin.indexOf(query) !== -1;
        },


        /**
         * 置空 tree 选中状态
         *
         */
        handleSelectFilerClose: function handleSelectFilerClose(bool) {
            var val = this.val;

            if (bool) {
                /*
                    BUG描述
                        form reset 多触发选中，照成父组件数据的change
                    修复：
                        this.value === '' 下拉打开的时候判断，清空选中数据
                */
                if (external_lodash_default.a.isEmpty(val) || val.length < 1) {
                    this.clearDeaulf();
                }
            } else {
                this.filterText = '';
            }
            this.$emit("visible-change", bool);
        },


        /**
         * 清空检索值
         *
         */
        clearDeaulf: function clearDeaulf() {
            var tree = this.$refs.tree;

            // 清空检索值
            this.filterText = '';

            // 清空选中数据及状态
            tree.setRadioKeys([]);
            tree.setCurrentKey(null);

            // 更新 value 值
            this.$emit('input', '');
        },


        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false 是否过滤叶子节点
         * @param val [Array] data 返回节点的 key 值
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.alias.children] && base[self.alias.children].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.alias.children]);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    if (val) {
                        if (item[self.alias.children] && item[self.alias.children].length > 0) {
                            _treeAllKey.push(item[self.alias.value]);
                        }
                    } else {
                        _treeAllKey.push(item[self.alias.value]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        allKeyNodes: function allKeyNodes(data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base.childNodes && base.childNodes.length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base.childNodes);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    _treeAllKey.push(item.key);
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },


        /**
         * 转化 `value` 为标签值
         *
         */
        translateValueToTags: function translateValueToTags(value, type) {
            // 若为空数据
            if (value === null) return '';

            // 验证值是否为空，是否为空数组，为全类型
            if (typeof value === 'string' && !value || (typeof value === 'undefined' ? 'undefined' : src_mainvue_type_script_lang_js_typeof(value)) === 'object' && value.length === 0) {
                return value;
            }
            // || type === 'all'
            // 若是多选情况
            if (this.multiple && value) {
                // 初始化
                var tree = this.$refs.tree;
                var visibleType = this.visibleType,
                    defaultProp = this.defaultProp;
                var keyId = defaultProp.value,
                    children = defaultProp.children;
                // 检测树的值

                if (!tree) return value;

                // 树选中的节点值
                var checkedNodeKeys = tree.getCheckedKeys();
                // 值格式转化
                var formatValue = value.split ? value.split(',') : value;

                // 通过 value 值做检索过滤值
                switch (type) {
                    // 叶子节点
                    case 'leaf':
                        {
                            // 树选中的叶子节点值
                            var checkedLeafKeys = tree.getCheckedKeys(true);
                            if (checkedLeafKeys && checkedLeafKeys.length) {
                                return checkedLeafKeys;
                            }
                            return formatValue;
                            // 比较之间的差值
                            // const diff = _.difference(checkedNodeKeys, checkedLeafKeys);
                            // return _.difference(formatValue, diff);
                        }
                    // 枝干节点
                    case 'branch':
                        {
                            // 检测是否懒加载
                            if (this.treeBind.lazy && this.multiple) {
                                var allNodes = tree.getCheckedNodes(false, false); //todo
                                var treeNodes = tree.store.root.childNodes;

                                var diffNodes = function diffNodes(nodes) {
                                    var child = [];
                                    var flatter = function flatter(arr) {
                                        arr.forEach(function (item) {
                                            if (item.checked) {
                                                child.push(item);
                                            } else {
                                                child.push(item);
                                                if (item.childNodes && item.childNodes.length) {
                                                    flatter(item.childNodes);
                                                }
                                            }
                                        });
                                    };

                                    // 枝干节点过滤
                                    flatter(nodes);
                                    return child;
                                };
                                var branchOrLeafNodeKeys = diffNodes(treeNodes).map(function (item) {
                                    return item.key;
                                });
                                var branchNodeKeys = [];
                                branchOrLeafNodeKeys.map(function (item) {
                                    if (checkedNodeKeys.indexOf(item) > -1) {
                                        branchNodeKeys.push(item);
                                    }
                                });
                                if (branchNodeKeys.length) {
                                    return branchNodeKeys;
                                }
                                return formatValue;
                                // let branchOtherDiff = _.difference(checkedNodeKeys, branchOrLeafNodeKeys);
                                // let otherDiff = branchOtherDiff.length? branchOtherDiff.join(",").split(",") : branchOtherDiff;
                                // return _.uniq([...formatValue, ...otherDiff]);
                                // return _.difference(formatValue, branchOtherDiff);
                            } else {

                                var _allNodes = tree.getCheckedNodes(false, false);
                                var _diffNodes = function _diffNodes(allNodes) {
                                    var child = [];
                                    var del = []; // 剔除的id
                                    // 去掉重复的选中项
                                    var flatter = function flatter(arr) {
                                        arr.forEach(function (item) {
                                            var _$findIndex;

                                            var index = external_lodash_default.a.findIndex(child, (_$findIndex = {}, _$findIndex[keyId] = item[keyId], _$findIndex));
                                            if (index > -1) {
                                                del = del.concat(child.splice(index, 1));
                                            } else {
                                                var _$findIndex2;

                                                var delIndex = external_lodash_default.a.findIndex(del, (_$findIndex2 = {}, _$findIndex2[keyId] = item[keyId], _$findIndex2));
                                                if (delIndex === -1) {
                                                    child.push(item);
                                                }
                                            }
                                            if (item[children] && item[children].length) {
                                                flatter(item[children]);
                                            }
                                        });
                                    };
                                    flatter(allNodes);
                                    return child;
                                };
                                var _branchOrLeafNodeKeys = _diffNodes(_allNodes).map(function (item) {
                                    return item[keyId];
                                });
                                // 不是通过value设置（手动勾选）
                                if (external_lodash_default.a.intersection(checkedNodeKeys, formatValue).length == formatValue.length) {
                                    return _branchOrLeafNodeKeys;
                                }
                                var branchOtherDiff = external_lodash_default.a.difference(checkedNodeKeys, _branchOrLeafNodeKeys);
                                return external_lodash_default.a.difference(formatValue, branchOtherDiff);
                            }
                        }
                    case 'all':
                        {
                            var _checkedLeafKeys = tree.getCheckedKeys(false);
                            if (_checkedLeafKeys && _checkedLeafKeys.length) {
                                return _checkedLeafKeys;
                            }
                            return formatValue;
                        }
                    default:
                        {
                            return formatValue;
                        }
                }
            }

            return value;
        },
        handleCheckChange: function handleCheckChange(data, checked, indeterminate) {
            // 切换数组件的数据源时，会导致树重新渲染改变node的选中状态，通过这个属性进行阻断
            // huangjq 20201201
            if (this.rerendering && !checked) {
                return;
            }

            var value = data2type(this.value, 'String', this.seq);

            // 若存在缓存值，则原先不归属于树节点（懒加载情况下），则进行追加文本显示
            if (this.treeBind.lazy && this.multiple) {
                // 正则表达式，是否存在 "," 分割
                var reg = /^.*[\,,].*$/;
                // 缓存字段数据
                var cacheArray = [];

                if (value) {
                    // 缓存字段是否为多个数据
                    if (reg.test(value)) {
                        cacheArray = value.split(',');
                    } else {
                        cacheArray.push(value);
                    }
                }

                // 选中字段
                if (checked) {
                    var selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var coopArray = external_lodash_default.a.concat(selectedTreeKeys, cacheArray);
                    cacheArray = external_lodash_default.a.uniq(coopArray);
                } else {
                    var nodes = this.$refs.tree.getNode(data);
                    var _selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var filterArray = this.allKeyNodes(nodes.childNodes);
                    filterArray.push(nodes.key);
                    cacheArray = external_lodash_default.a.concat(cacheArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.uniq(cacheArray);
                    filterArray = external_lodash_default.a.difference(filterArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.difference(cacheArray, filterArray);
                    cacheArray = cacheArray ? cacheArray : [];
                }

                this.$emit('input', data2type(cacheArray, 'String', this.seq));

                this.$emit('check-change', data, checked, indeterminate);
            } else {
                var _seq = this.seq,
                    outputFormat = this.outputFormat;

                var _data = this.$refs.tree.getCheckedKeys(false);
                this.$emit('input', data2type(_data, outputFormat, _seq));

                this.$emit('check-change', data, checked, indeterminate);
            }
        },


        // 渲染 option 到 tree
        renderContent: function renderContent(h, _ref) {
            var node = _ref.node,
                data = _ref.data,
                store = _ref.store;
            var _defaultProp = this.defaultProp,
                label = _defaultProp.label,
                value = _defaultProp.value,
                disabled = _defaultProp.disabled;


            return h(tree_drop_src_option, {
                props: {
                    key: data[value],
                    label: data[label],
                    value: data[value],
                    disabled: data[disabled],
                    isHighLight: node.store.isHighLight,
                    filter: node.filter
                }
            });
        },


        // 同步下拉框值方法
        syncSelectBoxValue: function syncSelectBoxValue() {
            var _this3 = this;

            var seq = this.seq;

            var value = data2type(this.value, 'String', seq);
            var _$refs$tree = this.$refs.tree,
                radioType = _$refs$tree.radioType,
                showCheckbox = _$refs$tree.showCheckbox,
                itemsWithDisabled = _$refs$tree.itemsWithDisabled,
                nodeKey = _$refs$tree.nodeKey,
                checkStrictly = _$refs$tree.checkStrictly;

            var valArr = str2arr(value, seq, true, itemsWithDisabled, nodeKey);

            // radio
            if (radioType === 'level' || radioType === 'all') {
                this.$refs.tree.setRadioKeys(valArr);
            }

            // checkbox
            if (showCheckbox) {
                var preCheckedArr = this.$refs.tree.getCheckedKeys();
                var oldValArr = str2arr(preCheckedArr, seq);

                if (valArr.length && oldValArr.length && !checkStrictly) {
                    var diffArr = external_lodash_default.a.difference(oldValArr, valArr);

                    // 剔除父及祖先级元素
                    var traverseParent = function traverseParent(node, valArr) {
                        var parentNode = node.parent;
                        if (parentNode && parentNode.level != 0) {
                            external_lodash_default.a.remove(valArr, function (n) {
                                return parentNode.data[nodeKey] === n;
                            });
                            traverseParent(parentNode, valArr);
                        }
                    };

                    // 剔除所有子代及子孙元素
                    var traverseChild = function traverseChild(node, valArr) {
                        var childNodes = node.childNodes;
                        if (childNodes && childNodes.length) {
                            childNodes.forEach(function (item) {
                                external_lodash_default.a.remove(valArr, function (n) {
                                    return n === item.data[nodeKey];
                                });
                            });
                            traverseChild(childNodes, valArr);
                        }
                    };

                    diffArr.forEach(function (item) {
                        var node = _this3.$refs.tree.getNode(item);
                        if (node) {
                            traverseParent(node, valArr);
                            traverseChild(node, valArr);
                        }
                    });
                }
                this.$refs.tree.setCheckedKeys(valArr);
            }

            // highlight
            if (!showCheckbox && radioType === '' && valArr.length < 2) {
                this.$refs.tree.setCurrentKey(valArr);
            }
        },

        // 删除标签
        handleRemoveTag: function handleRemoveTag(val) {
            this.$refs.tree.setChecked(val, false, true);
        }
    }, mainvue_type_script_lang_js_TreeRefs)
});
// CONCATENATED MODULE: ./packages/tree-drop/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_tree_drop_src_mainvue_type_script_lang_js_ = (tree_drop_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree-drop/src/main.vue





/* normalize component */

var tree_drop_src_main_component = normalizeComponent(
  packages_tree_drop_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_793206f9_render,
  mainvue_type_template_id_793206f9_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var tree_drop_src_main_api; }
tree_drop_src_main_component.options.__file = "packages/tree-drop/src/main.vue"
/* harmony default export */ var tree_drop_src_main = (tree_drop_src_main_component.exports);
// CONCATENATED MODULE: ./packages/tree-drop/index.js


/* istanbul ignore next */
tree_drop_src_main.install = function (Vue) {
    Vue.component(tree_drop_src_main.name, tree_drop_src_main);
};

/* harmony default export */ var tree_drop = (tree_drop_src_main);
// CONCATENATED MODULE: ./packages/form-item/index.js


/* istanbul ignore next */
form_item_src_main.install = function (Vue) {
  Vue.component(form_item_src_main.name, form_item_src_main);
};

/* harmony default export */ var form_item = (form_item_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/alert/src/main.vue?vue&type=template&id=6e53341b&
var mainvue_type_template_id_6e53341b_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("transition", { attrs: { name: "el-alert-fade" } }, [
    _c(
      "div",
      {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.visible,
            expression: "visible"
          }
        ],
        staticClass: "el-alert dg-alert",
        class: [
          _vm.typeClass,
          _vm.center ? "is-center" : "",
          "is-" + _vm.effect,
          (_vm.title || _vm.$slots.title) &&
          (_vm.description || _vm.$slots.description || _vm.$slots.default)
            ? "dg-alert__box"
            : ""
        ],
        attrs: { role: "alert" }
      },
      [
        _vm.showIcon
          ? _c("i", {
              staticClass: "el-alert__icon",
              class: [_vm.iconClass, _vm.isBigIcon]
            })
          : _vm._e(),
        _c("div", { staticClass: "el-alert__content" }, [
          _vm.title || _vm.$slots.title
            ? _c(
                "span",
                { staticClass: "el-alert__title", class: [_vm.isBoldTitle] },
                [_vm._t("title", [_vm._v(_vm._s(_vm.title))])],
                2
              )
            : _vm._e(),
          _vm.$slots.default && _vm.description
            ? _c(
                "p",
                { staticClass: "el-alert__description" },
                [
                  _vm._v("\n        " + _vm._s(_vm.description) + "\n        "),
                  _vm._t("default")
                ],
                2
              )
            : _vm._e(),
          _vm.$slots.default && !_vm.description
            ? _c(
                "p",
                { staticClass: "el-alert__description" },
                [_vm._t("default")],
                2
              )
            : _vm._e(),
          _vm.description && !_vm.$slots.default
            ? _c("p", { staticClass: "el-alert__description" }, [
                _vm._v(_vm._s(_vm.description))
              ])
            : _vm._e(),
          _c(
            "i",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.closable,
                  expression: "closable"
                }
              ],
              staticClass: "el-alert__closebtn",
              class: {
                "is-customed": _vm.closeText !== "",
                "el-icon-close": _vm.closeText === ""
              },
              on: {
                click: function($event) {
                  return _vm.close()
                }
              }
            },
            [_vm._v(_vm._s(_vm.closeText))]
          )
        ])
      ]
    )
  ])
}
var mainvue_type_template_id_6e53341b_staticRenderFns = []
mainvue_type_template_id_6e53341b_render._withStripped = true


// CONCATENATED MODULE: ./packages/alert/src/main.vue?vue&type=template&id=6e53341b&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/alert/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var alert_src_mainvue_type_script_lang_js_ = ({
    name: 'DgAlert',

    mixins: [external_element_ui_["Alert"]]
});
// CONCATENATED MODULE: ./packages/alert/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_alert_src_mainvue_type_script_lang_js_ = (alert_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/alert/src/main.vue





/* normalize component */

var alert_src_main_component = normalizeComponent(
  packages_alert_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_6e53341b_render,
  mainvue_type_template_id_6e53341b_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var alert_src_main_api; }
alert_src_main_component.options.__file = "packages/alert/src/main.vue"
/* harmony default export */ var alert_src_main = (alert_src_main_component.exports);
// CONCATENATED MODULE: ./packages/alert/index.js


/* istanbul ignore next */
alert_src_main.install = function (Vue) {
  Vue.component(alert_src_main.name, alert_src_main);
};

/* harmony default export */ var packages_alert = (alert_src_main);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tag/src/main.vue?vue&type=script&lang=js&




/* harmony default export */ var tag_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTag',

    mixins: [external_element_ui_["Tag"]],

    props: {
        // 自定 icon 样式
        iconClass: String,
        iconStyle: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        // 是否带边框
        isBorder: {
            type: Boolean,
            default: true
        },
        // 是否禁用
        disabled: {
            type: Boolean,
            default: false
        },
        // 是否当前选中 
        isSelect: Boolean,
        // 当前选中的样式
        selectClass: String,
        selectStyle: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        // 自定义颜色
        customColor: Boolean,
        // 自定义样式
        customStyle: {
            type: Object,
            default: function _default() {
                return {};
            }
        }
    },

    methods: {
        handleClose: function handleClose(event) {
            // disabled 状态
            if (this.disabled) {
                return;
            }
            event.stopPropagation();
            this.$emit('close', event);
        },
        handleClick: function handleClick(event) {
            // disabled 状态
            if (this.disabled) {
                return;
            }
            this.$emit('click', event);
        },
        toRgba: function toRgba(plainColor) {
            var a = 0.08;
            var hexReg = /^\#[a-fA-f0-9]{6}$/;
            var rgbReg = /^rgb\((\s*[1-2]?[0-9]?[0-9]{1}\,)(\s*[1-2]?[0-9]?[0-9]{1}\,)(\s*[1-2]?[0-9]?[0-9]{1})\)$/;
            // 将 16 进制转换成 rgba
            if (hexReg.test(plainColor)) {
                var rgbaColor = 'rgba(';
                for (var i = 1; i < plainColor.length; i += 2) {
                    var str = plainColor[i] + plainColor[i + 1];
                    if (i < 5) {
                        rgbaColor += parseInt(str, 16) + ',';
                    } else {
                        rgbaColor += parseInt(str, 16) + (',' + a + ')');
                    }
                }
                return rgbaColor;
            } else if (rgbReg.test(plainColor)) {
                // 'rgb(222,33,44)'.slice(0,-1) => "rgb(222,33,44" + `,${a})`
                return plainColor.slice(0, -1) + (',' + a + ')');
            }
            return plainColor;
        }
    },

    render: function render(h) {
        var type = this.type,
            color = this.color,
            tagSize = this.tagSize,
            hit = this.hit,
            effect = this.effect,
            disabled = this.disabled,
            isSelect = this.isSelect,
            selectClass = this.selectClass,
            selectStyle = this.selectStyle,
            isBorder = this.isBorder,
            customColor = this.customColor,
            customStyle = this.customStyle,
            iconClass = this.iconClass;

        var classes = ['el-tag', 'dg-tag', type ? 'el-tag--' + type : '', tagSize ? 'el-tag--' + tagSize : '', effect ? 'el-tag--' + effect : '', hit && 'is-hit', iconClass ? 'dg-tag--icon' : '', isBorder && 'is-border', disabled && 'is-disabled', isSelect && selectClass ? selectClass : ''];
        var sty = !disabled ? { backgroundColor: color } : {};
        // If effect === 'plain' && color && !diabled; 将 color 转变成 color 和 border-color 的样式结构
        if (customColor && color && !disabled) {
            if (effect === 'plain') {
                sty.color = color;
                sty.borderColor = color;
                sty.backgroundColor = 'white';
            } else if (effect === 'light') {
                sty.color = color;
                sty.borderColor = color;
                sty.backgroundColor = this.toRgba(color);
            } else if (effect === 'dark') {
                sty.color = 'white';
                sty.borderColor = 'transparent';
                sty.backgroundColor = color;
            }
        }
        var selectes = isSelect && selectStyle ? merge(sty, selectStyle) : sty;
        // 自定义 style, 优先级低于 select
        var styles = merge(customStyle, selectes);
        var tagEl = h(
            'span',
            { 'class': classes, style: isSelect ? styles : sty, on: {
                    'click': this.handleClick
                }
            },
            [this.iconClass ? h('i', { 'class': ['dg-tag__icon', this.iconClass], style: this.iconStyle }) : null, this.$slots.default, this.closable && h('i', { 'class': 'el-tag__close el-icon-close', on: {
                    'click': this.handleClose
                }
            })]
        );

        return this.disableTransitions ? tagEl : h(
            'transition',
            {
                attrs: { name: 'el-zoom-in-center' }
            },
            [tagEl]
        );
    }
});
// CONCATENATED MODULE: ./packages/tag/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_tag_src_mainvue_type_script_lang_js_ = (tag_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tag/src/main.vue
var tag_src_main_render, tag_src_main_staticRenderFns




/* normalize component */

var tag_src_main_component = normalizeComponent(
  packages_tag_src_mainvue_type_script_lang_js_,
  tag_src_main_render,
  tag_src_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var tag_src_main_api; }
tag_src_main_component.options.__file = "packages/tag/src/main.vue"
/* harmony default export */ var tag_src_main = (tag_src_main_component.exports);
// CONCATENATED MODULE: ./packages/tag/index.js


/* istanbul ignore next */
tag_src_main.install = function (Vue) {
  Vue.component(tag_src_main.name, tag_src_main);
};

/* harmony default export */ var tag = (tag_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/main.vue?vue&type=template&id=99c4cba6&
var mainvue_type_template_id_99c4cba6_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "button",
    {
      staticClass: "el-button dg-button",
      class: [
        _vm.type ? "el-button--" + _vm.type : "",
        _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
        {
          "is-ghost": _vm.ghost && !_vm.buttonDisabled,
          "is-disabled": _vm.buttonDisabled,
          "is-loading": _vm.loading,
          "is-plain": _vm.plain,
          "is-round": _vm.round,
          "is-circle": _vm.circle,
          "is-dashed": _vm.dashed
        }
      ],
      style: _vm.ghost && !_vm.buttonDisabled ? _vm.ghostStyle : "",
      attrs: {
        disabled: _vm.buttonDisabled || _vm.loading,
        autofocus: _vm.autofocus,
        type: _vm.nativeType
      },
      on: { click: _vm.handleClick }
    },
    [
      _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
      _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
      _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
    ]
  )
}
var mainvue_type_template_id_99c4cba6_staticRenderFns = []
mainvue_type_template_id_99c4cba6_render._withStripped = true


// CONCATENATED MODULE: ./packages/button/src/main.vue?vue&type=template&id=99c4cba6&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/button/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var button_src_mainvue_type_script_lang_js_ = ({
    name: 'DgButton',

    mixins: [external_element_ui_["Button"]],

    props: {
        ghost: Boolean,
        ghostColor: String,
        dashed: Boolean
    },

    computed: {
        ghostStyle: function ghostStyle() {
            var disabled = this.disabled,
                ghostColor = this.ghostColor;

            if (disabled) {
                return '';
            }
            return ghostColor ? 'color:' + ghostColor + ';border-color:' + ghostColor + ';' : '';
        }
    }
});
// CONCATENATED MODULE: ./packages/button/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_button_src_mainvue_type_script_lang_js_ = (button_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/button/src/main.vue





/* normalize component */

var button_src_main_component = normalizeComponent(
  packages_button_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_99c4cba6_render,
  mainvue_type_template_id_99c4cba6_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var button_src_main_api; }
button_src_main_component.options.__file = "packages/button/src/main.vue"
/* harmony default export */ var button_src_main = (button_src_main_component.exports);
// CONCATENATED MODULE: ./packages/button/index.js


/* istanbul ignore next */
button_src_main.install = function (Vue) {
  Vue.component(button_src_main.name, button_src_main);
};

/* harmony default export */ var packages_button = (button_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/main.vue?vue&type=template&id=3d3e5052&
var mainvue_type_template_id_3d3e5052_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "transition",
    {
      attrs: { name: "dialog-fade" },
      on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
    },
    [
      _c(
        "div",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-dialog__wrapper",
          on: {
            click: function($event) {
              if ($event.target !== $event.currentTarget) {
                return null
              }
              return _vm.handleWrapperClick($event)
            }
          }
        },
        [
          _c(
            "div",
            {
              ref: "dialog",
              staticClass: "el-dialog dg-dialog",
              class: [
                {
                  "is-fullscreen": _vm.fullscreen,
                  "el-dialog--center":
                    _vm.center /*'dg-dialog--vertical': vertical*/
                },
                _vm.customClass
              ],
              style: _vm.style,
              attrs: {
                role: "dialog",
                "aria-modal": "true",
                "aria-label": _vm.title || "dialog"
              }
            },
            [
              _c(
                "div",
                { class: ["el-dialog__header", "dg-dialog__header"] },
                [
                  _vm._t("title", [
                    _c("span", { staticClass: "el-dialog__title" }, [
                      _vm._v(_vm._s(_vm.title))
                    ])
                  ]),
                  _vm.showClose
                    ? _c(
                        "button",
                        {
                          staticClass: "el-dialog__headerbtn",
                          attrs: { type: "button", "aria-label": "Close" },
                          on: { click: _vm.handleClose }
                        },
                        [
                          _c("i", {
                            staticClass:
                              "el-dialog__close el-icon el-icon-close"
                          })
                        ]
                      )
                    : _vm._e()
                ],
                2
              ),
              _vm.rendered
                ? _c(
                    "div",
                    { staticClass: "el-dialog__body dg-dialog__body" },
                    [_vm._t("default")],
                    2
                  )
                : _vm._e(),
              _vm.$slots.footer
                ? _c(
                    "div",
                    { staticClass: "el-dialog__footer dg-dialog__footer" },
                    [_vm._t("footer")],
                    2
                  )
                : _vm._e()
            ]
          )
        ]
      )
    ]
  )
}
var mainvue_type_template_id_3d3e5052_staticRenderFns = []
mainvue_type_template_id_3d3e5052_render._withStripped = true


// CONCATENATED MODULE: ./packages/dialog/src/main.vue?vue&type=template&id=3d3e5052&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var dialog_src_mainvue_type_script_lang_js_ = ({
    name: 'DgDialog',

    mixins: [external_element_ui_["Dialog"]],

    props: {
        vertical: {
            type: Boolean,
            default: false
        },

        headType: {
            type: String,
            default: ''
        }
    }
});
// CONCATENATED MODULE: ./packages/dialog/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_dialog_src_mainvue_type_script_lang_js_ = (dialog_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/dialog/src/main.vue





/* normalize component */

var dialog_src_main_component = normalizeComponent(
  packages_dialog_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_3d3e5052_render,
  mainvue_type_template_id_3d3e5052_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var dialog_src_main_api; }
dialog_src_main_component.options.__file = "packages/dialog/src/main.vue"
/* harmony default export */ var dialog_src_main = (dialog_src_main_component.exports);
// CONCATENATED MODULE: ./packages/dialog/src/dialog.js
var dialog_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





var dialog_dialog = function dialog(options) {
    var _$root$$options = this.$root.$options,
        router = _$root$$options.router,
        store = _$root$$options.store;

    var com = options.component.default ? options.component.default : options.component;
    // // 指令和注入
    // let cfg = {
    //     directives: {
    //         footer: {
    //             inserted(el, binding, vnode) {
    //                 // 检测是否存在
    //                 if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
    //                     // 构建新的按钮区域
    //                     let dom = document.createElement('div');
    //                     dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
    //                     dom.appendChild(el);

    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.appendChild(dom);
    //                 } else {
    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
    //                 }
    //             }
    //         }
    //     }
    // };

    // 混入对象
    var mixin = function mixin(comObj) {
        var component = comObj.default || comObj;
        var com = dialog_extends({}, component);
        // com.mixins = com.mixins ? [cfg, ...com.mixins] : [cfg];
        return com;
    };

    // 加入指令
    com = mixin(com);

    var instance = new external_vue_default.a({
        router: router,
        store: store,
        data: merge({
            appendToBody: true,
            center: true,
            visible: true,
            'head-type': 'info',
            vertical: true
        }, options),
        render: function render(h) {
            var _this = this;

            return h(dialog_src_main, {
                props: merge({}, options, {
                    appendToBody: true,
                    visible: this.visible
                }),
                on: {
                    'update:visible': function updateVisible(status) {
                        _this.visible = status;
                    },
                    open: function open() {
                        options.on && options.on.open && options.on.open();
                    },
                    opened: function opened() {
                        options.on && options.on.opened && options.on.opened();
                    },
                    close: function close(e) {
                        instance.close(e);
                    }
                }
            }, [h(com, {
                props: options.props,
                on: dialog_extends({
                    close: function close(e) {
                        instance.close(e);
                    }
                }, options.on)
            })]);
        },

        methods: {
            show: function show() {
                this.visible = true;
            },
            hide: function hide() {
                this.visible = false;
            },
            destroy: function destroy() {
                this.$destroy();
            },

            close: function close() {
                if (options.close && options.close() === 'hide') {
                    return;
                }
                instance.destroy();
            }
        }
    });
    return instance.$mount();
};

/* harmony default export */ var src_dialog = (dialog_dialog);
// CONCATENATED MODULE: ./packages/dialog/src/layer-source.js
var layer_source_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**

 @Name：layer v3.1.1 Web弹层组件
 @Author：贤心
 @Site：http://layer.layui.com
 @License：MIT

 */

var isLayui = window.layui && layui.define,
    $ = external_jquery_default.a,
    win,
    _ready = {
    getPath: function () {
        var jsPath = document.currentScript ? document.currentScript.src : function () {
            var js = document.scripts,
                last = js.length - 1,
                src;
            for (var i = last; i > 0; i--) {
                if (js[i].readyState === 'interactive') {
                    src = js[i].src;
                    break;
                }
            }
            return src || js[last].src;
        }();
        return jsPath.substring(0, jsPath.lastIndexOf('/') + 1);
    }(),

    config: {},
    end: {},
    minIndex: 0,
    minLeft: [],
    btn: ['&#x786E;&#x5B9A;', '&#x53D6;&#x6D88;'],

    // 五种原始层模式
    type: ['dialog', 'page', 'iframe', 'loading', 'tips'],

    // 获取节点的style属性值
    getStyle: function getStyle(node, name) {
        var style = node.currentStyle ? node.currentStyle : window.getComputedStyle(node, null);
        return style[style.getPropertyValue ? 'getPropertyValue' : 'getAttribute'](name);
    },

    // 载入CSS配件
    link: function link(href, fn, cssname) {
        // 未设置路径，则不主动加载css
        if (!layer_source_layer.path) return;

        var head = document.getElementsByTagName('head')[0],
            link = document.createElement('link');
        if (typeof fn === 'string') cssname = fn;
        var app = (cssname || href).replace(/\.|\//g, '');
        var id = 'layuicss-' + app,
            timeout = 0;

        link.rel = 'stylesheet';
        link.href = layer_source_layer.path + href;
        link.id = id;

        if (!document.getElementById(id)) {
            head.appendChild(link);
        }

        if (typeof fn !== 'function') return;

        // 轮询css是否加载完毕
        (function poll() {
            if (++timeout > 8 * 1000 / 100) {
                return window.console && console.error('layer.css: Invalid');
            }
            parseInt(_ready.getStyle(document.getElementById(id), 'width')) === 1989 ? fn() : setTimeout(poll, 100);
        })();
    }
};

// 默认内置方法。
var layer_source_layer = {
    v: '3.1.1',
    ie: function () {
        // ie版本
        var agent = navigator.userAgent.toLowerCase();
        return !!window.ActiveXObject || 'ActiveXObject' in window ? (agent.match(/msie\s(\d+)/) || [])[1] || '11' // 由于ie11并没有msie的标识
        : false;
    }(),
    index: window.layer && window.layer.v ? 100000 : 0,
    path: _ready.getPath,
    config: function config(options, fn) {
        options = options || {};
        layer_source_layer.cache = _ready.config = $.extend({}, _ready.config, options);
        layer_source_layer.path = _ready.config.path || layer_source_layer.path;
        typeof options.extend === 'string' && (options.extend = [options.extend]);

        if (_ready.config.path) layer_source_layer.ready();

        if (!options.extend) return this;

        isLayui ? layui.addcss('modules/layer/' + options.extend) : _ready.link('theme/' + options.extend);

        return this;
    },

    // 主体CSS等待事件
    ready: function ready(callback) {
        var cssname = 'layer',
            ver = '',
            path = (isLayui ? 'modules/layer/' : 'theme/') + 'default/layer.css?v=' + layer_source_layer.v + ver;
        isLayui ? layui.addcss(path, callback, cssname) : _ready.link(path, callback, cssname);
        return this;
    },

    // 各种快捷引用
    alert: function alert(content, options, yes) {
        var type = typeof options === 'function';
        if (type) yes = options;
        return layer_source_layer.open($.extend({
            content: content,
            yes: yes
        }, type ? {} : options));
    },

    confirm: function confirm(content, options, yes, cancel) {
        var type = typeof options === 'function';
        if (type) {
            cancel = yes;
            yes = options;
        }
        return layer_source_layer.open($.extend({
            content: content,
            btn: _ready.btn,
            yes: yes,
            btn2: cancel
        }, type ? {} : options));
    },

    msg: function msg(content, options, end) {
        // 最常用提示层
        var type = typeof options === 'function',
            rskin = _ready.config.skin;
        var skin = (rskin ? rskin + ' ' + rskin + '-msg' : '') || 'layui-layer-msg';
        var anim = doms.anim.length - 1;
        if (type) end = options;
        return layer_source_layer.open($.extend({
            content: content,
            time: 3000,
            shade: false,
            skin: skin,
            title: false,
            closeBtn: false,
            btn: false,
            resize: false,
            end: end
        }, type && !_ready.config.skin ? {
            skin: skin + ' layui-layer-hui',
            anim: anim
        } : function () {
            options = options || {};
            if (options.icon === -1 || options.icon === undefined && !_ready.config.skin) {
                options.skin = skin + ' ' + (options.skin || 'layui-layer-hui');
            }
            return options;
        }()));
    },

    load: function load(icon, options) {
        return layer_source_layer.open($.extend({
            type: 3,
            icon: icon || 0,
            resize: false,
            shade: 0.01
        }, options));
    },

    tips: function tips(content, follow, options) {
        return layer_source_layer.open($.extend({
            type: 4,
            content: [content, follow],
            closeBtn: false,
            time: 3000,
            shade: false,
            resize: false,
            fixed: false,
            maxWidth: 210
        }, options));
    }
};

var Class = function Class(setings) {
    var that = this;
    that.index = ++layer_source_layer.index;
    that.config = $.extend({}, that.config, _ready.config, setings);
    document.body ? that.creat() : setTimeout(function () {
        that.creat();
    }, 30);
};

Class.pt = Class.prototype;

// 缓存常用字符
var doms = ['layui-layer', '.layui-layer-title', '.layui-layer-main', '.layui-layer-dialog', 'layui-layer-iframe', 'layui-layer-content', 'layui-layer-btn', 'layui-layer-close'];
doms.anim = ['layer-anim-00', 'layer-anim-01', 'layer-anim-02', 'layer-anim-03', 'layer-anim-04', 'layer-anim-05', 'layer-anim-06'];

// 默认配置
Class.pt.config = {
    type: 0,
    shade: 0.3,
    fixed: true,
    move: doms[1],
    title: '&#x4FE1;&#x606F;',
    offset: 'auto',
    area: 'auto',
    closeBtn: 1,
    time: 0, // 0表示不自动关闭
    zIndex: 2000,
    maxWidth: 360,
    anim: 0,
    isOutAnim: true,
    icon: -1,
    moveType: 1,
    resize: true,
    scrollbar: true, // 是否允许浏览器滚动条
    tips: 2,
    noneBtnField: false // add author: tangdm 是否不显示按钮区域
};

// 容器
Class.pt.vessel = function (conType, callback) {
    var that = this,
        times = that.index,
        config = that.config;
    var zIndex = config.zIndex + times,
        titype = layer_source_typeof(config.title) === 'object';
    var ismax = config.maxmin && (config.type === 1 || config.type === 2);
    var titleHTML = config.title ? '<div class="layui-layer-title" style="' + (titype ? config.title[1] : '') + '">' + (titype ? config.title[0] : config.title) + '</div>' : '';

    config.zIndex = zIndex;
    callback([
    // 遮罩
    config.shade ? '<div class="layui-layer-shade" id="layui-layer-shade' + times + '" times="' + times + '" style="' + ('z-index:' + (zIndex - 1) + '; ') + '"></div>' : '',

    // 主体
    '<div class="' + doms[0] + (' layui-layer-' + _ready.type[config.type]) + ((config.type == 0 || config.type == 2) && !config.shade ? ' layui-layer-border' : '') + ' ' + (config.skin || '') + '" id="' + doms[0] + times + '" type="' + _ready.type[config.type] + '" times="' + times + '" showtime="' + config.time + '" conType="' + (conType ? 'object' : 'string') + '" style="z-index: ' + zIndex + '; width:' + config.area[0] + ';height:' + config.area[1] + (config.fixed ? '' : ';position:absolute;') + '">' + (conType && config.type != 2 ? '' : titleHTML) + '<div id="' + (config.id || '') + '" class="layui-layer-content' + (config.type == 0 && config.icon !== -1 ? ' layui-layer-padding' : '') + (config.type == 3 ? ' layui-layer-loading' + config.icon : '') + '">' + (config.type == 0 && config.icon !== -1 ? '<i class="layui-layer-ico layui-layer-ico' + config.icon + '"></i>' : '') + (config.type == 1 && conType ? '' : config.content || '') + '</div>' + '<span class="layui-layer-setwin">' + function () {
        var closebtn = ismax ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max dg-icon-fullscreen" href="javascript:;"></a>' : '';
        config.closeBtn && (closebtn += '<a class="layui-layer-ico el-icon-close ' + doms[7] + ' ' + doms[7] + (config.title ? config.closeBtn : config.type == 4 ? '1' : '2') + '" href="javascript:;"></a>');
        return closebtn;
    }() + '</span>' + (config.btn ? function () {
        var button = '';
        typeof config.btn === 'string' && (config.btn = [config.btn]);
        for (var i = 0, len = config.btn.length; i < len; i++) {
            button += '<a class="' + doms[6] + '' + i + '">' + config.btn[i] + '</a>';
        }

        // add author: tangdm desc: 禁止按钮区域
        if (config.noneBtnField) {
            return '<div class="none-btn-field"></div>';
        } else {
            return '<div class="' + doms[6] + ' layui-layer-btn-' + (config.btnAlign || '') + '">' + button + '</div>';
        }
    }() : '') + (config.resize ? '<span class="layui-layer-resize"></span>' : '') + '</div>'], titleHTML, $('<div class="layui-layer-move"></div>'));
    return that;
};

// 创建骨架
Class.pt.creat = function () {
    var that = this,
        config = that.config,
        times = that.index,
        nodeIndex,
        content = config.content,
        conType = (typeof content === 'undefined' ? 'undefined' : layer_source_typeof(content)) === 'object',
        body = $('body');

    if (config.id && $('#' + config.id)[0]) return;

    if (typeof config.area === 'string') {
        config.area = config.area === 'auto' ? ['', ''] : [config.area, ''];
    }

    // anim兼容旧版shift
    if (config.shift) {
        config.anim = config.shift;
    }

    if (layer_source_layer.ie == 6) {
        config.fixed = false;
    }

    switch (config.type) {
        case 0:
            config.btn = 'btn' in config ? config.btn : _ready.btn[0];
            layer_source_layer.closeAll('dialog');
            break;
        case 2:
            var content = config.content = conType ? config.content : [config.content || 'http://layer.layui.com', 'auto'];
            config.content = '<iframe scrolling="' + (config.content[1] || 'auto') + '" allowtransparency="true" id="' + doms[4] + '' + times + '" name="' + doms[4] + '' + times + '" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + config.content[0] + '"></iframe>';
            break;
        case 3:
            delete config.title;
            delete config.closeBtn;
            config.icon === -1 && config.icon === 0;
            layer_source_layer.closeAll('loading');
            break;
        case 4:
            conType || (config.content = [config.content, 'body']);
            config.follow = config.content[1];
            config.content = config.content[0] + '<i class="layui-layer-TipsG"></i>';
            delete config.title;
            config.tips = layer_source_typeof(config.tips) === 'object' ? config.tips : [config.tips, true];
            config.tipsMore || layer_source_layer.closeAll('tips');
            break;
    }

    // 建立容器
    that.vessel(conType, function (html, titleHTML, moveElem) {
        body.append(html[0]);
        conType ? function () {
            config.type == 2 || config.type == 4 ? function () {
                $('body').append(html[1]);
            }() : function () {
                if (!content.parents('.' + doms[0])[0]) {
                    content.data('display', content.css('display')).show().addClass('layui-layer-wrap').wrap(html[1]);
                    $('#' + doms[0] + times).find('.' + doms[5]).before(titleHTML);
                }
            }();
        }() : body.append(html[1]);
        $('.layui-layer-move')[0] || body.append(_ready.moveElem = moveElem);
        that.layero = $('#' + doms[0] + times);
        config.scrollbar || doms.html.css('overflow', 'hidden').attr('layer-full', times);

        // 增加额外按钮yangjy 2019-5-31 start
        $.each(that.config.btnExt, function () {
            that.layero.find('.' + doms[6]).append(this);
        });
        // 增加额外按钮yangjy 2019-5-31  end
    }).auto(times);

    // 遮罩
    $('#layui-layer-shade' + that.index).css({
        'background-color': config.shade[1] || '#000',
        opacity: config.shade[0] || config.shade
    });

    config.type == 2 && layer_source_layer.ie == 6 && that.layero.find('iframe').attr('src', content[0]);

    // 坐标自适应浏览器窗口尺寸
    config.type == 4 ? that.tips() : that.offset();
    if (config.fixed) {
        win.on('resize', function () {
            that.offset();
            (/^\d+%$/.test(config.area[0]) || /^\d+%$/.test(config.area[1])) && that.auto(times);
            config.type == 4 && that.tips();
        });
    }

    config.time <= 0 || setTimeout(function () {
        layer_source_layer.close(that.index);
    }, config.time);
    that.move().callback();

    // 为兼容jQuery3.0的css动画影响元素尺寸计算
    if (doms.anim[config.anim]) {
        var animClass = 'layer-anim ' + doms.anim[config.anim];
        that.layero.addClass(animClass).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
            $(this).removeClass(animClass);
        });
    }

    // 记录关闭动画
    if (config.isOutAnim) {
        that.layero.data('isOutAnim', true);
    }
};

// 自适应
Class.pt.auto = function (index) {
    var that = this,
        config = that.config,
        layero = $('#' + doms[0] + index);

    if (config.area[0] === '' && config.maxWidth > 0) {
        // 为了修复IE7下一个让人难以理解的bug
        if (layer_source_layer.ie && layer_source_layer.ie < 8 && config.btn) {
            layero.width(layero.innerWidth());
        }
        layero.outerWidth() > config.maxWidth && layero.width(config.maxWidth);
    }

    var area = [layero.innerWidth(), layero.innerHeight()],
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        btnHeight = layero.find('.' + doms[6]).outerHeight() || 0,
        setHeight = function setHeight(elem) {
        elem = layero.find(elem);
        elem.height(area[1] - titHeight - btnHeight - 2 * (parseFloat(elem.css('padding-top')) | 0));
    };

    switch (config.type) {
        case 2:
            setHeight('iframe');
            break;
        default:
            if (config.area[1] === '') {
                if (config.maxHeight > 0 && layero.outerHeight() > config.maxHeight) {
                    area[1] = config.maxHeight;
                    setHeight('.' + doms[5]);
                } else if (config.fixed && area[1] >= win.height()) {
                    area[1] = win.height();
                    setHeight('.' + doms[5]);
                }
            } else {
                setHeight('.' + doms[5]);
            }
            break;
    }

    return that;
};

// 计算坐标
Class.pt.offset = function () {
    var that = this,
        config = that.config,
        layero = that.layero;
    var area = [layero.outerWidth(), layero.outerHeight()];
    var type = layer_source_typeof(config.offset) === 'object';
    that.offsetTop = (win.height() - area[1]) / 2;
    that.offsetLeft = (win.width() - area[0]) / 2;

    if (type) {
        that.offsetTop = config.offset[0];
        that.offsetLeft = config.offset[1] || that.offsetLeft;
    } else if (config.offset !== 'auto') {
        if (config.offset === 't') {
            // 上
            that.offsetTop = 0;
        } else if (config.offset === 'r') {
            // 右
            that.offsetLeft = win.width() - area[0];
        } else if (config.offset === 'b') {
            // 下
            that.offsetTop = win.height() - area[1];
        } else if (config.offset === 'l') {
            // 左
            that.offsetLeft = 0;
        } else if (config.offset === 'lt') {
            // 左上角
            that.offsetTop = 0;
            that.offsetLeft = 0;
        } else if (config.offset === 'lb') {
            // 左下角
            that.offsetTop = win.height() - area[1];
            that.offsetLeft = 0;
        } else if (config.offset === 'rt') {
            // 右上角
            that.offsetTop = 0;
            that.offsetLeft = win.width() - area[0];
        } else if (config.offset === 'rb') {
            // 右下角
            that.offsetTop = win.height() - area[1];
            that.offsetLeft = win.width() - area[0];
        } else {
            that.offsetTop = config.offset;
        }
    }

    if (!config.fixed) {
        that.offsetTop = /%$/.test(that.offsetTop) ? win.height() * parseFloat(that.offsetTop) / 100 : parseFloat(that.offsetTop);
        that.offsetLeft = /%$/.test(that.offsetLeft) ? win.width() * parseFloat(that.offsetLeft) / 100 : parseFloat(that.offsetLeft);
        that.offsetTop += win.scrollTop();
        that.offsetLeft += win.scrollLeft();
    }

    if (layero.attr('minLeft')) {
        that.offsetTop = win.height() - (layero.find(doms[1]).outerHeight() || 0);
        that.offsetLeft = layero.css('left');
    }

    layero.css({ top: that.offsetTop, left: that.offsetLeft });
};

// Tips
Class.pt.tips = function () {
    var that = this,
        config = that.config,
        layero = that.layero;
    var layArea = [layero.outerWidth(), layero.outerHeight()],
        follow = $(config.follow);
    if (!follow[0]) follow = $('body');
    var goal = {
        width: follow.outerWidth(),
        height: follow.outerHeight(),
        top: follow.offset().top,
        left: follow.offset().left
    },
        tipsG = layero.find('.layui-layer-TipsG');

    var guide = config.tips[0];
    config.tips[1] || tipsG.remove();

    goal.autoLeft = function () {
        if (goal.left + layArea[0] - win.width() > 0) {
            goal.tipLeft = goal.left + goal.width - layArea[0];
            tipsG.css({ right: 12, left: 'auto' });
        } else {
            goal.tipLeft = goal.left;
        }
    };

    // 辨别tips的方位
    goal.where = [function () {
        // 上
        goal.autoLeft();
        goal.tipTop = goal.top - layArea[1] - 10;
        tipsG.removeClass('layui-layer-TipsB').addClass('layui-layer-TipsT').css('border-right-color', config.tips[1]);
    }, function () {
        // 右
        goal.tipLeft = goal.left + goal.width + 10;
        goal.tipTop = goal.top;
        tipsG.removeClass('layui-layer-TipsL').addClass('layui-layer-TipsR').css('border-bottom-color', config.tips[1]);
    }, function () {
        // 下
        goal.autoLeft();
        goal.tipTop = goal.top + goal.height + 10;
        tipsG.removeClass('layui-layer-TipsT').addClass('layui-layer-TipsB').css('border-right-color', config.tips[1]);
    }, function () {
        // 左
        goal.tipLeft = goal.left - layArea[0] - 10;
        goal.tipTop = goal.top;
        tipsG.removeClass('layui-layer-TipsR').addClass('layui-layer-TipsL').css('border-bottom-color', config.tips[1]);
    }];
    goal.where[guide - 1]();

    /* 8*2为小三角形占据的空间 */
    if (guide === 1) {
        goal.top - (win.scrollTop() + layArea[1] + 8 * 2) < 0 && goal.where[2]();
    } else if (guide === 2) {
        win.width() - (goal.left + goal.width + layArea[0] + 8 * 2) > 0 || goal.where[3]();
    } else if (guide === 3) {
        goal.top - win.scrollTop() + goal.height + layArea[1] + 8 * 2 - win.height() > 0 && goal.where[0]();
    } else if (guide === 4) {
        layArea[0] + 8 * 2 - goal.left > 0 && goal.where[1]();
    }

    layero.find('.' + doms[5]).css({
        'background-color': config.tips[1],
        'padding-right': config.closeBtn ? '30px' : ''
    });
    layero.css({
        left: goal.tipLeft - (config.fixed ? win.scrollLeft() : 0),
        top: goal.tipTop - (config.fixed ? win.scrollTop() : 0)
    });
};
//新增模拟点击事件 yangjy
function simulateClick() {
    if ($(document).find('.el-popper').length <= 0) {
        return;
    }
    var eventDown = document.createEvent('MouseEvents');
    eventDown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    var eventUp = document.createEvent('MouseEvents');
    eventUp.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    document.dispatchEvent(eventDown);
    document.dispatchEvent(eventUp);
}
//拖拽层
Class.pt.move = function () {
    var that = this,
        config = that.config,
        _DOC = $(document),
        layero = that.layero,
        moveElem = layero.find(config.move),
        resizeElem = layero.find('.layui-layer-resize'),
        dict = {};

    if (config.move) {
        moveElem.css('cursor', 'move');
    }

    moveElem.on('mousedown', function (e) {
        e.preventDefault();
        if (config.move) {
            simulateClick();
            dict.moveStart = true;
            dict.offset = [e.clientX - parseFloat(layero.css('left')), e.clientY - parseFloat(layero.css('top'))];
            _ready.moveElem.css('cursor', 'move').show();
        }
    });

    resizeElem.on('mousedown', function (e) {
        e.preventDefault();
        dict.resizeStart = true;
        dict.offset = [e.clientX, e.clientY];
        dict.area = [layero.outerWidth(), layero.outerHeight()];
        _ready.moveElem.css('cursor', 'se-resize').show();
    });

    _DOC.on('mousemove', function (e) {
        // 拖拽移动
        if (dict.moveStart) {
            var X = e.clientX - dict.offset[0],
                Y = e.clientY - dict.offset[1],
                fixed = layero.css('position') === 'fixed';

            e.preventDefault();

            dict.stX = fixed ? 0 : win.scrollLeft();
            dict.stY = fixed ? 0 : win.scrollTop();

            // 控制元素不被拖出窗口外
            if (!config.moveOut) {
                var setRig = win.width() - layero.outerWidth() + dict.stX,
                    setBot = win.height() - layero.outerHeight() + dict.stY;
                X < dict.stX && (X = dict.stX);
                X > setRig && (X = setRig);
                Y < dict.stY && (Y = dict.stY);
                Y > setBot && (Y = setBot);
            }

            layero.css({
                left: X,
                top: Y
            });
        }

        // Resize
        if (config.resize && dict.resizeStart) {
            var X = e.clientX - dict.offset[0],
                Y = e.clientY - dict.offset[1];

            e.preventDefault();

            layer_source_layer.style(that.index, {
                width: dict.area[0] + X,
                height: dict.area[1] + Y
            });
            dict.isResize = true;
            config.resizing && config.resizing(layero);
        }
    }).on('mouseup', function (e) {
        if (dict.moveStart) {
            delete dict.moveStart;
            _ready.moveElem.hide();
            config.moveEnd && config.moveEnd(layero);
        }
        if (dict.resizeStart) {
            delete dict.resizeStart;
            _ready.moveElem.hide();
        }
    });

    return that;
};

Class.pt.callback = function () {
    var that = this,
        layero = that.layero,
        config = that.config;
    that.openLayer();
    if (config.success) {
        if (config.type == 2) {
            layero.find('iframe').on('load', function () {
                config.success(layero, that.index);
            });
        } else {
            config.success(layero, that.index);
        }
    }
    layer_source_layer.ie == 6 && that.IE6(layero);

    // 按钮
    layero.find('.' + doms[6]).children('a').on('click', function () {
        var index = $(this).index();
        if (index === 0) {
            if (config.yes) {
                config.yes(that.index, layero);
            } else if (config['btn1']) {
                config['btn1'](that.index, layero);
            } else {
                layer_source_layer.close(that.index);
            }
        } else {
            var close = config['btn' + (index + 1)] && config['btn' + (index + 1)](that.index, layero);
            close === false || layer_source_layer.close(that.index);
        }
    });

    // 取消
    function cancel() {
        var close = config.cancel && config.cancel(that.index, layero);
        close === false || layer_source_layer.close(that.index);
    }

    // 右上角关闭回调
    layero.find('.' + doms[7]).on('click', cancel);

    // 点遮罩关闭
    if (config.shadeClose) {
        $('#layui-layer-shade' + that.index).on('click', function () {
            layer_source_layer.close(that.index);
        });
    }

    // 最小化
    layero.find('.layui-layer-min').on('click', function () {
        var min = config.min && config.min(layero);
        min === false || layer_source_layer.min(that.index, config);
    });

    // 全屏/还原
    layero.find('.layui-layer-max').on('click', function () {
        // add 修改弹层对应的图标 tangdm
        if (!$(this).siblings('.layui-layer-min').is(':visible')) {
            layer_source_layer.restore(that.index);
            config.restore && config.restore(layero);
            return false;
        }

        // change 改变标识方式 tangdm
        if ($(this).hasClass('dg-icon-scalescreen')) {
            layer_source_layer.restore(that.index);
            config.restore && config.restore(layero);
        } else {
            layer_source_layer.full(that.index, config);
            setTimeout(function () {
                config.full && config.full(layero);
            }, 100);
        }
    });

    config.end && (_ready.end[that.index] = config.end);
};

// for ie6 恢复select
_ready.reselect = function () {
    $.each($('select'), function (index, value) {
        var sthis = $(this);
        if (!sthis.parents('.' + doms[0])[0]) {
            sthis.attr('layer') == 1 && $('.' + doms[0]).length < 1 && sthis.removeAttr('layer').show();
        }
        sthis = null;
    });
};

Class.pt.IE6 = function (layero) {
    // 隐藏select
    $('select').each(function (index, value) {
        var sthis = $(this);
        if (!sthis.parents('.' + doms[0])[0]) {
            sthis.css('display') === 'none' || sthis.attr({ layer: '1' }).hide();
        }
        sthis = null;
    });
};

// 需依赖原型的对外方法
Class.pt.openLayer = function () {
    var that = this;

    // 置顶当前窗口
    layer_source_layer.zIndex = that.config.zIndex;
    layer_source_layer.setTop = function (layero) {
        var setZindex = function setZindex() {
            layer_source_layer.zIndex++;
            layero.css('z-index', layer_source_layer.zIndex + 1);
        };
        layer_source_layer.zIndex = parseInt(layero[0].style.zIndex);
        layero.on('mousedown', setZindex);
        return layer_source_layer.zIndex;
    };
};

_ready.record = function (layero) {
    var area = [layero.width(), layero.height(), layero.position().top, layero.position().left + parseFloat(layero.css('margin-left'))];

    // add 切换图标标识 tangdm
    layero.find('.layui-layer-max').removeClass('dg-icon-fullscreen').addClass('dg-icon-scalescreen');

    layero.attr({ area: area });
};

_ready.rescollbar = function (index) {
    if (doms.html.attr('layer-full') == index) {
        if (doms.html[0].style.removeProperty) {
            doms.html[0].style.removeProperty('overflow');
        } else {
            doms.html[0].style.removeAttribute('overflow');
        }
        doms.html.removeAttr('layer-full');
    }
};

/** 内置成员 */

window.layer = layer_source_layer;

// 获取子iframe的DOM
layer_source_layer.getChildFrame = function (selector, index) {
    index = index || $('.' + doms[4]).attr('times');
    return $('#' + doms[0] + index).find('iframe').contents().find(selector);
};

// 得到当前iframe层的索引，子iframe时使用
layer_source_layer.getFrameIndex = function (name) {
    return $('#' + name).parents('.' + doms[4]).attr('times');
};

// iframe层自适应宽高
layer_source_layer.iframeAuto = function (index) {
    if (!index) return;
    var heg = layer_source_layer.getChildFrame('html', index).outerHeight();
    var layero = $('#' + doms[0] + index);
    var titHeight = layero.find(doms[1]).outerHeight() || 0;
    var btnHeight = layero.find('.' + doms[6]).outerHeight() || 0;
    layero.css({ height: heg + titHeight + btnHeight });
    layero.find('iframe').css({ height: heg });
};

// 重置iframe url
layer_source_layer.iframeSrc = function (index, url) {
    $('#' + doms[0] + index).find('iframe').attr('src', url);
};

// 设定层的样式
layer_source_layer.style = function (index, options, limit) {
    var layero = $('#' + doms[0] + index),
        contElem = layero.find('.layui-layer-content'),
        type = layero.attr('type'),
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        btnHeight = layero.find('.' + doms[6]).outerHeight() || 0,
        minLeft = layero.attr('minLeft');

    if (type === _ready.type[3] || type === _ready.type[4]) {
        return;
    }

    if (!limit) {
        if (parseFloat(options.width) <= 260) {
            options.width = 260;
        }

        if (parseFloat(options.height) - titHeight - btnHeight <= 64) {
            options.height = 64 + titHeight + btnHeight;
        }
    }

    layero.css(options);
    btnHeight = layero.find('.' + doms[6]).outerHeight();

    if (type === _ready.type[2]) {
        layero.find('iframe').css({
            height: parseFloat(options.height) - titHeight - btnHeight
        });
    } else {
        // change by tangdm # 修改放大缩小后与原本的高度不一致的问题
        contElem.css({
            height: parseFloat(options.height) - titHeight - btnHeight
        });

        // code
        // contElem.css({
        //    height:
        //        parseFloat(options.height) -
        //        titHeight -
        //        btnHeight -
        //        parseFloat(contElem.css('padding-top')) -
        //        parseFloat(contElem.css('padding-bottom'))
        // });
    }
};

// 最小化
layer_source_layer.min = function (index, options) {
    var layero = $('#' + doms[0] + index),
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        left = layero.attr('minLeft') || 181 * _ready.minIndex + 'px',
        position = layero.css('position');

    _ready.record(layero);

    if (_ready.minLeft[0]) {
        left = _ready.minLeft[0];
        _ready.minLeft.shift();
    }

    layero.attr('position', position);

    layer_source_layer.style(index, {
        width: 180,
        height: titHeight,
        left: left,
        top: win.height() - titHeight,
        position: 'fixed',
        overflow: 'hidden'
    }, true);

    layero.find('.layui-layer-min').hide();
    layero.attr('type') === 'page' && layero.find(doms[4]).hide();
    _ready.rescollbar(index);

    if (!layero.attr('minLeft')) {
        _ready.minIndex++;
    }
    layero.attr('minLeft', left);

    // 重置图标
    layero.find('.layui-layer-max').removeClass('dg-icon-scalescreen').addClass('dg-icon-fullscreen');
};

// 还原
layer_source_layer.restore = function (index) {
    var layero = $('#' + doms[0] + index),
        area = layero.attr('area').split(',');
    var type = layero.attr('type');
    layer_source_layer.style(index, {
        width: parseFloat(area[0]),
        height: parseFloat(area[1]),
        top: parseFloat(area[2]),
        left: parseFloat(area[3]),
        position: layero.attr('position'),
        overflow: 'visible'
    }, true);

    // change 图标标识 tangdm
    layero.find('.layui-layer-max').removeClass('dg-icon-scalescreen').addClass('dg-icon-fullscreen');

    layero.find('.layui-layer-min').show();
    layero.attr('type') === 'page' && layero.find(doms[4]).show();
    _ready.rescollbar(index);
};

// 全屏
layer_source_layer.full = function (index) {
    var layero = $('#' + doms[0] + index),
        timer;
    _ready.record(layero);
    if (!doms.html.attr('layer-full')) {
        doms.html.css('overflow', 'hidden').attr('layer-full', index);
    }
    clearTimeout(timer);
    timer = setTimeout(function () {
        var isfix = layero.css('position') === 'fixed';
        layer_source_layer.style(index, {
            top: isfix ? 0 : win.scrollTop(),
            left: isfix ? 0 : win.scrollLeft(),
            width: win.width(),
            height: win.height()
        }, true);
        layero.find('.layui-layer-min').hide();
    }, 100);
};

// 改变title
layer_source_layer.title = function (name, index) {
    var title = $('#' + doms[0] + (index || layer_source_layer.index)).find(doms[1]);
    title.html(name);
};

// 关闭layer总方法
layer_source_layer.close = function (index) {
    var layero = $('#' + doms[0] + index),
        type = layero.attr('type'),
        closeAnim = 'layer-anim-close';
    if (!layero[0]) return;
    var WRAP = 'layui-layer-wrap',
        remove = function remove() {
        if (type === _ready.type[1] && layero.attr('conType') === 'object') {
            layero.children(':not(.' + doms[5] + ')').remove();
            // edit by tangdm description: 修复弹窗信息没移除 // var wrap = layero.find('.' + WRAP);
            var wrap = layero.find('.' + doms[5]).children();

            for (var i = 0; i < 2; i++) {
                wrap.unwrap();
            }
            wrap.css('display', wrap.data('display')).removeClass(WRAP);
        } else {
            // 低版本IE 回收 iframe
            if (type === _ready.type[2]) {
                try {
                    var iframe = $('#' + doms[4] + index)[0];
                    iframe.contentWindow.document.write('');
                    iframe.contentWindow.close();
                    layero.find('.' + doms[5])[0].removeChild(iframe);
                } catch (e) {}
            }
            layero[0].innerHTML = '';
            layero.remove();
        }
        typeof _ready.end[index] === 'function' && _ready.end[index]();
        delete _ready.end[index];
    };

    if (layero.data('isOutAnim')) {
        layero.addClass('layer-anim ' + closeAnim);
    }

    $('#layui-layer-moves, #layui-layer-shade' + index).remove();
    layer_source_layer.ie == 6 && _ready.reselect();
    _ready.rescollbar(index);
    if (layero.attr('minLeft')) {
        _ready.minIndex--;
        _ready.minLeft.push(layero.attr('minLeft'));
    }

    if (layer_source_layer.ie && layer_source_layer.ie < 10 || !layero.data('isOutAnim')) {
        remove();
    } else {
        setTimeout(function () {
            remove();
        }, 200);
    }
};

// 关闭所有层
layer_source_layer.closeAll = function (type) {
    $.each($('.' + doms[0]), function () {
        var othis = $(this);
        var is = type ? othis.attr('type') === type : 1;
        is && layer_source_layer.close(othis.attr('times'));
        is = null;
    });
};

/**

   拓展模块，layui开始合并在一起

   */

var cache = layer_source_layer.cache || {},
    skin = function skin(type) {
    return cache.skin ? ' ' + cache.skin + ' ' + cache.skin + '-' + type : '';
};

// 仿系统prompt
layer_source_layer.prompt = function (options, _yes) {
    var style = '';
    options = options || {};

    if (typeof options === 'function') _yes = options;

    if (options.area) {
        var area = options.area;
        style = 'style="width: ' + area[0] + '; height: ' + area[1] + ';"';
        delete options.area;
    }
    var prompt,
        content = options.formType == 2 ? '<textarea class="layui-layer-input"' + style + '>' + (options.value || '') + '</textarea>' : function () {
        return '<input type="' + (options.formType == 1 ? 'password' : 'text') + '" class="layui-layer-input" value="' + (options.value || '') + '">';
    }();

    var _success = options.success;
    delete options.success;

    return layer_source_layer.open($.extend({
        type: 1,
        btn: ['&#x786E;&#x5B9A;', '&#x53D6;&#x6D88;'],
        content: content,
        skin: 'layui-layer-prompt' + skin('prompt'),
        maxWidth: win.width(),
        success: function success(layero) {
            prompt = layero.find('.layui-layer-input');
            prompt.focus();
            typeof _success === 'function' && _success(layero);
        },
        resize: false,
        yes: function yes(index) {
            var value = prompt.val();
            if (value === '') {
                prompt.focus();
            } else if (value.length > (options.maxlength || 500)) {
                layer_source_layer.tips('&#x6700;&#x591A;&#x8F93;&#x5165;' + (options.maxlength || 500) + '&#x4E2A;&#x5B57;&#x6570;', prompt, { tips: 1 });
            } else {
                _yes && _yes(value, index, prompt);
            }
        }
    }, options));
};

// tab层
layer_source_layer.tab = function (options) {
    options = options || {};

    var tab = options.tab || {},
        THIS = 'layui-this',
        _success2 = options.success;

    delete options.success;

    return layer_source_layer.open($.extend({
        type: 1,
        skin: 'layui-layer-tab' + skin('tab'),
        resize: false,
        title: function () {
            var len = tab.length,
                ii = 1,
                str = '';
            if (len > 0) {
                str = '<span class="' + THIS + '">' + tab[0].title + '</span>';
                for (; ii < len; ii++) {
                    str += '<span>' + tab[ii].title + '</span>';
                }
            }
            return str;
        }(),
        content: '<ul class="layui-layer-tabmain">' + function () {
            var len = tab.length,
                ii = 1,
                str = '';
            if (len > 0) {
                str = '<li class="layui-layer-tabli ' + THIS + '">' + (tab[0].content || 'no content') + '</li>';
                for (; ii < len; ii++) {
                    str += '<li class="layui-layer-tabli">' + (tab[ii].content || 'no  content') + '</li>';
                }
            }
            return str;
        }() + '</ul>',
        success: function success(layero) {
            var btn = layero.find('.layui-layer-title').children();
            var main = layero.find('.layui-layer-tabmain').children();
            btn.on('mousedown', function (e) {
                e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
                var othis = $(this),
                    index = othis.index();
                othis.addClass(THIS).siblings().removeClass(THIS);
                main.eq(index).show().siblings().hide();
                typeof options.change === 'function' && options.change(index);
            });
            typeof _success2 === 'function' && _success2(layero);
        }
    }, options));
};

// 相册层
layer_source_layer.photos = function (options, loop, key) {
    var dict = {};
    options = options || {};
    if (!options.photos) return;
    var type = options.photos.constructor === Object;
    var photos = type ? options.photos : {},
        data = photos.data || [];
    var start = photos.start || 0;
    dict.imgIndex = (start | 0) + 1;

    options.img = options.img || 'img';

    var _success3 = options.success;
    delete options.success;

    if (!type) {
        // 页面直接获取
        var parent = $(options.photos),
            pushData = function pushData() {
            data = [];
            parent.find(options.img).each(function (index) {
                var othis = $(this);
                othis.attr('layer-index', index);
                data.push({
                    alt: othis.attr('alt'),
                    pid: othis.attr('layer-pid'),
                    src: othis.attr('layer-src') || othis.attr('src'),
                    thumb: othis.attr('src')
                });
            });
        };

        pushData();

        if (data.length === 0) return;

        loop || parent.on('click', options.img, function () {
            var othis = $(this),
                index = othis.attr('layer-index');
            layer_source_layer.photos($.extend(options, {
                photos: {
                    start: index,
                    data: data,
                    tab: options.tab
                },
                full: options.full
            }), true);
            pushData();
        });

        // 不直接弹出
        if (!loop) return;
    } else if (data.length === 0) {
        return layer_source_layer.msg('&#x6CA1;&#x6709;&#x56FE;&#x7247;');
    }

    // 上一张
    dict.imgprev = function (key) {
        dict.imgIndex--;
        if (dict.imgIndex < 1) {
            dict.imgIndex = data.length;
        }
        dict.tabimg(key);
    };

    // 下一张
    dict.imgnext = function (key, errorMsg) {
        dict.imgIndex++;
        if (dict.imgIndex > data.length) {
            dict.imgIndex = 1;
            if (errorMsg) {
                return;
            }
        }
        dict.tabimg(key);
    };

    // 方向键
    dict.keyup = function (event) {
        if (!dict.end) {
            var code = event.keyCode;
            event.preventDefault();
            if (code === 37) {
                dict.imgprev(true);
            } else if (code === 39) {
                dict.imgnext(true);
            } else if (code === 27) {
                layer_source_layer.close(dict.index);
            }
        }
    };

    // 切换
    dict.tabimg = function (key) {
        if (data.length <= 1) return;
        photos.start = dict.imgIndex - 1;
        layer_source_layer.close(dict.index);
        return layer_source_layer.photos(options, true, key);
        setTimeout(function () {
            layer_source_layer.photos(options, true, key);
        }, 200);
    };

    // 一些动作
    dict.event = function () {
        dict.bigimg.hover(function () {
            dict.imgsee.show();
        }, function () {
            dict.imgsee.hide();
        });

        dict.bigimg.find('.layui-layer-imgprev').on('click', function (event) {
            event.preventDefault();
            dict.imgprev();
        });

        dict.bigimg.find('.layui-layer-imgnext').on('click', function (event) {
            event.preventDefault();
            dict.imgnext();
        });

        $(document).on('keyup', dict.keyup);
    };

    // 图片预加载
    function loadImage(url, callback, error) {
        var img = new Image();
        img.src = url;
        if (img.complete) {
            return callback(img);
        }
        img.onload = function () {
            img.onload = null;
            callback(img);
        };
        img.onerror = function (e) {
            img.onerror = null;
            error(e);
        };
    }

    dict.loadi = layer_source_layer.load(1, {
        shade: 'shade' in options ? false : 0.9,
        scrollbar: false
    });

    loadImage(data[start].src, function (img) {
        layer_source_layer.close(dict.loadi);
        dict.index = layer_source_layer.open($.extend({
            type: 1,
            id: 'layui-layer-photos',
            area: function () {
                var imgarea = [img.width, img.height];
                var winarea = [$(window).width() - 100, $(window).height() - 100];

                // 如果 实际图片的宽或者高比 屏幕大（那么进行缩放）
                if (!options.full && (imgarea[0] > winarea[0] || imgarea[1] > winarea[1])) {
                    var wh = [imgarea[0] / winarea[0], imgarea[1] / winarea[1]]; // 取宽度缩放比例、高度缩放比例
                    if (wh[0] > wh[1]) {
                        // 取缩放比例最大的进行缩放
                        imgarea[0] = imgarea[0] / wh[0];
                        imgarea[1] = imgarea[1] / wh[0];
                    } else if (wh[0] < wh[1]) {
                        imgarea[0] = imgarea[0] / wh[1];
                        imgarea[1] = imgarea[1] / wh[1];
                    }
                }

                return [imgarea[0] + 'px', imgarea[1] + 'px'];
            }(),
            title: false,
            shade: 0.9,
            shadeClose: true,
            closeBtn: false,
            move: '.layui-layer-phimg img',
            moveType: 1,
            scrollbar: false,
            moveOut: true,
            // anim: Math.random()*5|0,
            isOutAnim: false,
            skin: 'layui-layer-photos' + skin('photos'),
            content: '<div class="layui-layer-phimg">' + '<img src="' + data[start].src + '" alt="' + (data[start].alt || '') + '" layer-pid="' + data[start].pid + '">' + '<div class="layui-layer-imgsee">' + (data.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : '') + '<div class="layui-layer-imgbar" style="display:' + (key ? 'block' : '') + '"><span class="layui-layer-imgtit"><a href="javascript:;">' + (data[start].alt || '') + '</a><em>' + dict.imgIndex + '/' + data.length + '</em></span></div>' + '</div>' + '</div>',
            success: function success(layero, index) {
                dict.bigimg = layero.find('.layui-layer-phimg');
                dict.imgsee = layero.find('.layui-layer-imguide,.layui-layer-imgbar');
                dict.event(layero);
                options.tab && options.tab(data[start], layero);
                typeof _success3 === 'function' && _success3(layero);
            },
            end: function end() {
                dict.end = true;
                $(document).off('keyup', dict.keyup);
            }
        }, options));
    }, function () {
        layer_source_layer.close(dict.loadi);
        layer_source_layer.msg('&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;', {
            time: 30000,
            btn: ['&#x4E0B;&#x4E00;&#x5F20;', '&#x4E0D;&#x770B;&#x4E86;'],
            yes: function yes() {
                data.length > 1 && dict.imgnext(true, true);
            }
        });
    });
};

// 主入口
_ready.run = function (_$) {
    $ = _$;
    win = $(window);
    doms.html = $('html');
    layer_source_layer.open = function (deliver) {
        var o = new Class(deliver);
        return o.index;
    };
};

_ready.run(external_jquery_default.a);
// layer.ready(); yangjy 2019-5-31 去掉自动加载样式

/* harmony default export */ var layer_source = (layer_source_layer);
// CONCATENATED MODULE: ./packages/dialog/src/layer.js
var layer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };






var layer_layerDialog = function layerDialog(Vue) {
    return function (option) {
        var _this2 = this;

        if (!option.content && !option.component) {
            throw 'error: the content or component of  Dialog cannot be null!';
        }
        // 初始化参数
        var opt = initOption(option);

        // 不是组件的直接调用原有的方法
        if (!opt.isComponent) {
            return layer_source.open(opt);
        }

        // 获取组件信息,和是否异步组件

        var _getComponent = getComponent(opt, Vue),
            component = _getComponent.component,
            isAsync = _getComponent.isAsync;

        // 创建组件实例


        var _$root$$options = this.$root.$options,
            router = _$root$$options.router,
            store = _$root$$options.store;

        var instance = new Vue({
            router: router,
            store: store,
            parent: this,
            el: opt.$el[0],
            opt: opt,
            provide: {
                $p: this,
                $props: opt.props
            },
            components: {
                InnerComponent: component
            },
            render: function render(h) {
                var _this = this;

                var comName = typeof opt.content == 'string' ? opt.content : 'InnerComponent';
                return h(comName, {
                    props: opt.props,
                    on: layer_extends({
                        close: function close(e) {
                            layer_source.close(_this.dialogIndex);
                        },
                        closeAll: function closeAll() {
                            layer_source.closeAll();
                        }
                    }, opt.on)
                });
            },


            methods: {
                destroy: function destroy() {
                    this.$destroy();
                },

                close: function close(index) {
                    var _index = index ? index : _this2.dialogIndex;
                    layer_source.close(_index);
                },
                closeAll: function closeAll() {
                    layer_source.closeAll();
                }
            },
            mounted: function mounted() {
                var that = this;
                this.$nextTick(function () {
                    !isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            updated: function updated() {
                var that = this;
                this.$nextTick(function () {
                    isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            destroyed: function destroyed() {
                external_jquery_default()(this.$el).remove();
                instance = null;
            }
        });

        return instance;
    };
};

/**
 * 初始化参数
 * @param opt
 * @returns {Object}
 */
function initOption(opt) {
    // 计算宽高，不允许超出浏览器最大高框
    var maxW = document.body.clientWidth - 10,
        maxH = document.body.clientHeight - 100;

    var _ref = opt.area || [],
        _ref$ = _ref[0],
        width = _ref$ === undefined ? '10000px' : _ref$,
        _ref$2 = _ref[1],
        height = _ref$2 === undefined ? '10000px' : _ref$2;

    if (width.indexOf('px') > 0) {
        width = parseInt(width) > maxW ? maxW + 'px' : width;
    }
    if (height.indexOf('px') > 0) {
        height = parseInt(height) > maxH ? maxH + 'px' : height;
    }

    // 合并参数
    if (opt.component) {
        opt.content = opt.component;
    }
    var content = opt.content.default ? opt.content.default : opt.content;
    // 获取zIndex,让下一个zIndex加3
    var zIndex = popup_manager_default.a.nextZIndex();
    popup_manager_default.a.zIndex += 2 + layer_source.index;

    opt = external_jquery_default.a.extend({ btn: [], btnExt: [], type: 5, maxmin: true }, opt, {
        zIndex: opt.zIndex ? opt.zIndex : zIndex,
        area: [width, height],
        com: content,
        $el: external_jquery_default()('<div></div>').appendTo('body')
    });
    if (opt.type == 5) {
        opt.isComponent = true;
    }
    return opt;
}

/**
 * 根据参数获取组件对象异步组件、同步组件require、import等
 * @param opt
 */
function getComponent(opt, Vue) {
    var component = {},
        isAsync = false;
    // 指令和注入
    var cfg = {
        inject: ['$p', '$props']
    };

    // 混入对象
    var mixin = function mixin(comObj) {
        var component = comObj.default || comObj;
        var com = layer_extends({}, component);
        com.mixins = com.mixins ? [cfg].concat(com.mixins) : [cfg];
        return com;
    };

    // 根据对象类型返回混合后的组件
    var isVueComponent = opt.com instanceof Function && opt.com.prototype.constructor.toString().includes('VueComponent');
    if (opt.com instanceof Promise) {
        // import("./edit")
        component = function component(resolve, reject) {
            opt.com.then(function (obj) {
                resolve(mixin(obj));
            });
        };
        isAsync = true;
    } else if (opt.com instanceof Function && !isVueComponent) {
        // function(resolve,reject){}
        component = function component(resolve, reject) {
            opt.com(function (obj) {
                resolve(mixin(obj));
            }, reject);
        };
        isAsync = true;
    } else if (opt.com instanceof Function && isVueComponent) {
        component = opt.com;
        component.options.directives.footer = cfg.directives.footer;
    } else {
        component = mixin(opt.com);
    }
    return { component: component, isAsync: isAsync };
}

/**
 * 调用layer弹窗，供组件渲染后调用
 * @param opt
 */
function openLayer(opt) {
    var optClone = layer_extends({}, opt);
    var that = this;
    var optEnd = opt.end;
    optClone.content = external_jquery_default()(this.$el);
    optClone.type = 1;
    optClone.end = function () {
        optEnd && optEnd.apply(that);
        that.$destroy();
    };
    that.dialogIndex = layer_source.open(optClone);
    that.layer = layer_source;
}


// CONCATENATED MODULE: ./packages/dialog/src/footer.js

var WhileLock = 10; // 防止死循环

// 检测是否弹层 Dialog
var checkDialogType = function checkDialogType(vnode) {
    var node = vnode.context.$parent.$el;
    return !!node && node.className === "el-dialog__wrapper";
};

/* harmony default export */ var footer = ({
    bind: function bind(el, _ref, vnode) {
        var value = _ref.value;

        if (checkDialogType(vnode)) return;
        if (value !== false) {
            var opt = vnode.context;
            var whileBool = true;
            var whileLock = WhileLock; // 防止死循环
            while (whileBool && whileLock > 0) {
                opt = opt.$parent;
                if (opt && opt.$options.opt && opt.$options.opt.btnExt) {
                    opt = opt.$options.opt ? opt.$options.opt : opt;
                    whileBool = false;
                }
                --whileLock;
            }
            opt.btnExt.push(el);
        } else {
            vnode.context.$nextTick(function () {
                vnode.elm.parentNode.removeChild(el);
            });
        }
    },
    inserted: function inserted(el, _ref2, vnode) {
        var value = _ref2.value;

        if (!checkDialogType(vnode)) return;
        // 检测是否存在
        if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
            // 构建新的按钮区域
            var dom = document.createElement('div');
            dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
            dom.appendChild(el);

            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.appendChild(dom);
        } else {
            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
        }
    },
    update: function update(el, _ref3, vnode, oldVnode) {
        var value = _ref3.value;

        if (checkDialogType(vnode)) return;
        var layuiLayerBtn = vnode.context.$parent.$el;
        var whileBool = true;
        var whileLock = WhileLock; // 防止死循环
        while (whileBool && whileLock > 0) {
            if (!layuiLayerBtn) {
                whileBool = false;
                continue;
            }
            layuiLayerBtn = layuiLayerBtn.parentNode;

            // 检测是否找到父级元素
            if (!layuiLayerBtn) {
                whileBool = false;
                continue;
            }

            var className = layuiLayerBtn.className;
            if (className && external_lodash_default.a.includes(className, 'layui-layer layui-layer-page')) {
                layuiLayerBtn = layuiLayerBtn.querySelector('.layui-layer-btn');
                whileBool = false;
            }
            --whileLock;
        }
        if (!layuiLayerBtn) {
            return;
        }
        if (value !== false) {
            layuiLayerBtn.appendChild(el);
        } else {
            // el.parentNode === null 说明移除了
            el.parentNode && layuiLayerBtn.removeChild(el);
        }
    }
});
// CONCATENATED MODULE: ./packages/dialog/index.js






external_vue_default.a.directive('footer', footer);

dialog_src_main.dialog = src_dialog;
dialog_src_main.layerDialog = layer_layerDialog;
dialog_src_main.layer = layer_source;
dialog_src_main.directive = footer;

/* istanbul ignore next */
dialog_src_main.install = function (Vue) {
    Vue.directive('footer', footer);
    Vue.component(dialog_src_main.name, dialog_src_main);
};

/* harmony default export */ var packages_dialog = (dialog_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/message-box/src/main.vue?vue&type=template&id=6b29b012&
var mainvue_type_template_id_6b29b012_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("transition", { attrs: { name: "msgbox-fade" } }, [
    _c(
      "div",
      {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.visible,
            expression: "visible"
          }
        ],
        staticClass: "el-message-box__wrapper",
        attrs: {
          tabindex: "-1",
          role: "dialog",
          "aria-modal": "true",
          "aria-label": _vm.title || "dialog"
        },
        on: {
          click: function($event) {
            if ($event.target !== $event.currentTarget) {
              return null
            }
            return _vm.handleWrapperClick($event)
          }
        }
      },
      [
        _c(
          "div",
          {
            staticClass: "el-message-box dg-message-box",
            class: [_vm.customClass, _vm.center && "el-message-box--center"]
          },
          [
            _vm.title !== null
              ? _c(
                  "div",
                  {
                    staticClass: "el-message-box__header dg-message-box__header"
                  },
                  [
                    _c(
                      "div",
                      {
                        staticClass:
                          "el-message-box__title dg-message-box__title"
                      },
                      [
                        _vm.icon && !_vm.center && _vm.message !== ""
                          ? _c("div", {
                              class: ["el-message-box__status", _vm.icon]
                            })
                          : _vm._e(),
                        _c("div", { staticClass: "dg-message-box__name" }, [
                          _vm._v(_vm._s(_vm.title))
                        ])
                      ]
                    ),
                    _vm.showClose
                      ? _c(
                          "button",
                          {
                            staticClass: "el-message-box__headerbtn",
                            attrs: { type: "button", "aria-label": "Close" },
                            on: {
                              click: function($event) {
                                return _vm.handleAction(
                                  _vm.distinguishCancelAndClose
                                    ? "close"
                                    : "cancel"
                                )
                              },
                              keydown: function($event) {
                                if (
                                  !$event.type.indexOf("key") &&
                                  _vm._k(
                                    $event.keyCode,
                                    "enter",
                                    13,
                                    $event.key,
                                    "Enter"
                                  )
                                ) {
                                  return null
                                }
                                return _vm.handleAction(
                                  _vm.distinguishCancelAndClose
                                    ? "close"
                                    : "cancel"
                                )
                              }
                            }
                          },
                          [
                            _c("i", {
                              staticClass: "el-message-box__close el-icon-close"
                            })
                          ]
                        )
                      : _vm._e()
                  ]
                )
              : _vm._e(),
            _c(
              "div",
              {
                staticClass: "el-message-box__content dg-message-box__content",
                class: { "is-icon": !!_vm.icon && !_vm.center }
              },
              [
                _vm.message !== ""
                  ? _c(
                      "div",
                      { staticClass: "el-message-box__message" },
                      [
                        _vm._t("default", [
                          !_vm.dangerouslyUseHTMLString
                            ? _c("p", [_vm._v(_vm._s(_vm.message))])
                            : _c("p", {
                                domProps: { innerHTML: _vm._s(_vm.message) }
                              })
                        ])
                      ],
                      2
                    )
                  : _vm._e(),
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.showInput,
                        expression: "showInput"
                      }
                    ],
                    staticClass: "el-message-box__input"
                  },
                  [
                    _c("el-input", {
                      ref: "input",
                      attrs: {
                        type: _vm.inputType,
                        placeholder: _vm.inputPlaceholder
                      },
                      nativeOn: {
                        keydown: function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )
                          ) {
                            return null
                          }
                          return _vm.handleInputEnter($event)
                        }
                      },
                      model: {
                        value: _vm.inputValue,
                        callback: function($$v) {
                          _vm.inputValue = $$v
                        },
                        expression: "inputValue"
                      }
                    }),
                    _c(
                      "div",
                      {
                        staticClass: "el-message-box__errormsg",
                        style: {
                          visibility: !!_vm.editorErrorMessage
                            ? "visible"
                            : "hidden"
                        }
                      },
                      [
                        _vm._v(
                          "\n            " +
                            _vm._s(_vm.editorErrorMessage) +
                            "\n          "
                        )
                      ]
                    )
                  ],
                  1
                )
              ]
            ),
            _c(
              "div",
              { staticClass: "el-message-box__btns dg-message-box__btns" },
              [
                _vm.showCancelButton
                  ? _c(
                      "el-button",
                      {
                        class: [_vm.cancelButtonClasses],
                        attrs: {
                          loading: _vm.cancelButtonLoading,
                          round: _vm.roundButton,
                          size: "small"
                        },
                        on: {
                          keydown: function($event) {
                            if (
                              !$event.type.indexOf("key") &&
                              _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )
                            ) {
                              return null
                            }
                            return _vm.handleAction("cancel")
                          }
                        },
                        nativeOn: {
                          click: function($event) {
                            return _vm.handleAction("cancel")
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n          " +
                            _vm._s(
                              _vm.cancelButtonText ||
                                _vm.t("el.messagebox.cancel")
                            ) +
                            "\n        "
                        )
                      ]
                    )
                  : _vm._e(),
                _c(
                  "el-button",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.showConfirmButton,
                        expression: "showConfirmButton"
                      }
                    ],
                    ref: "confirm",
                    class: [_vm.confirmButtonClasses],
                    attrs: {
                      loading: _vm.confirmButtonLoading,
                      round: _vm.roundButton,
                      size: "small"
                    },
                    on: {
                      keydown: function($event) {
                        if (
                          !$event.type.indexOf("key") &&
                          _vm._k(
                            $event.keyCode,
                            "enter",
                            13,
                            $event.key,
                            "Enter"
                          )
                        ) {
                          return null
                        }
                        return _vm.handleAction("confirm")
                      }
                    },
                    nativeOn: {
                      click: function($event) {
                        return _vm.handleAction("confirm")
                      }
                    }
                  },
                  [
                    _vm._v(
                      "\n          " +
                        _vm._s(
                          _vm.confirmButtonText ||
                            _vm.t("el.messagebox.confirm")
                        ) +
                        "\n        "
                    )
                  ]
                )
              ],
              1
            )
          ]
        )
      ]
    )
  ])
}
var mainvue_type_template_id_6b29b012_staticRenderFns = []
mainvue_type_template_id_6b29b012_render._withStripped = true


// CONCATENATED MODULE: ./packages/message-box/src/main.vue?vue&type=template&id=6b29b012&

// EXTERNAL MODULE: external "element-ui/lib/utils/popup"
var popup_ = __webpack_require__(19);
var popup_default = /*#__PURE__*/__webpack_require__.n(popup_);

// CONCATENATED MODULE: ./src/utils/aria-utils.js
var aria = aria || {};

aria.Utils = aria.Utils || {};

/**
 * @desc Set focus on descendant nodes until the first focusable element is
 *       found.
 * @param element
 *          DOM node for which to find the first focusable descendant.
 * @returns
 *  true if a focusable element is found and focus is set.
 */
aria.Utils.focusFirstDescendant = function (element) {
  for (var i = 0; i < element.childNodes.length; i++) {
    var child = element.childNodes[i];
    if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {
      return true;
    }
  }
  return false;
};

/**
 * @desc Find the last descendant node that is focusable.
 * @param element
 *          DOM node for which to find the last focusable descendant.
 * @returns
 *  true if a focusable element is found and focus is set.
 */

aria.Utils.focusLastDescendant = function (element) {
  for (var i = element.childNodes.length - 1; i >= 0; i--) {
    var child = element.childNodes[i];
    if (aria.Utils.attemptFocus(child) || aria.Utils.focusLastDescendant(child)) {
      return true;
    }
  }
  return false;
};

/**
 * @desc Set Attempt to set focus on the current node.
 * @param element
 *          The node to attempt to focus on.
 * @returns
 *  true if element is focused.
 */
aria.Utils.attemptFocus = function (element) {
  if (!aria.Utils.isFocusable(element)) {
    return false;
  }
  aria.Utils.IgnoreUtilFocusChanges = true;
  try {
    element.focus();
  } catch (e) {}
  aria.Utils.IgnoreUtilFocusChanges = false;
  return document.activeElement === element;
};

aria.Utils.isFocusable = function (element) {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute('tabIndex') !== null) {
    return true;
  }

  if (element.disabled) {
    return false;
  }

  switch (element.nodeName) {
    case 'A':
      return !!element.href && element.rel !== 'ignore';
    case 'INPUT':
      return element.type !== 'hidden' && element.type !== 'file';
    case 'BUTTON':
    case 'SELECT':
    case 'TEXTAREA':
      return true;
    default:
      return false;
  }
};

/**
 * 触发一个事件
 * mouseenter, mouseleave, mouseover, keyup, change, click 等
 * @param  {Element} elm
 * @param  {String} name
 * @param  {*} opts
 */
aria.Utils.triggerEvent = function (elm, name) {
  var eventName = void 0;

  if (/^mouse|click/.test(name)) {
    eventName = 'MouseEvents';
  } else if (/^key/.test(name)) {
    eventName = 'KeyboardEvent';
  } else {
    eventName = 'HTMLEvents';
  }
  var evt = document.createEvent(eventName);

  for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    opts[_key - 2] = arguments[_key];
  }

  evt.initEvent.apply(evt, [name].concat(opts));
  elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent('on' + name, evt);

  return elm;
};

aria.Utils.keys = {
  tab: 9,
  enter: 13,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  esc: 27
};

/* harmony default export */ var aria_utils = (aria.Utils);
// CONCATENATED MODULE: ./src/utils/aria-dialog.js
var aria_dialog_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



/**
 * @constructor
 * @desc Dialog object providing modal focus management.
 *
 * Assumptions: The element serving as the dialog container is present in the
 * DOM and hidden. The dialog container has role='dialog'.
 *
 * @param dialogId
 *          The ID of the element serving as the dialog container.
 * @param focusAfterClosed
 *          Either the DOM node or the ID of the DOM node to focus when the
 *          dialog closes.
 * @param focusFirst
 *          Optional parameter containing either the DOM node or the ID of the
 *          DOM node to focus when the dialog opens. If not specified, the
 *          first focusable element in the dialog will receive focus.
 */
var aria_dialog_aria = aria_dialog_aria || {};
var tabEvent;

aria_dialog_aria.Dialog = function (dialog, focusAfterClosed, focusFirst) {
  var _this = this;

  this.dialogNode = dialog;
  if (this.dialogNode === null || this.dialogNode.getAttribute('role') !== 'dialog') {
    throw new Error('Dialog() requires a DOM element with ARIA role of dialog.');
  }

  if (typeof focusAfterClosed === 'string') {
    this.focusAfterClosed = document.getElementById(focusAfterClosed);
  } else if ((typeof focusAfterClosed === 'undefined' ? 'undefined' : aria_dialog_typeof(focusAfterClosed)) === 'object') {
    this.focusAfterClosed = focusAfterClosed;
  } else {
    this.focusAfterClosed = null;
  }

  if (typeof focusFirst === 'string') {
    this.focusFirst = document.getElementById(focusFirst);
  } else if ((typeof focusFirst === 'undefined' ? 'undefined' : aria_dialog_typeof(focusFirst)) === 'object') {
    this.focusFirst = focusFirst;
  } else {
    this.focusFirst = null;
  }

  if (this.focusFirst) {
    this.focusFirst.focus();
  } else {
    aria_utils.focusFirstDescendant(this.dialogNode);
  }

  this.lastFocus = document.activeElement;
  tabEvent = function tabEvent(e) {
    _this.trapFocus(e);
  };
  this.addListeners();
};

aria_dialog_aria.Dialog.prototype.addListeners = function () {
  document.addEventListener('focus', tabEvent, true);
};

aria_dialog_aria.Dialog.prototype.removeListeners = function () {
  document.removeEventListener('focus', tabEvent, true);
};

aria_dialog_aria.Dialog.prototype.closeDialog = function () {
  var _this2 = this;

  this.removeListeners();
  if (this.focusAfterClosed) {
    setTimeout(function () {
      _this2.focusAfterClosed.focus();
    });
  }
};

aria_dialog_aria.Dialog.prototype.trapFocus = function (event) {
  if (aria_utils.IgnoreUtilFocusChanges) {
    return;
  }
  if (this.dialogNode.contains(event.target)) {
    this.lastFocus = event.target;
  } else {
    aria_utils.focusFirstDescendant(this.dialogNode);
    if (this.lastFocus === document.activeElement) {
      aria_utils.focusLastDescendant(this.dialogNode);
    }
    this.lastFocus = document.activeElement;
  }
};

/* harmony default export */ var aria_dialog = (aria_dialog_aria.Dialog);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/message-box/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








var messageBox = void 0;
var typeMap = {
    success: 'success',
    info: 'info',
    warning: 'warning',
    error: 'error'
};

/* harmony default export */ var message_box_src_mainvue_type_script_lang_js_ = ({
    mixins: [popup_default.a, mixins_locale],

    props: {
        modal: {
            default: true
        },
        lockScroll: {
            default: true
        },
        showClose: {
            type: Boolean,
            default: true
        },
        closeOnClickModal: {
            default: true
        },
        closeOnPressEscape: {
            default: true
        },
        closeOnHashChange: {
            default: true
        },
        center: {
            default: false,
            type: Boolean
        },
        roundButton: {
            default: false,
            type: Boolean
        }
    },

    components: {
        ElInput: external_element_ui_["Input"],
        ElButton: external_element_ui_["Button"]
    },

    computed: {
        icon: function icon() {
            var type = this.type,
                iconClass = this.iconClass;

            return iconClass || (type && typeMap[type] ? 'el-icon-' + typeMap[type] : '');
        },
        confirmButtonClasses: function confirmButtonClasses() {
            return 'el-button--primary ' + this.confirmButtonClass;
        },
        cancelButtonClasses: function cancelButtonClasses() {
            return '' + this.cancelButtonClass;
        }
    },

    methods: {
        getSafeClose: function getSafeClose() {
            var _this = this;

            var currentId = this.uid;
            return function () {
                _this.$nextTick(function () {
                    if (currentId === _this.uid) _this.doClose();
                });
            };
        },
        doClose: function doClose() {
            var _this2 = this;

            if (!this.visible) return;
            this.visible = false;
            this._closing = true;

            this.onClose && this.onClose();
            messageBox.closeDialog(); // 解绑
            if (this.lockScroll) {
                setTimeout(this.restoreBodyStyle, 200);
            }
            this.opened = false;
            this.doAfterClose();
            setTimeout(function () {
                if (_this2.action) _this2.callback(_this2.action, _this2);
            });
        },
        handleWrapperClick: function handleWrapperClick() {
            if (this.closeOnClickModal) {
                this.handleAction(this.distinguishCancelAndClose ? 'close' : 'cancel');
            }
        },
        handleInputEnter: function handleInputEnter() {
            if (this.inputType !== 'textarea') {
                return this.handleAction('confirm');
            }
        },
        handleAction: function handleAction(action) {
            if (this.$type === 'prompt' && action === 'confirm' && !this.validate()) {
                return;
            }
            this.action = action;
            if (typeof this.beforeClose === 'function') {
                this.close = this.getSafeClose();
                this.beforeClose(action, this, this.close);
            } else {
                this.doClose();
            }
        },
        validate: function validate() {
            if (this.$type === 'prompt') {
                var inputPattern = this.inputPattern;
                if (inputPattern && !inputPattern.test(this.inputValue || '')) {
                    this.editorErrorMessage = this.inputErrorMessage || locale_t('el.messagebox.error');
                    addClass(this.getInputElement(), 'invalid');
                    return false;
                }
                var inputValidator = this.inputValidator;
                if (typeof inputValidator === 'function') {
                    var validateResult = inputValidator(this.inputValue);
                    if (validateResult === false) {
                        this.editorErrorMessage = this.inputErrorMessage || locale_t('el.messagebox.error');
                        addClass(this.getInputElement(), 'invalid');
                        return false;
                    }
                    if (typeof validateResult === 'string') {
                        this.editorErrorMessage = validateResult;
                        addClass(this.getInputElement(), 'invalid');
                        return false;
                    }
                }
            }
            this.editorErrorMessage = '';
            removeClass(this.getInputElement(), 'invalid');
            return true;
        },
        getFirstFocus: function getFirstFocus() {
            var btn = this.$el.querySelector('.el-message-box__btns .el-button');
            var title = this.$el.querySelector('.el-message-box__btns .el-message-box__title');
            return btn || title;
        },
        getInputElement: function getInputElement() {
            var inputRefs = this.$refs.input.$refs;
            return inputRefs.input || inputRefs.textarea;
        },
        handleClose: function handleClose() {
            this.handleAction('close');
        }
    },

    watch: {
        inputValue: {
            immediate: true,
            handler: function handler(val) {
                var _this3 = this;

                this.$nextTick(function (_) {
                    if (_this3.$type === 'prompt' && val !== null) {
                        _this3.validate();
                    }
                });
            }
        },

        visible: function visible(val) {
            var _this4 = this;

            if (val) {
                this.uid++;
                if (this.$type === 'alert' || this.$type === 'confirm') {
                    this.$nextTick(function () {
                        _this4.$refs.confirm.$el.focus();
                    });
                }
                this.focusAfterClosed = document.activeElement;
                messageBox = new aria_dialog(this.$el, this.focusAfterClosed, this.getFirstFocus());
            }

            // prompt
            if (this.$type !== 'prompt') return;
            if (val) {
                setTimeout(function () {
                    if (_this4.$refs.input && _this4.$refs.input.$el) {
                        _this4.getInputElement().focus();
                    }
                }, 500);
            } else {
                this.editorErrorMessage = '';
                removeClass(this.getInputElement(), 'invalid');
            }
        }
    },

    mounted: function mounted() {
        var _this5 = this;

        this.$nextTick(function () {
            if (_this5.closeOnHashChange) {
                window.addEventListener('hashchange', _this5.close);
            }
        });
    },
    beforeDestroy: function beforeDestroy() {
        if (this.closeOnHashChange) {
            window.removeEventListener('hashchange', this.close);
        }
        setTimeout(function () {
            messageBox.closeDialog();
        });
    },
    data: function data() {
        return {
            uid: 1,
            title: undefined,
            message: '',
            type: '',
            iconClass: '',
            customClass: '',
            showInput: false,
            inputValue: null,
            inputPlaceholder: '',
            inputType: 'text',
            inputPattern: null,
            inputValidator: null,
            inputErrorMessage: '',
            showConfirmButton: true,
            showCancelButton: false,
            action: '',
            confirmButtonText: '',
            cancelButtonText: '',
            confirmButtonLoading: false,
            cancelButtonLoading: false,
            confirmButtonClass: '',
            confirmButtonDisabled: false,
            cancelButtonClass: '',
            editorErrorMessage: null,
            callback: null,
            dangerouslyUseHTMLString: false,
            focusAfterClosed: null,
            isOnComposition: false,
            distinguishCancelAndClose: false
        };
    }
});
// CONCATENATED MODULE: ./packages/message-box/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_message_box_src_mainvue_type_script_lang_js_ = (message_box_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/message-box/src/main.vue





/* normalize component */

var message_box_src_main_component = normalizeComponent(
  packages_message_box_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_6b29b012_render,
  mainvue_type_template_id_6b29b012_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var message_box_src_main_api; }
message_box_src_main_component.options.__file = "packages/message-box/src/main.vue"
/* harmony default export */ var message_box_src_main = (message_box_src_main_component.exports);
// CONCATENATED MODULE: ./src/utils/vdom.js
var vdom_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



function isVNode(node) {
  return node !== null && (typeof node === 'undefined' ? 'undefined' : vdom_typeof(node)) === 'object' && hasOwn(node, 'componentOptions');
};
// CONCATENATED MODULE: ./packages/message-box/src/main.js
var main_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var main_defaults = {
  title: null,
  message: '',
  type: '',
  iconClass: '',
  showInput: false,
  showClose: true,
  modalFade: true,
  lockScroll: true,
  closeOnClickModal: true,
  closeOnPressEscape: true,
  closeOnHashChange: true,
  inputValue: null,
  inputPlaceholder: '',
  inputType: 'text',
  inputPattern: null,
  inputValidator: null,
  inputErrorMessage: '',
  showConfirmButton: true,
  showCancelButton: false,
  confirmButtonPosition: 'right',
  confirmButtonHighlight: false,
  cancelButtonHighlight: false,
  confirmButtonText: '',
  cancelButtonText: '',
  confirmButtonClass: '',
  cancelButtonClass: '',
  customClass: '',
  beforeClose: null,
  dangerouslyUseHTMLString: false,
  center: false,
  roundButton: false,
  distinguishCancelAndClose: false
};






var MessageBoxConstructor = external_vue_default.a.extend(message_box_src_main);

var currentMsg = void 0,
    main_instance = void 0;
var msgQueue = [];

var defaultCallback = function defaultCallback(action) {
  if (currentMsg) {
    var callback = currentMsg.callback;
    if (typeof callback === 'function') {
      if (main_instance.showInput) {
        callback(main_instance.inputValue, action);
      } else {
        callback(action);
      }
    }
    if (currentMsg.resolve) {
      if (action === 'confirm') {
        if (main_instance.showInput) {
          currentMsg.resolve({ value: main_instance.inputValue, action: action });
        } else {
          currentMsg.resolve(action);
        }
      } else if (currentMsg.reject && (action === 'cancel' || action === 'close')) {
        currentMsg.reject(action);
      }
    }
  }
};

var initInstance = function initInstance() {
  main_instance = new MessageBoxConstructor({
    el: document.createElement('div')
  });

  main_instance.callback = defaultCallback;
};

var main_showNextMsg = function showNextMsg() {
  if (!main_instance) {
    initInstance();
  }
  main_instance.action = '';

  if (!main_instance.visible || main_instance.closeTimer) {
    if (msgQueue.length > 0) {
      currentMsg = msgQueue.shift();

      var options = currentMsg.options;
      for (var prop in options) {
        if (options.hasOwnProperty(prop)) {
          main_instance[prop] = options[prop];
        }
      }
      if (options.callback === undefined) {
        main_instance.callback = defaultCallback;
      }

      var oldCb = main_instance.callback;
      main_instance.callback = function (action, instance) {
        oldCb(action, instance);
        showNextMsg();
      };
      if (isVNode(main_instance.message)) {
        main_instance.$slots.default = [main_instance.message];
        main_instance.message = null;
      } else {
        delete main_instance.$slots.default;
      }
      ['modal', 'showClose', 'closeOnClickModal', 'closeOnPressEscape', 'closeOnHashChange'].forEach(function (prop) {
        if (main_instance[prop] === undefined) {
          main_instance[prop] = true;
        }
      });
      document.body.appendChild(main_instance.$el);

      external_vue_default.a.nextTick(function () {
        main_instance.visible = true;
      });
    }
  }
};

var main_MessageBox = function MessageBox(options, callback) {
  if (external_vue_default.a.prototype.$isServer) return;
  if (typeof options === 'string' || isVNode(options)) {
    options = {
      message: options
    };
    if (typeof arguments[1] === 'string') {
      options.title = arguments[1];
    }
  } else if (options.callback && !callback) {
    callback = options.callback;
  }

  if (typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      // eslint-disable-line
      msgQueue.push({
        options: merge({}, main_defaults, MessageBox.defaults, options),
        callback: callback,
        resolve: resolve,
        reject: reject
      });

      main_showNextMsg();
    });
  } else {
    msgQueue.push({
      options: merge({}, main_defaults, MessageBox.defaults, options),
      callback: callback
    });

    main_showNextMsg();
  }
};

main_MessageBox.setDefaults = function (defaults) {
  main_MessageBox.defaults = defaults;
};

main_MessageBox.alert = function (message, title, options) {
  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {
    options = title;
    title = '';
  } else if (title === undefined) {
    title = '';
  }
  return main_MessageBox(merge({
    title: title,
    message: message,
    $type: 'alert',
    closeOnPressEscape: false,
    closeOnClickModal: false
  }, options));
};

main_MessageBox.confirm = function (message, title, options) {
  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {
    options = title;
    title = '';
  } else if (title === undefined) {
    title = '';
  }
  return main_MessageBox(merge({
    title: title,
    message: message,
    $type: 'confirm',
    showCancelButton: true
  }, options));
};

main_MessageBox.prompt = function (message, title, options) {
  if ((typeof title === 'undefined' ? 'undefined' : main_typeof(title)) === 'object') {
    options = title;
    title = '';
  } else if (title === undefined) {
    title = '';
  }
  return main_MessageBox(merge({
    title: title,
    message: message,
    showCancelButton: true,
    showInput: true,
    $type: 'prompt'
  }, options));
};

main_MessageBox.close = function () {
  main_instance.doClose();
  main_instance.visible = false;
  msgQueue = [];
  currentMsg = null;
};

/* harmony default export */ var packages_message_box_src_main = (main_MessageBox);

// CONCATENATED MODULE: ./packages/message-box/index.js

/* harmony default export */ var message_box = (packages_message_box_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-select/src/main.vue?vue&type=template&id=2aec4d24&
var mainvue_type_template_id_2aec4d24_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-table-select" },
    [
      _c(
        "l-select",
        _vm._g(
          _vm._b(
            {
              directives: [
                {
                  name: "loadmore",
                  rawName: "v-loadmore",
                  value: _vm.loadMore,
                  expression: "loadMore"
                }
              ],
              attrs: { "scrollbar-class": _vm.scrollbarCls },
              model: {
                value: _vm.model,
                callback: function($$v) {
                  _vm.model = $$v
                },
                expression: "model"
              }
            },
            "l-select",
            _vm.selectProp,
            false
          ),
          _vm.selectOn
        ),
        [
          _c(
            "l-table",
            _vm._b(
              {
                staticClass: "dg-table-select__table",
                attrs: {
                  border: _vm.border,
                  pagination: false,
                  data: _vm.itemsWithDisabled,
                  prop: _vm.defaultProp
                }
              },
              "l-table",
              _vm.tableBind,
              false
            ),
            [_vm._t("default")],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var mainvue_type_template_id_2aec4d24_staticRenderFns = []
mainvue_type_template_id_2aec4d24_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-select/src/main.vue?vue&type=template&id=2aec4d24&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-select/src/option.vue?vue&type=template&id=d3a9edc0&
var optionvue_type_template_id_d3a9edc0_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "tr",
    _vm._g(
      _vm._b(
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-select-dropdown__item dg-select-dropdown__item",
          class: {
            selected: _vm.itemSelected,
            "is-disabled":
              _vm.disabled || _vm.groupDisabled || _vm.limitReached,
            hover: _vm.hover
          },
          on: {
            mouseenter: _vm.hoverItem,
            click: function($event) {
              $event.stopPropagation()
              return _vm.selectOptionClick($event)
            }
          }
        },
        "tr",
        _vm.$attrs,
        false
      ),
      _vm.$listeners
    ),
    [_vm._t("default")],
    2
  )
}
var optionvue_type_template_id_d3a9edc0_staticRenderFns = []
optionvue_type_template_id_d3a9edc0_render._withStripped = true


// CONCATENATED MODULE: ./packages/table-select/src/option.vue?vue&type=template&id=d3a9edc0&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-select/src/option.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var table_select_src_optionvue_type_script_lang_js_ = ({
    name: "TableOption",
    mixins: [external_element_ui_["Option"]],
    methods: {
        selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
                this.dispatch("LSelect", "handleOptionClick", [this, true]);
            }
        }
    }
});
// CONCATENATED MODULE: ./packages/table-select/src/option.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_table_select_src_optionvue_type_script_lang_js_ = (table_select_src_optionvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-select/src/option.vue





/* normalize component */

var table_select_src_option_component = normalizeComponent(
  packages_table_select_src_optionvue_type_script_lang_js_,
  optionvue_type_template_id_d3a9edc0_render,
  optionvue_type_template_id_d3a9edc0_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var table_select_src_option_api; }
table_select_src_option_component.options.__file = "packages/table-select/src/option.vue"
/* harmony default export */ var table_select_src_option = (table_select_src_option_component.exports);
// CONCATENATED MODULE: ./packages/table-select/src/table-body.js
var table_body_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





// 深度拷贝 TableBody
var LTableBody = complex(table.components.ElTable.components.TableBody);

/* harmony default export */ var table_body = ({
    name: 'DgTableBody',

    mixins: [LTableBody],

    components: {
        TableOption: table_select_src_option
    },

    methods: {
        rowRender: function rowRender(row, $index, treeRowData) {
            var _this = this;

            var h = this.$createElement;
            var treeIndent = this.treeIndent,
                columns = this.columns,
                firstDefaultColumnIndex = this.firstDefaultColumnIndex;

            var columnsHidden = columns.map(function (column, index) {
                return _this.isColumnHidden(index);
            });
            var rowClasses = this.getRowClass(row, $index);
            var prop = this.table.prop || this.table.$attrs.prop; // lutz+ 标记 id
            var display = true;
            if (treeRowData) {
                rowClasses.push('el-table__row--level-' + treeRowData.level);
                display = treeRowData.display;
            }
            // lutz+
            var data = {
                class: rowClasses,
                style: this.getRowStyle(row, $index),
                key: this.getKeyOfRow(row, $index),
                props: {
                    value: row[prop.value],
                    label: row[prop.label],
                    disabled: row[prop.disabled]
                },
                on: {
                    click: function click($event) {
                        return _this.handleClick($event, row);
                    },
                    dblclick: function dblclick($event) {
                        return _this.handleDoubleClick($event, row);
                    },
                    contextmenu: function contextmenu($event) {
                        return _this.handleContextMenu($event, row);
                    },
                    mouseenter: function mouseenter(_) {
                        return _this.handleMouseEnter($index);
                    },
                    mouseleave: this.handleMouseLeave
                },
                directives: [{
                    name: 'show',
                    value: display
                }]
            };
            // update
            return h(
                'table-option',
                data,
                [columns.map(function (column, cellIndex) {
                    var _getSpan = _this.getSpan(row, column, $index, cellIndex),
                        rowspan = _getSpan.rowspan,
                        colspan = _getSpan.colspan;

                    if (!rowspan || !colspan) {
                        return null;
                    }
                    var columnData = table_body_extends({}, column);
                    columnData.realWidth = _this.getColspanRealWidth(columns, colspan, cellIndex);
                    var data = {
                        store: _this.store,
                        _self: _this.context || _this.table.$vnode.context,
                        column: columnData,
                        row: row,
                        $index: $index
                    };
                    if (cellIndex === firstDefaultColumnIndex && treeRowData) {
                        data.treeNode = {
                            indent: treeRowData.level * treeIndent,
                            level: treeRowData.level
                        };
                        if (typeof treeRowData.expanded === 'boolean') {
                            data.treeNode.expanded = treeRowData.expanded;
                            // 表明是懒加载
                            if ('loading' in treeRowData) {
                                data.treeNode.loading = treeRowData.loading;
                            }
                            if ('noLazyChildren' in treeRowData) {
                                data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
                            }
                        }
                    }
                    return h(
                        'td',
                        {
                            style: _this.getCellStyle($index, cellIndex, row, column),
                            'class': _this.getCellClass($index, cellIndex, row, column),
                            attrs: { rowspan: rowspan,
                                colspan: colspan
                            },
                            on: {
                                'mouseenter': function mouseenter($event) {
                                    return _this.handleCellMouseEnter($event, row);
                                },
                                'mouseleave': _this.handleCellMouseLeave
                            }
                        },
                        [column.renderCell.call(_this._renderProxy, _this.$createElement, data, columnsHidden[cellIndex])]
                    );
                })]
            );
        }
    }
});
// CONCATENATED MODULE: ./packages/table-select/src/loadmore.js
/* harmony default export */ var loadmore = ({
    bind: function bind(el, binding) {
        var SELECTWRAP_DOM = el.querySelector('.el-scrollbar .el-scrollbar__wrap');

        SELECTWRAP_DOM.addEventListener('scroll', function (e) {
            // 记录之前的滚动高度，新增数据导致滚动高度和滚动位置发生变化
            var scrollHeightLatest = this.scrollHeightLatest;

            if (scrollHeightLatest && scrollHeightLatest != this.scrollHeight) {
                // 滚动高度发生变化，滚动位置滚动回原来的位置
                this.scrollTop = this.scrollTopLatest;
            }

            this.scrollTopLatest = this.scrollTop;
            this.scrollHeightLatest = this.scrollHeight;

            var CONDITION = this.scrollHeight - this.scrollTop <= this.clientHeight;
            if (CONDITION) {
                binding.value && binding.value();
            }
        });
    }
});
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table-select/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//









// 替换组件 DgTable > ELTable > TableBody // complex 深拷贝
var LTable = complex(table);
LTable.components.ElTable.components.TableBody = table_body;

/* harmony default export */ var table_select_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTableSelect',

    mixins: [dg_mixins_itemsWithDisabled],

    directives: {
        loadmore: loadmore
    },

    components: {
        LSelect: base_select,
        LTable: LTable
    },

    props: {
        // 表格属性
        tableProps: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        scrollbarClass: String,
        pagination: Boolean,
        border: Boolean,
        multiple: Boolean,
        value: {
            required: true
        }
    },

    computed: {
        model: {
            set: function set(val) {
                this.$emit('input', val);
            },
            get: function get() {
                return this.value;
            }
        },

        // 下拉框是脱离DOM包含关系，用class来渲染样式
        scrollbarCls: function scrollbarCls() {
            return 'dg-table-select__scrollbar' + (this.multiple ? ' multiple' : '') + ' ' + this.scrollbarClass;
        },


        // l-select props
        selectProp: function selectProp() {
            return shear_getCmpProps(base_select, this);
        },
        selectOn: function selectOn() {
            return complexObj(this.$listeners, ['scroll-bottom']);
        },


        // dg-table props
        tableBind: function tableBind() {
            return merge({
                overflow: 'wrap'
            }, this.tableProps);
        }
    },

    methods: {
        loadMore: function loadMore() {
            if (this.pagination) {
                this.$emit('scroll-bottom');
            }
        }
    }
});
// CONCATENATED MODULE: ./packages/table-select/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_table_select_src_mainvue_type_script_lang_js_ = (table_select_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/table-select/src/main.vue





/* normalize component */

var table_select_src_main_component = normalizeComponent(
  packages_table_select_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_2aec4d24_render,
  mainvue_type_template_id_2aec4d24_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var table_select_src_main_api; }
table_select_src_main_component.options.__file = "packages/table-select/src/main.vue"
/* harmony default export */ var table_select_src_main = (table_select_src_main_component.exports);
// CONCATENATED MODULE: ./packages/table-select/index.js


/* istanbul ignore next */
table_select_src_main.install = function (Vue) {
  Vue.component(table_select_src_main.name, table_select_src_main);
};

/* harmony default export */ var table_select = (table_select_src_main);
// CONCATENATED MODULE: ./src/dg-utils/types.js
var types_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * @Author: lutz
 * @Date: 2019-07-02 13:21:30
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-04 14:25:16
 */

var toStr = Object.prototype.toString;
var types_hasOwn = Object.prototype.hasOwnProperty;

// Null、Undefined、Boolean、String、Number、Object、Symbol
var types_isNull = function isNull(v) {
    return v === null;
};
var dg_utils_types_isUndefined = function isUndefined(v) {
    return v === void 0;
};
var isBoolean = function isBoolean(v) {
    return toStr.call(v) === '[object Boolean]';
};
var types_isString = function isString(v) {
    return toStr.call(v) === '[object String]';
};
var isNumber = function isNumber(v) {
    return toStr.call(v) === '[object Number]';
};
var dg_utils_types_isObject = function isObject(v) {
    return toStr.call(v) === '[object Object]';
};
var isSymbol = function isSymbol(v) {
    return toStr.call(v) === '[object Symbol]';
};

// ELEMENT
var types_isHtmlElement = function isHtmlElement(v) {
    return v && v.nodeType === Node.ELEMENT_NODE;
};
var types_isVNode = function isVNode(v) {
    return v !== null && (typeof v === 'undefined' ? 'undefined' : types_typeof(v)) === 'object' && types_hasOwn.call(v, 'componentOptions');
};

// RegExp、Function、Array
var isRegExp = function isRegExp(v) {
    return toStr.call(v) === '[object RegExp]';
};
var types_isFunction = function isFunction(v) {
    return toStr.call(v) === '[object Function]';
};
var isArray = Array.isArray || function (v) {
    return toStr.call(v) === '[object Array]';
};

// Empty
var isNil = function isNil(v) {
    return v === null || v === void 0;
};
var types_isEmpty = function isEmpty(v) {
    return v === null || v === void 0 || v === '';
};

/*
    // 判断整型
    isInteger(1.00) // true
    // 判断浮点型
    const patter = /^(-?\d+)(\.\d+)?$/; // float RegExp
    isFloat(1.00) // false
    // 判断能否转换成数值类型
    isNumberic('string') // false
    isNumberic('0.00') // true
*/
// Number
var isInteger = Number.isInteger || function (v) {
    return typeof v === 'number' && isFinite(v) && Math.floor(v) === v;
};
var isFloat = function isFloat(v) {
    return typeof v === 'number' && v != parseInt(v);
};
var isNumberic = function isNumberic(v) {
    return !isNaN(parseFloat(v)) && isFinite(v);
};

// Date
var isDate = function isDate(v) {
    return toStr.call(v) === '[object Date]';
};

// Object
var hasProp = function hasProp(obj, prop) {
    return types_hasOwn.call(obj, prop);
};
// 是否引用类型
var isCiteType = function isCiteType(v) {
    return v != null && ((typeof v === 'undefined' ? 'undefined' : types_typeof(v)) === 'object' || typeof v === 'function');
};

// Funciton
var isNative = function isNative(v) {
    return typeof v === 'function' && /native code/.test(v.toString());
};

// ObjectLike
var isObjectLike = function isObjectLike(v) {
    return v != null && (typeof v === 'undefined' ? 'undefined' : types_typeof(v)) === 'object';
};
// CONCATENATED MODULE: ./src/dg-utils/date.js
var date_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: lutz
 * @Date: 2019-06-24 10:41:24
 * @Last Modified by: lutz
 * @Last Modified time: 2020-01-13 17:19:36
 */

/**
 * 验证有效的日期的输入格式
 * @param {String} str yyyy-MM-dd | yyyy-M-D | yyyy:MM:dd | yyyy:M:D | yyyy/MM/dd | yyyy/M/D
 *
 * @returns {Boolean}
 */



function validFormatDatePicker(str) {
    if (!str) {
        return false;
    }
    if (isDate(str)) {
        return true;
    }
    var datePickerRE = /^(\d{1,4})(-|\/|:)(\d{1,2})\2(\d{1,2})$/;
    var result = str.match(datePickerRE);
    if (!result) {
        return false;
    }
    var d = new Date(result[1], result[3] - 1, result[4]);
    return d.getFullYear() == result[1] && d.getMonth() + 1 == result[3] && d.getDate() == result[4];
}

/**
 * 将时间格式化到指定格式
 * y:年份 M:月份 d:日 q:季 w:星期 H:24小时 h:12小时 m:分钟 s:秒 S毫秒
 * @param {String|Object} opt 需要格式化到的字符串 Object默认取format
 * @param {Date|Number} date 时间
 * @param {Boolean} bool 是否关闭时间自动使用当前时间
 *
 * @returns {String}
 */
function date_formatDate(opt, date, bool) {
    var options = {
        weekdays: ['天', '一', '二', '三', '四', '五', '六', '天'],
        format: 'yyyy-MM-dd HH:mm:ss',
        week: '星期',
        W: '周'
    };

    // 为了方便书写,次序打乱。 opt: {Object|String}; data: {Date|Integer}; bool: {Boolean}
    if (isDate(opt) || isInteger(opt)) {
        opt = [date, date = opt][0]; // 两值交换
    } else if (isDate(bool) || isInteger(bool)) {
        bool = [date, date = bool][0];
    }
    if (isBoolean(opt)) {
        opt = [bool, bool = opt][0];
    } else if (isBoolean(date)) {
        date = [bool, bool = date][0];
    }

    date = isDate(date) ? date : isInteger(date) ? new Date(date) : null;

    // 开启严格模式,禁止传入空值
    if (bool === true && !isDate(date)) {
        return null;
    }

    date = date || new Date();
    opt = types_isString(opt) ? { format: opt } : opt || {};
    opt = date_extends({}, options, opt);
    var fmt = opt.format;
    var obj = {
        y: date.getFullYear(), // 年份，注意必须用getFullYear
        M: date.getMonth() + 1, // 月份，注意是从0-11
        d: date.getDate(), // 日
        q: Math.floor((date.getMonth() + 3) / 3), // 季度
        w: date.getDay(), // 星期，注意是0-6
        H: date.getHours(), // 24小时制
        h: date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, // 12小时制
        m: date.getMinutes(), // 分钟
        s: date.getSeconds(), // 秒
        S: date.getMilliseconds() // 毫秒
    };
    Object.keys(obj).forEach(function (item) {
        fmt = fmt.replace(new RegExp(item + '+', 'g'), function (m) {
            var val = obj[item] + '';
            if (item == 'w') {
                return (m.length > 2 ? opt.week : opt.W) + opt.weekdays[val];
            }
            for (var j = 0, len = val.length; j < m.length - len; j++) {
                val = '0' + val;
            }
            return m.length == 1 ? val : val.substring(val.length - m.length);
        });
    });
    return fmt;
}

/**
 * 判断闰年
 * @param {Number} year 查询的年份
 *
 * @return {Boolean}
 */
function isLeapYear(year) {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

/**
 * 获取月份的天数
 * @param {Number}  year    查询的年份
 * @param {Number}  month   查询的月份（需要 -1）
 *
 * @return {Number}
 */
function getMonthDays(year, month) {
    var monthDays = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return monthDays[month] || (isLeapYear(year) ? 29 : 28);
}

/**
 * 获取日期在当年的第几天
 * @param {Number}  year    查询的年份
 * @param {Number}  month   查询的月份
 * @param {Number}  day     查询的号数
 *
 * @return {Number}
 */
function getSameYearNumber(year, month, day) {
    var now = new Date(year, month - 1, day);
    var y = now.getFullYear();
    var m = now.getMonth();
    var d = now.getDate();
    for (var i = 0; i < m; i++) {
        d += getMonthDays(y, i);
    }
    return d;
}

/**
 * 获取日期在日期当年的第几周
 * @param {number}  year   查询的年份
 * @param {number}  month  查询的月份
 * @param {number}  date   查询的号数
 *
 * @return {number}
 */
function getWeekNumber(year, month, day) {
    var days = getSameYearNumber(year, month, day);
    var yearFirstDay = new Date(year, 0, 1).getDay() || 7;
    var week = null;
    if (yearFirstDay == 1) {
        week = Math.ceil(days / 7);
    } else {
        days -= 7 - yearFirstDay + 1;
        week = Math.ceil(days / 7) + 1;
    }
    return week;
}

/**
 * 获取当年第几周的起止日期
 * @param {Number}  year   查询的年份
 * @param {Number}  week   第n个星期(超过当年n个周将不显示)
 * @param {Boolean} border defulat: true 允许越过当年年份
 * @param {String}  format 展示的时间格式 yyyy-MM-dd
 *
 * @return {Object}
 */
function getWeekRange(year, week, border) {
    var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'yyyy-MM-dd';

    var dayTime = 24 * 60 * 60 * 1000;
    var oldYearDay = new Date(year, 11, 31);
    var newsYearDay = new Date(year, 0, 1);
    var yearFirstDay = newsYearDay.getDay() || 7;
    var sunDay = newsYearDay.getTime();
    var maxWeek = getWeekNumber(year, 12, 31);
    week = week > maxWeek ? maxWeek : week;
    if (yearFirstDay != 7) {
        sunDay += (7 - yearFirstDay) * dayTime;
    }
    sunDay += (week - 1) * 7 * dayTime;
    var startTime = sunDay - 6 * dayTime;
    var endTime = sunDay;
    if (border === false) {
        var yearFirst = newsYearDay.getTime();
        var yearLast = oldYearDay.getTime();
        if (yearFirst > startTime) {
            startTime = yearFirst;
        }
        if (yearLast < endTime) {
            endTime = yearLast;
        }
    }
    return {
        startTime: date_formatDate(startTime, format),
        endTime: date_formatDate(endTime, format)
    };
}

/**
 * 近 n 周的日期起止
 * @param {Number} counst 近n周
 * @param {Number} date 日期时间型
 *
 * @return {Array}
 */
function getNearlyWeek(counst, date) {
    var now = typeof date == 'number' ? new Date(date) : new Date();
    var y = now.getFullYear();
    var m = now.getMonth();
    var d = now.getDate();
    var w = getWeekNumber(y, m + 1, d) - 1; // 当前周 - 1, 本周不计算
    var optArr = [];
    while (w > w - counst && optArr.length < counst) {
        if (w == 0) {
            y--;
            w = getWeekNumber(w, 12, 31);
        }
        optArr.push({
            label: y + '年第' + (w < 10 ? '0' + w : w) + '周',
            value: getWeekRange(y, w, false)
        });
        w--;
    }
    return optArr;
}
// EXTERNAL MODULE: external "dayjs"
var external_dayjs_ = __webpack_require__(20);
var external_dayjs_default = /*#__PURE__*/__webpack_require__.n(external_dayjs_);

// CONCATENATED MODULE: ./packages/date-picker/src/analysis-date.js


// import moment from 'moment';


function analysis(v) {
    if (!types_isString(v)) {
        return;
    }

    // 存储时间的 number
    var obj = {
        y: {
            num: 0,
            rang: [],
            fn: 'FullYear'
        },
        M: {
            num: 0,
            rang: [],
            fn: 'Month'
        },
        d: {
            num: 0,
            rang: [],
            fn: 'Date'
        },
        // 季度
        q: {
            num: 0,
            rang: [],
            fn: 'Month*3'
        },
        w: {
            num: 0,
            fn: 'Date*7'
        },
        H: {
            num: 0,
            rang: [],
            fn: 'Hours'
        },
        // 12小时制
        h: {
            num: 0,
            rang: [],
            fn: 'Hours*2'
        },
        m: {
            num: 0,
            rang: [],
            fn: 'Minutes'
        },
        s: {
            num: 0,
            rang: [],
            fn: 'Seconds'
        },
        // 毫秒
        S: {
            num: 0,
            rang: [],
            fn: 'Milliseconds'
        }
    };

    // 过去时间 | 未来时间
    var op = v.slice(0, 1) === '-' ? -1 : 1;

    // 将下划线去掉
    v = v.replace(/-/g, '');

    Object.keys(obj).forEach(function (item) {
        v.replace(new RegExp('[0-9]+' + item), function (n) {
            obj[item]['num'] = parseInt(n) || 0;
            return ';';
        });
    });

    var now = new Date();
    Object.keys(obj).forEach(function (item) {
        if (!obj[item].num) {
            return;
        }
        var fnArr = obj[item].fn.split('*');
        var n = 1;
        var fn = obj[item].fn;

        if (fnArr.length > 1) {
            fn = fnArr[0];
            n = fnArr[1];
        }
        // 时间减法
        now['set' + fn](now['get' + fn]() + obj[item].num * op * n);
    });
    return now;
}

function str2date(v) {
    if (isArray(v)) {
        // 过滤|转换成有效时间类型
        return v.map(function (item) {
            return validFormatDatePicker(item) ? item : analysis(item);
        });
    } else {
        return validFormatDatePicker(v) ? new Date(v) : analysis(v);
    }
}

/**
 *将类型转换成 Date
 *
 * @export
 * @param {*} v
 */
function any2date(v) {
    if (isDate(v)) {
        return v;
    } else if (isInteger(v)) {
        var date = new Date(v);
        return date.getTime() ? date : null;
    } else if (types_isString(v)) {
        // let result = v;
        // if (result.length === 14) {
        //     result = result.replace(result.match(/\d{8}/)[0], result.match(/\d{8}/)[0] + " ");
        // }
        return external_dayjs_default()(v).format("YYYY-MM-DD HH:mm:ss");
    }
    return null;
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/date-picker/src/main.vue?vue&type=script&lang=js&
var date_picker_src_mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };









// element-ui Date 值是否相等判断
var mainvue_type_script_lang_js_valueEquals = function valueEquals(a, b) {
    // considers Date object and string
    var dateEquals = function dateEquals(a, b) {
        var aIsDate = a instanceof Date;
        var bIsDate = b instanceof Date;
        if (aIsDate && bIsDate) {
            return a.getTime() === b.getTime();
        }
        if (!aIsDate && !bIsDate) {
            return a === b;
        }
        return false;
    };

    var aIsArray = a instanceof Array;
    var bIsArray = b instanceof Array;
    if (aIsArray && bIsArray) {
        if (a.length !== b.length) {
            return false;
        }
        return a.every(function (item, index) {
            return dateEquals(item, b[index]);
        });
    }
    if (!aIsArray && !bIsArray) {
        return dateEquals(a, b);
    }
    return false;
};

/* harmony default export */ var date_picker_src_mainvue_type_script_lang_js_ = ({
    name: 'DgDatePicker',

    /*  inheritAttrs: false 组件将不会把未被注册的props呈现为普通的HTML属性,并赋值到子组件的根元素
        具体表现： (inheritAttrs 等于 true 和 false 都会有1,3)
            1. 未被注册的props -> $attrs
            2. 未被注册的props不会呈现HTML属性
            3. 剔除 class、style
        详见文档：
            https://cn.vuejs.org/v2/api/index.html#inheritAttrs
            https://www.jianshu.com/p/ce8ca875c337
    */
    inheritAttrs: false,

    inject: {
        elForm: {
            default: ''
        },
        elFormItem: {
            default: ''
        }
    },

    components: {
        DgSelect: packages_select,
        DgRadioGroup: radio_group,
        ElDatePicker: external_element_ui_["DatePicker"]
    },

    props: {
        type: {
            type: String,
            required: true
        },
        isSelect: Boolean,
        callOff: Boolean,
        shortBtns: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        size: {
            type: String,
            default: 'small'
        },
        startValue: [String, Date],
        endValue: [String, Date],
        props: {
            type: Object,
            default: function _default() {
                return { label: 'text', value: 'time' };
            }
        },
        checkValue: {
            default: ''
        },
        value: {
            type: [Array, String, Number],
            default: ''
        }
    },

    // 需要深度监听，因为可能数据类型为数组
    watch: {
        value: {
            immediate: true,
            handler: function handler(val) {
                var dgRanged = this.dgRanged;

                if (dgRanged) {
                    if (isArray(val)) {
                        this.startDate = val[0];
                        this.endDate = val[1];
                    } else {
                        this.singleDate = val;
                    }
                } else {
                    this.singleDate = val;
                }

                // 清空选中的值
                if (!val) {
                    this.selectValue = '';
                    this.activeShortBtn = '';
                }
            }
        },

        startValue: {
            immediate: true,
            handler: function handler(val, oldVal) {
                var changeVal = this.formatToValue(val);
                this.startDate = changeVal;
                this.$emit('update:startValue', changeVal);
            }
        },

        endValue: {
            immediate: true,
            handler: function handler(val, oldVal) {
                var changeVal = this.formatToValue(val);
                this.endDate = changeVal;
                this.$emit('update:endValue', changeVal);
            }
        },

        size: function size(val) {
            // 下拉框只有单选状态，且是快捷方式
            this.$nextTick(function () {
                document.querySelector('.dg-date-picker .el-input>.el-input__inner').style.height = '';
            });
        }
    },

    data: function data() {
        return {
            // 下拉框选中值
            selectValue: '',
            // 单选框选中值
            activeShortBtn: '',
            // 单个输入框日期
            singleDate: '',
            // 开始时间
            startDate: '',
            // 结束时间
            endDate: ''
        };
    },
    render: function render(h) {
        var _this = this;

        var select = void 0,
            radioGroup = void 0,
            dataTime = void 0;

        if (this.isSelect) {
            var dataS = {
                class: 'dg-date-picker-select',
                props: {
                    data: this.validataList,
                    value: this.selectValue,
                    'value-name': this.props.value || 'time',
                    'label-name': this.props.label || 'text'
                },
                attrs: {
                    // size: this.inputSize,
                    disabled: this.$attrs.disabled
                },
                on: {
                    change: this.changeSelect,
                    input: function input(val) {
                        _this.selectValue = val;
                    }
                }
            };
            select = h('dg-select', dataS);
        }

        if (!this.isSelect && this.shortBtnVisible) {
            var dataB = {
                props: {
                    data: this.validataList,
                    value: this.activeShortBtn,
                    type: this.$attrs['radio-type'] || 'button',
                    'call-off': this.callOff,
                    'value-name': this.props.value || 'time',
                    'label-name': this.props.label || 'text'
                },
                attrs: {
                    disabled: this.$attrs.disabled
                    // type: this.$attrs.radioType
                    // size: this.inputSize
                },
                on: {
                    change: this.changeSelect,
                    input: function input(val) {
                        _this.activeShortBtn = val;
                    }
                }
            };
            radioGroup = h('dg-radio-group', dataB);
        }

        if (!this.dgRanged) {
            var data = {
                ref: 'picker',
                props: date_picker_src_mainvue_type_script_lang_js_extends({}, this.$attrs, {
                    // size: this.inputSize,
                    type: this.dgType,
                    value: this.singleDate
                }),
                on: date_picker_src_mainvue_type_script_lang_js_extends({}, this.$listeners, {
                    pick: this.emitInput,
                    change: this.singleChange,
                    input: function input(val) {
                        _this.singleDate = val;
                    }
                })
            };
            dataTime = h('el-date-picker', data);
        } else {
            var defaultTime = this.$attrs['default-time'];

            var bool = isArray(defaultTime) && defaultTime.length > 1;
            // 两个框分开
            var data1 = {
                ref: 'picker',
                props: date_picker_src_mainvue_type_script_lang_js_extends({}, this.$attrs, {
                    // size: this.inputSize,
                    value: this.startDate,
                    type: this.dgType,
                    placeholder: this.$attrs['start-placeholder'],
                    'default-time': bool ? [defaultTime[0]] : defaultTime,
                    'picker-options': date_picker_src_mainvue_type_script_lang_js_extends({
                        disabledDate: function disabledDate(time) {
                            if (_this.endDate) {
                                return new Date(_this.endDate).getTime() - 24 * 60 * 60 * 1000 < time.getTime();
                            }
                            return false;
                        }
                    }, this['picker-options'])
                }),
                on: {
                    pick: this.emitInput,
                    change: this.pickChange,
                    input: function input(val) {
                        _this.startDate = val;
                    }
                }
            };
            var data2 = {
                ref: 'picker2',
                props: date_picker_src_mainvue_type_script_lang_js_extends({}, this.$attrs, {
                    // size: this.inputSize,
                    value: this.endDate,
                    type: this.dgType,
                    placeholder: this.$attrs['end-placeholder'],
                    'default-time': bool && defaultTime[1] ? [defaultTime[1]] : defaultTime,
                    'picker-options': date_picker_src_mainvue_type_script_lang_js_extends({
                        disabledDate: function disabledDate(time) {
                            if (_this.startDate) {
                                return new Date(_this.startDate).getTime() - 24 * 60 * 60 * 1000 > time.getTime();
                            }
                            return false;
                        }
                    }, this['picker-options'])
                }),
                on: {
                    pick: this.emitInput,
                    change: this.pick2Change,
                    input: function input(val) {
                        _this.endDate = val;
                    }
                }
            };

            // 默认分割元素
            var separator = h(
                'span',
                { 'class': 'el-range-separator' },
                [this.$attrs['range-separator']]
            );

            dataTime = h(
                'div',
                { 'class': 'el-date-editor dg-range-editor' },
                [h('el-date-picker', data1), this.$slots['range-separator'] || separator, h('el-date-picker', data2)]
            );
        }

        return h(
            'div',
            { 'class': { 'dg-date-picker': true, 'dg-date-picker__short-btn': this.shortBtnVisible } },
            [select, radioGroup, dataTime]
        );
    },


    computed: {
        _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
        },
        inputSize: function inputSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
        },
        shortBtnVisible: function shortBtnVisible() {
            return this.shortBtns.length > 0;
        },
        dgRanged: function dgRanged() {
            /*
                if type.lastIndexOf('range2')
                针对范围型控件，拆分成两个独立控件，通过模板拆分渲染，不采用 elment-ui 自带渲染方式
            */
            return this.type.lastIndexOf('range2') > -1;
        },
        dgType: function dgType() {
            // if type === 'datetimerange2'|'daterange2'|'monthrange2' => 'datetime'|'date'|'month'
            return this.type.replace(/range2/, '');
        },


        /*  创建原因
         1. props.value 可能是数组。radio-button 不能识别这种 value
         2. props.value 可能不存在，而是使用 onClick 方法
        */
        validataList: function validataList() {
            var props = this.props,
                shortBtns = this.shortBtns;

            return (external_lodash_default.a.cloneDeep(shortBtns) || []).map(function (item) {
                var val = item[props.value];
                item._time = val || ''; // 保留原始数据及类型
                item[props.value] = val ? external_lodash_default.a.toString(val) : item[props.label];
                return item;
            });
        }
    },

    methods: {
        changeSelect: function changeSelect(val) {
            // 兼容反选状况
            if (val) {
                var props = this.props,
                    validataList = this.validataList;

                var shortbtn = validataList.find(function (o) {
                    return o[props.value] === val;
                });
                var picker = this.$refs.picker;

                // 用户自定义传值情况
                if (shortbtn.onClick) {
                    shortbtn.onClick(picker);
                } else {
                    var shortVal = shortbtn._time; // 处理原始类型
                    var single = isArray(shortVal) ? shortVal.map(function (item) {
                        return date_formatDate(str2date(item), true);
                    }) : date_formatDate(str2date(shortVal), true);
                    if ((this.dgType.lastIndexOf('range') !== -1 || this.dgRanged) && !isArray(shortVal)) {
                        single = shortVal.slice(0, 1) === '-' ? [single, date_formatDate()] : [date_formatDate(), single];
                        this.startDate = single[0];
                        this.endDate = single[1] || single[0];
                        this.singleDate = single;
                    } else {
                        this.startDate = single;
                        this.endDate = single;
                        this.singleDate = single;
                    }
                }
            } else {
                this.startDate = '';
                this.endDate = '';
                this.singleDate = '';
            }
            this.changeDate();
        },


        // 将数据按 value-format 传入格式输出
        formatToValue: function formatToValue(value) {
            var _$attrs = this.$attrs,
                format = _$attrs['value-format'],
                defaultTime = _$attrs['default-time'];

            if (!value) {
                return null;
            }

            // fix:修复定义default-time快捷选择无效
            if (isArray(value) && isArray(defaultTime) && defaultTime.length > 1) {
                if (value.length > 0) {
                    value[0] = value[0].split(" ")[0] + " " + defaultTime[0];
                }
                if (value.length > 1) {
                    value[1] = value[1].split(" ")[0] + " " + defaultTime[1];
                }
            }

            // 'timestamp' 显示数值类型
            if (format && format !== 'timestamp') {
                value = isArray(value) ? value.map(function (date) {
                    return date_formatDate(format, new Date(date));
                }) : date_formatDate(format, new Date(value));
            }
            if (format === 'timestamp') {
                value = isArray(value) ? value.map(function (date) {
                    return new Date(date).getTime();
                }) : new Date(value).getTime();
            }

            return value;
        },


        // 改变 value、endValue、startValue 触发 emit
        changeDate: function changeDate() {
            var dgType = this.dgType,
                dgRanged = this.dgRanged,
                singleDate = this.singleDate,
                startDate = this.startDate,
                endDate = this.endDate,
                formatToValue = this.formatToValue;

            if (dgRanged) {
                var sVal = formatToValue(startDate);
                var eVal = formatToValue(endDate);
                var seVal = sVal || eVal ? [sVal, eVal] : '';
                this.$emit('input', seVal);
                this.$emit('change', seVal);
                this.$emit('update:startValue', sVal);
                this.$emit('update:endValue', eVal);
            } else {
                var val = formatToValue(singleDate);
                this.$emit('input', val);
                this.$emit('change', val);
                if (isArray(val) && (dgRanged || dgType.lastIndexOf('range') !== -1)) {
                    this.$emit('update:startValue', val[0]);
                    this.$emit('update:endValue', val[1]);
                }
            }
        },


        // element-ui  onPick 选中日期后会执行的回调，只有当 daterange 或 datetimerange 中生效
        emitInput: function emitInput(value) {
            var formatted = isArray(value) ? value.map(function (item) {
                return date_formatDate(item, true);
            }) : date_formatDate(value, true);
            var dgRanged = this.dgRanged,
                dgType = this.dgType;

            if (dgRanged || dgType.lastIndexOf('range') !== -1) {
                if (isArray(value)) {
                    this.singleDate = formatted;
                    this.startDate = formatted[0];
                    this.endDate = formatted[1];
                } else {
                    this.singleDate = formatted;
                    this.startDate = formatted;
                    this.endDate = formatted;
                }
            } else {
                this.singleDate = formatted;
                this.startDate = null;
                this.endDate = null;
            }
        },
        singleChange: function singleChange(val) {
            var vl = this.toDate(val);
            this.changeTime();
            this.singleDate = vl;
            this.startDate = isArray(val) ? vl[0] : vl;
            this.endDate = isArray(val) ? vl[1] : vl;
            this.changeDate();
        },
        pickChange: function pickChange(val) {
            this.changeTime();
            this.startDate = this.toDate(val);
            this.changeDate();
        },
        pick2Change: function pick2Change(val) {
            this.changeTime();
            this.endDate = this.toDate(val);
            this.changeDate();
        },


        // 当时间值被改变时应该置空快捷选中
        changeTime: function changeTime() {
            this.activeShortBtn = '';
            this.selectValue = '';
        },


        // 将 String, Date, Number 转换成日期
        toDate: function toDate(val) {
            // 若进入 formatDate 方法，null || '' 条件下则会自动添加当前日期和时间
            if (!val) {
                return '';
            }
            return isArray(val) ? val.map(function (item) {
                return date_formatDate(any2date(item));
            }) : date_formatDate(any2date(val));
        }
    },

    created: function created() {
        var _this2 = this;

        var startValue = this.startValue,
            endValue = this.endValue,
            checkValue = this.checkValue,
            type = this.type,
            value = this.value;

        if (startValue) {
            this.startDate = startValue;
        }

        if (endValue) {
            this.endDate = endValue;
        }

        if (startValue || endValue) {
            this.changeDate();
        }

        if ((type === 'datetimerange2' || type === 'daterange2') && value) {
            if (isArray(value) && value.length > 0) {
                this.startDate = value[0];
                this.endDate = value[value.length === 1 ? 0 : 1];
                this.changeDate();
            }
        }

        if (checkValue) {
            var isSelect = this.isSelect,
                shortBtnVisible = this.shortBtnVisible,
                validataList = this.validataList,
                label = this.props.label;

            var findItem = external_lodash_default.a.find(validataList, function (item) {
                return item[label] === checkValue && item.onClick;
            });
            // 如果是 onClick 触发的
            if (findItem) {
                this.selectValue = this.activeShortBtn = checkValue;
                this.$nextTick(function () {
                    var picker = _this2.$refs.picker;
                    findItem.onClick(picker);
                    _this2.changeDate();
                });
                return;
            }

            // 下拉框
            if (isSelect) {
                this.selectValue = checkValue;
                this.changeSelect(checkValue);
            }
            // 按钮
            if (!isSelect && shortBtnVisible) {
                this.activeShortBtn = external_lodash_default.a.isArray(checkValue) ? checkValue.join(',') : checkValue;
                this.changeSelect(checkValue);
            }
        }
    }
});
// CONCATENATED MODULE: ./packages/date-picker/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_date_picker_src_mainvue_type_script_lang_js_ = (date_picker_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/date-picker/src/main.vue
var date_picker_src_main_render, date_picker_src_main_staticRenderFns




/* normalize component */

var date_picker_src_main_component = normalizeComponent(
  packages_date_picker_src_mainvue_type_script_lang_js_,
  date_picker_src_main_render,
  date_picker_src_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var date_picker_src_main_api; }
date_picker_src_main_component.options.__file = "packages/date-picker/src/main.vue"
/* harmony default export */ var date_picker_src_main = (date_picker_src_main_component.exports);
// CONCATENATED MODULE: ./packages/date-picker/index.js


/* istanbul ignore next */
date_picker_src_main.install = function (Vue) {
  Vue.component(date_picker_src_main.name, date_picker_src_main);
};

/* harmony default export */ var date_picker = (date_picker_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/time-picker/src/main.vue?vue&type=template&id=05115e29&
var mainvue_type_template_id_05115e29_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "dg-time-picker",
      class: { "dg-time-picker__btn--visible": _vm.shortBtns.length }
    },
    [
      _vm.shortBtns.length
        ? _c("dg-radio-group", {
            style: _vm.$attrs["radio-type"]
              ? "display: flex; align-items: center;"
              : "",
            attrs: {
              data: _vm.shortBtns,
              "value-name": "text",
              "label-name": "text",
              type: _vm.$attrs["radio-type"] || "button",
              size: _vm.size
            },
            on: { change: _vm.handleShortBtnChange },
            model: {
              value: _vm.activeShortBtn,
              callback: function($$v) {
                _vm.activeShortBtn = $$v
              },
              expression: "activeShortBtn"
            }
          })
        : _vm._e(),
      _vm.isRangeTypeTwo
        ? [
            _c(
              "div",
              { staticClass: "dg-range-editor" },
              [
                _c(
                  "el-time-select",
                  _vm._b(
                    {
                      ref: "picker",
                      attrs: {
                        placeholder: _vm.beginPlaceholder,
                        size: _vm.size,
                        "picker-options": _vm.startPickOpt
                      },
                      on: {
                        pick: _vm.emitInput,
                        blur: _vm.handleBlur,
                        focus: _vm.handleFocus,
                        change: _vm.handleStartChange
                      },
                      model: {
                        value: _vm.startTime,
                        callback: function($$v) {
                          _vm.startTime = $$v
                        },
                        expression: "startTime"
                      }
                    },
                    "el-time-select",
                    _vm.$attrs,
                    false
                  )
                ),
                _c("span", { staticClass: "dg-time-picker__separator" }, [
                  _vm._v(_vm._s(_vm.rangeSeparator))
                ]),
                _c(
                  "el-time-select",
                  _vm._b(
                    {
                      attrs: {
                        placeholder: _vm.endPlaceholder,
                        size: _vm.size,
                        "picker-options": _vm.endPickOpt
                      },
                      on: {
                        pick: _vm.emitInput,
                        blur: _vm.handleBlur,
                        focus: _vm.handleFocus,
                        change: _vm.handleEndChange
                      },
                      model: {
                        value: _vm.endTime,
                        callback: function($$v) {
                          _vm.endTime = $$v
                        },
                        expression: "endTime"
                      }
                    },
                    "el-time-select",
                    _vm.$attrs,
                    false
                  )
                )
              ],
              1
            )
          ]
        : [
            _c(
              "el-time-select",
              _vm._g(
                _vm._b(
                  {
                    ref: "picker",
                    attrs: { size: _vm.size },
                    on: { pick: _vm.emitInput },
                    model: {
                      value: _vm.singleTime,
                      callback: function($$v) {
                        _vm.singleTime = $$v
                      },
                      expression: "singleTime"
                    }
                  },
                  "el-time-select",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              )
            )
          ]
    ],
    2
  )
}
var mainvue_type_template_id_05115e29_staticRenderFns = []
mainvue_type_template_id_05115e29_render._withStripped = true


// CONCATENATED MODULE: ./packages/time-picker/src/main.vue?vue&type=template&id=05115e29&

// EXTERNAL MODULE: ./src/utils/date.js
var utils_date = __webpack_require__(4);
var date_default = /*#__PURE__*/__webpack_require__.n(utils_date);

// CONCATENATED MODULE: ./src/utils/date-util.js



var weeks = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
var months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];

var newArray = function newArray(start, end) {
  var result = [];
  for (var i = start; i <= end; i++) {
    result.push(i);
  }
  return result;
};

var date_util_getI18nSettings = function getI18nSettings() {
  return {
    dayNamesShort: weeks.map(function (week) {
      return locale_t('el.datepicker.weeks.' + week);
    }),
    dayNames: weeks.map(function (week) {
      return locale_t('el.datepicker.weeks.' + week);
    }),
    monthNamesShort: months.map(function (month) {
      return locale_t('el.datepicker.months.' + month);
    }),
    monthNames: months.map(function (month, index) {
      return locale_t('el.datepicker.month' + (index + 1));
    }),
    amPm: ['am', 'pm']
  };
};

var date_util_toDate = function toDate(date) {
  return date_util_isDate(date) ? new Date(date) : null;
};

var date_util_isDate = function isDate(date) {
  if (date === null || date === undefined) return false;
  if (isNaN(new Date(date).getTime())) return false;
  if (Array.isArray(date)) return false; // deal with `new Date([ new Date() ]) -> new Date()`
  return true;
};

var isDateObject = function isDateObject(val) {
  return val instanceof Date;
};

var date_util_formatDate = function formatDate(date, format) {
  date = date_util_toDate(date);
  if (!date) return '';
  return date_default.a.format(date, format || 'yyyy-MM-dd', date_util_getI18nSettings());
};

var date_util_parseDate = function parseDate(string, format) {
  return date_default.a.parse(string, format || 'yyyy-MM-dd', date_util_getI18nSettings());
};

var getDayCountOfMonth = function getDayCountOfMonth(year, month) {
  if (month === 3 || month === 5 || month === 8 || month === 10) {
    return 30;
  }

  if (month === 1) {
    if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {
      return 29;
    } else {
      return 28;
    }
  }

  return 31;
};

var getDayCountOfYear = function getDayCountOfYear(year) {
  var isLeapYear = year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
  return isLeapYear ? 366 : 365;
};

var getFirstDayOfMonth = function getFirstDayOfMonth(date) {
  var temp = new Date(date.getTime());
  temp.setDate(1);
  return temp.getDay();
};

// see: https://stackoverflow.com/questions/3674539/incrementing-a-date-in-javascript
// {prev, next} Date should work for Daylight Saving Time
// Adding 24 * 60 * 60 * 1000 does not work in the above scenario
var prevDate = function prevDate(date) {
  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  return new Date(date.getFullYear(), date.getMonth(), date.getDate() - amount);
};

var nextDate = function nextDate(date) {
  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  return new Date(date.getFullYear(), date.getMonth(), date.getDate() + amount);
};

var getStartDateOfMonth = function getStartDateOfMonth(year, month) {
  var result = new Date(year, month, 1);
  var day = result.getDay();

  if (day === 0) {
    return prevDate(result, 7);
  } else {
    return prevDate(result, day);
  }
};

var date_util_getWeekNumber = function getWeekNumber(src) {
  if (!date_util_isDate(src)) return null;
  var date = new Date(src.getTime());
  date.setHours(0, 0, 0, 0);
  // Thursday in current week decides the year.
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
  // January 4 is always in week 1.
  var week1 = new Date(date.getFullYear(), 0, 4);
  // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
  // Rounding should be fine for Daylight Saving Time. Its shift should never be more than 12 hours.
  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
};

var getRangeHours = function getRangeHours(ranges) {
  var hours = [];
  var disabledHours = [];

  (ranges || []).forEach(function (range) {
    var value = range.map(function (date) {
      return date.getHours();
    });

    disabledHours = disabledHours.concat(newArray(value[0], value[1]));
  });

  if (disabledHours.length) {
    for (var i = 0; i < 24; i++) {
      hours[i] = disabledHours.indexOf(i) === -1;
    }
  } else {
    for (var _i = 0; _i < 24; _i++) {
      hours[_i] = false;
    }
  }

  return hours;
};

var getPrevMonthLastDays = function getPrevMonthLastDays(date, amount) {
  if (amount <= 0) return [];
  var temp = new Date(date.getTime());
  temp.setDate(0);
  var lastDay = temp.getDate();
  return date_util_range(amount).map(function (_, index) {
    return lastDay - (amount - index - 1);
  });
};

var date_util_getMonthDays = function getMonthDays(date) {
  var temp = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  var days = temp.getDate();
  return date_util_range(days).map(function (_, index) {
    return index + 1;
  });
};

function setRangeData(arr, start, end, value) {
  for (var i = start; i < end; i++) {
    arr[i] = value;
  }
}

var getRangeMinutes = function getRangeMinutes(ranges, hour) {
  var minutes = new Array(60);

  if (ranges.length > 0) {
    ranges.forEach(function (range) {
      var start = range[0];
      var end = range[1];
      var startHour = start.getHours();
      var startMinute = start.getMinutes();
      var endHour = end.getHours();
      var endMinute = end.getMinutes();
      if (startHour === hour && endHour !== hour) {
        setRangeData(minutes, startMinute, 60, true);
      } else if (startHour === hour && endHour === hour) {
        setRangeData(minutes, startMinute, endMinute + 1, true);
      } else if (startHour !== hour && endHour === hour) {
        setRangeData(minutes, 0, endMinute + 1, true);
      } else if (startHour < hour && endHour > hour) {
        setRangeData(minutes, 0, 60, true);
      }
    });
  } else {
    setRangeData(minutes, 0, 60, true);
  }
  return minutes;
};

var date_util_range = function range(n) {
  // see https://stackoverflow.com/questions/3746725/create-a-javascript-array-containing-1-n
  return Array.apply(null, { length: n }).map(function (_, n) {
    return n;
  });
};

var modifyDate = function modifyDate(date, y, m, d) {
  return new Date(y, m, d, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
};

var modifyTime = function modifyTime(date, h, m, s) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), h, m, s, date.getMilliseconds());
};

var modifyWithTimeString = function modifyWithTimeString(date, time) {
  if (date == null || !time) {
    return date;
  }
  time = date_util_parseDate(time, 'HH:mm:ss');
  return modifyTime(date, time.getHours(), time.getMinutes(), time.getSeconds());
};

var clearTime = function clearTime(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
};

var clearMilliseconds = function clearMilliseconds(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
};

var date_util_limitTimeRange = function limitTimeRange(date, ranges) {
  var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'HH:mm:ss';

  // TODO: refactory a more elegant solution
  if (ranges.length === 0) return date;
  var normalizeDate = function normalizeDate(date) {
    return date_default.a.parse(date_default.a.format(date, format), format);
  };
  var ndate = normalizeDate(date);
  var nranges = ranges.map(function (range) {
    return range.map(normalizeDate);
  });
  if (nranges.some(function (nrange) {
    return ndate >= nrange[0] && ndate <= nrange[1];
  })) return date;

  var minDate = nranges[0][0];
  var maxDate = nranges[0][0];

  nranges.forEach(function (nrange) {
    minDate = new Date(Math.min(nrange[0], minDate));
    maxDate = new Date(Math.max(nrange[1], minDate));
  });

  var ret = ndate < minDate ? minDate : maxDate;
  // preserve Year/Month/Date
  return modifyDate(ret, date.getFullYear(), date.getMonth(), date.getDate());
};

var timeWithinRange = function timeWithinRange(date, selectableRange, format) {
  var limitedDate = date_util_limitTimeRange(date, selectableRange, format);
  return limitedDate.getTime() === date.getTime();
};

var changeYearMonthAndClampDate = function changeYearMonthAndClampDate(date, year, month) {
  // clamp date to the number of days in `year`, `month`
  // eg: (2010-1-31, 2010, 2) => 2010-2-28
  var monthDate = Math.min(date.getDate(), getDayCountOfMonth(year, month));
  return modifyDate(date, year, month, monthDate);
};

var prevMonth = function prevMonth(date) {
  var year = date.getFullYear();
  var month = date.getMonth();
  return month === 0 ? changeYearMonthAndClampDate(date, year - 1, 11) : changeYearMonthAndClampDate(date, year, month - 1);
};

var nextMonth = function nextMonth(date) {
  var year = date.getFullYear();
  var month = date.getMonth();
  return month === 11 ? changeYearMonthAndClampDate(date, year + 1, 0) : changeYearMonthAndClampDate(date, year, month + 1);
};

var prevYear = function prevYear(date) {
  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var year = date.getFullYear();
  var month = date.getMonth();
  return changeYearMonthAndClampDate(date, year - amount, month);
};

var nextYear = function nextYear(date) {
  var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  var year = date.getFullYear();
  var month = date.getMonth();
  return changeYearMonthAndClampDate(date, year + amount, month);
};

var extractDateFormat = function extractDateFormat(format) {
  return format.replace(/\W?m{1,2}|\W?ZZ/g, '').replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, '').trim();
};

var extractTimeFormat = function extractTimeFormat(format) {
  return format.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, '').trim();
};

var validateRangeInOneMonth = function validateRangeInOneMonth(start, end) {
  return start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
};
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/time-picker/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//







var parseTime = function parseTime(time) {
    var values = (time || '').split(':');
    if (values.length >= 2) {
        var hours = parseInt(values[0], 10);
        var minutes = parseInt(values[1], 10);

        return {
            hours: hours,
            minutes: minutes
        };
    }
    /* istanbul ignore next */
    return null;
};

var compareTime = function compareTime(time1, time2) {
    var value1 = parseTime(time1);
    var value2 = parseTime(time2);

    var minutes1 = value1.minutes + value1.hours * 60;
    var minutes2 = value2.minutes + value2.hours * 60;

    if (minutes1 === minutes2) {
        return 0;
    }

    return minutes1 > minutes2 ? 1 : -1;
};

/*
 * Considers:
 *   1. Date object
 *   2. date string
 *   3. array of 1 or 2
 */
var src_mainvue_type_script_lang_js_valueEquals = function valueEquals(a, b) {
    var aIsArray = a instanceof Array;
    var bIsArray = b instanceof Array;
    if (aIsArray && bIsArray) {
        if (a.length !== b.length) {
            return false;
        }
        return a.every(function (item, index) {
            return compareTime(item, b[index]) === 0;
        });
    }
    if (!aIsArray && !bIsArray) {
        return compareTime(a, b) === 0;
    }
    return false;
};

/* harmony default export */ var time_picker_src_mainvue_type_script_lang_js_ = ({
    name: 'DgTimePicker',
    // 去除将未识别属性绑定到外层的DOM上，详见：https://cn.vuejs.org/v2/api/index.html#inheritAttrs
    inheritAttrs: false,

    components: {
        DgRadioGroup: radio_group,
        ElTimeSelect: external_element_ui_["TimeSelect"]
    },

    props: {
        // 配置按钮数组
        shortBtns: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 开始时间
        startValue: String,
        // 结束时间
        endValue: String,
        // 尺寸大小
        size: {
            type: String
        },
        // 分割符
        rangeSeparator: {
            type: String,
            default: '-'
        },
        // 时间选择类型
        type: {
            type: String,
            default: 'select'
        },
        // 传入的数据值
        value: [String, Array],
        // 开始时间提示
        beginPlaceholder: String,
        // 结束时间提示
        endPlaceholder: String
    },

    data: function data() {
        return {
            // 按钮选中的标识值
            activeShortBtn: '',
            // 单个时间选择值
            singleTime: '',
            // 开始时间选择值
            startTime: this.startValue,
            // 结束时间选择值
            endTime: this.endValue
        };
    },


    computed: {
        /**
         * 检测是否为范围型日期类型
         *
         */
        isRangeTypeTwo: function isRangeTypeTwo() {
            // 针对范围型控件，拆分成两个独立控件，通过模板拆分渲染
            return this.type.indexOf('range2') > -1;
        },
        startPickOpt: function startPickOpt() {
            // 设置开始时间可选择时间上限
            var opt = external_lodash_default.a.cloneDeep(this.$attrs['picker-options']) || {};

            // 检测是否为空对象
            if (!external_lodash_default.a.isPlainObject(opt)) return opt;

            // 检测重构的值
            var result = merge(opt, {
                maxTime: opt.maxTime ? opt.maxTime : this.endTime
            });

            return result;
        },
        endPickOpt: function endPickOpt() {
            // 设置结束日期可选择日期范围
            var opt = external_lodash_default.a.cloneDeep(this.$attrs['picker-options']) || {};

            // 检测是否为空对象
            if (!external_lodash_default.a.isPlainObject(opt)) return opt;

            // 检测重构的值
            var result = merge(opt, {
                minTime: opt.minTime ? opt.minTime : this.startTime
            });

            return result;
        }
    },

    watch: {
        value: {
            immediate: true,
            handler: function handler(newVal) {
                if (Array.isArray(newVal)) {
                    var startTime = newVal[0],
                        endTime = newVal[1];

                    this.startTime = startTime;
                    this.endTime = endTime;
                } else {
                    // 选项检测 tangDM++
                    if (this.shortBtns.length) {
                        var isActive = this.shortBtns.find(function (item) {
                            return item.text === newVal;
                        });

                        // 同步选项按钮
                        if (!isActive) this.activeShortBtn = '';else this.activeShortBtn = newVal;
                    }
                    this.singleTime = newVal;
                }
            }
        }
    },

    methods: {
        /**
         * 按钮点击对应的事件触发
         *
         * @param text [String] 文本值
         */
        handleShortBtnChange: function handleShortBtnChange(text) {
            var btn = this.shortBtns.find(function (o) {
                return o.text === text;
            });

            // 触发相应的点击
            if (btn.onClick) {
                var picker = this.$refs.picker;
                btn.onClick(picker);
            }
        },

        /**
         * 格式化日期值
         *
         * @param value
         * @return {*}
         */
        formatToValue: function formatToValue(value) {
            var format = this.$attrs['value-format'];
            if (format) {
                value = Array.isArray(value) ? value.map(function (date) {
                    return date_util_formatDate(date, format);
                }) : date_util_formatDate(value, format);
            }
            return value;
        },
        emitChange: function emitChange(val) {
            // determine user real change only
            if (!src_mainvue_type_script_lang_js_valueEquals(val, this.value)) {
                this.$emit('change', val);
                if (this.$attrs['validateEvent']) {
                    this.dispatch('ElFormItem', 'el.form.change', val);
                }
            }
        },
        emitInput: function emitInput(val) {
            // 检测当前类型
            if (!this.isRangeTypeTwo) {
                this.singleTime = val;
            }

            var format = this.formatToValue(val);
            this.$emit('input', format);
        },
        handleBlur: function handleBlur() {
            this.$emit('blur', this);
        },
        handleFocus: function handleFocus() {
            this.$emit('focus', this);
        },
        handleDateChange: function handleDateChange(value) {
            this.emitInput(value);
        },
        handleStartChange: function handleStartChange(value) {
            this.emitInput([value, this.endTime]);
        },
        handleEndChange: function handleEndChange(value) {
            this.emitInput([this.startTime, value]);
        }
    }
});
// CONCATENATED MODULE: ./packages/time-picker/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_time_picker_src_mainvue_type_script_lang_js_ = (time_picker_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/time-picker/src/main.vue





/* normalize component */

var time_picker_src_main_component = normalizeComponent(
  packages_time_picker_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_05115e29_render,
  mainvue_type_template_id_05115e29_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var time_picker_src_main_api; }
time_picker_src_main_component.options.__file = "packages/time-picker/src/main.vue"
/* harmony default export */ var time_picker_src_main = (time_picker_src_main_component.exports);
// CONCATENATED MODULE: ./packages/time-picker/index.js


/* istanbul ignore next */
time_picker_src_main.install = function (Vue) {
  Vue.component(time_picker_src_main.name, time_picker_src_main);
};

/* harmony default export */ var time_picker = (time_picker_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/log-search/src/main.vue?vue&type=template&id=ed28ed24&
var mainvue_type_template_id_ed28ed24_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-log-search" }, [
    _c(
      "div",
      {
        staticClass: "dg-log-search__content",
        on: {
          mouseenter: _vm.handleEnterHover,
          mouseleave: _vm.handleRemoveHover
        }
      },
      [
        _c(
          "dg-scrollbar",
          {
            ref: "scrollbar",
            attrs: { "busy-loading": _vm.busyLoading, "load-distance": "" },
            on: {
              "scroll-top": _vm.scrollTop,
              "scroll-event": _vm.scrollEvent,
              "scroll-bottom": _vm.scrollBottom
            }
          },
          [
            _c(
              "ul",
              { ref: "searchWrap", staticClass: "dg-log-search__list" },
              _vm._l(_vm.dataSource, function(item, index) {
                return _c(
                  "li",
                  { key: index, staticClass: "dg-log-search__item" },
                  [_vm._t("default", null, { data: item })],
                  2
                )
              }),
              0
            )
          ]
        )
      ],
      1
    )
  ])
}
var mainvue_type_template_id_ed28ed24_staticRenderFns = []
mainvue_type_template_id_ed28ed24_render._withStripped = true


// CONCATENATED MODULE: ./packages/log-search/src/main.vue?vue&type=template&id=ed28ed24&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/log-search/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var log_search_src_mainvue_type_script_lang_js_ = ({
    name: 'DgLogSearch',
    props: {
        // 目标数据
        data: {
            type: Array,
            default: []
        },
        // 是否自动滚动
        isAutoScroll: {
            type: Boolean,
            default: false
        },
        // 滚动置顶触发
        scrollTop: {
            type: Function,
            default: function _default() {}
        },
        // 滚动置底触发
        scrollBottom: {
            type: Function,
            default: function _default() {}
        },
        // 滚动触发
        scrollEvent: {
            type: Function,
            default: function _default() {}
        },
        // 限制条数
        limitCounts: {
            type: Number,
            default: 0
        },
        // 禁止触发上下加载数据
        isDisableLoadData: {
            type: Boolean,
            default: false
        }
    },
    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            // 加载锁定(阻止置顶触发事件及置底触发事件)
            busyLoading: true,
            // 缓存推送的数据
            cacheData: [],
            // 过滤的字段
            filterValue: '',
            // 过滤的位置存储
            filterArray: []
        };
    },

    watch: {
        /**
         * 监听目标数据的改变
         *
         * @param val
         */
        data: function data(val) {
            this.dataSource = val;
        },

        /**
         * 监听 isDisableLoadData 改变
         *
         */
        isDisableLoadData: function isDisableLoadData(val) {
            this.busyLoading = !val;
        }
    },
    methods: {
        // 置顶方法
        goScrollToTop: function goScrollToTop() {
            this.$refs.scrollbar.goScrollToTop();
        },

        // 置底方法
        goScrollToBottom: function goScrollToBottom() {
            this.$refs.scrollbar.goScrollToBottom();
        },

        // 滚动到指定的位置
        goScrollToPositionY: function goScrollToPositionY(y, animateTime, callback) {
            this.$refs.scrollbar.goScrollToYAxis(y, animateTime, callback);
        },

        // 清空数据
        clearData: function clearData() {
            this.dataSource = [];
        },

        /**
         * 数据更新加载入新的条数方法
         *
         * @param data [Array] 数据
         * @param type [String] 字符串
         */
        loadingData: function loadingData(data, type) {
            var _this = this;

            var self = this;

            var itemHeight = this.$refs.searchWrap.children.length > 0 ? this.$refs.searchWrap.children[0].clientHeight : 0;

            // 检测是否限制最大条数
            if (this.limitCounts) {
                // 计算超出条数
                var deleteCounts = this.limitCounts > this.dataSource.length + data.length ? 0 : data.length + this.dataSource.length - this.limitCounts;

                // 检测是否超出
                if (!isNaN(this.limitCounts) && deleteCounts > 0 && type === 'down' && this.busyLoading) {
                    // 删除指定条数
                    self.dataSource.splice(0, deleteCounts);

                    // 重置滚动条位置
                    var scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                    this.$refs.scrollbar.wrap.scrollTop = scrollTop - data.length * itemHeight;
                }
            }

            // 数据操作
            if (type === 'up') {
                data.forEach(function (item) {
                    _this.dataSource.unshift(item);
                });
            } else if (type === 'down') {
                data.forEach(function (item) {
                    _this.dataSource.push(item);
                });
            }
        },

        /**
         * 数据实时推送的方法
         *
         * @param data [Array] 数据
         */
        realTimeLoading: function realTimeLoading(data) {
            var _this2 = this;

            var itemHeight = this.$refs.searchWrap.children.length > 0 ? this.$refs.searchWrap.children[0].clientHeight : 0;

            // 检测是否限制最大条数
            if (this.limitCounts) {
                // 检测当前的数据加载的状态，若属于加载锁定状态
                if (this.busyLoading) {
                    // 是否存在缓存数据
                    if (this.cacheData.length > 0) {
                        // 合并内容数据
                        this.dataSource = external_lodash_default.a.concat(this.dataSource, this.cacheData, data);

                        // 更新数据内容
                        this.dataSource.splice(0, this.dataSource.length - this.limitCounts);

                        // 清空缓存数据
                        this.cacheData = [];
                    } else {
                        this.loadingData(data, 'down');
                    }

                    // 是否自动滚动
                    if (this.isAutoScroll) {
                        var scrollTop = this.$refs.scrollbar.wrap.scrollHeight - this.$refs.scrollbar.wrap.clientHeight;
                        this.$refs.scrollbar.wrap.scrollTop = scrollTop;
                    }
                } else {
                    // 是否存在缓存数据
                    if (this.limitCounts <= this.dataSource.length) {
                        this.cacheData = this.cacheData.concat(data);
                    } else {
                        // 计算数据拆分的条数
                        var deleteCounts = this.dataSource.length + data.length - this.limitCounts;

                        // 检测是否超出
                        if (deleteCounts > 0) {
                            // 删除特定条数
                            this.dataSource.splice(0, deleteCounts);

                            // 追加指定条数
                            var addData = data.slice(0, deleteCounts);
                            this.dataSource = this.dataSource.concat(addData);

                            // 缓存条数增加
                            var newData = data.slice(deleteCounts);
                            this.cacheData = this.cacheData.concat(newData);

                            // 重置滚动条位置
                            var _scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                            this.$refs.scrollbar.wrap.scrollTop = _scrollTop - newData.length * itemHeight;
                        } else {
                            this.dataSource = this.dataSource.concat(data);
                        }
                    }
                }
            } else {
                // 无限制则直接追加数据
                data.forEach(function (item) {
                    _this2.dataSource.push(item);
                });

                // 是否自动滚动
                if (this.isAutoScroll && this.busyLoading) {
                    var _scrollTop2 = this.$refs.scrollbar.wrap.scrollHeight - this.$refs.scrollbar.wrap.clientHeight;
                    this.$refs.scrollbar.wrap.scrollTop = _scrollTop2;
                }
            }
        },

        /**
         * 鼠标上移悬浮时操作
         *
         */
        handleEnterHover: function handleEnterHover() {
            // 取消滚动锁定加载
            this.busyLoading = this.isDisableLoadData;

            // 触发进入操作
            this.$emit('hover-enter');
        },

        /**
         * 鼠标移除悬浮时操作
         *
         */
        handleRemoveHover: function handleRemoveHover() {
            // 滚动锁定加载
            this.busyLoading = true;

            // 触发离开操作
            this.$emit('hover-leave');
        },

        /**
         * 查询数据高亮方法
         *
         * @param item [String] 查询对应文本
         * @param filterKey [String] 过滤文本
         */
        searchHighLightMethods: function searchHighLightMethods(item, filterKey) {
            // 界面中查找特定值
            if (!filterKey) return item;

            var result = item.replace(new RegExp(filterKey + '{1}'), '<span class="dg-log-search__light">' + filterKey + '</span>');
            return result;
        },

        /**
         * 滚动到匹配指定的位置
         *
         */
        scrollToPointPosition: function scrollToPointPosition(filterValue) {
            // 去除两端的空格
            filterValue = external_jquery_default.a.trim(filterValue);

            // 校验不为空值
            if (!filterValue) return false;

            // 比较与原先的值是否有变化
            if (this.filterValue === filterValue) {
                var scrollTop = this.$refs.scrollbar.wrap.scrollTop;
                var scrollHeight = this.$refs.scrollbar.wrap.scrollHeight;
                var clientHeight = this.$refs.scrollbar.wrap.clientHeight;
                var flag = true;

                // 滚动位置判断
                for (var i = 0, len = this.filterArray.length; i < len; i++) {
                    // 滚动置底，则无需遍历后续的值
                    if (scrollTop + clientHeight === scrollHeight) break;

                    // 滚动至下一个值
                    if (this.filterArray[i] > scrollTop) {
                        flag = false;
                        this.goScrollToPositionY(this.filterArray[i], 200);
                        break;
                    }
                }

                // 若置底，则恢复初始位置
                if (flag) this.goScrollToPositionY(this.filterArray[0], 200);
            } else {
                var $filterSpan = external_jquery_default()(this.$el).find('.dg-log-search__light');
                this.filterArray = [];
                this.filterValue = filterValue;
                var self = this;

                external_jquery_default.a.each($filterSpan, function (index, item) {
                    var _value = item.closest('li').offsetTop;
                    self.filterArray.push(_value);
                });

                this.goScrollToPositionY(this.filterArray[0], 200);
            }
        }
    },
    mounted: function mounted() {
        var _this3 = this;

        // DOM 加载完成
        this.$nextTick(function () {
            // 是否启用自动滚动
            if (_this3.isAutoScroll) {
                var scrollHeight = _this3.$refs.scrollbar.wrap.scrollHeight;
                _this3.$refs.scrollbar.goScrollToYAxis(scrollHeight);
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/log-search/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_log_search_src_mainvue_type_script_lang_js_ = (log_search_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/log-search/src/main.vue





/* normalize component */

var log_search_src_main_component = normalizeComponent(
  packages_log_search_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_ed28ed24_render,
  mainvue_type_template_id_ed28ed24_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var log_search_src_main_api; }
log_search_src_main_component.options.__file = "packages/log-search/src/main.vue"
/* harmony default export */ var log_search_src_main = (log_search_src_main_component.exports);
// CONCATENATED MODULE: ./packages/log-search/index.js


/* istanbul ignore next */
log_search_src_main.install = function (Vue) {
  Vue.component(log_search_src_main.name, log_search_src_main);
};

/* harmony default export */ var log_search = (log_search_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/time-line/src/main.vue?vue&type=template&id=64a9b0fa&
var mainvue_type_template_id_64a9b0fa_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-time-line" }, [
    _c(
      "div",
      {
        class: {
          "dg-time-line__inner": true,
          "is-pagination": _vm.$slots.pagination || _vm.pagination,
          "dg-time-line__both": _vm.isBoth,
          "dg-time-line__label": _vm.showLabel
        }
      },
      [
        _c(
          "dg-scrollbar",
          {
            attrs: { "wrap-class": "dg-time-line__scrollbar" },
            on: { "scroll-bottom": _vm.scrollBottom }
          },
          [
            _c(
              "ul",
              {
                class: [
                  "dg-time-line__content",
                  _vm.isIconFlag ? "dg-time-line__content-icon" : ""
                ]
              },
              _vm._l(_vm.renderData, function(item, index) {
                return _c(
                  "li",
                  {
                    key: index,
                    class: _vm.isIconClass(item),
                    style: {
                      height:
                        (item.height ? item.height : _vm.interval || -1) + "px"
                    }
                  },
                  [
                    _vm.showLabel
                      ? _c("div", { staticClass: "dg-time-line--label" }, [
                          _vm._v(_vm._s(item[_vm.timeName]))
                        ])
                      : _vm._e(),
                    index + 1 !== _vm.renderData.length
                      ? _c("span", {
                          staticClass: "dg-time-line__line",
                          class: [
                            _vm.lineBackground ? "" : "line-background-color"
                          ],
                          style: {
                            height:
                              (item.height
                                ? item.height
                                : _vm.interval
                                ? _vm.interval
                                : "") + "px",
                            backgroundColor: _vm.lineBackground || "none"
                          }
                        })
                      : _vm._e(),
                    _c(
                      "span",
                      {
                        staticClass: "dg-time-line__dot",
                        style: {
                          borderColor: item[_vm.iconColorName]
                            ? item[_vm.iconColorName]
                            : _vm.roundBackground,
                          color: item[_vm.iconColorName]
                            ? item[_vm.iconColorName]
                            : _vm.roundBackground,
                          marginLeft: item.noBorder ? "-1px" : "0",
                          borderWidth: item.noBorder ? "0" : "2px"
                        }
                      },
                      [_c("i", { class: item[_vm.iconName] })]
                    ),
                    _c(
                      "div",
                      { staticClass: "dg-time-line__document" },
                      [
                        !_vm.userDefined
                          ? [
                              _vm.textType !== "box"
                                ? _c(
                                    "div",
                                    { staticClass: "dg-time-line__box" },
                                    [
                                      _c(
                                        "span",
                                        {
                                          staticClass:
                                            "dg-time-line__box-base dg-time-line__box-title"
                                        },
                                        [
                                          _vm._v(
                                            "\n                  " +
                                              _vm._s(item[_vm.labelName]) +
                                              "\n                "
                                          )
                                        ]
                                      ),
                                      _c(
                                        "span",
                                        {
                                          staticClass:
                                            "dg-time-line__box-base dg-time-line__box-time"
                                        },
                                        [
                                          _vm._v(
                                            "\n                  " +
                                              _vm._s(item[_vm.valueName]) +
                                              "\n                "
                                          )
                                        ]
                                      )
                                    ]
                                  )
                                : _c(
                                    "div",
                                    { staticClass: "dg-time-line__message" },
                                    [
                                      _c(
                                        "span",
                                        {
                                          staticClass:
                                            "dg-time-line__message-title"
                                        },
                                        [_vm._v(_vm._s(item[_vm.labelName]))]
                                      ),
                                      _c(
                                        "div",
                                        {
                                          staticClass:
                                            "dg-time-line__message-info"
                                        },
                                        [
                                          _c("span", [
                                            _vm._v(_vm._s(item[_vm.valueName]))
                                          ]),
                                          _c("span", [
                                            _vm._v(_vm._s(item[_vm.detailName]))
                                          ])
                                        ]
                                      )
                                    ]
                                  )
                            ]
                          : [_vm._t("default", null, { data: item })]
                      ],
                      2
                    )
                  ]
                )
              }),
              0
            )
          ]
        )
      ],
      1
    ),
    _vm.$slots.pagination || _vm.pagination
      ? _c(
          "div",
          { staticClass: "dg-time-line__pagination" },
          [
            _vm.pagination
              ? [
                  _c(
                    "el-pagination",
                    _vm._b(
                      {
                        staticClass: "dg-table__pagination",
                        on: {
                          "size-change": _vm.handleSizeChange,
                          "current-change": _vm.handleCurrentChange,
                          "prev-click": _vm.handlePrevClick,
                          "next-click": _vm.handleNextClick
                        }
                      },
                      "el-pagination",
                      _vm.paginationOptions,
                      false
                    )
                  )
                ]
              : [_vm._t("pagination")]
          ],
          2
        )
      : _vm._e()
  ])
}
var mainvue_type_template_id_64a9b0fa_staticRenderFns = []
mainvue_type_template_id_64a9b0fa_render._withStripped = true


// CONCATENATED MODULE: ./packages/time-line/src/main.vue?vue&type=template&id=64a9b0fa&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/time-line/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var time_line_src_mainvue_type_script_lang_js_ = ({
    name: "DgTimeLine",

    props: {
        // 目标数据
        data: {
            type: Array,
            default: []
        },
        showLabel: {
            type: Boolean,
            default: false
        },
        timeName: {
            type: String,
            default: 'time'
        },
        // 时间的字段名称
        valueName: {
            type: String,
            default: 'value'
        },
        // 标题的字段名称
        labelName: {
            type: String,
            default: 'label'
        },
        // 详情的字段名称
        detailName: {
            type: String,
            default: 'detail'
        },
        // 图标的字段名称
        iconName: {
            type: String,
            default: 'icon'
        },
        // 图标的颜色名称
        iconColorName: {
            type: String,
            default: 'iconColor'
        },
        // 圆节点背景
        roundBackground: {
            type: String,
            default: ""
        },
        // 线条背景
        lineBackground: {
            type: String,
            default: ""
        },
        // 间距
        interval: {
            type: Number,
            default: 0
        },
        // 文本类型
        textType: {
            type: String,
            default: "",
            validator: function validator(val) {
                return ["box", ""].indexOf(val) !== -1;
            }
        },
        // 用户自定义文本
        userDefined: {
            type: Boolean,
            default: false
        },
        // 是否开启模板分页
        pagination: {
            type: Boolean,
            default: false
        },
        // 分页配置参数
        paginationProps: {
            type: Object,
            default: function _default() {}
        },
        // 分页类型 client | server
        pagingType: {
            type: String,
            default: "server",
            validator: function validator(val) {
                return ["client", "server"].indexOf(val) !== -1;
            }
        },
        // 是否两侧摆放
        isBoth: {
            type: Boolean,
            default: false
        }
    },
    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            dataClient: this.data,
            // 分页参数配置
            paginationOptions: merge({ pageSize: 10, currentPage: 1 }, this.paginationProps),
            // 是否有自定义标签
            isIconFlag: false
        };
    },

    computed: {
        renderData: function renderData() {
            if (this.pagination == true && this.pagingType === "client") {
                var _paginationOptions = this.paginationOptions,
                    pageSize = _paginationOptions.pageSize,
                    currentPage = _paginationOptions.currentPage;

                var start = (currentPage - 1) * pageSize;
                this.dataSource = this.dataClient.slice(start, start + pageSize);
            }
            return this.dataSource;
        },

        // 自定义图标样式
        isIconClass: function isIconClass() {
            return function (item) {
                if (item.icon) {
                    this.isIconFlag = true;
                    var carr = ['dg-time-line__item', 'dg-time-line__item-icon'];
                    if (item.noBorder) {
                        carr.push('dg-time-line__no-border');
                    }
                    return carr.join(' ');
                }
                return 'dg-time-line__item';
            };
        }
    },
    watch: {
        /**
         * 监听数据源改变
         *
         */
        data: {
            immediate: true,
            handler: function handler(data) {
                if (this.pagingType == "client") {
                    this.dataClient = data;
                    this.paginationOptions.total = data.length;
                } else {
                    this.dataSource = data;
                }
            }
        }
    },
    methods: {
        /**
         * 分页切换
         *
         * @param val 当前页码
         */
        currentPage: function currentPage(val) {
            this.$emit("current-page", val);
        },

        /**
         * 监听滚动条到底部
         *
         */
        scrollBottom: function scrollBottom() {
            this.$emit("loading-data");
        },

        /**
         * 页数值改变方法
         *
         * @param evt
         */
        handleSizeChange: function handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.$emit("change-size", val);
        },

        /**
         * 当前页改变方法
         *
         * @param evt
         */
        handleCurrentChange: function handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.$emit("change-current", val);
        },

        /**
         * 点击上一页
         *
         * @param evt
         */
        handlePrevClick: function handlePrevClick(val) {
            this.$emit("click-prev", val);
        },

        /**
         * 点击下一页
         *
         * @param evt
         */
        handleNextClick: function handleNextClick(val) {
            this.$emit("click-next", val);
        }
    },
    created: function created() {
        // 分页配置
        if (!this.pagination) {
            return;
        }
    }
});
// CONCATENATED MODULE: ./packages/time-line/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_time_line_src_mainvue_type_script_lang_js_ = (time_line_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/time-line/src/main.vue





/* normalize component */

var time_line_src_main_component = normalizeComponent(
  packages_time_line_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_64a9b0fa_render,
  mainvue_type_template_id_64a9b0fa_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var time_line_src_main_api; }
time_line_src_main_component.options.__file = "packages/time-line/src/main.vue"
/* harmony default export */ var time_line_src_main = (time_line_src_main_component.exports);
// CONCATENATED MODULE: ./packages/time-line/index.js


/* istanbul ignore next */
time_line_src_main.install = function (Vue) {
    Vue.component(time_line_src_main.name, time_line_src_main);
};

/* harmony default export */ var time_line = (time_line_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/line-table/src/main.vue?vue&type=template&id=17d3cb8a&
var mainvue_type_template_id_17d3cb8a_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-table" },
    [
      _c(
        "div",
        { staticClass: "dg-table__content" },
        [
          _c(
            "el-form",
            {
              ref: "form",
              attrs: {
                prop: "form",
                model: { form: _vm.renderData },
                rules: _vm.formRules,
                "label-position": "right"
              }
            },
            [
              _c(
                "el-table",
                _vm._g(
                  _vm._b(
                    {
                      directives: [
                        {
                          name: "clickoutside",
                          rawName: "v-clickoutside",
                          value: _vm.handleOutsideClick,
                          expression: "handleOutsideClick"
                        },
                        {
                          name: "loading",
                          rawName: "v-loading",
                          value: _vm.loadding,
                          expression: "loadding"
                        }
                      ],
                      ref: "grid",
                      attrs: {
                        data: _vm.renderData,
                        "row-key": _vm.rowKey,
                        border: _vm.border
                      },
                      on: {
                        "header-click": _vm.handleHeaderClick,
                        "selection-change": _vm.handleSelectItem,
                        "sort-change": _vm.handleSortChange
                      }
                    },
                    "el-table",
                    _vm.attrs,
                    false
                  ),
                  _vm.$listeners
                ),
                [_vm._t("default"), _vm._t("append")],
                2
              )
            ],
            1
          )
        ],
        1
      ),
      _vm.pagination
        ? [
            _c(
              "el-pagination",
              _vm._b(
                {
                  staticClass: "dg-table__pagination",
                  on: {
                    "size-change": _vm.handleSizeChange,
                    "current-change": _vm.handleCurrentChange,
                    "prev-click": _vm.handlePrevClick,
                    "next-click": _vm.handleNextClick
                  }
                },
                "el-pagination",
                _vm.paginationOptions,
                false
              )
            )
          ]
        : [_vm._t("pagination")]
    ],
    2
  )
}
var mainvue_type_template_id_17d3cb8a_staticRenderFns = []
mainvue_type_template_id_17d3cb8a_render._withStripped = true


// CONCATENATED MODULE: ./packages/line-table/src/main.vue?vue&type=template&id=17d3cb8a&

// CONCATENATED MODULE: ./packages/line-table/src/async-queue.js
/**
 * 异步队列
 * @Author: yangjy
 * @Date: 2019-06-19
 * @Project ui-component-v4
 */
/* harmony default export */ var async_queue = (function (queue, fn, cb) {
    var step = function step(index) {
        if (index >= queue.length) {
            cb();
        } else {
            if (queue[index]) {
                fn(queue[index], function () {
                    step(index + 1);
                });
            } else {
                step(index + 1);
            }
        }
    };
    step(0);
});
// CONCATENATED MODULE: ./src/dg-directives/clickoutside.js




var nodeList = [];
var ctx = "@@clickoutsideContext";

var startClick = void 0;
var seed = 0;

!external_vue_default.a.prototype.$isServer && on(document, "mousedown", function (e) {
  return startClick = e;
});

!external_vue_default.a.prototype.$isServer && on(document, "mouseup", function (e) {
  nodeList.forEach(function (node) {
    return node[ctx].documentHandler(e, startClick);
  });
});
function deepContainPopper(vnode, mousedown, mouseup) {
  // 过滤掉子节点不存在日期和下拉类似浮层点击
  var isContain = false;
  var isFilter = function isFilter(vnode) {
    // 节点实例的存在浮层，且包含点击元素
    if (vnode.context && vnode.context.popperElm && vnode.context.popperElm.contains(mousedown.target)) {
      isContain = true;
      return;
    }
    // 普通节点找子节点，组件占位节点，找第一个根节点
    var children = !external_lodash_default.a.isEmpty(vnode.children) && vnode.children || !external_lodash_default.a.isEmpty(vnode.componentInstance) && [vnode.componentInstance._vnode] || [];
    // 递归调用子节点
    children.forEach(isFilter);
  };
  isFilter(vnode);
  return isContain;
}
function createDocumentHandler(el, binding, vnode) {
  return function () {
    var mouseup = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var mousedown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target)) || deepContainPopper(vnode, mousedown, mouseup) // 增加yangjy ，深度遍历子节点是否存在弹层包含点击元素
    ) return;

    if (binding.expression && el[ctx].methodName && vnode.context[el[ctx].methodName]) {
      vnode.context[el[ctx].methodName]();
    } else {
      el[ctx].bindingFn && el[ctx].bindingFn();
    }
  };
}

/**
 * v-clickoutside
 * @desc 点击元素外面才会触发的事件
 * @example
 * ```vue
 * <div v-element-clickoutside="handleClose">
 * ```
 */
/* harmony default export */ var clickoutside = ({
  bind: function bind(el, binding, vnode) {
    nodeList.push(el);
    var id = seed++;
    el[ctx] = {
      id: id,
      documentHandler: createDocumentHandler(el, binding, vnode),
      methodName: binding.expression,
      bindingFn: binding.value
    };
  },
  update: function update(el, binding, vnode) {
    el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);
    el[ctx].methodName = binding.expression;
    el[ctx].bindingFn = binding.value;
  },
  unbind: function unbind(el) {
    var len = nodeList.length;

    for (var i = 0; i < len; i++) {
      if (nodeList[i][ctx].id === el[ctx].id) {
        nodeList.splice(i, 1);
        break;
      }
    }
    delete el[ctx];
  }
});
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/line-table/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//









/* harmony default export */ var line_table_src_mainvue_type_script_lang_js_ = ({
    name: 'DgLineTable',

    componentName: 'DgLineTable',

    mixins: [emitter, table],

    model: {
        prop: 'data'
    },

    directives: {
        clickoutside: clickoutside
    },

    provide: function provide() {
        return {
            overflow: this.overflow,
            formTable: this
        };
    },


    props: {
        // form表单数据的字段名称
        prop: {
            type: String,
            default: 'form'
        },
        // 模式，行，列,row,cell
        mode: {
            type: String,
            default: 'row'
        },
        // 验证规则
        rules: Object,
        // 文本超出，模式
        overflow: {
            type: String,
            default: 'wrap'
        },
        // 全局禁用用
        disabled: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            editRow: {}, // 编辑行
            editColumn: {}, // 编辑列
            oldRowMap: {},
            oldColumnMap: {}
        };
    },


    computed: {
        parentForm: function parentForm() {
            var parent = this.$parent;
            var parentName = parent.$options.componentName;
            while (parentName !== 'ElForm') {
                parent = parent.$parent;
                parentName = parent.$options.componentName;
            }
            return parent;
        },
        formRules: function formRules() {
            var prop = this.prop;
            var rules = this.rules || prop && this.parentForm.rules && this.parentForm.rules[prop] || {};
            return ruleChange(rules, 'form');
        }
    },

    methods: {
        /**
         * 插入行
         * @param index
         * @param row
         */
        insertAt: function insertAt(index) {
            var row = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // 初始化行数据
            this.$refs.grid.columns.forEach(function (item) {
                if (item.property) {
                    row[item.property] = row[item.property];
                }
            });
            // -1，追加最后，>=0 指定位置
            if (index < 0) {
                this.dataClient.push(row);
            } else {
                this.dataClient.splice(index, 0, row);
            }
            return row;
        },

        /**
         * 是否焦点编辑行或列
         * @param row
         * @param column
         * @returns {boolean}
         */
        isActive: function isActive(row) {
            var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.editColumn;

            if (external_lodash_default.a.isEmpty(row)) {
                return !external_lodash_default.a.isEmpty(this.editRow);
            }
            return !external_lodash_default.a.isEmpty(this.editRow) && row === this.editRow && column === this.editColumn;
        },

        /**
         * 设置焦点编辑行列
         * @param row
         * @param column
         */
        setActive: function setActive() {
            var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            // 不在本页，先切换页
            if (this.pagingType == 'client') {
                var _paginationOptions = this.paginationOptions,
                    currentPage = _paginationOptions.currentPage,
                    pageSize = _paginationOptions.pageSize;

                var index = external_lodash_default.a.findIndex(this.dataClient, row);
                var pageNumber = Math.floor(index / pageSize) + 1;
                if (pageNumber != currentPage) {
                    this.paginationOptions.currentPage = pageNumber;
                }
            }

            this.editRow = row;
            this.editColumn = column;
            this.oldRowMap[row] = external_lodash_default.a.clone(row);
            this.oldColumnMap[column] = column;
        },

        /**
         * 清除焦点编辑行列
         * @param row
         * @param column
         */
        clearActive: function clearActive() {
            this.editRow = {};
            this.editColumn = {};
        },
        _validateActive: function _validateActive(cb) {
            var _this = this;

            this.validator.validate(this.editRow, function (errors, fields) {
                if (!errors) {
                    cb(true, errors);
                    return;
                }
                _this.$refs['form'].validate(function (valid, error) {
                    if (valid) {
                        _this.setActive();
                        _this.$emit('clear-active', _this.editRow, _this.editColumn);
                    }
                    cb(valid, errors);
                });
            });
        },

        /**
         * 还原焦点编辑行或列数据
         */
        resetActive: function resetActive() {
            this.reset(this.editRow, this.mode == 'cell' ? this.editColumn : {});
            this.setActive(this.editRow, this.editColumn);
        },

        /**
         * 还原行或列数据
         */
        reset: function reset(row, column) {
            if (column && column.property) {
                row[column.property] = this.oldRowMap[row][column.property];
            } else {
                external_lodash_default.a.assign(row, this.oldRowMap[row]);
            }
        },
        handleHeaderClick: function handleHeaderClick(column, e) {
            this.$emit('outside-click', undefined, column, e);
        },
        handleOutsideClick: function handleOutsideClick(e) {
            this.$emit('outside-click', undefined, undefined, e);
        },

        /**
         * 验证api，供外部调用和表单调用
         * @param str 为字符串时，为表单调用
         * @param cb
         */
        validate: function validate(str, cb) {
            var _this2 = this;

            if (external_lodash_default.a.isFunction(str)) {
                this._validateActive(str);
                return;
            }

            var _paginationOptions2 = this.paginationOptions,
                currentPage = _paginationOptions2.currentPage,
                pageSize = _paginationOptions2.pageSize;

            var recordNumberStart = (currentPage - 1) * pageSize;
            var recordNumberEnd = currentPage * pageSize;
            var validateData = [];
            this.renderData.forEach(function (row) {
                validateData.push({
                    pageNumber: currentPage,
                    row: row,
                    isActivePage: true
                });
            });

            if (this.pagingType == 'client') {
                for (var i = 0; i < this.dataClient.length; i++) {
                    if (i >= recordNumberStart && i < recordNumberEnd) {
                        continue;
                    }
                    validateData.push({
                        pageNumber: Math.floor(i / pageSize) + 1,
                        row: this.dataClient[i]
                    });
                }
            }

            async_queue(validateData, function (_ref, next) {
                var pageNumber = _ref.pageNumber,
                    row = _ref.row,
                    isActivePage = _ref.isActivePage;

                _this2.validator.validate(row, function (errors, fields) {
                    if (!errors) {
                        next();
                        return;
                    }

                    if (!isActivePage) {
                        _this2.paginationOptions.currentPage = pageNumber;
                    }
                    _this2.setActive(row);
                    _this2.$nextTick(function () {
                        _this2.$refs['form'].validate();
                    });
                    cb(errors);
                });
            }, function () {
                return cb('');
            });
        },
        validateChangeActive: function validateChangeActive(row, column, cb) {
            var _this3 = this;

            if (external_lodash_default.a.isFunction(column)) {
                cb = column;
                column = undefined;
            }

            // 本列已经是编辑行，点击不做任何事
            var isActiveColumn = this.isActive(row, column);
            if (isActiveColumn) {
                return;
            }

            // 没有编辑状态，切换行
            var isActive = this.isActive();
            if (!isActive) {
                return this.setActive(row, column);
            }

            // 本列已经不是编辑行，验证保存切换行
            this.validate(function (valid, error) {
                if (valid) {
                    cb(true, error);
                    _this3.setActive(row, column);
                } else {
                    cb(false, error);
                }
            });
        },
        validateClearActive: function validateClearActive(cb) {
            var _this4 = this;

            // 存在编辑状态，则验证，通过后保存数据
            var isActive = this.isActive();
            if (!isActive) {
                return;
            }
            this.validate(function (valid, error) {
                if (valid) {
                    // 保存数据
                    cb(true, error);
                    _this4.clearActive();
                } else {
                    cb(false, error);
                }
            });
        }
    },

    created: function created() {
        this.validator = new external_async_validator_default.a(this.formRules);
        this.dispatch('ElForm', 'el.form.addField', [this]);
    }
});
// CONCATENATED MODULE: ./packages/line-table/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_line_table_src_mainvue_type_script_lang_js_ = (line_table_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/line-table/src/main.vue





/* normalize component */

var line_table_src_main_component = normalizeComponent(
  packages_line_table_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_17d3cb8a_render,
  mainvue_type_template_id_17d3cb8a_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var line_table_src_main_api; }
line_table_src_main_component.options.__file = "packages/line-table/src/main.vue"
/* harmony default export */ var line_table_src_main = (line_table_src_main_component.exports);
// CONCATENATED MODULE: ./packages/line-table/index.js


/* istanbul ignore next */
line_table_src_main.install = function (Vue) {
    Vue.component(line_table_src_main.name, line_table_src_main);
};

/* harmony default export */ var line_table = (line_table_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/line-table/src/line-column.vue?vue&type=template&id=3fbadc8e&
var line_columnvue_type_template_id_3fbadc8e_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _vm.isOriginalType
    ? _c(
        "el-table-column",
        _vm._b(
          {
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label))],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                "expand" == _vm.attrs.type
                  ? {
                      key: "default",
                      fn: function(scope) {
                        return [_vm._t("default", null, null, scope)]
                      }
                    }
                  : null
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        )
      )
    : _c(
        "el-table-column",
        _vm._b(
          {
            scopedSlots: _vm._u(
              [
                _vm.isHeaderSlot
                  ? {
                      key: "header",
                      fn: function(scope) {
                        return [
                          _vm._t(
                            "header",
                            [_vm._v(_vm._s(scope.column.label))],
                            null,
                            scope
                          )
                        ]
                      }
                    }
                  : null,
                !_vm.$slots.default
                  ? {
                      key: "default",
                      fn: function(scope) {
                        return [
                          !_vm.isEdit(scope)
                            ? _c(
                                _vm.cmpType,
                                _vm._g(
                                  _vm._b(
                                    {
                                      tag: "component",
                                      attrs: {
                                        value: _vm.formatValue(scope),
                                        "table-column-overflow": _vm.overflow,
                                        disabled: _vm.formTable.disabled
                                      },
                                      on: {
                                        input: function(val) {
                                          return _vm.handleCmpInput(val, scope)
                                        }
                                      }
                                    },
                                    "component",
                                    _vm.getCmpProps(scope),
                                    false
                                  ),
                                  _vm.getCmpEvents(scope)
                                ),
                                [
                                  _vm._l(_vm.$scopedSlots, function(val, key) {
                                    return [
                                      key != "header" && key != "edit"
                                        ? _vm._t(key, null, null, scope)
                                        : _vm._e()
                                    ]
                                  })
                                ],
                                2
                              )
                            : _c(
                                "dg-form-item",
                                _vm._b(
                                  {
                                    class: ["dg-form-column__form-item--wrap"],
                                    attrs: {
                                      prop: _vm.getFormItemProp(scope),
                                      rules: _vm.formItemRules
                                    }
                                  },
                                  "dg-form-item",
                                  _vm.formItemProps,
                                  false
                                ),
                                [
                                  _vm._t("edit", null, null, scope),
                                  _c(
                                    _vm.editType,
                                    _vm._g(
                                      _vm._b(
                                        {
                                          tag: "component",
                                          attrs: {
                                            value: _vm.getValue(scope),
                                            data: _vm.codeData,
                                            disabled: _vm.formTable.disabled
                                          },
                                          on: {
                                            input: function(val) {
                                              return _vm.handleCmpInput(
                                                val,
                                                scope
                                              )
                                            }
                                          }
                                        },
                                        "component",
                                        _vm.getCmpProps(scope, /^edit-props-/),
                                        false
                                      ),
                                      _vm.getCmpEvents(scope, /^edit-events-/)
                                    ),
                                    [
                                      _vm._l(_vm.$scopedSlots, function(
                                        val,
                                        key
                                      ) {
                                        return [
                                          key != "header" && key != "edit"
                                            ? _vm._t(key, null, null, scope)
                                            : _vm._e()
                                        ]
                                      })
                                    ],
                                    2
                                  )
                                ],
                                2
                              )
                        ]
                      }
                    }
                  : null
              ],
              null,
              true
            )
          },
          "el-table-column",
          _vm.attrs,
          false
        ),
        [_vm.$slots.default ? [_vm._t("default")] : _vm._e()],
        2
      )
}
var line_columnvue_type_template_id_3fbadc8e_staticRenderFns = []
line_columnvue_type_template_id_3fbadc8e_render._withStripped = true


// CONCATENATED MODULE: ./packages/line-table/src/line-column.vue?vue&type=template&id=3fbadc8e&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/line-table/src/line-column.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ var line_columnvue_type_script_lang_js_ = ({
    name: 'DgLineColumn',

    mixins: [emitter, table_column],

    inject: ['formTable', 'elForm'],

    components: { DgFormItem: form_item },

    props: {
        // options 默认操作列表
        prop: String
    },

    computed: {
        // 默认数据来源为表码翻译数据
        codeData: function codeData() {
            var data = [];
            external_lodash_default.a.forOwn(this.codeObj, function (val, key) {
                data.push({ label: val, value: key });
            });
            return data;
        },

        // 编辑类型
        editType: function editType() {
            var editType = getCmpType(this.$attrs['edit-type']);
            var type = getCmpType(this.$attrs['type']);
            // 修改组件类型不存在，且修改插槽不存在，则用type，type不存在就默认
            if (!editType && !this.$scopedSlots['edit']) {
                editType = type || 'default-tpl';
            }
            return editType;
        },

        // 表单项的props参数
        formItemProps: function formItemProps() {
            var props = shear_getCmpProps(form_item, this, {
                labelWidth: '0',
                prop: undefined,
                label: undefined,
                tlabel: function tlabel(props) {
                    return props['label'];
                }
            });
            return props;
        },

        // 合并获取校验规则，从form获取对应的字段的规则，和列设置的规则，优先列设置的规则
        formItemRules: function formItemRules() {
            var rules = this.rules || this.elForm.rules && this.elForm.rules[this.prop] || {};
            return rules;
        }
    },

    methods: {
        /**
         * 获取formItem的prop属性，获取table的prop，拼成'formData.0.age'或者‘0.age'的字符串
         * @param scope
         * @returns {string}
         */
        getFormItemProp: function getFormItemProp(scope) {
            var prop = this.elForm.$attrs['prop'];
            return prop + '.' + scope.$index + '.' + scope.column.property;
        },

        /**
         * 是否编辑，（1）行模式：修改行等于当前行 （2）列模式：修改列id等于当前列
         * @param row
         * @param column
         * @returns {boolean}
         */
        isEdit: function isEdit(_ref) {
            var row = _ref.row,
                column = _ref.column;

            var isRow = this.formTable.editRow === row;
            var isCell = column.id === this.formTable.editColumn.id;
            var isCellMode = this.formTable.mode == 'cell';
            return isCellMode ? isRow && isCell : isRow;
        }
    }
});
// CONCATENATED MODULE: ./packages/line-table/src/line-column.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_line_columnvue_type_script_lang_js_ = (line_columnvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/line-table/src/line-column.vue





/* normalize component */

var line_column_component = normalizeComponent(
  src_line_columnvue_type_script_lang_js_,
  line_columnvue_type_template_id_3fbadc8e_render,
  line_columnvue_type_template_id_3fbadc8e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var line_column_api; }
line_column_component.options.__file = "packages/line-table/src/line-column.vue"
/* harmony default export */ var line_column = (line_column_component.exports);
// CONCATENATED MODULE: ./packages/line-column/index.js


/* istanbul ignore next */
line_column.install = function (Vue) {
    Vue.component(line_column.name, line_column);
};

/* harmony default export */ var packages_line_column = (line_column);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/page-code/src/main.vue?vue&type=template&id=5c3c6d28&
var mainvue_type_template_id_5c3c6d28_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-page-code" }, [
    _c("div", {
      staticClass: "dg-page-code__picture",
      class: [_vm.type ? "dg-page-code__picture--" + _vm.type : ""]
    }),
    _vm.$slots.default
      ? _c("div", { staticClass: "dg-page-code__box" }, [_vm._t("default")], 2)
      : _c("div", { staticClass: "dg-page-code__box" }, [
          _c("h2", { staticClass: "dg-page-code__title" }, [
            _vm._v(_vm._s(_vm.getTitle))
          ]),
          _c("h4", { staticClass: "dg-page-code__en" }, [
            _vm._v(_vm._s(_vm.getEn))
          ]),
          _c(
            "ul",
            { staticClass: "dg-page-code__msg" },
            _vm._l(_vm.msgList, function(item, index) {
              return _c("li", { key: index }, [_vm._v(_vm._s(item))])
            }),
            0
          ),
          _vm.isAdvice
            ? _c("div", { staticClass: "dg-page-code__advice" }, [
                _c("p", { staticClass: "dg-page-code__tip" }, [
                  _vm._v("您可以选择：")
                ]),
                _c(
                  "ul",
                  { staticClass: "dg-page-code__option" },
                  _vm._l(_vm.advice, function(item, index) {
                    return _c("li", { key: index }, [
                      _c(
                        "a",
                        {
                          staticClass: "dg-page-code__link",
                          attrs: { href: item.link }
                        },
                        [_vm._v(_vm._s(item.label))]
                      )
                    ])
                  }),
                  0
                )
              ])
            : _vm._e()
        ])
  ])
}
var mainvue_type_template_id_5c3c6d28_staticRenderFns = []
mainvue_type_template_id_5c3c6d28_render._withStripped = true


// CONCATENATED MODULE: ./packages/page-code/src/main.vue?vue&type=template&id=5c3c6d28&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/page-code/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var page_code_src_mainvue_type_script_lang_js_ = ({
    name: 'DgPageCode',
    props: {
        type: {
            type: String,
            default: '404',
            validator: function validator(val) {
                return ['404', '403', '500', '501'].indexOf(val) !== -1;
            }
        },
        title: String,
        en: String,
        msgList: {
            type: Array,
            default: function _default() {
                return ['输入网址不正确', '页面已被删除'];
            }
        },
        advice: {
            type: Array,
            default: function _default() {
                return [{
                    label: '返回上一页',
                    link: '/'
                }, {
                    label: '返回首页',
                    link: '/'
                }];
            }
        },
        isAdvice: {
            type: Boolean,
            default: false
        }
    },
    computed: {
        /**
         * 根据不同的错误类型
         * 显示对应的消息数据
         *
         * @return { String | *}
         */
        getTitle: function getTitle() {
            var titleList = {
                '403': '抱歉，服务资源不可用！',
                '404': '抱歉，您要找的页面不存在！',
                '500': '抱歉，服务器内部错误！',
                '501': '抱歉，服务器不具有请求功能！'
            };
            return this.title || titleList[this.type];
        },

        /**
         * 根据不同的错误类型
         * 显示对应的英文提示
         *
         * @return { String | *}
         */
        getEn: function getEn() {
            var enList = {
                '403': 'Sorry, service resources are not available !',
                '404': 'Sorry, we cannot find the page you requested !',
                '500': 'Sorry, an internal server error !',
                '501': 'Sorry, the server does not have a request function !'
            };
            return this.en || enList[this.type];
        }
    }
});
// CONCATENATED MODULE: ./packages/page-code/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_page_code_src_mainvue_type_script_lang_js_ = (page_code_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/page-code/src/main.vue





/* normalize component */

var page_code_src_main_component = normalizeComponent(
  packages_page_code_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_5c3c6d28_render,
  mainvue_type_template_id_5c3c6d28_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var page_code_src_main_api; }
page_code_src_main_component.options.__file = "packages/page-code/src/main.vue"
/* harmony default export */ var page_code_src_main = (page_code_src_main_component.exports);
// CONCATENATED MODULE: ./packages/page-code/index.js


/* istanbul ignore next */
page_code_src_main.install = function (Vue) {
  Vue.component(page_code_src_main.name, page_code_src_main);
};

/* harmony default export */ var page_code = (page_code_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/main.vue?vue&type=template&id=286cc52a&
var mainvue_type_template_id_286cc52a_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "el-switch dg-switch",
      class: { "is-disabled": _vm.switchDisabled, "is-checked": _vm.checked },
      attrs: {
        role: "switch",
        "aria-checked": _vm.checked,
        "aria-disabled": _vm.switchDisabled
      },
      on: {
        click: function($event) {
          $event.preventDefault()
          return _vm.switchValue($event)
        }
      }
    },
    [
      _c("input", {
        ref: "input",
        staticClass: "el-switch__input",
        attrs: {
          type: "checkbox",
          id: _vm.id,
          name: _vm.name,
          "true-value": _vm.activeValue,
          "false-value": _vm.inactiveValue,
          disabled: _vm.switchDisabled
        },
        on: {
          change: _vm.handleChange,
          keydown: function($event) {
            if (
              !$event.type.indexOf("key") &&
              _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
            ) {
              return null
            }
            return _vm.switchValue($event)
          }
        }
      }),
      _vm.inactiveText
        ? _c(
            "span",
            {
              class: [
                "el-switch__label",
                "el-switch__label--left",
                !_vm.checked ? "is-active" : ""
              ]
            },
            [
              !_vm.inactiveIconClass && _vm.inactiveText
                ? _c("span", { attrs: { "aria-hidden": _vm.checked } }, [
                    _vm._v(_vm._s(_vm.inactiveText))
                  ])
                : _vm._e()
            ]
          )
        : _vm._e(),
      _c(
        "span",
        {
          ref: "core",
          staticClass: "el-switch__core",
          style: { width: _vm.coreWidth + "px" }
        },
        [
          _vm.activeIconClass || _vm.activeIconText
            ? _c(
                "span",
                {
                  class: [
                    "dg-switch__active--icon",
                    _vm.activeIconClass,
                    _vm.checked ? "is-active" : ""
                  ]
                },
                [_vm._v(_vm._s(_vm.activeIconText))]
              )
            : _vm._e(),
          _vm.inactiveIconClass || _vm.inactiveIconText
            ? _c(
                "span",
                {
                  class: [
                    "dg-switch__inactive--icon",
                    _vm.inactiveIconClass,
                    !_vm.checked ? "is-active" : ""
                  ]
                },
                [_vm._v(_vm._s(_vm.inactiveIconText))]
              )
            : _vm._e()
        ]
      ),
      _vm.activeText
        ? _c(
            "span",
            {
              class: [
                "el-switch__label",
                "el-switch__label--right",
                _vm.checked ? "is-active" : ""
              ]
            },
            [
              !_vm.activeIconClass && _vm.activeText
                ? _c("span", { attrs: { "aria-hidden": !_vm.checked } }, [
                    _vm._v(_vm._s(_vm.activeText))
                  ])
                : _vm._e()
            ]
          )
        : _vm._e()
    ]
  )
}
var mainvue_type_template_id_286cc52a_staticRenderFns = []
mainvue_type_template_id_286cc52a_render._withStripped = true


// CONCATENATED MODULE: ./packages/switch/src/main.vue?vue&type=template&id=286cc52a&

// CONCATENATED MODULE: ./src/mixins/focus.js
/* harmony default export */ var mixins_focus = (function (ref) {
  return {
    methods: {
      focus: function focus() {
        this.$refs[ref].focus();
      }
    }
  };
});;
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/switch/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var switch_src_mainvue_type_script_lang_js_ = ({
    name: 'DgSwitch',
    mixins: [mixins_focus('input'), migrating, emitter],
    inject: {
        elForm: {
            default: ''
        }
    },
    props: {
        value: {
            type: [Boolean, String, Number],
            default: false
        },
        disabled: {
            type: Boolean,
            default: false
        },
        width: {
            type: Number,
            default: 40
        },
        activeIconClass: {
            type: String,
            default: ''
        },
        inactiveIconClass: {
            type: String,
            default: ''
        },
        activeText: String,
        inactiveText: String,
        activeColor: {
            type: String,
            default: ''
        },
        inactiveColor: {
            type: String,
            default: ''
        },
        activeValue: {
            type: [Boolean, String, Number],
            default: true
        },
        inactiveValue: {
            type: [Boolean, String, Number],
            default: false
        },
        name: {
            type: String,
            default: ''
        },
        validateEvent: {
            type: Boolean,
            default: true
        },
        id: String,
        // add author: tangdm descript: for the icon-text
        activeIconText: String,
        // add author: tangdm descript: for the icon-text
        inactiveIconText: String
    },
    data: function data() {
        return {
            coreWidth: this.width
        };
    },
    created: function created() {
        if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {
            this.$emit('input', this.inactiveValue);
        }
    },

    computed: {
        checked: function checked() {
            return this.value === this.activeValue;
        },
        switchDisabled: function switchDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
        }
    },
    watch: {
        checked: function checked() {
            this.$refs.input.checked = this.checked;
            if (this.activeColor || this.inactiveColor) {
                this.setBackgroundColor();
            }
            if (this.validateEvent) {
                this.dispatch('ElFormItem', 'el.form.change', [this.value]);
            }
        }
    },
    methods: {
        handleChange: function handleChange(event) {
            var _this = this;

            var val = this.checked ? this.inactiveValue : this.activeValue;
            this.$emit('input', val);
            this.$emit('change', val);
            this.$nextTick(function () {
                // set input's checked property
                // in case parent refuses to change component's value
                _this.$refs.input.checked = _this.checked;
            });
        },
        setBackgroundColor: function setBackgroundColor() {
            var newColor = this.checked ? this.activeColor : this.inactiveColor;
            this.$refs.core.style.borderColor = newColor;
            this.$refs.core.style.backgroundColor = newColor;
        },
        switchValue: function switchValue() {
            !this.switchDisabled && this.handleChange();
        },
        getMigratingConfig: function getMigratingConfig() {
            return {
                props: {
                    'on-color': 'on-color is renamed to active-color.',
                    'off-color': 'off-color is renamed to inactive-color.',
                    'on-text': 'on-text is renamed to active-text.',
                    'off-text': 'off-text is renamed to inactive-text.',
                    'on-value': 'on-value is renamed to active-value.',
                    'off-value': 'off-value is renamed to inactive-value.',
                    'on-icon-class': 'on-icon-class is renamed to active-icon-class.',
                    'off-icon-class': 'off-icon-class is renamed to inactive-icon-class.'
                }
            };
        }
    },
    mounted: function mounted() {
        /* istanbul ignore if */
        this.coreWidth = this.width || 40;
        if (this.activeColor || this.inactiveColor) {
            this.setBackgroundColor();
        }
        this.$refs.input.checked = this.checked;
    }
});
// CONCATENATED MODULE: ./packages/switch/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_switch_src_mainvue_type_script_lang_js_ = (switch_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/switch/src/main.vue





/* normalize component */

var switch_src_main_component = normalizeComponent(
  packages_switch_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_286cc52a_render,
  mainvue_type_template_id_286cc52a_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var switch_src_main_api; }
switch_src_main_component.options.__file = "packages/switch/src/main.vue"
/* harmony default export */ var switch_src_main = (switch_src_main_component.exports);
// CONCATENATED MODULE: ./packages/switch/index.js


/* istanbul ignore next */
switch_src_main.install = function (Vue) {
  Vue.component(switch_src_main.name, switch_src_main);
};

/* harmony default export */ var packages_switch = (switch_src_main);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/badge/src/main.vue?vue&type=script&lang=js&


/* harmony default export */ var badge_src_mainvue_type_script_lang_js_ = ({
    name: 'DgBadge',
    mixins: [external_element_ui_["Badge"]]
});
// CONCATENATED MODULE: ./packages/badge/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_badge_src_mainvue_type_script_lang_js_ = (badge_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/badge/src/main.vue
var badge_src_main_render, badge_src_main_staticRenderFns




/* normalize component */

var badge_src_main_component = normalizeComponent(
  packages_badge_src_mainvue_type_script_lang_js_,
  badge_src_main_render,
  badge_src_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var badge_src_main_api; }
badge_src_main_component.options.__file = "packages/badge/src/main.vue"
/* harmony default export */ var badge_src_main = (badge_src_main_component.exports);
// CONCATENATED MODULE: ./packages/badge/index.js


/* istanbul ignore next */
badge_src_main.install = function (Vue) {
  Vue.component(badge_src_main.name, badge_src_main);
};

/* harmony default export */ var badge = (badge_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/card/src/main.vue?vue&type=template&id=59a4a40f&
var mainvue_type_template_id_59a4a40f_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "el-card dg-card", class: _vm.cardStyle }, [
    _vm.$slots.header || _vm.header
      ? _c(
          "div",
          { staticClass: "el-card__header" },
          [
            _vm._t("header", [_c("span", [_vm._v(_vm._s(_vm.header))])]),
            _vm.isMore && !_vm.$slots.header
              ? _c(
                  "el-button",
                  {
                    staticClass: "dg-card__more",
                    attrs: { type: "text" },
                    on: { click: _vm.handleClick }
                  },
                  [_vm._v(_vm._s(_vm.moreText))]
                )
              : _vm._e()
          ],
          2
        )
      : _vm._e(),
    _c(
      "div",
      { staticClass: "el-card__body", style: _vm.bodyStyle },
      [_vm._t("default")],
      2
    )
  ])
}
var mainvue_type_template_id_59a4a40f_staticRenderFns = []
mainvue_type_template_id_59a4a40f_render._withStripped = true


// CONCATENATED MODULE: ./packages/card/src/main.vue?vue&type=template&id=59a4a40f&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/card/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var card_src_mainvue_type_script_lang_js_ = ({
    name: 'DgCard',
    props: {
        header: {},
        isMore: {
            type: Boolean,
            default: false
        },
        moreText: {
            type: String,
            default: 'More'
        },
        // 是否显示阴影
        shadow: {
            type: String
        },
        // 是否显示边框
        noneBorder: {
            type: Boolean,
            default: false
        },
        // 是否显示底边
        noneBase: {
            type: Boolean,
            default: false
        },
        bodyStyle: {}
    },
    computed: {
        cardStyle: function cardStyle() {
            return [this.shadow ? 'is-' + this.shadow + '-shadow' : 'is-always-shadow', this.noneBorder ? '' : 'is-border', this.noneBase ? '' : 'is-base'].join(' ');
        }
    },
    methods: {
        handleClick: function handleClick() {
            this.$emit('click');
        }
    }
});
// CONCATENATED MODULE: ./packages/card/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_card_src_mainvue_type_script_lang_js_ = (card_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/card/src/main.vue





/* normalize component */

var card_src_main_component = normalizeComponent(
  packages_card_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_59a4a40f_render,
  mainvue_type_template_id_59a4a40f_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var card_src_main_api; }
card_src_main_component.options.__file = "packages/card/src/main.vue"
/* harmony default export */ var card_src_main = (card_src_main_component.exports);
// CONCATENATED MODULE: ./packages/card/index.js


/* istanbul ignore next */
card_src_main.install = function (Vue) {
    Vue.component(card_src_main.name, card_src_main);
};

/* harmony default export */ var card = (card_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/main.vue?vue&type=template&id=6d9756be&
var mainvue_type_template_id_6d9756be_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "el-calendar dg-calendar" }, [
    _c(
      "div",
      { staticClass: "el-calendar__header" },
      [
        !_vm.$scopedSlots.header
          ? [
              _c("div", { staticClass: "el-calendar__title" }, [
                _vm._v(
                  "\n                " + _vm._s(_vm.i18nDate) + "\n            "
                )
              ]),
              _vm.validatedRange.length === 0
                ? _c(
                    "div",
                    { staticClass: "el-calendar__button-group" },
                    [
                      _c(
                        "el-button-group",
                        [
                          _c(
                            "el-button",
                            {
                              attrs: { type: "plain", size: "mini" },
                              on: {
                                click: function($event) {
                                  return _vm.selectDate("prev-month")
                                }
                              }
                            },
                            [
                              _vm._v(
                                "\n                        " +
                                  _vm._s(_vm.t("el.datepicker.prevMonth")) +
                                  "\n                    "
                              )
                            ]
                          ),
                          _c(
                            "el-button",
                            {
                              attrs: { type: "plain", size: "mini" },
                              on: {
                                click: function($event) {
                                  return _vm.selectDate("today")
                                }
                              }
                            },
                            [
                              _vm._v(
                                "\n                        " +
                                  _vm._s(_vm.t("el.datepicker.today")) +
                                  "\n                    "
                              )
                            ]
                          ),
                          _c(
                            "el-button",
                            {
                              attrs: { type: "plain", size: "mini" },
                              on: {
                                click: function($event) {
                                  return _vm.selectDate("next-month")
                                }
                              }
                            },
                            [
                              _vm._v(
                                "\n                        " +
                                  _vm._s(_vm.t("el.datepicker.nextMonth")) +
                                  "\n                    "
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ],
                    1
                  )
                : _vm._e()
            ]
          : [_vm._t("header")]
      ],
      2
    ),
    _vm.validatedRange.length === 0
      ? _c(
          "div",
          { key: "no-range", staticClass: "el-calendar__body" },
          [
            _c("date-table", {
              attrs: {
                date: _vm.date,
                "selected-day": _vm.realSelectedDay,
                "first-day-of-week": _vm.realFirstDayOfWeek
              },
              on: { pick: _vm.pickDay }
            })
          ],
          1
        )
      : _c(
          "div",
          { key: "has-range", staticClass: "el-calendar__body" },
          _vm._l(_vm.validatedRange, function(range, index) {
            return _c("date-table", {
              key: index,
              attrs: {
                date: range[0],
                "selected-day": _vm.realSelectedDay,
                range: range,
                "hide-header": index !== 0,
                "first-day-of-week": _vm.realFirstDayOfWeek
              },
              on: { pick: _vm.pickDay }
            })
          }),
          1
        ),
    _c("div", { staticClass: "el-calendar__footer" }, [_vm._t("footer")], 2)
  ])
}
var mainvue_type_template_id_6d9756be_staticRenderFns = []
mainvue_type_template_id_6d9756be_render._withStripped = true


// CONCATENATED MODULE: ./packages/calendar/src/main.vue?vue&type=template&id=6d9756be&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/date-table.vue?vue&type=script&lang=js&




/* harmony default export */ var date_tablevue_type_script_lang_js_ = ({
    props: {
        selectedDay: String, // formated date yyyy-MM-dd
        range: {
            type: Array,
            validator: function validator(val) {
                if (!(val && val.length)) return true;
                var start = val[0],
                    end = val[1];

                return validateRangeInOneMonth(start, end);
            }
        },
        date: Date,
        hideHeader: Boolean,
        firstDayOfWeek: Number
    },

    inject: ['elCalendar'],

    data: function data() {
        return {
            WEEK_DAYS: date_util_getI18nSettings().dayNames
        };
    },


    methods: {
        toNestedArr: function toNestedArr(days) {
            return date_util_range(days.length / 7).map(function (_, index) {
                var start = index * 7;
                return days.slice(start, start + 7);
            });
        },
        getFormateDate: function getFormateDate(day, type) {
            if (!day || ['prev', 'current', 'next'].indexOf(type) === -1) {
                throw new Error('invalid day or type');
            }
            var prefix = this.curMonthDatePrefix;
            if (type === 'prev') {
                prefix = this.prevMonthDatePrefix;
            } else if (type === 'next') {
                prefix = this.nextMonthDatePrefix;
            }
            day = ('00' + day).slice(-2);
            return prefix + '-' + day;
        },
        getCellClass: function getCellClass(_ref) {
            var text = _ref.text,
                type = _ref.type;

            var classes = [type];
            if (type === 'current') {
                var date = this.getFormateDate(text, type);
                if (date === this.selectedDay) {
                    classes.push('is-selected');
                }
                if (date === this.formatedToday) {
                    classes.push('is-today');
                }
            }
            return classes;
        },
        pickDay: function pickDay(_ref2) {
            var text = _ref2.text,
                type = _ref2.type;

            var date = this.getFormateDate(text, type);
            this.$emit('pick', date);
        },
        cellRenderProxy: function cellRenderProxy(_ref3) {
            var text = _ref3.text,
                type = _ref3.type;
            var h = this.$createElement;

            var render = this.elCalendar.$scopedSlots.dateCell;
            if (!render) return h('span', [text]);

            var day = this.getFormateDate(text, type);
            var date = new Date(day);
            var data = {
                isSelected: this.selectedDay === day,
                type: type + '-month',
                day: day
            };
            return render({ date: date, data: data });
        }
    },

    computed: {
        prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, 'yyyy-MM');
        },
        curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, 'yyyy-MM');
        },
        nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, 'yyyy-MM');
        },
        formatedToday: function formatedToday() {
            return this.elCalendar.formatedToday;
        },
        isInRange: function isInRange() {
            return this.range && this.range.length;
        },
        rows: function rows() {
            var days = [];
            // if range exists, should render days in range.
            if (this.isInRange) {
                var _range = this.range,
                    start = _range[0],
                    end = _range[1];

                var currentMonthRange = date_util_range(end.getDate() - start.getDate() + 1).map(function (_, index) {
                    return {
                        text: start.getDate() + index,
                        type: 'current'
                    };
                });
                var remaining = currentMonthRange.length % 7;
                remaining = remaining === 0 ? 0 : 7 - remaining;
                var nextMonthRange = date_util_range(remaining).map(function (_, index) {
                    return {
                        text: index + 1,
                        type: 'next'
                    };
                });
                days = currentMonthRange.concat(nextMonthRange);
            } else {
                var date = this.date;
                var firstDay = getFirstDayOfMonth(date);
                firstDay = firstDay === 0 ? 7 : firstDay;
                var firstDayOfWeek = typeof this.firstDayOfWeek === 'number' ? this.firstDayOfWeek : 1;
                var prevMonthDays = getPrevMonthLastDays(date, firstDay - firstDayOfWeek).map(function (day) {
                    return {
                        text: day,
                        type: 'prev'
                    };
                });
                var currentMonthDays = date_util_getMonthDays(date).map(function (day) {
                    return {
                        text: day,
                        type: 'current'
                    };
                });
                days = [].concat(prevMonthDays, currentMonthDays);
                var nextMonthDays = date_util_range(42 - days.length).map(function (_, index) {
                    return {
                        text: index + 1,
                        type: 'next'
                    };
                });
                days = days.concat(nextMonthDays);
            }
            return this.toNestedArr(days);
        },
        weekDays: function weekDays() {
            var start = this.firstDayOfWeek;
            var WEEK_DAYS = this.WEEK_DAYS;


            if (typeof start !== 'number' || start === 0) {
                return WEEK_DAYS.slice();
            } else {
                return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start));
            }
        }
    },

    render: function render() {
        var _this = this;

        var h = arguments[0];

        var thead = this.hideHeader ? null : h('thead', [this.weekDays.map(function (day) {
            return h(
                'th',
                { key: day },
                [day]
            );
        })]);
        return h(
            'table',
            {
                'class': {
                    'el-calendar-table': true,
                    'is-range': this.isInRange
                },
                attrs: { cellspacing: '0',
                    cellpadding: '0'
                }
            },
            [thead, h('tbody', [this.rows.map(function (row, index) {
                return h(
                    'tr',
                    {
                        'class': {
                            'el-calendar-table__row': true,
                            'el-calendar-table__row--hide-border': index === 0 && _this.hideHeader
                        },
                        key: index
                    },
                    [row.map(function (cell, key) {
                        return h(
                            'td',
                            { key: key, 'class': _this.getCellClass(cell), on: {
                                    'click': _this.pickDay.bind(_this, cell)
                                }
                            },
                            [h(
                                'div',
                                { 'class': 'el-calendar-day' },
                                [_this.cellRenderProxy(cell)]
                            )]
                        );
                    })]
                );
            })])]
        );
    }
});
// CONCATENATED MODULE: ./packages/calendar/src/date-table.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_date_tablevue_type_script_lang_js_ = (date_tablevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/calendar/src/date-table.vue
var date_table_render, date_table_staticRenderFns




/* normalize component */

var date_table_component = normalizeComponent(
  src_date_tablevue_type_script_lang_js_,
  date_table_render,
  date_table_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var date_table_api; }
date_table_component.options.__file = "packages/calendar/src/date-table.vue"
/* harmony default export */ var date_table = (date_table_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/calendar/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//







var validTypes = ['prev-month', 'today', 'next-month'];
var weekDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var oneDay = 86400000;

/* harmony default export */ var calendar_src_mainvue_type_script_lang_js_ = ({
    name: 'DgCalendar',

    mixins: [mixins_locale],

    components: {
        DateTable: date_table,
        ElButton: external_element_ui_["ElButton"],
        ElButtonGroup: external_element_ui_["ElButtonGroup"]
    },

    props: {
        value: [Date, String, Number],
        range: {
            type: Array,
            validator: function validator(range) {
                if (Array.isArray(range)) {
                    return range.length === 2 && range.every(function (item) {
                        return typeof item === 'string' || typeof item === 'number' || item instanceof Date;
                    });
                } else {
                    return true;
                }
            }
        },
        firstDayOfWeek: {
            type: Number,
            default: 1
        }
    },

    provide: function provide() {
        return {
            elCalendar: this
        };
    },


    methods: {
        pickDay: function pickDay(day) {
            this.realSelectedDay = day;
        },
        selectDate: function selectDate(type) {
            if (validTypes.indexOf(type) === -1) {
                throw new Error('invalid type ' + type);
            }
            var day = '';
            if (type === 'prev-month') {
                day = this.prevMonthDatePrefix + '-01';
            } else if (type === 'next-month') {
                day = this.nextMonthDatePrefix + '-01';
            } else {
                day = this.formatedToday;
            }

            if (day === this.formatedDate) return;
            this.pickDay(day);
        },
        toDate: function toDate(val) {
            if (!val) {
                throw new Error('invalid val');
            }
            return val instanceof Date ? val : new Date(val);
        },
        rangeValidator: function rangeValidator(date, isStart) {
            var firstDayOfWeek = this.realFirstDayOfWeek;
            var expected = isStart ? firstDayOfWeek : firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
            var message = (isStart ? 'start' : 'end') + ' of range should be ' + weekDays[expected] + '.';
            if (date.getDay() !== expected) {
                console.warn('[ElementCalendar]', message, 'Invalid range will be ignored.');
                return false;
            }
            return true;
        }
    },

    computed: {
        prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, 'yyyy-MM');
        },
        curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, 'yyyy-MM');
        },
        nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, 'yyyy-MM');
        },
        formatedDate: function formatedDate() {
            return date_default.a.format(this.date, 'yyyy-MM-dd');
        },
        i18nDate: function i18nDate() {
            var year = this.date.getFullYear();
            var month = this.date.getMonth() + 1;
            return year + ' ' + this.t('el.datepicker.year') + ' ' + this.t('el.datepicker.month' + month);
        },
        formatedToday: function formatedToday() {
            return date_default.a.format(this.now, 'yyyy-MM-dd');
        },


        realSelectedDay: {
            get: function get() {
                if (!this.value) return this.selectedDay;
                return this.formatedDate;
            },
            set: function set(val) {
                this.selectedDay = val;
                var date = new Date(val);
                this.$emit('input', date);
            }
        },

        date: function date() {
            if (!this.value) {
                if (this.realSelectedDay) {
                    var d = this.selectedDay.split('-');
                    return new Date(d[0], d[1] - 1, d[2]);
                } else if (this.validatedRange.length) {
                    return this.validatedRange[0][0];
                }
                return this.now;
            } else {
                return this.toDate(this.value);
            }
        },


        // if range is valid, we get a two-digit array
        validatedRange: function validatedRange() {
            var _this = this;

            var range = this.range;
            if (!range) return [];
            range = range.reduce(function (prev, val, index) {
                var date = _this.toDate(val);
                if (_this.rangeValidator(date, index === 0)) {
                    prev = prev.concat(date);
                }
                return prev;
            }, []);
            if (range.length === 2) {
                var _range = range,
                    start = _range[0],
                    end = _range[1];

                if (start > end) {
                    console.warn('[ElementCalendar]end time should be greater than start time');
                    return [];
                }
                // start time and end time in one month
                if (validateRangeInOneMonth(start, end)) {
                    return [[start, end]];
                }
                var data = [];
                var startDay = new Date(start.getFullYear(), start.getMonth() + 1, 1);
                var lastDay = this.toDate(startDay.getTime() - oneDay);
                if (!validateRangeInOneMonth(startDay, end)) {
                    console.warn('[ElementCalendar]start time and end time interval must not exceed two months');
                    return [];
                }
                // 第一个月的时间范围
                data.push([start, lastDay]);
                // 下一月的时间范围，需要计算一下该月的第一个周起始日
                var firstDayOfWeek = this.realFirstDayOfWeek;
                var nextMontFirstDay = startDay.getDay();
                var interval = 0;
                if (nextMontFirstDay !== firstDayOfWeek) {
                    if (firstDayOfWeek === 0) {
                        interval = 7 - nextMontFirstDay;
                    } else {
                        interval = firstDayOfWeek - nextMontFirstDay;
                        interval = interval > 0 ? interval : 7 + interval;
                    }
                }
                startDay = this.toDate(startDay.getTime() + interval * oneDay);
                if (startDay.getDate() < end.getDate()) {
                    data.push([startDay, end]);
                }
                return data;
            }
            return [];
        },
        realFirstDayOfWeek: function realFirstDayOfWeek() {
            if (this.firstDayOfWeek < 1 || this.firstDayOfWeek > 6) {
                return 0;
            }
            return Math.floor(this.firstDayOfWeek);
        }
    },

    data: function data() {
        return {
            selectedDay: '',
            now: new Date()
        };
    }
});
// CONCATENATED MODULE: ./packages/calendar/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_calendar_src_mainvue_type_script_lang_js_ = (calendar_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/calendar/src/main.vue





/* normalize component */

var calendar_src_main_component = normalizeComponent(
  packages_calendar_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_6d9756be_render,
  mainvue_type_template_id_6d9756be_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var calendar_src_main_api; }
calendar_src_main_component.options.__file = "packages/calendar/src/main.vue"
/* harmony default export */ var calendar_src_main = (calendar_src_main_component.exports);
// CONCATENATED MODULE: ./packages/calendar/index.js


/* istanbul ignore next */
calendar_src_main.install = function (Vue) {
  Vue.component(calendar_src_main.name, calendar_src_main);
};

/* harmony default export */ var calendar = (calendar_src_main);
// CONCATENATED MODULE: ./packages/row/src/row.js
/* harmony default export */ var src_row = ({
    name: 'DgRow',

    componentName: 'DgRow',

    props: {
        tag: {
            type: String,
            default: 'div'
        },
        // update by author: tangdm
        gutter: [Number, String],
        type: String,
        justify: {
            type: String,
            default: 'start'
        },
        align: {
            type: String,
            default: 'top'
        },
        // 斑马间距
        zebra: [Number, String],
        // 高度值
        height: [Number, String],
        // 背景色
        background: String,
        // 左右间距
        space: [Number, String]
    },

    computed: {
        style: function style() {
            var ret = {};

            // 去除字符串两端的空格
            function trim(text) {
                return text == null ? '' : (text + '').replace(/^\s*((?:[\S\s]*\S)?)\s*$/, '$1');
            }

            // 提取字符串数值及单位
            function splitGutterStyle(item) {
                var _number = item.match(/^[.0-9]*/gi);
                var _unit = item.match(/[a-z|A-Z]+$/gi);
                return '-' + _number / 2 + (_unit ? _unit : 'px');
            }

            // 提取斑马纹 Zebra 的值
            function splitZebraStyle(item) {
                var _number = item.match(/^[.0-9]*/gi);
                var _unit = item.match(/[a-z|A-Z]+$/gi);
                return _number + (_unit ? _unit : 'px');
            }

            // 检测是否存在该属性
            if (this.gutter) {
                // 检测 `gutter` 的类型
                if (typeof this.gutter === 'string') {
                    // 过滤空格及拆分数组
                    var trimArray = trim(this.gutter).split(' ');

                    // 位数判断
                    if (trimArray.length === 2) {
                        ret.marginLeft = splitGutterStyle(trimArray[0]);
                        ret.marginRight = splitGutterStyle(trimArray[1]);
                    } else {
                        ret.marginLeft = splitGutterStyle(trimArray[0]);
                        ret.marginRight = ret.marginLeft;
                    }
                } else {
                    ret.marginLeft = '-' + this.gutter / 2 + 'px';
                    ret.marginRight = ret.marginLeft;
                }
            }

            // 检测是否存在该属性
            if (this.zebra) {
                // 检测 `gutter` 的类型
                if (typeof this.zebra === 'string') {
                    // 过滤空格及拆分数组
                    var trimGutter = trim(this.zebra);
                    var _trimArray = trimGutter.split(' ');

                    // 位数判断
                    if (_trimArray.length === 2) {
                        ret.paddingTop = splitZebraStyle(_trimArray[0]);
                        ret.paddingBottom = splitZebraStyle(_trimArray[1]);
                    } else {
                        ret.paddingTop = splitZebraStyle(_trimArray[0]);
                        ret.paddingBottom = ret.paddingTop;
                    }
                } else {
                    ret.paddingTop = this.zebra / 2 + 'px';
                    ret.paddingBottom = ret.paddingTop;
                }
            }

            // 检测是否存在该属性
            if (this.space) {
                // 检测 `gutter` 的类型
                if (typeof this.space === 'string') {
                    // 过滤空格及拆分数组
                    var trimSpace = trim(this.space);
                    var _trimArray2 = trimSpace.split(' ');

                    // 位数判断
                    if (_trimArray2.length === 2) {
                        ret.paddingLeft = splitZebraStyle(_trimArray2[0]);
                        ret.paddingRight = splitZebraStyle(_trimArray2[1]);
                    } else {
                        ret.paddingLeft = splitZebraStyle(_trimArray2[0]);
                        ret.paddingRight = ret.paddingLeft;
                    }
                } else {
                    ret.paddingLeft = this.space / 2 + 'px';
                    ret.paddingRight = ret.paddingLeft;
                }
            }

            // add author: tangdm descript: add some model for extended the mode
            if (this.height) {
                ret.height = typeof this.height === 'string' ? this.height : this.height + 'px';
            }

            // add author: tangdm descript: add some model for extended the mode
            if (this.background) {
                ret.background = this.background;
            }

            return ret;
        }
    },

    render: function render(h) {
        return h(this.tag, {
            class: ['el-row', this.justify !== 'start' ? 'is-justify-' + this.justify : '', this.align !== 'top' ? 'is-align-' + this.align : '', { 'el-row--flex': this.type === 'flex' }],
            style: this.style
        }, this.$slots.default);
    }
});
// CONCATENATED MODULE: ./packages/row/index.js


/* istanbul ignore next */
src_row.install = function (Vue) {
  Vue.component(src_row.name, src_row);
};

/* harmony default export */ var packages_row = (src_row);
// CONCATENATED MODULE: ./packages/col/src/col.js
var col_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* harmony default export */ var col = ({
    name: 'DgCol',

    props: {
        span: {
            type: Number,
            default: 24
        },
        tag: {
            type: String,
            default: 'div'
        },
        offset: Number,
        pull: Number,
        push: Number,
        xs: [Number, Object],
        sm: [Number, Object],
        md: [Number, Object],
        lg: [Number, Object],
        xl: [Number, Object],
        // add author: tangdm
        // 宽度值
        width: [Number, String],
        // 高度值
        height: [Number, String],
        // 背景值
        background: String,
        // 空间所占的区域
        flex: Number
    },

    computed: {
        gutter: function gutter() {
            var parent = this.$parent;

            // update author: tangdm [code] parent && parent.$options.componentName !== 'ElRow'
            while (parent && parent.$options.componentName !== 'DgRow') {
                parent = parent.$parent;
            }
            return parent ? parent.gutter : 0;
        }
    },
    render: function render(h) {
        var _this = this;

        var classList = [];
        var style = {};

        // 去除字符串两端的空格
        function trim(text) {
            return text == null ? '' : (text + '').replace(/^\s*((?:[\S\s]*\S)?)\s*$/, '$1');
        }

        // 提取字符串数值及单位
        function splitGutterStyle(item) {
            var _number = item.match(/^[.0-9]*/gi);
            var _unit = item.match(/[a-z|A-Z]+$/gi);
            return _number / 2 + (_unit ? _unit : 'px');
        }

        // update author: tangdm
        if (this.gutter) {
            // style.paddingLeft = this.gutter / 2 + 'px';
            // style.paddingRight = style.paddingLeft;

            // 检测 `gutter` 的类型
            if (typeof this.gutter === 'string') {
                // 过滤空格及拆分数组
                var trimArray = trim(this.gutter).split(' ');

                // 位数判断
                if (trimArray.length === 2) {
                    style.paddingLeft = splitGutterStyle(trimArray[0]);
                    style.paddingRigth = splitGutterStyle(trimArray[1]);
                } else {
                    style.paddingLeft = splitGutterStyle(trimArray[0]);
                    style.paddingRight = style.paddingLeft;
                }
            } else {
                style.paddingLeft = this.gutter / 2 + 'px';
                style.paddingRight = style.paddingLeft;
            }
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.width) {
            style.width = typeof this.width === 'string' ? this.width : this.width + 'px';
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.height) {
            style.height = typeof this.height === 'string' ? this.height : this.height + 'px';
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.background) {
            style.background = this.background;
        }

        // add author: tangdm descript: add some model for extended the mode
        if (this.flex) {
            style.flex = this.flex;
        }

        ['span', 'offset', 'pull', 'push'].forEach(function (prop) {
            if (_this[prop] || _this[prop] === 0) {
                classList.push(prop !== 'span' ? 'el-col-' + prop + '-' + _this[prop] : 'el-col-' + _this[prop]);
            }
        });

        ['xs', 'sm', 'md', 'lg', 'xl'].forEach(function (size) {
            if (typeof _this[size] === 'number') {
                classList.push('el-col-' + size + '-' + _this[size]);
            } else if (col_typeof(_this[size]) === 'object') {
                var props = _this[size];
                Object.keys(props).forEach(function (prop) {
                    classList.push(prop !== 'span' ? 'el-col-' + size + '-' + prop + '-' + props[prop] : 'el-col-' + size + '-' + props[prop]);
                });
            }
        });

        return h(this.tag, {
            class: ['el-col', classList],
            style: style
        }, this.$slots.default);
    }
});
// CONCATENATED MODULE: ./packages/col/index.js


/* istanbul ignore next */
col.install = function (Vue) {
  Vue.component(col.name, col);
};

/* harmony default export */ var packages_col = (col);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/main.vue?vue&type=template&id=3a5dc555&
var mainvue_type_template_id_3a5dc555_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-group-select" },
    [
      _c(
        "l-select",
        _vm._b(
          {
            ref: "select",
            attrs: {
              "popper-class": "group-select-popper",
              "scrollbar-class": _vm.scrollbarCls,
              "translate-data": _vm.translateData
            },
            on: {
              "visible-change": _vm.handleSelectFilerClose,
              "remove-tag": _vm.handleRemoveTag,
              clear: _vm.clearDeaulf
            },
            model: {
              value: _vm.val,
              callback: function($$v) {
                _vm.val = $$v
              },
              expression: "val"
            }
          },
          "l-select",
          _vm.selectProp,
          false
        ),
        [
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.isEditing,
                    expression: "isEditing"
                  }
                ]
              },
              [
                _c("div", { staticClass: "group-setting" }, [
                  _c("div", { staticClass: "header" }, [
                    _c("span", { staticClass: "title-wrap" }, [
                      _vm._v("分组管理")
                    ]),
                    _c("span", { staticClass: "desc-wrap" }, [
                      _vm._v("注：可拖拽进行分组排序")
                    ]),
                    _c(
                      "span",
                      { staticClass: "button-wrap" },
                      [
                        _c(
                          "el-button",
                          {
                            attrs: { type: "text" },
                            on: {
                              click: function($event) {
                                _vm.isEditing = false
                              }
                            }
                          },
                          [_vm._v("返回")]
                        )
                      ],
                      1
                    )
                  ]),
                  _c(
                    "div",
                    { staticClass: "content" },
                    [
                      _c(
                        "el-form",
                        [
                          _c(
                            "el-form-item",
                            {
                              staticStyle: { "margin-bottom": "0" },
                              attrs: { label: "" }
                            },
                            [
                              _c(
                                "transfer-tree",
                                _vm._b(
                                  {
                                    ref: "editTree",
                                    attrs: {
                                      data: _vm.data,
                                      "group-data": _vm.innerGroupData,
                                      titles: ["全部", "分组"],
                                      "label-name": _vm.alias.label,
                                      "value-name": _vm.alias.value,
                                      filterable: _vm.transferFilterable,
                                      clearable: _vm.transferClearable,
                                      "all-tree-props": _vm.treeBind
                                    },
                                    on: {
                                      "group-tree-change":
                                        _vm.handleGroupTreeChange,
                                      "delete-group": _vm.handleDeleteGroup,
                                      "save-group": _vm.handleSaveGroup,
                                      "after-drag": _vm.handleAfterGrag
                                    }
                                  },
                                  "transfer-tree",
                                  _vm.groupTreeBind,
                                  false
                                )
                              )
                            ],
                            1
                          )
                        ],
                        1
                      )
                    ],
                    1
                  )
                ])
              ]
            ),
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.isEditing,
                    expression: "!isEditing"
                  }
                ]
              },
              [
                _c(
                  "el-tabs",
                  {
                    staticClass: "dg-group-select_el-tab",
                    attrs: { type: "border-card" },
                    model: {
                      value: _vm.tabKey,
                      callback: function($$v) {
                        _vm.tabKey = $$v
                      },
                      expression: "tabKey"
                    }
                  },
                  _vm._l(_vm.getShowTabs(), function(item) {
                    return _c(
                      "el-tab-pane",
                      {
                        key: item.tabKey,
                        staticStyle: {
                          height: "280px",
                          width: "calc( 100% + 14px)"
                        },
                        attrs: { label: item.label, name: item.ref }
                      },
                      [
                        _c(
                          "dg-scrollbar",
                          { attrs: { "view-style": "padding-right:14px;" } },
                          [
                            item.tabKey == "group"
                              ? [
                                  _c(
                                    "dg-tree",
                                    _vm._g(
                                      _vm._b(
                                        {
                                          ref: item.ref,
                                          refInFor: true,
                                          class: {
                                            "hide-parent-checkbox": !_vm.checkGroup
                                          },
                                          attrs: {
                                            data: item.data,
                                            "render-content": item.renderContent
                                          },
                                          on: {
                                            "check-change": item.checkChange,
                                            "node-click": _vm.handleNodeClick
                                          }
                                        },
                                        "dg-tree",
                                        _vm.groupTreeBind,
                                        false
                                      ),
                                      _vm.$listeners
                                    )
                                  )
                                ]
                              : item.renderContent
                              ? [
                                  _c(
                                    "dg-tree",
                                    _vm._g(
                                      _vm._b(
                                        {
                                          ref: item.ref,
                                          refInFor: true,
                                          attrs: {
                                            data: item.data,
                                            "render-content": item.renderContent
                                          },
                                          on: {
                                            "check-change": item.checkChange,
                                            "node-click": _vm.handleNodeClick
                                          }
                                        },
                                        "dg-tree",
                                        _vm.mostTreeBind,
                                        false
                                      ),
                                      _vm.$listeners
                                    )
                                  )
                                ]
                              : [
                                  _c(
                                    "dg-tree",
                                    _vm._g(
                                      _vm._b(
                                        {
                                          ref: item.ref,
                                          refInFor: true,
                                          attrs: { data: item.data },
                                          on: {
                                            "check-change": item.checkChange,
                                            "node-click": _vm.handleNodeClick
                                          }
                                        },
                                        "dg-tree",
                                        _vm.treeBind,
                                        false
                                      ),
                                      _vm.$listeners
                                    )
                                  )
                                ]
                          ],
                          2
                        )
                      ],
                      1
                    )
                  }),
                  1
                ),
                _c(
                  "div",
                  { staticClass: "group-manager" },
                  [
                    _vm.useGroup && _vm.allowEditGroup
                      ? _c(
                          "el-button",
                          {
                            attrs: { type: "text" },
                            on: {
                              click: function($event) {
                                _vm.isEditing = true
                              }
                            }
                          },
                          [_vm._v("分组管理")]
                        )
                      : _vm._e()
                  ],
                  1
                )
              ],
              1
            )
          ]
        ],
        2
      )
    ],
    1
  )
}
var mainvue_type_template_id_3a5dc555_staticRenderFns = []
mainvue_type_template_id_3a5dc555_render._withStripped = true


// CONCATENATED MODULE: ./packages/group-select/src/main.vue?vue&type=template&id=3a5dc555&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/option.vue?vue&type=template&id=e1c18dde&
var optionvue_type_template_id_e1c18dde_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("span", {
    staticClass: "el-tree-node__label",
    domProps: { innerHTML: _vm._s(_vm.filterLabel) }
  })
}
var optionvue_type_template_id_e1c18dde_staticRenderFns = []
optionvue_type_template_id_e1c18dde_render._withStripped = true


// CONCATENATED MODULE: ./packages/group-select/src/option.vue?vue&type=template&id=e1c18dde&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/option.vue?vue&type=script&lang=js&
//
//
//
//



/* harmony default export */ var group_select_src_optionvue_type_script_lang_js_ = ({
    props: {
        isHighLight: {
            type: Boolean
        },
        filter: {
            type: String
        }
    },
    mixins: [external_element_ui_["Option"]],
    computed: {
        filterLabel: function filterLabel() {

            // 增加过滤值高亮
            var temple = this.isHighLight && this.filter ? this.label.replace(new RegExp(this.filter + '{1}'), "<span class=\"dg-tree-filter__light\">" + this.filter + "</span>") : this.label;

            return temple;
        }
    }
});
// CONCATENATED MODULE: ./packages/group-select/src/option.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_group_select_src_optionvue_type_script_lang_js_ = (group_select_src_optionvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/group-select/src/option.vue





/* normalize component */

var group_select_src_option_component = normalizeComponent(
  packages_group_select_src_optionvue_type_script_lang_js_,
  optionvue_type_template_id_e1c18dde_render,
  optionvue_type_template_id_e1c18dde_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var group_select_src_option_api; }
group_select_src_option_component.options.__file = "packages/group-select/src/option.vue"
/* harmony default export */ var group_select_src_option = (group_select_src_option_component.exports);
// EXTERNAL MODULE: ./packages/group-select/src/pinyin.js
var group_select_src_pinyin = __webpack_require__(12);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/transfer-tree.vue?vue&type=template&id=69678dd4&
var transfer_treevue_type_template_id_69678dd4_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-transfer dg-tree-transfer dg-group-select-transfer" },
    [
      _c("div", { staticClass: "el-transfer-panel" }, [
        _c(
          "p",
          { staticClass: "el-transfer-panel__header" },
          [
            _c(
              "el-checkbox",
              {
                attrs: { indeterminate: _vm.sourceIsIndeterminate },
                on: { change: _vm.sourceAllBoxCheck },
                model: {
                  value: _vm.sourceCheckAll,
                  callback: function($$v) {
                    _vm.sourceCheckAll = $$v
                  },
                  expression: "sourceCheckAll"
                }
              },
              [
                _vm.titles[0] !== undefined
                  ? [_vm._v(_vm._s(_vm.titles[0]))]
                  : _vm._e()
              ],
              2
            ),
            _vm._t("title-left")
          ],
          2
        ),
        _c("div", { staticClass: "el-transfer-panel__body" }, [
          _c(
            "div",
            {
              staticClass: "el-transfer-panel__list",
              staticStyle: { padding: "0" }
            },
            [
              _vm.filterable
                ? _c(
                    "el-input",
                    {
                      staticClass: "el-transfer-panel__filter",
                      attrs: {
                        placeholder: _vm.placeholder,
                        size: "small",
                        clearable: _vm.clearable
                      },
                      model: {
                        value: _vm.filterFrom,
                        callback: function($$v) {
                          _vm.filterFrom = $$v
                        },
                        expression: "filterFrom"
                      }
                    },
                    [
                      _c("i", {
                        class: ["el-input__icon", "el-icon-search"],
                        attrs: { slot: "suffix" },
                        slot: "suffix"
                      })
                    ]
                  )
                : _vm._e(),
              _c(
                "el-tree",
                _vm._b(
                  {
                    ref: "from-tree",
                    class: [_vm.filterable ? "is-filterable" : ""],
                    attrs: {
                      data: _vm.sourceData,
                      "show-checkbox": "",
                      "node-key": _vm.valueName,
                      "default-expanded-keys": _vm.sourceExpandedKeys,
                      "filter-node-method": _vm.filterNodeFrom,
                      "default-expand-all": _vm.openAll,
                      "render-content": _vm.renderContent,
                      "default-checked-keys": _vm.sourceCheckKeys
                    },
                    on: { check: _vm.sourceTreeChecked }
                  },
                  "el-tree",
                  _vm.allTreeProps,
                  false
                )
              )
            ],
            1
          )
        ]),
        _vm.$slots["left-footer"]
          ? _c(
              "p",
              { staticClass: "el-transfer-panel__footer" },
              [_vm._t("left-footer")],
              2
            )
          : _vm._e()
      ]),
      _c(
        "div",
        { staticClass: "el-transfer__buttons" },
        [
          _c(
            "el-button",
            {
              class: [
                "el-transfer__button",
                _vm.hasButtonTexts ? "is-with-texts" : ""
              ],
              attrs: { type: "primary", disabled: _vm.sourceDisabled },
              nativeOn: {
                click: function($event) {
                  return _vm.addToTarget($event)
                }
              }
            },
            [
              _vm.buttonTexts[1] !== undefined
                ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))])
                : _vm._e(),
              _c("i", { staticClass: "el-icon-arrow-right" })
            ]
          )
        ],
        1
      ),
      _c("div", { staticClass: "el-transfer-panel" }, [
        _c(
          "p",
          { staticClass: "el-transfer-panel__header group-header" },
          [
            _c(
              "el-checkbox",
              {
                attrs: { indeterminate: _vm.targetIsIndeterminate },
                on: { change: _vm.targetAllBoxCheck },
                model: {
                  value: _vm.targetCheckAll,
                  callback: function($$v) {
                    _vm.targetCheckAll = $$v
                  },
                  expression: "targetCheckAll"
                }
              },
              [
                _vm.titles[1] !== undefined
                  ? [_vm._v(_vm._s(_vm.titles[1]))]
                  : _vm._e()
              ],
              2
            ),
            _c(
              "span",
              { staticClass: "header-btn-wrap" },
              [
                _c(
                  "el-button",
                  {
                    attrs: { type: "text" },
                    on: {
                      click: function($event) {
                        return _vm.handleAddGroup(_vm.data)
                      }
                    }
                  },
                  [_vm._v("添加")]
                ),
                _c(
                  "el-button",
                  {
                    attrs: { type: "text" },
                    on: { click: _vm.handleBatchDel }
                  },
                  [_vm._v("删除")]
                )
              ],
              1
            ),
            _vm._t("title-right")
          ],
          2
        ),
        _c("div", { staticClass: "el-transfer-panel__body" }, [
          _c(
            "div",
            {
              staticClass: "el-transfer-panel__list",
              staticStyle: { padding: "0" }
            },
            [
              _vm.filterable
                ? _c(
                    "el-input",
                    {
                      staticClass: "el-transfer-panel__filter",
                      attrs: {
                        clearable: _vm.clearable,
                        placeholder: _vm.placeholder,
                        size: "small"
                      },
                      model: {
                        value: _vm.filterTo,
                        callback: function($$v) {
                          _vm.filterTo = $$v
                        },
                        expression: "filterTo"
                      }
                    },
                    [
                      _c("i", {
                        class: ["el-input__icon", "el-icon-search"],
                        attrs: { slot: "suffix" },
                        slot: "suffix"
                      })
                    ]
                  )
                : _vm._e(),
              _c("el-tree", {
                ref: "to-tree",
                class: [_vm.filterable ? "is-filterable" : ""],
                attrs: {
                  draggable: "",
                  "show-checkbox": "",
                  props: _vm.treeProps,
                  data: _vm.innerGroupData,
                  "node-key": _vm.valueName,
                  "allow-drop": _vm.judgAllowDrop,
                  "allow-drag": _vm.handleBeforeDrag,
                  "default-expand-all": _vm.openAll,
                  "filter-node-method": _vm.filterNodeTo,
                  "default-checked-keys": _vm.targetCheckKeys,
                  "default-expanded-keys": _vm.targetExpandedKeys
                },
                on: {
                  check: _vm.toTreeChecked,
                  "node-expand": _vm.handleToNodeExpend,
                  "node-collapse": _vm.handleToNodeCollapse,
                  "node-drop": _vm.handleAfterNodeDrop
                },
                scopedSlots: _vm._u([
                  {
                    key: "default",
                    fn: function(ref) {
                      var node = ref.node
                      var data = ref.data
                      return _c(
                        "div",
                        {
                          staticClass: "custom-tree-node el-tree-node__label",
                          on: {
                            mouseenter: function($event) {
                              return _vm.handleMouseenter(node, $event)
                            },
                            mouseleave: function($event) {
                              return _vm.handleMouseleave(node, $event)
                            },
                            dblclick: function($event) {
                              $event.stopPropagation()
                              return _vm.handleDbclick(node, data, $event)
                            }
                          }
                        },
                        [
                          !data.isEditing
                            ? [
                                _c(
                                  "span",
                                  {
                                    staticClass: "label-wrap",
                                    attrs: { title: data[_vm.labelName] }
                                  },
                                  [_vm._v(_vm._s(data[_vm.labelName]))]
                                ),
                                _c(
                                  "span",
                                  { staticClass: "button-wrap" },
                                  [
                                    _c("el-button", {
                                      staticClass: "edit-btn",
                                      attrs: {
                                        type: "text",
                                        icon: "el-icon-edit"
                                      },
                                      on: {
                                        click: function($event) {
                                          return _vm.handleDbclick(
                                            node,
                                            data,
                                            $event
                                          )
                                        }
                                      }
                                    }),
                                    _c("el-button", {
                                      staticClass: "del-btn",
                                      attrs: {
                                        type: "text",
                                        icon: "el-icon-delete"
                                      },
                                      on: {
                                        click: function($event) {
                                          return _vm.handleDeleteNodeClick(
                                            node,
                                            data
                                          )
                                        }
                                      }
                                    })
                                  ],
                                  1
                                )
                              ]
                            : [
                                _c(
                                  "el-input",
                                  {
                                    directives: [
                                      {
                                        name: "focus",
                                        rawName: "v-focus",
                                        value: data.isEditing,
                                        expression: "data.isEditing"
                                      }
                                    ],
                                    attrs: {
                                      size: "mini",
                                      "data-cur": data.isEditing,
                                      maxlength: 10
                                    },
                                    on: {
                                      blur: function($event) {
                                        return _vm.handleInputBlur(data, $event)
                                      }
                                    },
                                    nativeOn: {
                                      click: function($event) {
                                        $event.stopPropagation()
                                        return $event.stopPropagation()
                                      }
                                    },
                                    model: {
                                      value: data[_vm.labelName],
                                      callback: function($$v) {
                                        _vm.$set(data, _vm.labelName, $$v)
                                      },
                                      expression: "data[labelName]"
                                    }
                                  },
                                  [
                                    _c("i", {
                                      staticClass:
                                        "el-input__icon el-icon-check",
                                      attrs: { slot: "suffix" },
                                      on: {
                                        click: function($event) {
                                          return _vm.handleInputBlur(
                                            data,
                                            $event
                                          )
                                        }
                                      },
                                      slot: "suffix"
                                    })
                                  ]
                                )
                              ]
                        ],
                        2
                      )
                    }
                  }
                ])
              })
            ],
            1
          )
        ]),
        _vm.$slots["right-footer"]
          ? _c(
              "p",
              { staticClass: "el-transfer-panel__footer" },
              [_vm._t("right-footer")],
              2
            )
          : _vm._e()
      ])
    ]
  )
}
var transfer_treevue_type_template_id_69678dd4_staticRenderFns = []
transfer_treevue_type_template_id_69678dd4_render._withStripped = true


// CONCATENATED MODULE: ./packages/group-select/src/transfer-tree.vue?vue&type=template&id=69678dd4&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/transfer-tree.vue?vue&type=script&lang=js&
var transfer_treevue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var group_select_src_transfer_treevue_type_script_lang_js_ = ({
    name: 'TransferTree',
    props: {
        leftDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        allTreeProps: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        rightDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: []
        },
        // 分组数据
        groupData: {
            type: Array,
            default: []
        },
        // 值的字段名称
        valueName: {
            type: String,
            default: 'value'
        },
        // 显示的字段名称
        labelName: {
            type: String,
            default: 'label'
        },
        // 禁用值的名称
        disabledName: {
            type: String,
            default: 'disabled'
        },
        // 子节点数组的名称
        childrenName: {
            type: String,
            default: 'children'
        },
        // 父级节点名称
        pidName: {
            type: String,
            default: 'pid'
        },
        // 标题配置
        titles: {
            type: Array,
            default: function _default() {
                return ['源列表', '目标列表'];
            }
        },
        // 按钮文本配置
        buttonTexts: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 穿梭后是否展开节点
        transferOpenNode: {
            type: Boolean,
            default: false
        },
        // 筛选 placeholder
        placeholder: {
            type: String,
            default: '输入关键字进行过滤'
        },
        // 是否展开所有节点
        openAll: {
            type: Boolean,
            default: false
        },
        // 自定义树节点
        renderContent: Function,
        // 是否启用筛选
        filterable: {
            type: Boolean,
            default: false
        },
        clearable: {
            type: Boolean,
            default: true
        }
    },
    data: function data() {
        return {
            // 内部数据配置项
            dataSource: this.data,
            // props 的字段别名
            treeProps: transfer_treevue_type_script_lang_js_extends({
                label: this.labelName,
                children: this.childrenName,
                disabled: this.disabledName
            }, this.allTreeProps),
            // 是否半选源列表数据状态
            sourceIsIndeterminate: false,
            // 是否半选源列表数据状态
            sourceCheckAll: false,
            // 是否半选目标列表数据状态
            targetIsIndeterminate: false,
            // 是否半选目标列表数据状态
            targetCheckAll: false,
            // 源数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            sourceCheckKeys: [],
            // 目标数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            targetCheckKeys: [],
            // 源数据展开节点
            sourceExpandedKeys: [],
            // 目标数据展开节点
            targetExpandedKeys: [],
            // 添加按钮是否禁用
            sourceDisabled: true,
            // 移除按钮是否禁用
            targetDisabled: true,
            // 源数据筛选
            filterFrom: '',
            // 目标数据筛选
            filterTo: '',
            // 目标列表数据勾选
            acceptCheckedKeys: [],
            innerGroupData: [],
            //是否有分组编辑框正在编辑
            hasGroupEditing: false,
            initOver: false,
            // 分组名重复提示消息防抖
            errorMessageHandle: false,
            // 目标树展开的节点
            toTreeExpendNodes: {}
        };
    },

    computed: {
        //分组名集合，用于新增分组时重名判断
        groupNames: function groupNames() {
            var _this2 = this;

            return this.innerGroupData.filter(function (item) {
                return item.isParentNode;
            }).map(function (item) {
                return item[_this2.labelName];
            });
        },


        /**
         * 源列表数据监听
         *
         * @return {Array}
         */
        sourceData: function sourceData() {
            var _this3 = this;

            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this3.pidName] = 0;
            });

            // 构造除去选中值 `this.selectedKeyValue` 的源数据
            return this.constructTreeBox(this.selectedKeyValue, _treeData);
        },


        /**
         * 目标列表数据监听
         *
         */
        targetData: function targetData() {
            var _this4 = this;

            // 初始化数据
            var tmpData = external_lodash_default.a.cloneDeep(this.innerGroupData);
            var _treeData = tmpData.filter(function (item) {
                return !item.disabled;
            });

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this4.pidName] = 0;
            });

            // 构造除去反向选中值 `this.unselectedKeyValue` 的目标树数据
            return this.constructTreeBox(this.unselectedKeyValue, _treeData);
        },


        /**
         * 接收列表数据
         *
         * @return {Array}
         */
        acceptData: function acceptData() {
            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 目标列表数据
            var _selectedList = [];

            // 获取选中值列表选项数据
            this.constructListBox(this.value, _treeData, _selectedList);

            return _selectedList;
        },


        /**
         * 查找所有选中的 key 值
         *
         * @return {Array}
         */
        selectedKeyValue: function selectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.cloneDeep(this.value);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },


        /**
         * 查找所有未选中的 key 值
         *
         * @return {Array}
         */
        unselectedKeyValue: function unselectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.difference(this.allKeyValue(true), this.selectedKeyValue);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },


        /**
         * 检测按钮文本值
         *
         */
        hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
        },
        returnGroupData: function returnGroupData() {
            var labelName = this.labelName,
                valueName = this.valueName;

            return this.innerGroupData.map(function (group) {
                var _result;

                var result = (_result = {
                    id: group.id
                }, _result[valueName] = group[valueName], _result[labelName] = group[labelName], _result.order = group.order, _result.disabled = group.originDisabled, _result.children = group.children && group.children.map(function (child) {
                    var _ref;

                    return _ref = {}, _ref[valueName] = child[valueName].split('---')[1], _ref[labelName] = child[labelName], _ref.disabled = child.disabledBak, _ref;
                }), _result);
                return result;
            });
        }
    },

    watch: {
        groupData: {
            deep: true,
            handler: function handler(val) {
                if (!this.hasGroupEditing) {
                    this.initOver = false;
                    this._initInnerGroupData(val);
                }
            }
        },
        innerGroupData: {
            deep: true,
            immediate: false,
            handler: function handler(val) {
                this.innerGroupTree = val;
                this.initOver && this.$emit('group-tree-change', this.returnGroupData);
            }
        },
        // 监听数据
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        },
        // 目标列表数据 状态检测
        acceptCheckedKeys: function acceptCheckedKeys(val) {
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.targetDisabled = false;
                // 总半选是否开启
                this.targetIsIndeterminate = true;

                // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
                var allCheck = val;
                if (allCheck.length == this.acceptData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
            }
        },

        // 源数据 状态监测
        sourceCheckKeys: function sourceCheckKeys(val) {
            if (val.length > 0) {
                if (this.targetCheckKeys.length > 0) {
                    // 穿梭按钮是否禁用
                    this.sourceDisabled = false;
                }
                // 总半选是否开启
                this.sourceIsIndeterminate = true;

                // 默认数据个数
                var data = this.allKeyValue(true, this.sourceData);
                if (this.allTreeProps.lazy) {
                    data = Object.keys(this.$refs['from-tree'].store.nodesMap);
                }

                if (val.length == data.length) {
                    // 关闭半选 开启全选
                    this.sourceIsIndeterminate = false;
                    this.sourceCheckAll = true;
                } else {
                    this.sourceIsIndeterminate = true;
                    this.sourceCheckAll = false;
                }
            } else {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
            }
        },

        // 目标树数据 状态监测
        targetCheckKeys: function targetCheckKeys(val) {
            if (this.sourceCheckKeys.length > 0) {
                // 穿梭按钮是否禁用
                this.sourceDisabled = false;
            }
            // 穿梭按钮是否禁用
            this.targetDisabled = false;
            // 总半选是否开启
            this.targetIsIndeterminate = true;

            // 不选中时， 全部关闭
            if (val.length <= 0) {
                this.sourceDisabled = true;
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
                return;
            }

            // 树形类型
            // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
            var allCheck = val.filter(function (item) {
                return !item.disabled && item.isParentNode;
            });
            if (allCheck.length == this.targetData.length) {
                // 关闭半选 开启全选
                this.targetIsIndeterminate = false;
                this.targetCheckAll = true;
            } else {
                this.targetIsIndeterminate = true;
                this.targetCheckAll = false;
            }
        },

        // 左侧 数据筛选
        filterFrom: function filterFrom(val) {
            this.$refs['from-tree'].filter(val);
        },

        // 右侧 数据筛选（目前未对目标列表数据做筛选）
        filterTo: function filterTo(val) {
            this.$refs['to-tree'].filter(val);
        }
    },
    directives: {
        focus: {
            inserted: function inserted(el, _ref2, vnode) {
                var expression = _ref2.expression;

                setTimeout(function () {
                    el.getElementsByTagName('input')[0].focus();
                }, 200);
            }
        }
    },

    components: {
        ElTransfer: external_element_ui_["Transfer"]
    },

    methods: {
        /**
         * 分组名称编辑状态下阻止拖动事件
         */
        handleBeforeDrag: function handleBeforeDrag() {
            return !this.hasGroupEditing;
        },
        handleToNodeCollapse: function handleToNodeCollapse(data, node) {
            delete this.toTreeExpendNodes[data.id];
        },
        handleToNodeExpend: function handleToNodeExpend(data, node) {
            this.toTreeExpendNodes[data.id] = true;
        },

        /**
         *
         */
        handleChangeNodeId: function handleChangeNodeId(groupData) {
            this._initInnerGroupData(groupData);
        },

        /**
         * 拖拽完成事件
         */
        handleAfterNodeDrop: function handleAfterNodeDrop() {
            this._sortNode();
        },

        /**
         * 分组树排序
         */
        _sortNode: function _sortNode() {
            var result = [];
            this.$refs['to-tree'].data.map(function (group, index) {
                group.order = index;
            });
            result = JSON.parse(JSON.stringify(this.returnGroupData));
            this.$emit('after-drag', result);
        },

        /**
         * 生成uuid
         */
        guid2: function guid2() {
            function S4() {
                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
            }
            return S4() + S4() + S4() + S4() + S4() + S4() + S4() + S4();
        },

        /**
         * 新增分组
         */
        handleAddGroup: function handleAddGroup(data) {
            if (!this.hasGroupEditing) {
                var _newNode;

                var valueName = this.valueName,
                    labelName = this.labelName;

                this.nodeStatus = '1';
                data.isEditing = true;
                this.hasGroupEditing = true;
                var newNode = (_newNode = {}, _newNode[valueName] = this.guid2(), _newNode.isEditing = true, _newNode.isParentNode = true, _newNode.pid = 0, _newNode[labelName] = '新增分组', _newNode.children = [], _newNode);
                this.innerGroupData.push(newNode);
                this.$emit('add-group', newNode);
            }
        },


        /**
         * 将父节点数据转为待保存的格式
         */
        _getGroupData: function _getGroupData(parent, op) {
            var _ref4;

            var valueName = this.valueName,
                labelName = this.labelName;

            return _ref4 = {}, _ref4[valueName] = parent[valueName], _ref4[labelName] = parent[labelName], _ref4.op = op, _ref4.order = parent.order == undefined ? '0' : parent.order, _ref4.disabled = parent.disabled || false, _ref4.children = parent.children.map(function (child) {
                var _ref3;

                var id = child[valueName];
                if (id.includes('---')) {
                    id = id.split('---')[1];
                }

                return _ref3 = {}, _ref3[valueName] = id, _ref3[labelName] = child[labelName], _ref3;
            }), _ref4;
        },


        /**
         * 批量删除分组
         */
        handleBatchDel: function handleBatchDel() {
            var _this5 = this;

            this.targetCheckAll = false;
            var delNodes = this.$refs['to-tree'].getCheckedNodes();
            delNodes.map(function (item) {
                var toTree = _this5.$refs['to-tree'];
                var delNode = toTree.getNode(item);
                var parent = delNode && delNode.parent;
                toTree.remove(item);
                if (item.isParentNode) {
                    _this5.$emit('delete-group', item.id);
                    _this5._sortNode();
                } else if (parent && parent.data) {
                    var result = _this5._getGroupData(parent.data, 'edit');
                    _this5.$emit('save-group', JSON.parse(JSON.stringify(result)));
                }
                _this5.targetCheckAll = false;
                _this5.targetIsIndeterminate = false;
            });
        },


        /**
         * 点击分类节点删除事件
         */
        handleDeleteNodeClick: function handleDeleteNodeClick(node, data) {
            var parentNode = node.parent;
            var children = parentNode.data.children || parentNode.data;
            var index = children.findIndex(function (d) {
                return d.id === data.id;
            });
            children.splice(index, 1);
            if (node.level == 2) {
                var result = this._getGroupData(parentNode.data || parentNode, 'edit');
                this.$emit('save-group', JSON.parse(JSON.stringify(result)));
            } else {
                this.$emit('delete-group', node.key);
                this._sortNode();
            }
        },


        /**
         * 鼠标进入分类节点事件
         * 显示删除按钮
         */
        handleMouseenter: function handleMouseenter(node, e) {
            if (node.disabled) {
                return;
            }
            var $node = e.currentTarget;
            if (node.data.isParentNode && !node.data.isEditing) {
                $node.getElementsByClassName('edit-btn')[0].classList.toggle('show-btn', true);
            }
            var delBtns = $node.getElementsByClassName('del-btn');
            if (delBtns.length > 0) {
                delBtns[0].classList.toggle('show-btn', true);
            }
        },


        /**
         * 鼠标移出分类节点事件
         * 隐藏删除按钮
         */
        handleMouseleave: function handleMouseleave(node, e) {
            if (node.disabled) {
                return;
            }
            var $node = e.currentTarget;
            if (node.data.isParentNode && !node.data.isEditing) {
                $node.getElementsByClassName('edit-btn')[0].classList.toggle('show-btn', false);
            }
            var delBtns = $node.getElementsByClassName('del-btn');
            if (delBtns.length > 0) {
                delBtns[0].classList.toggle('show-btn', false);
            }
        },


        /**
         * 鼠标双击分类节点
         * 将分类节点变为文本框
         */
        handleDbclick: function handleDbclick(node, data, e) {
            if (!this.hasGroupEditing) {
                data.isEditing = true;
                this.hasGroupEditing = true;
            }
            event.stopPropagation();
        },


        /**
         * 错误提示
         */

        _showErrorMsg: function _showErrorMsg(msg) {
            var _this6 = this;

            if (!this.errorMessageHandle) {
                this.errorMessageHandle = true;
                this.$message.error(msg);
                setTimeout(function () {
                    _this6.errorMessageHandle = false;
                }, 500);
            }
        },


        /**
         * 输入框失去焦点
         */
        handleInputBlur: function handleInputBlur(data, e) {
            var op = 'edit';
            var _this = this;
            var groupName = data[_this.labelName];
            if (!groupName.trim()) {
                e.currentTarget.focus();
                this._showErrorMsg('分组名字不能为空或空白字符');
                return;
            }
            if (_this.groupNames.filter(function (item) {
                return item == groupName;
            }).length > 1) {
                e.currentTarget.focus();
                this._showErrorMsg('分组名字重复');
                return;
            } else {
                if (_this.nodeStatus == '1') {
                    op = 'add';
                    data.order = _this.groupData.length - 1;
                }
                data.isEditing = false;
                _this.nodeStatus = '2';
                _this.hasGroupEditing = false;
                if (_this.targetCheckAll) {
                    _this.$nextTick(function () {
                        _this.targetIsIndeterminate = true;
                    });
                }
            }

            var result = _this._getGroupData(data, op);
            _this.$emit('save-group', JSON.parse(JSON.stringify(result)));
        },

        /**
         * 判断是否可以将节点放置到
         */
        judgAllowDrop: function judgAllowDrop(draggingNode, dropNode, type) {
            if (draggingNode.disabled || dropNode.disabled) {
                return false;
            }
            if (type == 'inner') {
                if (dropNode.level == 1 && draggingNode.level == 2) {
                    return true;
                } else {
                    return false;
                }
            } else if (type == 'prev' || type == 'next') {
                if (dropNode.level == draggingNode.level) {
                    return true;
                } else {
                    return false;
                }
            }
        },


        /**
         * 加入右侧穿梭框
         *
         */
        addToTarget: function addToTarget() {
            var fromNodes = this.$refs['from-tree'].getCheckedNodes();
            var toNodes = this.$refs['to-tree'].getCheckedNodes().concat(this.$refs['to-tree'].getHalfCheckedNodes());
            var _this = this;
            var needToCheck = [];
            toNodes.map(function (item) {
                if (item.isParentNode) {
                    var ids = item.children.map(function (item) {
                        return item.id.split('---')[1];
                    });

                    fromNodes.map(function (fromNode) {
                        if (ids.indexOf(fromNode.id) < 0) {
                            item.children.push(transfer_treevue_type_script_lang_js_extends({}, fromNode, {
                                id: item.id + '---' + fromNode.id,
                                children: []
                            }));
                            needToCheck.push(item.id + '---' + fromNode.id);
                        }
                    });
                    var result = _this._getGroupData(item, 'edit');
                    _this.$emit('save-group', JSON.parse(JSON.stringify(result)));
                } else {
                    needToCheck.push(item.id);
                }
            });
            _this.$nextTick(function () {
                Object.keys(_this.toTreeExpendNodes).map(function (item) {
                    _this.$refs['to-tree'].getNode(item).expanded = true;
                });
                _this.$refs['to-tree'].setCheckedKeys(needToCheck);
            });
        },


        /**
         * 源列表数据全选改变状态
         *
         * @param val
         */
        sourceAllBoxCheck: function sourceAllBoxCheck(val) {
            // if (this.allTreeProps.lazy && val) {
            //     let data = Object.keys(this.$refs["from-tree"].store.nodesMap)
            //     this.sourceIsIndeterminate = false;
            //     this.$refs['from-tree'].setCheckedKeys(data);
            // } else {
            //     this.$refs['from-tree'].setCheckedKeys([]);
            // }
            // if (this.sourceData.length == 0) {
            //     return;
            // }
            // if (val) {
            //     this.sourceCheckKeys = this.sourceData;
            //     this.$refs['from-tree'].setCheckedNodes(this.sourceData);
            // } else {
            //     this.$refs['from-tree'].setCheckedNodes([]);
            //     this.sourceCheckKeys = [];
            // }

            var sourceCheckKeys = void 0;
            if (this.allTreeProps.lazy) {
                sourceCheckKeys = Object.keys(this.$refs['from-tree'].store.nodesMap);
                this.sourceIsIndeterminate = false;
            } else {
                sourceCheckKeys = this.sourceData;
            }

            this._changeFromTreeCheckStatus(val ? sourceCheckKeys : []);
        },


        /**
         * 改变元数据树节点勾选状态
         */

        _changeFromTreeCheckStatus: function _changeFromTreeCheckStatus(sourceCheckKeys) {
            this.sourceCheckKeys = sourceCheckKeys;
            this.$refs['from-tree'].setCheckedKeys(sourceCheckKeys);
        },


        /**
         * 目标列表数据全选改变状态
         *
         * @param val
         */
        targetAllBoxCheck: function targetAllBoxCheck(val) {
            if (this.targetData.length == 0) {
                return;
            }
            if (val) {
                this.targetCheckKeys = this.targetData;
                this.$refs['to-tree'].setCheckedNodes(this.innerGroupData);
            } else {
                this.$refs['to-tree'].setCheckedNodes([]);
                this.targetCheckKeys = [];
            }
        },

        /**
         * 源列表数据选中事件 - 是否禁用穿梭按钮
         *
         * @param nodeObj
         * @param treeObj
         */
        sourceTreeChecked: function sourceTreeChecked(nodeObj, treeObj) {
            var _this7 = this;

            // 查找父节点
            var pids = treeObj.checkedNodes.map(function (p) {
                return p[_this7.pidName];
            });

            // 过滤后的元素
            var filterKeys = external_lodash_default.a.difference(treeObj.checkedKeys, pids);
            this.sourceCheckKeys = filterKeys;

            this.$emit('left-check-change', nodeObj, treeObj);
        },


        /**
         * 源列表数据 筛选
         *
         */
        filterNodeFrom: function filterNodeFrom(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-from']) {
                return this.$attrs['filter-node-from'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        /**
         * 目标列表数据 筛选
         *
         * @param value
         * @param data
         */
        filterNodeTo: function filterNodeTo(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-to']) {
                return this.$attrs['filter-node-to'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        // 目标树选中事件 - 是否禁用穿梭按钮
        toTreeChecked: function toTreeChecked(nodeObj, treeObj) {
            this.targetCheckKeys = treeObj.checkedNodes;
            this.$emit('right-check-change', nodeObj, treeObj);
        },

        /**
         * 递归函数 获取目标树结构数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructTreeBox: function constructTreeBox(value, data) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return data;

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructTreeBox(value, base[self.childrenName]);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data = _data.filter(function (base) {
                    return base[self.valueName] !== item;
                });
            });

            return _data;
        },

        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false
         * @param val [Array] data
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = data ? external_lodash_default.a.cloneDeep(data) : external_lodash_default.a.cloneDeep(this.dataSource);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.childrenName]);
                    }

                    return base;
                });

                data.forEach(function (item) {
                    if (val) {
                        if (item[self.childrenName] && item[self.childrenName].length === 0) {
                            _treeAllKey.push(item[self.valueName]);
                        }
                    } else {
                        _treeAllKey.push(item[self.valueName]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },

        /**
         * 构建目标列表数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructListBox: function constructListBox(value, data, selectedList) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return [];

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructListBox(value, base[self.childrenName], selectedList);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data.forEach(function (base) {
                    if (base[self.valueName] === item) {
                        selectedList.push(base);
                    }
                });
            });

            return _data;
        },
        _initInnerGroupData: function _initInnerGroupData(data) {
            var _this8 = this;

            var _this = this;
            _this.innerGroupData = external_lodash_default.a.cloneDeep(data || _this.groupData);
            _this.innerGroupData.map(function (item) {
                item.isParentNode = true;
                item.disabled = item.originDisabled;
                item.children.map(function (child) {
                    child.disabledBak = child.disabled;
                    child.disabled = item.disabled;
                });
                _this.$set(item, 'isEditing', false);
            });
            _this.$nextTick(function () {
                var keys = _this8.targetCheckKeys.map(function (item) {
                    return item.id;
                });
                _this.initOver = true;
                _this.$refs['to-tree'].setCheckedKeys(keys);
                Object.keys(_this.toTreeExpendNodes).map(function (item) {
                    _this.$refs['to-tree'].getNode(item).expanded = true;
                });
            });
        }
    },

    created: function created() {
        var _this = this;
        this._initInnerGroupData();

        _this.sourceCheckKeys = _this.leftDefaultChecked;
        _this.targetCheckKeys = _this.rightDefaultChecked;
    }
});
// CONCATENATED MODULE: ./packages/group-select/src/transfer-tree.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_group_select_src_transfer_treevue_type_script_lang_js_ = (group_select_src_transfer_treevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/group-select/src/transfer-tree.vue





/* normalize component */

var src_transfer_tree_component = normalizeComponent(
  packages_group_select_src_transfer_treevue_type_script_lang_js_,
  transfer_treevue_type_template_id_69678dd4_render,
  transfer_treevue_type_template_id_69678dd4_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var src_transfer_tree_api; }
src_transfer_tree_component.options.__file = "packages/group-select/src/transfer-tree.vue"
/* harmony default export */ var src_transfer_tree = (src_transfer_tree_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/group-select/src/main.vue?vue&type=script&lang=js&
var group_select_src_mainvue_type_script_lang_js_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var group_select_src_mainvue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//












// 继承树的方法
var src_mainvue_type_script_lang_js_TreeRefs = {};
packages_tree.mixins.forEach(function (item) {
    if (item.name === 'ElTree') {
        src_mainvue_type_script_lang_js_TreeRefs = getChildrenRefs(packages_tree.mixins[0], 'tree');
    }
});

/* harmony default export */ var group_select_src_mainvue_type_script_lang_js_ = ({
    name: 'DgGroupSelect',

    mixins: [convert],

    components: {
        LSelect: base_select,
        DgTree: packages_tree,
        TransferTree: src_transfer_tree
    },

    props: {
        // 树属性
        treeProps: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        // 常用树属性
        mostTreeProps: Object,
        // 分组树属性
        groupTreeProps: Object,
        // 别名参数
        props: Object,
        // 只能选择叶子节点需要与checkStrictly配合使用
        checkLeaf: Boolean,
        // 是否开启多选
        multiple: Boolean,
        // 是否禁用
        disabled: Boolean,
        // 是否开启分组
        useGroup: {
            type: Boolean,
            default: true
        },
        // 开启分组编辑按钮
        allowEditGroup: {
            type: Boolean,
            default: true
        },
        // 是否开启常用
        useMost: {
            type: Boolean,
            default: true
        },
        // 菜单面板显示顺序
        tabOrder: {
            type: Array,
            default: function _default() {
                return ['all', 'group', 'most'];
            }
        },
        // 开启本地储存时的关键字
        chooseKey: {
            type: String,
            default: 'defaultGroupSelect'
        },
        // 本地储存数据
        isLocal: {
            type: Boolean,
            default: false
        },
        data: {
            type: Array,
            required: false,
            default: function _default() {
                return [];
            }
        },
        // 常用标签的数据
        mostData: {
            type: Array,
            required: false,
            default: function _default() {
                return [];
            }
        },
        // 分组数据
        groupData: {
            type: Array,
            required: false,
            default: function _default() {
                return [];
            }
        },
        scrollbarClass: String,
        clearable: Boolean,
        // 是否父子关联 checked 生效
        checkStrictly: Boolean,
        // 隐藏分组父节点的多选框
        checkGroup: {
            type: Boolean,
            default: true
        },
        radioType: {
            type: String,
            default: ''
        },
        value: { required: true },
        // 数据分割符号
        seq: {
            type: String,
            default: ','
        },
        // 输出的数据类型
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 过滤节点的方法
        filterNodeMethod: Function,
        // 可显示的类型
        visibleType: {
            type: String,
            default: 'all',
            validator: function validator(val) {
                return ['all', 'leaf', 'branch', 'all_with_indeterminate'].indexOf(val) !== -1;
            }
        },
        transferFilterable: {
            type: Boolean,
            default: true
        },
        transferClearable: {
            type: Boolean,
            default: true
        }
    },

    data: function data() {
        return {
            tabKey: 'tree',
            // 数据源
            dataSource: this.data,
            // select 传值的搜索条件
            filterText: '',
            // 别名属性
            alias: {
                value: 'id',
                label: 'label',
                children: 'children',
                disabled: 'disabled',
                isLeaf: 'isLeaf'
            },
            // 是否处于编辑模式
            isEditing: false,
            innerMostData: this.mostData,
            // 追加常用和分组的翻译数据
            translateData: [],
            changedGroupData: null,
            debounceHandler: "",
            tmpRemoveKeys: []
        };
    },


    watch: {
        val: {
            handler: function handler(val, oldVal) {
                var keys = val == '' ? [] : val.split(',');
                var oldKeys = oldVal == '' ? [] : oldVal.split(',');
                var _this = this;
                var trees = _this.trees;
                var _alias = this.alias,
                    value = _alias.value,
                    label = _alias.label;


                if (_this.multiple) {
                    // 勾选/取消勾选
                    var isChecked = keys.length > oldKeys.length;
                    // 勾选/取消前后的key差别
                    var difKeys = [];
                    if (isChecked) {
                        difKeys = external_lodash_default.a.difference(keys, oldKeys);
                        difKeys.map(function (newKey) {
                            var _this$updateCheckCoun;

                            var node = _this.$refs.select.getOption(newKey);
                            _this.useMost && _this.updateCheckCount((_this$updateCheckCoun = {}, _this$updateCheckCoun[value] = node.value, _this$updateCheckCoun[label] = node.label, _this$updateCheckCoun));
                        });
                    } else {
                        difKeys = external_lodash_default.a.difference(oldKeys, keys);
                    }
                    _this.groups.map(function (group) {
                        difKeys.map(function (key) {
                            _this.useGroup && _this.getRef('groupTree').setChecked(group + '---' + key, isChecked);
                        });
                    });

                    trees.map(function (item) {
                        if (item != 'groupTree') {
                            _this.getRef(item).setCheckedKeys(keys);
                        }
                    });
                } else {
                    var _this$updateCheckCoun2;

                    trees.map(function (item) {
                        if (_this.tabKey == item) {} else if (item != 'groupTree') {
                            _this.getRef(item).setCurrentKey(val);
                        } else {
                            var isFind = false;
                            for (var i = 0; i < _this.groups.length; i++) {
                                var _node = _this.getRef('groupTree').getNode(_this.groups[i] + '---' + val);
                                if (_node) {
                                    _this.getRef('groupTree').setCurrentKey(_node.key);
                                    isFind = true;
                                    break;
                                }
                            }
                            if (!isFind) {
                                _this.getRef('groupTree').setCurrentKey(null);
                            }
                        }
                    });
                    var node = _this.getRef('tree').getCurrentNode();

                    _this.useMost && node && _this.updateCheckCount((_this$updateCheckCoun2 = {}, _this$updateCheckCoun2[value] = node[value], _this$updateCheckCoun2[label] = node[label], _this$updateCheckCoun2));
                }
            }
        },
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                var _this2 = this;

                this.dataSource = val;

                this.$nextTick(function () {
                    // 同步下拉框值方法
                    _this2.syncSelectBoxValue();
                });
            }
        },
        props: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.alias = merge(this.alias, val);
            }
        },
        filterText: function filterText(val) {
            this.getRef(this.tabKey).filter(val);
        },
        tabKey: function tabKey(_tabKey) {
            this.getRef(_tabKey).filter(this.filterText);
        }
    },

    computed: {
        trees: function trees() {
            var treeList = ["tree"];
            this.useMost && treeList.push("mostTree");
            this.useGroup && treeList.push("groupTree");
            return treeList;
        },
        groups: function groups() {
            var dataSource = this.groupData;
            if (this.changedGroupData) {
                dataSource = this.changedGroupData;
            } else if (this.isLocal) {
                dataSource = this._getLocalStorage("groupData");
            }
            return dataSource.map(function (group) {
                return group.id;
            });
        },
        innerGroupData: function innerGroupData() {
            var dataSource = this.groupData;
            if (this.changedGroupData) {
                dataSource = this.changedGroupData;
            } else if (this.isLocal) {
                dataSource = this._getLocalStorage("groupData");
            }

            return dataSource.map(function (item) {
                item.children.map(function (leaf) {
                    leaf.id = item.id + '---' + leaf.id;
                });
                return group_select_src_mainvue_type_script_lang_js_extends({}, item, { disabled: false, originDisabled: item.disabled });
            });
        },

        /**
         * 选择框组件数据处理
         */
        val: {
            // 根据值，获取下拉框的展示标签
            get: function get() {
                // 过滤数据
                var filterValue = this.translateValueToTags(this.value);

                return data2type(filterValue, 'String', this.seq);
            },
            set: function set(value) {
                // 初始化
                var tree = this.getRef('tree');

                // 若为空值，则进行数据转化
                if (!value) value = [];

                // 树节点勾选
                tree.setCheckedKeys(value);

                // 树节点
                this.setTreeOrSelectData(value);
            }
        },

        /**
         * 滚动条样式
         *
         */
        scrollbarCls: function scrollbarCls() {
            return 'dg-tree-select__scrollbar ' + this.scrollbarClass;
        },

        /**
         * 合并树节点的属性参数值
         *
         */
        treeBind: function treeBind() {
            return this._mergeTreeProps(this.treeProps);
        },
        groupTreeBind: function groupTreeBind() {
            return this._mergeTreeProps(this.groupTreeProps);
        },

        /**
         * 合并树节点的属性参数值
         *
         */
        mostTreeBind: function mostTreeBind() {
            return this._mergeTreeProps(this.mostTreeProps);
        },


        /**
         * 合并 select Props
         *
         */
        selectProp: function selectProp() {
            return merge({}, this.$attrs, {
                disabled: this.disabled,
                multiple: this.multiple,
                clearable: this.clearable,
                seq: this.seq,
                'output-format': this.outputFormat,
                'filter-method': this.handleSelectFiler
            });
        }
    },

    created: function created() {
        var _this = this;
        var useMost = _this.useMost,
            useGroup = _this.useGroup,
            mostData = _this.mostData,
            groupData = _this.groupData;
        var _alias2 = this.alias,
            value = _alias2.value,
            label = _alias2.label;

        useMost && this._initMostData();
        useGroup && this._initGroupData();
        mostData.map(function (item) {
            _this.translateData.push({ value: item[value], label: item[label] });
        });
        groupData.map(function (group) {
            group.children.map(function (item) {
                _this.translateData.push({ value: item[value], label: item[label] });
            });
        });
        this.translateData = external_lodash_default.a.uniqBy(this.translateData, 'value');
    },


    methods: group_select_src_mainvue_type_script_lang_js_extends({
        handleChangeNodeId: function handleChangeNodeId(data) {
            var tmpData = this.innerGroupData.find(function (item) {
                return item.id == data.id;
            });
            tmpData.id = data.newId;
            this.getRef("editTree").handleChangeNodeId(this.innerGroupData);
        },

        /**
         * 初始化常用数据
         */
        _initMostData: function _initMostData() {
            var _this = this;
            if (_this.isLocal) {
                _this.innerMostData = _this._getLocalStorage('mostData');
            }
            _this.innerMostData.sort(function (a, b) {
                return b.count - a.count;
            });

            if (this.useMost) {
                _this.$nextTick(function () {
                    var checkedKeys = _this.getRef('tree').getCheckedKeys();
                    _this.getRef('mostTree').setCheckedKeys(checkedKeys);
                });
            }
        },


        /**
         * 初始化分组数据
         */
        _initGroupData: function _initGroupData() {},

        /**
         * 获取需要渲染的tab
         */
        getShowTabs: function getShowTabs() {
            var _this = this;
            var result = [];
            var tabs = [{
                tabKey: 'all',
                label: '全部',
                ref: 'tree',
                data: _this.dataSource,
                checkChange: _this.handleCheckChange
            }, {
                tabKey: 'most',
                label: '常用',
                ref: 'mostTree',
                data: _this.innerMostData,
                checkChange: _this.handleMostCheckChange,
                renderContent: _this.renderMostContent
            }, {
                tabKey: 'group',
                label: '分组',
                ref: 'groupTree',
                data: _this.innerGroupData,
                checkChange: _this.handleGroupCheckChange
            }];
            var useGroup = this.useGroup,
                useMost = this.useMost;

            this.tabOrder.map(function (item) {
                if (item == 'group' && !useGroup) {} else if (item == 'most' && !useMost) {} else {
                    result.push(tabs.find(function (tab) {
                        return tab.tabKey == item;
                    }));
                }
            });
            return result;
        },

        /**
         * 合并树的pros属性
         */
        _mergeTreeProps: function _mergeTreeProps(props) {
            return merge({}, props, {
                data: this.dataSource,
                props: this.alias,
                'node-key': this.alias.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': external_lodash_default.a.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-after-expand': false,
                'render-content': this.renderContent
            });
        },

        /**
         * 获取本地储存的数据
         */
        _getLocalStorage: function _getLocalStorage(key) {
            var dataStr = window.localStorage[this.chooseKey];
            var data = {};
            if (dataStr) {
                data = JSON.parse(dataStr);
            } else {
                return [];
            }
            return data[key] || [];
        },


        /**
         * 保存本地储存的数据
         */
        _setLocalStorage: function _setLocalStorage(data, key) {
            var dataSource = window.localStorage[this.chooseKey] || '{}';
            var tmpData = JSON.parse(dataSource);
            tmpData[key] = data;
            window.localStorage[this.chooseKey] = JSON.stringify(tmpData);
        },


        /**
         * 根据ref获取组件
         */
        getRef: function getRef(name) {
            return this.$refs[name][0] || this.$refs[name];
        },


        // 当分组树更新时
        handleGroupTreeChange: function handleGroupTreeChange(data) {
            var _this = this;
            this.changedGroupData = data;
            if (_this.isLocal) {
                _this._setLocalStorage(this.changedGroupData, 'groupData');
            }
            _this.$emit('group-tree-change', JSON.parse(JSON.stringify(data)));
        },


        // 删除分组
        handleDeleteGroup: function handleDeleteGroup(id) {
            !this.isLocal && this.$emit('delete-group', id);
        },


        // 保存分组
        handleSaveGroup: function handleSaveGroup(data) {
            var result = JSON.parse(JSON.stringify(data));
            !this.isLocal && this.$emit('save-group', result);
        },


        /**
         * 分组数据拖拽后触发事件
         */
        handleAfterGrag: function handleAfterGrag(groupData) {
            !this.isLocal && this.$emit('after-drag', JSON.parse(JSON.stringify(groupData)));
        },


        /**
         * 检索值
         *
         * @param query [String] 查询文本
         */
        handleSelectFiler: function handleSelectFiler(query) {
            this.filterText = query;
        },


        /**
         * 设置树或选择框的事件触发
         *
         */
        setTreeOrSelectData: function setTreeOrSelectData(val) {
            // 初始化
            var outputFormat = this.outputFormat,
                seq = this.seq;

            var tree = this.getRef('tree');

            // 值类型转化, 若是多选的话，val 的值为 []，需要值进行转化
            if (val && val.length === 0) val = '';

            // 更新缓存值
            this.filterTreeCacheVal = val;

            // 获取选中的树节点值
            var nodes = this.multiple ? tree.getCheckedNodes() : tree.getCurrentNode();

            var a = data2type(val, outputFormat, seq);
            // 触发 input or change 事件改变
            this.$emit('input', data2type(val, outputFormat, seq), nodes);
            this.$emit('change', data2type(val, outputFormat, seq), nodes);
        },


        /**
         * tree 过滤是否显示true or false
         *
         */
        filterNode: function filterNode() {
            var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var data = arguments[1];

            if (!query) {
                return true;
            }

            var label = this.defaultProp.label;

            var labelValue = external_lodash_default.a.toUpper(data[label]);

            query = external_lodash_default.a.toUpper(query);

            if (labelValue.indexOf(query) !== -1) {
                return true;
            }

            var toPinyin = Object(group_select_src_pinyin["pinyin"])(labelValue, {
                heteronym: true, // 多音
                style: group_select_src_pinyin["pinyin"].STYLE_NORMAL // 无声调
            });

            if (toPinyin && toPinyin.length > 0) {
                var str = '';
                for (var key in toPinyin) {
                    str += toPinyin[key].join('');
                }
                str = external_lodash_default.a.toUpper(str);
                toPinyin = str;
            }

            return toPinyin.indexOf(query) !== -1;
        },


        /**
         * 置空 tree 选中状态
         *
         */
        handleSelectFilerClose: function handleSelectFilerClose(bool) {
            var val = this.val;

            if (bool) {
                /*
                    BUG描述
                        form reset 多触发选中，照成父组件数据的change
                    修复：
                        this.value === '' 下拉打开的时候判断，清空选中数据
                */
                if (external_lodash_default.a.isEmpty(val) || val.length < 1) {
                    this.clearDeaulf();
                }
            } else {
                this.filterText = '';
            }
        },


        /**
         * 清空检索值
         *
         */
        clearDeaulf: function clearDeaulf() {
            var tree = this.getRef('tree');

            // 清空检索值
            this.filterText = '';

            if ([] instanceof Array) {
                return false;
            }

            // 清空选中数据及状态
            tree.setRadioKeys([]);
            tree.setCurrentKey(null);

            // 更新 value 值
            this.$emit('input', '');
        },


        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false 是否过滤叶子节点
         * @param val [Array] data 返回节点的 key 值
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.alias.children] && base[self.alias.children].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.alias.children]);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    if (val) {
                        if (item[self.alias.children] && item[self.alias.children].length > 0) {
                            _treeAllKey.push(item[self.alias.value]);
                        }
                    } else {
                        _treeAllKey.push(item[self.alias.value]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        allKeyNodes: function allKeyNodes(data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base.childNodes && base.childNodes.length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base.childNodes);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    _treeAllKey.push(item.key);
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },


        /**
         * 转化 `value` 为标签值
         *
         */
        translateValueToTags: function translateValueToTags(value) {
            // 若为空数据
            if (value === null) return '';

            // 验证值是否为空，是否为空数组，为全类型
            if (typeof value === 'string' && !value || (typeof value === 'undefined' ? 'undefined' : group_select_src_mainvue_type_script_lang_js_typeof(value)) === 'object' && value.length === 0 || this.visibleType === 'all') {
                return value;
            }

            // 若是多选情况
            if (this.multiple && value) {
                // 初始化
                var tree = this.getRef('tree');
                var visibleType = this.visibleType,
                    defaultProp = this.defaultProp;
                var keyId = defaultProp.value,
                    children = defaultProp.children;

                // 检测树的值

                if (!tree) return value;

                // 树选中的叶子节点值
                var checkedLeafKeys = tree.getCheckedKeys(true);
                // 树选中的节点值
                var checkedNodeKeys = tree.getCheckedKeys();
                // 比较之间的差值
                var diff = external_lodash_default.a.difference(checkedNodeKeys, checkedLeafKeys);
                // 值格式转化
                var formatValue = value.split(',');

                // 通过 value 值做检索过滤值
                switch (visibleType) {
                    // 叶子节点
                    case 'leaf':
                        {
                            return external_lodash_default.a.difference(formatValue, diff);
                        }
                    // 枝干节点
                    case 'branch':
                        {
                            // 检测是否懒加载
                            if (this.treeBind.lazy && this.multiple) {
                                var allNodes = tree.getCheckedNodes(false, false);
                                var treeNodes = tree.store.root.childNodes;

                                var diffNodes = function diffNodes(nodes) {
                                    var child = [];
                                    var flatter = function flatter(arr) {
                                        arr.forEach(function (item) {
                                            if (item.checked) {
                                                child.push(item);
                                            } else {
                                                child.push(item);
                                                if (item.childNodes && item.childNodes.length) {
                                                    flatter(item.childNodes);
                                                }
                                            }
                                        });
                                    };

                                    // 枝干节点过滤
                                    flatter(nodes);
                                    return child;
                                };
                                var branchOrLeafNodeKeys = diffNodes(treeNodes).map(function (item) {
                                    return item.key;
                                });
                                var branchOtherDiff = external_lodash_default.a.difference(checkedNodeKeys, branchOrLeafNodeKeys);

                                return external_lodash_default.a.difference(formatValue, branchOtherDiff);
                            } else {
                                var _allNodes = tree.getCheckedNodes(false, false);

                                var _diffNodes = function _diffNodes(allNodes) {
                                    var child = [];
                                    var del = []; // 剔除的id
                                    // 去掉重复的选中项
                                    var flatter = function flatter(arr) {
                                        arr.forEach(function (item) {
                                            var _$findIndex;

                                            var index = external_lodash_default.a.findIndex(child, (_$findIndex = {}, _$findIndex[keyId] = item[keyId], _$findIndex));
                                            if (index > -1) {
                                                del = del.concat(child.splice(index, 1));
                                            } else {
                                                var _$findIndex2;

                                                var delIndex = external_lodash_default.a.findIndex(del, (_$findIndex2 = {}, _$findIndex2[keyId] = item[keyId], _$findIndex2));
                                                if (delIndex === -1) {
                                                    child.push(item);
                                                }
                                            }
                                            if (item[children] && item[children].length) {
                                                flatter(item[children]);
                                            }
                                        });
                                    };
                                    flatter(allNodes);
                                    return child;
                                };
                                var _branchOrLeafNodeKeys = _diffNodes(_allNodes).map(function (item) {
                                    return item[keyId];
                                });
                                var _branchOtherDiff = external_lodash_default.a.difference(checkedNodeKeys, _branchOrLeafNodeKeys);

                                return external_lodash_default.a.difference(formatValue, _branchOtherDiff);
                            }
                        }
                    default:
                        {
                            return formatValue;
                        }
                }
            }

            return value;
        },


        /**
         * 响应分组树选中事件
         */
        handleGroupCheckChange: function handleGroupCheckChange(obj, checked, indeterminate) {
            this._handleCheckChange(obj, checked, indeterminate, 'groupTree');
        },


        /**
         * 响应常用树选中事件
         */
        handleMostCheckChange: function handleMostCheckChange(obj, checked, indeterminate) {
            this._handleCheckChange(obj, checked, indeterminate, 'mostTree');
        },
        _handleCheckChange: function _handleCheckChange(data, checked, indeterminate, ref) {
            var _this3 = this;

            var value = data2type(this.value, 'String', this.seq);
            var id = data.id;
            var _this = this;
            var _seq = this.seq,
                outputFormat = this.outputFormat;
            if (id.includes('---')) {
                id = id.split('---')[1];
            }

            var _data = this.getRef(ref).getCheckedKeys(false);
            _data = _data.map(function (item) {
                if (item.includes('---')) {
                    item = item.split('---')[1];
                }
                return item;
            });

            if (!checked && ref == "groupTree") {
                var tmpKeys = data.id.split("---");
                if (tmpKeys.length > 1) {
                    this.tmpRemoveKeys.push(tmpKeys[1]);
                }
            }

            value && (_data = _data.concat(value.split(_seq)));
            // 去重
            _data = external_lodash_default.a.uniq(_data);
            // 过滤分组
            _data = external_lodash_default.a.difference(_data, this.groups);

            if (!checked) {
                _data = _data.filter(function (item) {
                    return item != id;
                });
            }

            if (this.debounceHandler) {
                clearTimeout(this.debounceHandler);
            }
            this.debounceHandler = setTimeout(function () {
                var resultKeys = data2type(_data, outputFormat, _seq);
                var type = typeof resultKeys === 'undefined' ? 'undefined' : group_select_src_mainvue_type_script_lang_js_typeof(resultKeys);
                if (type === "string") {
                    resultKeys = external_lodash_default.a.difference(resultKeys.split(_seq), _this.tmpRemoveKeys);
                    resultKeys = resultKeys.join(_seq);
                } else {
                    resultKeys = external_lodash_default.a.difference(resultKeys, _this.tmpRemoveKeys);
                }
                _this.tmpRemoveKeys = [];
                _this3.$emit('input', resultKeys);

                _this3.$emit('check-change', data, checked, indeterminate);
            }, 50);
        },
        handleCheckChange: function handleCheckChange(data, checked, indeterminate) {
            var value = data2type(this.value, 'String', this.seq);

            // 若存在缓存值，则原先不归属于树节点（懒加载情况下），则进行追加文本显示
            if (this.treeBind.lazy && this.multiple) {
                // 正则表达式，是否存在 "," 分割
                var reg = /^.*[\,,].*$/;
                // 缓存字段数据
                var cacheArray = [];

                if (value) {
                    // 缓存字段是否为多个数据
                    if (reg.test(value)) {
                        cacheArray = value.split(',');
                    } else {
                        cacheArray.push(value);
                    }
                }

                // 选中字段
                if (checked) {
                    var selectedTreeKeys = this.getRef('tree').getCheckedKeys(false);
                    var coopArray = external_lodash_default.a.concat(selectedTreeKeys, cacheArray);
                    cacheArray = external_lodash_default.a.uniq(coopArray);
                } else {
                    var nodes = this.getRef('tree').getNode(data);
                    var _selectedTreeKeys = this.getRef('tree').getCheckedKeys(false);
                    var filterArray = this.allKeyNodes(nodes.childNodes);
                    filterArray.push(nodes.key);
                    cacheArray = external_lodash_default.a.concat(cacheArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.uniq(cacheArray);
                    filterArray = external_lodash_default.a.difference(filterArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.difference(cacheArray, filterArray);
                    cacheArray = cacheArray ? cacheArray : [];
                }

                if (this.tabKey === "tree") {
                    this.$emit('input', data2type(cacheArray, 'String', this.seq));

                    this.$emit('check-change', data, checked, indeterminate);
                }
            } else {
                var _seq = this.seq,
                    outputFormat = this.outputFormat;

                var _data = this.getRef('tree').getCheckedKeys(false);

                if (this.tabKey === "tree") {
                    this.$emit('input', data2type(_data, outputFormat, _seq));

                    this.$emit('check-change', data, checked, indeterminate);
                }
            }
        },


        /**
         * 更新点击次数
         * 如果常用列表没有该节点，则新增一个
         */
        updateCheckCount: function updateCheckCount(data) {
            var _this4 = this;

            var _this = this;
            var _this$alias = _this.alias,
                value = _this$alias.value,
                label = _this$alias.label;


            var tmpObj = _this.innerMostData.find(function (item) {
                return item.id === data.id;
            });
            if (tmpObj) {
                tmpObj.count += 1;
            } else {
                var _this$innerMostData$p;

                _this.innerMostData.push((_this$innerMostData$p = { checked: true }, _this$innerMostData$p[value] = data[value], _this$innerMostData$p[label] = data[label], _this$innerMostData$p.count = 1, _this$innerMostData$p));
            }

            if (_this.isLocal) {
                // 保存数据
                var mostData = _this.innerMostData.map(function (item) {
                    var _ref;

                    return _ref = {}, _ref[value] = item[value], _ref[label] = item[label], _ref.count = item.count, _ref;
                });
                _this._setLocalStorage(mostData, 'mostData');
            }

            _this.$nextTick(function () {
                if (_this.multiple) {
                    _this.useMost && _this.getRef('mostTree').setChecked(data.id, true);
                } else {
                    _this.useMost && _this.getRef('mostTree').setCurrentKey(data.id);
                }
                _this4.sortMostTree();
            });
            var result = _this.innerMostData.find(function (item) {
                return item.id == data.id;
            });

            _this.$emit('add-click-times', JSON.parse(JSON.stringify(result)));
        },


        /**
         * 树节点点击事件
         */
        handleNodeClick: function handleNodeClick(obj, node) {
            var _this = this;
            if (_this.multiple) {
                return false;
            }
            if (this.tabKey == "groupTree" && !obj.id.includes('---')) {
                _this.val = [""];
                _this.useGroup && _this.getRef("groupTree").setCurrentKey(null);
                _this.useMost && _this.getRef("mostTree").setCurrentKey(null);
                _this.getRef("tree").setCurrentKey(null);
            }
            if (obj.id.includes('---')) {
                _this.val = [obj.id.split('---')[1]];
            }
        },


        /**
         * 更新常用树排序
         */
        sortMostTree: function sortMostTree() {
            var _this = this;
            var keys = '';
            if (_this.multiple) {
                keys = this.getRef('mostTree').getCheckedKeys();
            } else {
                keys = this.getRef('mostTree').getCurrentKey();
            }
            var bakData = _this.innerMostData;
            bakData.sort(function (a, b) {
                return b.count - a.count;
            });
            _this.innerMostData = [];

            bakData.map(function (item) {
                _this.innerMostData.push(item);
            });
            _this.$nextTick(function () {
                if (_this.multiple) {
                    _this.getRef('mostTree').setCheckedKeys(keys, true);
                } else {
                    _this.getRef('mostTree').setCurrentKey(keys);
                }
            });
        },
        renderMostContent: function renderMostContent(h, _ref2) {
            var node = _ref2.node,
                data = _ref2.data,
                store = _ref2.store;
            var label = this.defaultProp.label;

            return h(
                'span',
                { 'class': 'el-tree-node__label' },
                [h('span', [data[label]]), h(
                    'span',
                    { style: 'margin: 0 4px;' },
                    ['(', data.count, ')']
                )]
            );
        },


        // 渲染 option 到 tree
        renderContent: function renderContent(h, _ref3) {
            var node = _ref3.node,
                data = _ref3.data,
                store = _ref3.store;
            var _defaultProp = this.defaultProp,
                label = _defaultProp.label,
                value = _defaultProp.value,
                disabled = _defaultProp.disabled;


            return h(group_select_src_option, {
                props: {
                    key: data[value],
                    label: data[label],
                    value: data[value],
                    disabled: data[disabled],
                    isHighLight: node.store.isHighLight,
                    filter: node.filter
                }
            });
        },


        // 同步下拉框值方法
        syncSelectBoxValue: function syncSelectBoxValue() {
            var _this5 = this;

            var seq = this.seq;

            var value = data2type(this.value, 'String', seq);

            var _getRef = this.getRef('tree'),
                radioType = _getRef.radioType,
                showCheckbox = _getRef.showCheckbox,
                itemsWithDisabled = _getRef.itemsWithDisabled,
                nodeKey = _getRef.nodeKey,
                checkStrictly = _getRef.checkStrictly;

            var valArr = str2arr(value, seq, true, itemsWithDisabled, nodeKey);

            // radio
            if (radioType === 'level' || radioType === 'all') {
                this.getRef('tree').setRadioKeys(valArr);
            }

            // checkbox
            if (showCheckbox) {
                var preCheckedArr = this.getRef('tree').getCheckedKeys();
                var oldValArr = str2arr(preCheckedArr, seq);

                if (valArr.length && oldValArr.length && !checkStrictly) {
                    var diffArr = external_lodash_default.a.difference(oldValArr, valArr);

                    // 剔除父及祖先级元素
                    var traverseParent = function traverseParent(node, valArr) {
                        var parentNode = node.parent;
                        if (parentNode && parentNode.level != 0) {
                            external_lodash_default.a.remove(valArr, function (n) {
                                return parentNode.data[nodeKey] === n;
                            });
                            traverseParent(parentNode, valArr);
                        }
                    };

                    // 剔除所有子代及子孙元素
                    var traverseChild = function traverseChild(node, valArr) {
                        var childNodes = node.childNodes;
                        if (childNodes && childNodes.length) {
                            childNodes.forEach(function (item) {
                                external_lodash_default.a.remove(valArr, function (n) {
                                    return n === item.data[nodeKey];
                                });
                            });
                            traverseChild(childNodes, valArr);
                        }
                    };

                    diffArr.forEach(function (item) {
                        var node = _this5.getRef('tree').getNode(item);
                        if (node) {
                            traverseParent(node, valArr);
                            traverseChild(node, valArr);
                        }
                    });
                }
                this.getRef('tree').setCheckedKeys(valArr);
            }

            // highlight
            if (!showCheckbox && radioType === '' && valArr.length < 2) {
                this.getRef('tree').setCurrentKey(valArr);
            }
        },

        // 删除标签
        handleRemoveTag: function handleRemoveTag(val) {
            this.getRef('tree').setChecked(val, false, true);
        }
    }, src_mainvue_type_script_lang_js_TreeRefs)
});
// CONCATENATED MODULE: ./packages/group-select/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_group_select_src_mainvue_type_script_lang_js_ = (group_select_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/group-select/src/main.vue





/* normalize component */

var group_select_src_main_component = normalizeComponent(
  packages_group_select_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_3a5dc555_render,
  mainvue_type_template_id_3a5dc555_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var group_select_src_main_api; }
group_select_src_main_component.options.__file = "packages/group-select/src/main.vue"
/* harmony default export */ var group_select_src_main = (group_select_src_main_component.exports);
// CONCATENATED MODULE: ./packages/group-select/index.js


/* istanbul ignore next */
group_select_src_main.install = function (Vue) {
    Vue.component(Card.name, Card);
};

/* harmony default export */ var group_select = (group_select_src_main);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input/src/main.vue?vue&type=script&lang=js&


/* harmony default export */ var input_src_mainvue_type_script_lang_js_ = ({
  name: 'DgInput',
  mixins: [external_element_ui_["Input"]]
});
// CONCATENATED MODULE: ./packages/input/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_input_src_mainvue_type_script_lang_js_ = (input_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/input/src/main.vue
var input_src_main_render, input_src_main_staticRenderFns




/* normalize component */

var input_src_main_component = normalizeComponent(
  packages_input_src_mainvue_type_script_lang_js_,
  input_src_main_render,
  input_src_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var input_src_main_api; }
input_src_main_component.options.__file = "packages/input/src/main.vue"
/* harmony default export */ var input_src_main = (input_src_main_component.exports);
// CONCATENATED MODULE: ./packages/input/index.js


/* istanbul ignore next */
input_src_main.install = function (Vue) {
  Vue.component(input_src_main.name, input_src_main);
};

/* harmony default export */ var packages_input = (input_src_main);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/main.vue?vue&type=template&id=9ff15c1a&
var mainvue_type_template_id_9ff15c1a_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      class: [
        "el-input-number",
        "dg-input-number",
        _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
        { "is-disabled": _vm.inputNumberDisabled },
        { "is-without-controls": !_vm.controls },
        { "is-controls-right": _vm.controlsAtRight }
      ],
      on: {
        dragstart: function($event) {
          $event.preventDefault()
        }
      }
    },
    [
      _vm.controls
        ? _c(
            "span",
            {
              directives: [
                {
                  name: "repeat-click",
                  rawName: "v-repeat-click",
                  value: _vm.decrease,
                  expression: "decrease"
                }
              ],
              staticClass: "el-input-number__decrease",
              class: { "is-disabled": _vm.minDisabled },
              attrs: { role: "button" },
              on: {
                keydown: function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                  ) {
                    return null
                  }
                  return _vm.decrease($event)
                }
              }
            },
            [
              _c("i", {
                class:
                  "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
              })
            ]
          )
        : _vm._e(),
      _vm.controls
        ? _c(
            "span",
            {
              directives: [
                {
                  name: "repeat-click",
                  rawName: "v-repeat-click",
                  value: _vm.increase,
                  expression: "increase"
                }
              ],
              staticClass: "el-input-number__increase",
              class: { "is-disabled": _vm.maxDisabled },
              attrs: { role: "button" },
              on: {
                keydown: function($event) {
                  if (
                    !$event.type.indexOf("key") &&
                    _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                  ) {
                    return null
                  }
                  return _vm.increase($event)
                }
              }
            },
            [
              _c("i", {
                class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
              })
            ]
          )
        : _vm._e(),
      _c(
        "el-input",
        {
          ref: "input",
          staticClass: "dg-input-number__input",
          attrs: {
            value: _vm.displayValue,
            placeholder: _vm.placeholder,
            disabled: _vm.inputNumberDisabled,
            size: _vm.inputNumberSize,
            max: _vm.max,
            min: _vm.min,
            name: _vm.name,
            label: _vm.label
          },
          on: {
            blur: _vm.handleBlur,
            focus: _vm.handleFocus,
            input: _vm.handleInput,
            change: _vm.handleInputChange
          },
          nativeOn: {
            keydown: [
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])
                ) {
                  return null
                }
                $event.preventDefault()
                return _vm.increase($event)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])
                ) {
                  return null
                }
                $event.preventDefault()
                return _vm.decrease($event)
              }
            ]
          }
        },
        [_vm._t("suffix", null, { slot: "suffix" })],
        2
      )
    ],
    1
  )
}
var mainvue_type_template_id_9ff15c1a_staticRenderFns = []
mainvue_type_template_id_9ff15c1a_render._withStripped = true


// CONCATENATED MODULE: ./packages/input-number/src/main.vue?vue&type=template&id=9ff15c1a&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/input-number/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var input_number_src_mainvue_type_script_lang_js_ = ({
    name: 'DgInputNumber',
    mixins: [external_element_ui_["InputNumber"]],
    created: function created() {
        this;
        console.log(this);
    }
});
// CONCATENATED MODULE: ./packages/input-number/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var packages_input_number_src_mainvue_type_script_lang_js_ = (input_number_src_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/input-number/src/main.vue





/* normalize component */

var input_number_src_main_component = normalizeComponent(
  packages_input_number_src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_9ff15c1a_render,
  mainvue_type_template_id_9ff15c1a_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var input_number_src_main_api; }
input_number_src_main_component.options.__file = "packages/input-number/src/main.vue"
/* harmony default export */ var input_number_src_main = (input_number_src_main_component.exports);
// CONCATENATED MODULE: ./packages/input-number/index.js


/* istanbul ignore next */
input_number_src_main.install = function (Vue) {
  Vue.component(input_number_src_main.name, input_number_src_main);
};

/* harmony default export */ var input_number = (input_number_src_main);
// CONCATENATED MODULE: ./src/index.js
/* Automatically generated by './build/bin/build-entry.js' */









































var components = [scrollbar, radio_group, checkbox_group, packages_select, transfer, packages_tree, cascader, table, table_column, form_table, packages_form_column, packages_upload, viewer, tree_select, tree_drop, form_item, packages_alert, tag, packages_button, packages_dialog, table_select, packages_radio, date_picker, time_picker, log_search, time_line, line_table, packages_line_column, page_code, packages_switch, badge, card, calendar, packages_row, packages_col, group_select, packages_input, input_number];

var src_install = function install(Vue) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  components.forEach(function (component) {
    Vue.component(component.name, component);
  });

  // +lutz+
  Vue.prototype.$dgMsgbox = message_box;
  Vue.prototype.$dgAlert = message_box.alert;
  Vue.prototype.$dgConfirm = message_box.confirm;
  Vue.prototype.$dgPrompt = message_box.prompt;
  // -lutz-
  // +tangdm+
  Vue.prototype.$dgDialog = packages_dialog.dialog;
  Vue.prototype.$dgLayer = packages_dialog.layerDialog(Vue);
  Vue.prototype.$layer = packages_dialog.layer;
  // -tangdm-
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  src_install(window.Vue);
}

/* harmony default export */ var src = __webpack_exports__["default"] = ({
  version: '1.2.36',
  install: src_install,
  Scrollbar: scrollbar,
  RadioGroup: radio_group,
  CheckboxGroup: checkbox_group,
  Select: packages_select,
  Transfer: transfer,
  Tree: packages_tree,
  Cascader: cascader,
  Table: table,
  TableColumn: table_column,
  FormTable: form_table,
  FormColumn: packages_form_column,
  Upload: packages_upload,
  Viewer: viewer,
  TreeSelect: tree_select,
  TreeDrop: tree_drop,
  FormItem: form_item,
  Alert: packages_alert,
  Tag: tag,
  Button: packages_button,
  Dialog: packages_dialog,
  MessageBox: message_box,
  TableSelect: table_select,
  Radio: packages_radio,
  DatePicker: date_picker,
  TimePicker: time_picker,
  LogSearch: log_search,
  TimeLine: time_line,
  LineTable: line_table,
  LineColumn: packages_line_column,
  PageCode: page_code,
  Switch: packages_switch,
  Badge: badge,
  Card: card,
  Calendar: calendar,
  Row: packages_row,
  Col: packages_col,
  GroupSelect: group_select,
  Input: packages_input,
  InputNumber: input_number
});

/***/ })
/******/ ])["default"];