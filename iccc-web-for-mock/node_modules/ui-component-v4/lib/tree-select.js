module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 52);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return str2arr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return data2type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return uniqArr; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/*
 * @Author: lutz
 * @Date: 2019-06-24 11:16:27
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-01 15:15:41
 * @Last Modified by: huangjq
 * @Last Modified time: 2020-07-24 11:10:20
 */



/**
 * string to array
 * @param {any} val 需要处理的数据
 * @param {string} seq 字符串分隔符
 * @param {boolen} clone 是否深度拷贝
 * @param {array} dataSource 数据源
 * @param {string|number} dataSourceValueName 数据源需要匹配字段
 *
 * @return {array}
 */
function str2arr(val) {
    var seq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
    var clone = arguments[2];
    var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var dataSourceValueName = arguments[4];
    var isDataSourceChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNil(val) || val === '') {
        return [];
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return clone ? lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(val) : val;
    }

    var data = val.toString().split(seq);

    // 数据源必须是数组 && 长度大于0 && 展示数据必须是数组
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(dataSource) && dataSource.length && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(data)) {
        // 对象数组 或 数组的截取第一个数据判断数字类型
        if (dataSourceValueName != null && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0][dataSourceValueName]) || !dataSourceValueName && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0])) {
            data = data.map(function (item) {
                return Number(item);
            });
        }
    }

    if (isDataSourceChanged) {
        // huangjq 2020/07/24
        // 数据源改变后，有些原有的value不存在了，重新过滤
        var keys = [];
        dataSource.map(function (item) {
            return keys.push(item[dataSourceValueName]);
        });
        data = data.filter(function (item) {
            return keys.indexOf(item) > -1;
        });
    }

    return data;
}

/**
 * 将数据转换成指定数据类型
 * @param {*} val
 * @param {Array|String|Object} type 需要转换的类型
 * @param {String} seq 分隔符
 */
function data2type(val, type) {
    var seq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    var bool = lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type] && lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type](val);

    if (bool) {
        return val;
    }

    // 为保证选项可选中，这里不能将数字转成字符串
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(val) && type === 'String') {
        return val;
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val) && type === 'String') {
        return val.sort().join(seq);
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val) && type === 'Array') {
        return val.split(seq);
    }

    var map = {
        String: '',
        Array: [],
        Object: {}
    };

    return map[type];
}

/**
 * 两个数组合并成不重复的数组
 * @param {Array} exp
 * @param {Array} val
 */
function uniqArr(exp, val) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(exp) && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.union(exp, val);
    }

    return [];
}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return complex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return filterObj; });
/* unused harmony export replaceObj */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return complexObj; });
/* unused harmony export hyphenate */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getCmpProps; });
/* unused harmony export getCmpEvents */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getCmpType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getCmpPropsFromAttrs; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*
 * @Author: lutz
 * @Date: 2019-06-05 17:05:32
 * @Last Modified by: lutz
 * @Last Modified time: 2019-12-06 08:58:43
 */



/**
 * 修改组件属性或对象的属性
 * 深度克隆
 * @param {Object} cpm
 * @param {Array|Object} hook 生命周期函数和组件属性；数组默认删除，对象默认替换（恒等undefined，默认删除）
 * @param {Array|Object} watch 监听属性的修改
 * @return {Object}
 */
function complex(cpm, hook, watch) {
    var component = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(cpm);

    if (hook) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(hook)) {
            hook.forEach(function (item) {
                delete component[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(hook)) {
            for (var key in hook) {
                if (hook[key] === void 0) {
                    delete component[key];
                } else {
                    component[key] = hook[key];
                }
            }
        }
    }

    if (watch) {
        if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(watch) && component.watch) {
            watch.forEach(function (item) {
                delete component.watch[item];
            });
        } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(watch)) {
            for (var _key in watch) {
                if (watch[_key] === void 0) {
                    delete component.watch[_key];
                } else {
                    component.watch[_key] = watch[_key];
                }
            }
        }
    }

    return component;
}

/**
 * 删除对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {array} filterArr 需要删除的属性名称
 *
 * @return {object}
 */
function filterObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var newObj = _extends({}, obj);
    filterArr.forEach(function (item) {
        delete newObj[item];
    });
    return newObj;
}

/**
 * 替换对象上的属性
 * @param {object} obj 需要操作的对象
 * @param {object} filterObj 需要替换的属性名称，undefined则会删除对象上属性
 *
 * @return {object}
 */
function replaceObj() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var newObj = _extends({}, obj, filterObj);
    Object.keys(filterObj).forEach(function (item) {
        if (filterObj[item] === void 0) {
            delete newObj[item];
        }
    });
    return newObj;
}

/**
 * 根据参数操作对象
 * 浅拷贝
 * demo
 * a) 过滤undefined
 *  var obj = { input: void 0, change() { console.log('change') } }
 *  complexObj(obj, null, true) // { change: f }
 *  obj // { input: undefined, change: f }
 *
 * b) 删除属性
 *  var obj = { a: 2, b: 3 }, arr = ['a', 'c']
 *  complexObj(obj, arr) // { b: 3 }
 *  obj // {a: 2, b: 3}
 *
 * c) 替换属性
 *  var obj = { a: 2, b: 3 }, fobj = { a: void 0, c: 9, b: 4 }
 *  complexObj(obj, fobj) // { b: 4, c: 9 }
 *  obj // {a: 2, b: 3}
 *
 *
 * @param {object} obj 需要操作的对象
 * @param {array|object} filterVal 数组：需要删除的属性名称，对象：需要替换的属性名称，undefined则会删除对象上属性
 * @param {boolen} filterNull 是否过滤 undefined
 *
 * @return {object}
 */
function complexObj(obj, filterVal) {
    var filterNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var newObj = _extends({}, obj);

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(filterVal)) {
        newObj = filterObj(obj, filterVal);
    } else if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(filterVal)) {
        newObj = replaceObj(obj, filterVal);
    }

    // 过滤 undefined
    if (filterNull) {
        Object.keys(newObj).forEach(function (item) {
            if (newObj[item] === void 0) {
                delete newObj[item];
            }
        });
    }

    return newObj;
}

var hyphenateRE = /\B([A-Z])/g;

/**
 * 将驼峰转换成-隔开
 * hyphenate('ElTable') => "el-table"
 * @param {string} str
 * @return {string}
 */
var hyphenate = function hyphenate(str) {
    return str.replace(hyphenateRE, "-$1").toLowerCase();
};

/**
 * 获取指定组件的参数值
 * @param cmp 组件对象，如ElTable
 * @param instance  当前组件对象,调用时，传this
 * @param filterObject 过滤属性值，{name:"11",sex:(props,val)=>val,age:undefined} 属性undefined 删除属性
 */
function getCmpProps(cmp, instance) {
    var filterObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    // 如果不是组件函数，则生成组件函数，主要是把混合的属性合并在一起
    if (!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(cmp)) {
        cmp = instance.constructor.extend(cmp);
    }
    // 传入属性值+默认的值
    var propsData = _extends({}, instance.$attrs, instance.$props);

    // 过滤属性值
    var cmpProps = {};
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(cmp.options.props, function (value, key) {
        var propValue = propsData[key] || propsData[hyphenate(key)];
        // 过滤组件属性
        if (filterObj.hasOwnProperty(key)) {
            propValue = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(filterObj[key]) ? filterObj[key](propsData, propValue) : filterObj[key];
        }

        // 过滤 undefined
        if (propValue !== undefined) {
            cmpProps[key] = propValue;
        }
    });

    return cmpProps;
}

/**
 * 获取组件的事件对象
 * @param instance
 * @param filterObj {click:"handleClick",change:(evt)=>val,input:undefined} 属性undefined 删除属性
 * @returns {*}
 */
function getCmpEvents(instance) {
    var filterObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var listeners = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.clone(instance.$listeners);
    lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forOwn(filterObj, function (val, key) {
        if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val)) {
            listeners[key] = instance[val];
        } else if (val && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isFunction(val)) {
            listeners[key] = val;
        } else if (val === undefined) {
            delete listeners[key];
        }
    });
    return listeners;
}

/**
 * 根据组件参数是，require、import获取组件的对象
 * @param type
 * @returns {type}
 */
function getCmpType(type) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isObject(type) && type.default) {
        type = type.default;
    }
    if (type && type instanceof Promise) {
        var promise = type;
        type = function type(resolve, reject) {
            promise.then(function (obj) {
                resolve(obj);
            });
        };
    }
    return type;
}

/**
 * 从$attrs获取匹配的属性
 * @param instance
 * @param reg
 */
function getCmpPropsFromAttrs(instance, reg) {
    var attr = instance.$attrs;
    var obj = {};

    Object.keys(attr).map(function (item) {
        if (reg.test(item)) {
            obj[item.replace(reg, "")] = attr[item];
        }
    });

    return obj;
}

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return on; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return off; });
/* unused harmony export once */
/* unused harmony export hasClass */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return removeClass; });
/* unused harmony export getStyle */
/* unused harmony export setStyle */
/* unused harmony export isScroll */
/* unused harmony export getScrollContainer */
/* unused harmony export isInContainer */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* istanbul ignore next */



var isServer = vue__WEBPACK_IMPORTED_MODULE_0___default.a.prototype.$isServer;
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var ieVersion = isServer ? 0 : Number(document.documentMode);

/* istanbul ignore next */
var trim = function trim(string) {
  return (string || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
/* istanbul ignore next */
var camelCase = function camelCase(name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, "Moz$1");
};

/* istanbul ignore next */
var on = function () {
  if (!isServer && document.addEventListener) {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.addEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var off = function () {
  if (!isServer && document.removeEventListener) {
    return function (element, event, handler) {
      if (element && event) {
        element.removeEventListener(event, handler, false);
      }
    };
  } else {
    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on" + event, handler);
      }
    };
  }
}();

/* istanbul ignore next */
var once = function once(el, event, fn) {
  var listener = function listener() {
    if (fn) {
      fn.apply(this, arguments);
    }
    off(el, event, listener);
  };
  on(el, event, listener);
};

/* istanbul ignore next */
function hasClass(el, cls) {
  if (!el || !cls) return false;
  if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");
  if (el.classList) {
    return el.classList.contains(cls);
  } else {
    return (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
  }
}

/* istanbul ignore next */
function addClass(el, cls) {
  if (!el) return;
  var curClass = el.className;
  var classes = (cls || "").split(" ");

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.add(clsName);
    } else if (!hasClass(el, clsName)) {
      curClass += " " + clsName;
    }
  }
  if (!el.classList) {
    el.className = curClass;
  }
}

/* istanbul ignore next */
function removeClass(el, cls) {
  if (!el || !cls) return;
  var classes = cls.split(" ");
  var curClass = " " + el.className + " ";

  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName) continue;

    if (el.classList) {
      el.classList.remove(clsName);
    } else if (hasClass(el, clsName)) {
      curClass = curClass.replace(" " + clsName + " ", " ");
    }
  }
  if (!el.classList) {
    el.className = trim(curClass);
  }
}

/* istanbul ignore next */
var getStyle = ieVersion < 9 ? function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "styleFloat";
  }
  try {
    switch (styleName) {
      case "opacity":
        try {
          return element.filters.item("alpha").opacity / 100;
        } catch (e) {
          return 1.0;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function (element, styleName) {
  if (isServer) return;
  if (!element || !styleName) return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "cssFloat";
  }
  try {
    var computed = document.defaultView.getComputedStyle(element, "");
    return element.style[styleName] || computed ? computed[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};

/* istanbul ignore next */
function setStyle(element, styleName, value) {
  if (!element || !styleName) return;

  if ((typeof styleName === "undefined" ? "undefined" : _typeof(styleName)) === "object") {
    for (var prop in styleName) {
      if (styleName.hasOwnProperty(prop)) {
        setStyle(element, prop, styleName[prop]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === "opacity" && ieVersion < 9) {
      element.style.filter = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
    } else {
      element.style[styleName] = value;
    }
  }
}

var isScroll = function isScroll(el, vertical) {
  if (isServer) return;

  var determinedDirection = vertical !== null || vertical !== undefined;
  var overflow = determinedDirection ? vertical ? getStyle(el, "overflow-y") : getStyle(el, "overflow-x") : getStyle(el, "overflow");

  return overflow.match(/(scroll|auto)/);
};

var getScrollContainer = function getScrollContainer(el, vertical) {
  if (isServer) return;

  var parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent)) {
      return window;
    }
    if (isScroll(parent, vertical)) {
      return parent;
    }
    parent = parent.parentNode;
  }

  return parent;
};

var isInContainer = function isInContainer(el, container) {
  if (isServer || !el || !container) return false;

  var elRect = el.getBoundingClientRect();
  var containerRect = void 0;

  if ([window, document, document.documentElement, null, undefined].includes(container)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container.getBoundingClientRect();
  }

  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(4);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./src/utils/types.js
function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}

function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

function isHtmlElement(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
}

var isFunction = function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
};

var isUndefined = function isUndefined(val) {
  return val === void 0;
};

var isDefined = function isDefined(val) {
  return val !== undefined && val !== null;
};
// CONCATENATED MODULE: ./src/utils/util.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasOwn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return toObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getValueByPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getPropByPath; });
/* unused harmony export generateId */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return valueEquals; });
/* unused harmony export escapeRegexpString */
/* unused harmony export arrayFindIndex */
/* unused harmony export arrayFind */
/* unused harmony export coerceTruthyValueToArray */
/* unused harmony export isIE */
/* unused harmony export isEdge */
/* unused harmony export autoprefixer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return kebabCase; });
/* unused harmony export capitalize */
/* unused harmony export looseEqual */
/* unused harmony export arrayEquals */
/* unused harmony export isEqual */
/* unused harmony export isEmpty */
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




var util_hasOwnProperty = Object.prototype.hasOwnProperty;

function noop() {}

function hasOwn(obj, key) {
  return util_hasOwnProperty.call(obj, key);
}

function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

var getValueByPath = function getValueByPath(object, prop) {
  prop = prop || "";
  var paths = prop.split(".");
  var current = object;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};

function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, ".$1");
  path = path.replace(/^\./, "");

  var keyArr = path.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error("please transfer a valid prop path to form item!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}

var generateId = function generateId() {
  return Math.floor(Math.random() * 10000);
};

var valueEquals = function valueEquals(a, b) {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
var arrayFindIndex = function arrayFindIndex(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};

var arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};

// coerce truthy value to array
var coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};

var util_isIE = function isIE() {
  return !external_vue_default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};

var util_isEdge = function isEdge() {
  return !external_vue_default.a.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
};

var autoprefixer = function autoprefixer(style) {
  if ((typeof style === "undefined" ? "undefined" : _typeof(style)) !== "object") return style;
  var rules = ["transform", "transition", "animation"];
  var prefixes = ["ms-", "webkit-"];
  rules.forEach(function (rule) {
    var value = style[rule];
    if (rule && value) {
      prefixes.forEach(function (prefix) {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};

var kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, "$1-$2").replace(hyphenateRE, "$1-$2").toLowerCase();
};

var util_capitalize = function capitalize(str) {
  if (!isString(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var util_looseEqual = function looseEqual(a, b) {
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};

var arrayEquals = function arrayEquals(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];

  if (arrayA.length !== arrayB.length) {
    return false;
  }

  for (var i = 0; i < arrayA.length; i++) {
    if (!util_looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }

  return true;
};

var isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return util_looseEqual(value1, value2);
};

var isEmpty = function isEmpty(val) {
  // null or undefined
  if (val == null) return true;

  if (typeof val === "boolean") return false;

  if (typeof val === "number") return !val;

  if (val instanceof Error) return val.message === "";

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case "[object String]":
    case "[object Array]":
      return !val.length;

    // Map or Set or File
    case "[object File]":
    case "[object Map]":
    case "[object Set]":
      {
        return !val.size;
      }
    // Plain Object
    case "[object Object]":
      {
        return !Object.keys(val).length;
      }
  }

  return false;
};

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (target) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }

  return target;
});

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/* harmony default export */ __webpack_exports__["a"] = ({
    props: {
        valueName: String,
        labelName: String,
        disabledName: [String, Function],
        childrenName: String,
        isLeafName: String
    },
    computed: {
        defaultProp: function defaultProp() {
            var valueName = this.valueName,
                labelName = this.labelName,
                childrenName = this.childrenName,
                disabledName = this.disabledName,
                isLeafName = this.isLeafName;

            var _ref = this.props || {},
                value = _ref.value,
                label = _ref.label,
                children = _ref.children,
                disabled = _ref.disabled,
                isLeaf = _ref.isLeaf,
                other = _objectWithoutProperties(_ref, ['value', 'label', 'children', 'disabled', 'isLeaf']);

            return _extends({}, other, {
                value: valueName || value || 'value',
                label: labelName || label || 'label',
                disabled: disabledName || disabled || 'disabled',
                children: childrenName || children || 'children',
                isLeaf: isLeafName || isLeaf || 'isLeaf'
            });
        }
    }
});

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var main_dg_mixins_convert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);
/* harmony import */ var main_dg_utils_data_convert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/*
@author lutz
@updateDate 2019-06-18
@describe
    props
        data {array} 组件数据源,透传到 $data.dataSource
        disabled-value {array|string} 禁用项
        seq {string} 分隔符（命名参考: https://nodejs.org/dist/latest-v10.x/docs/api/querystring.html）
        output-format {string} enum["String", "Array"]
    data
        dataSource {array} 数据源
    computed
        itemsWithDisabled @return {array<object>} 添加禁用状态到数据源
    watch
        data => dataSource 兼容组件 $props.data 对 $data.dataSource 值变化
*/




/* harmony default export */ __webpack_exports__["a"] = ({
    mixins: [main_dg_mixins_convert_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
    props: {
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabledValue: {
            type: [String, Array],
            default: function _default() {
                return [];
            }
        },
        seq: { type: String, default: ',' },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        }
    },
    watch: {
        data: function data(val) {
            this.dataSource = val;
        },

        // dataSource 触发 data改变的方法
        dataSource: function dataSource(val) {
            this.$emit('change-data', val);
        }
    },
    data: function data() {
        return { dataSource: this.data };
    },

    computed: {
        itemsWithDisabled: function itemsWithDisabled() {
            var dataSource = this.dataSource,
                disabledValue = this.disabledValue,
                seq = this.seq,
                defaultProp = this.defaultProp;

            var disabledArr = Object(main_dg_utils_data_convert_js__WEBPACK_IMPORTED_MODULE_2__[/* str2arr */ "b"])(disabledValue, seq, true, dataSource, defaultProp.value);
            if (disabledArr.length < 1) {
                return dataSource;
            }
            // 深度拷贝,避免污染数据源($data)
            var data = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(dataSource);
            data.forEach(function (item) {
                var isInclude = lodash__WEBPACK_IMPORTED_MODULE_0___default.a.includes(disabledArr, item[defaultProp.value]);
                // 这里if中的布尔值要分开写否则会报错
                if (isInclude) {
                    item[defaultProp.disabled] = true;
                }
            });
            return data;
        }
    }
});

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addResizeListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return removeResizeListener; });
/* harmony import */ var resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0__);


var isServer = typeof window === "undefined";

/* istanbul ignore next */
var resizeHandler = function resizeHandler(entries) {
  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var entry = _ref;

    var listeners = entry.target.__resizeListeners__ || [];
    if (listeners.length) {
      listeners.forEach(function (fn) {
        fn();
      });
    }
  }
};

/* istanbul ignore next */
var addResizeListener = function addResizeListener(element, fn) {
  if (isServer) return;
  if (!element.__resizeListeners__) {
    element.__resizeListeners__ = [];
    element.__ro__ = new resize_observer_polyfill__WEBPACK_IMPORTED_MODULE_0___default.a(resizeHandler);
    element.__ro__.observe(element);
  }
  element.__resizeListeners__.push(fn);
};

/* istanbul ignore next */
var removeResizeListener = function removeResizeListener(element, fn) {
  if (!element || !element.__resizeListeners__) return;
  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
  if (!element.__resizeListeners__.length) {
    element.__ro__.disconnect();
  }
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("jquery");

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function (child) {
    var name = child.$options.componentName;

    if (name === componentName) {
      child.$emit.apply(child, [eventName].concat(params));
    } else {
      _broadcast.apply(child, [componentName, eventName].concat([params]));
    }
  });
}
/* harmony default export */ __webpack_exports__["a"] = ({
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent = this.$parent || this.$root;
      var name = parent.$options.componentName;

      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;

        if (parent) {
          name = parent.$options.componentName;
        }
      }
      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
});

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("throttle-debounce/debounce");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "label",
    {
      staticClass: "el-radio dg-radio",
      class: [
        _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
        { "is-disabled": _vm.isDisabled },
        { "is-focus": _vm.focus },
        { "is-bordered": _vm.border },
        { "is-checked": _vm.model === _vm.label }
      ],
      attrs: {
        role: "radio",
        "aria-checked": _vm.model === _vm.label,
        "aria-disabled": _vm.isDisabled,
        tabindex: _vm.tabIndex
      },
      on: {
        keydown: function($event) {
          if (
            !$event.type.indexOf("key") &&
            _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])
          ) {
            return null
          }
          $event.stopPropagation()
          $event.preventDefault()
          _vm.model = _vm.isDisabled ? _vm.model : _vm.label
        }
      }
    },
    [
      _c(
        "span",
        {
          staticClass: "el-radio__input",
          class: {
            "is-disabled": _vm.isDisabled,
            "is-checked": _vm.model === _vm.label
          }
        },
        [
          _c("span", { staticClass: "el-radio__inner" }),
          _c("input", {
            directives: [
              {
                name: "model",
                rawName: "v-model",
                value: _vm.model,
                expression: "model"
              }
            ],
            ref: "radio",
            staticClass: "el-radio__original",
            attrs: {
              type: "radio",
              "aria-hidden": "true",
              name: _vm.name,
              disabled: _vm.isDisabled,
              tabindex: "-1"
            },
            domProps: {
              value: _vm.label,
              checked: _vm._q(_vm.model, _vm.label)
            },
            on: {
              focus: function($event) {
                _vm.focus = true
              },
              click: _vm.handleClick,
              change: [
                function($event) {
                  _vm.model = _vm.label
                },
                _vm.handleChange
              ],
              blur: function($event) {
                _vm.focus = false
              }
            }
          })
        ]
      ),
      _c(
        "span",
        {
          staticClass: "el-radio__label",
          on: {
            keydown: function($event) {
              $event.stopPropagation()
            }
          }
        },
        [
          _vm._t("default"),
          !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
        ],
        2
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=template&id=ddcdb848&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/radio/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgRadio',

    mixins: [external_element_ui_["Radio"]],

    props: {
        // 是否关闭再次点击取消功能
        callOff: Boolean
    },

    methods: {
        // create
        handleClick: function handleClick() {
            var bool = this.model === this.label;
            this.$emit('has-click', this.label);
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleClick', this.label);
                this.dispatch('DgRadioGroup', 'handleClick', this.label);
            }
            // 如果前后值相等且关闭取消，则不让继续触发
            if (bool && this.callOff) {
                return;
            }
            var val = bool ? '' : this.label;
            this.$emit('input', val);
            this.$emit('change', val);
            // 兼容 <el-radio-group> & <dg-radio-group> 两种方式。注：这两种组件不能使用包含关系。
            if (this.isGroup) {
                this.dispatch('ElRadioGroup', 'handleChange', val);
                this.dispatch('DgRadioGroup', 'handleChange', val);
            }
        },


        // update
        handleChange: function handleChange() {
            var _this = this;

            this.$nextTick(function () {
                // 如果前后值相等则不让触发 change 事件
                if (_this.model === _this.label) {
                    return;
                }
                _this.$emit('change', _this.model);
                if (_this.isGroup) {
                    _this.dispatch('ElRadioGroup', 'handleChange', _this.model);
                    _this.dispatch('DgRadioGroup', 'handleChange', _this.model); // lutz+
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/radio/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/radio/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/radio/src/main.vue"
/* harmony default export */ var main = (component.exports);
// CONCATENATED MODULE: ./packages/radio/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var packages_radio = __webpack_exports__["default"] = (main);

/***/ }),
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, exports) {

module.exports = require("resize-observer-polyfill");

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getChildrenRefs; });
function getChildrenRefs(component, ref) {
  var method = {};
  for (var key in component.methods) {
    method[key] = new Function("return this.$refs." + ref + "." + key + ".apply(this,arguments)");
  }
  return method;
}

/***/ }),
/* 20 */,
/* 21 */,
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=template&id=01558241&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      staticClass: "el-tree dg-tree",
      class: {
        "el-tree--highlight-current": _vm.highlightCurrent,
        "is-dragging": !!_vm.dragState.draggingNode,
        "is-drop-not-allow": !_vm.dragState.allowDrop,
        "is-drop-inner": _vm.dragState.dropType === "inner",
        "dg-tree--icon-class-style": _vm.iconClass
      },
      attrs: { role: "tree" }
    },
    [
      _vm._l(_vm.root.childNodes, function(child) {
        return _c("el-tree-node", {
          key: _vm.getNodeKey(child),
          attrs: {
            node: child,
            props: _vm.defaultProp,
            "node-key": _vm.nodeKey,
            "check-strictly": _vm.checkStrictly,
            "render-after-expand": _vm.renderAfterExpand,
            "show-checkbox": _vm.showCheckbox,
            "radio-type": _vm.radioType,
            "render-content": _vm.renderContent
          },
          on: { "node-expand": _vm.handleNodeExpand }
        })
      }),
      _vm.isEmpty
        ? _c("div", { staticClass: "el-tree__empty-block" }, [
            _c("span", { staticClass: "el-tree__empty-text" }, [
              _vm._v(_vm._s(_vm.emptyText))
            ])
          ])
        : _vm._e(),
      _c("div", {
        directives: [
          {
            name: "show",
            rawName: "v-show",
            value: _vm.dragState.showDropIndicator,
            expression: "dragState.showDropIndicator"
          }
        ],
        ref: "dropIndicator",
        staticClass: "el-tree__drop-indicator"
      })
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=template&id=01558241&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&
var tree_nodevue_type_template_id_3ba3ef0e_render = function() {
  var this$1 = this
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.node.visible,
          expression: "node.visible"
        }
      ],
      ref: "node",
      staticClass: "el-tree-node dg-tree-node",
      class: {
        "is-expanded": _vm.expanded,
        "is-current": _vm.tree.store.currentNode === _vm.node,
        "is-hidden": !_vm.node.visible,
        "is-focusable": !_vm.node.disabled,
        "is-checked": !_vm.node.disabled && _vm.node.checked,
        "is-radio": _vm.node.disabled && !_vm.node.checked && !_vm.checkStrictly
      },
      attrs: {
        role: "treeitem",
        tabindex: "-1",
        "aria-expanded": _vm.expanded,
        "aria-disabled": _vm.node.disabled,
        "aria-checked": _vm.node.checked,
        draggable: _vm.tree.draggable
      },
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.handleClick($event)
        },
        contextmenu: function($event) {
          return this$1.handleContextMenu($event)
        },
        dragstart: function($event) {
          $event.stopPropagation()
          return _vm.handleDragStart($event)
        },
        dragover: function($event) {
          $event.stopPropagation()
          return _vm.handleDragOver($event)
        },
        dragend: function($event) {
          $event.stopPropagation()
          return _vm.handleDragEnd($event)
        },
        drop: function($event) {
          $event.stopPropagation()
          return _vm.handleDrop($event)
        }
      }
    },
    [
      _c(
        "div",
        {
          staticClass: "el-tree-node__content",
          style: {
            "padding-left": (_vm.node.level - 1) * _vm.tree.indent + "px"
          }
        },
        [
          _c("span", {
            class: [
              {
                "is-leaf": _vm.node.isLeaf,
                expanded: !_vm.node.isLeaf && _vm.expanded
              },
              "el-tree-node__expand-icon",
              _vm.tree.iconClass
                ? _vm.node.isLeaf
                  ? _vm.tree.iconLeaf
                    ? _vm.tree.iconLeaf
                    : ""
                  : _vm.tree.iconClass
                : "el-icon-caret-right"
            ],
            on: {
              click: function($event) {
                $event.stopPropagation()
                return _vm.handleExpandIconClick($event)
              }
            }
          }),
          _vm.showCheckbox &&
          !(_vm.node.store.isFrozenRoot && _vm.node.level === 1)
            ? _c("el-checkbox", {
                attrs: {
                  indeterminate: _vm.node.indeterminate,
                  disabled: !!_vm.node.disabled
                },
                on: { change: _vm.handleCheckChange },
                nativeOn: {
                  click: function($event) {
                    $event.stopPropagation()
                  }
                },
                model: {
                  value: _vm.node.checked,
                  callback: function($$v) {
                    _vm.$set(_vm.node, "checked", $$v)
                  },
                  expression: "node.checked"
                }
              })
            : _vm.radioType
            ? _c(
                "dg-radio",
                {
                  attrs: {
                    label: _vm.node.data[_vm.nodeKey],
                    disabled: !!_vm.node.disabled
                  },
                  on: { change: _vm.handleRadioChange },
                  model: {
                    value: _vm.node.radio,
                    callback: function($$v) {
                      _vm.$set(_vm.node, "radio", $$v)
                    },
                    expression: "node.radio"
                  }
                },
                [_c("span")]
              )
            : _vm._e(),
          _vm.node.loading
            ? _c("span", {
                staticClass: "el-tree-node__loading-icon el-icon-loading"
              })
            : _vm._e(),
          _c("node-content", { attrs: { node: _vm.node } })
        ],
        1
      ),
      _c("el-collapse-transition", [
        !_vm.renderAfterExpand || _vm.childNodeRendered
          ? _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.expanded,
                    expression: "expanded"
                  }
                ],
                staticClass: "el-tree-node__children",
                attrs: { role: "group", "aria-expanded": _vm.expanded }
              },
              _vm._l(_vm.node.childNodes, function(child) {
                return _c("el-tree-node", {
                  key: _vm.getNodeKey(child),
                  attrs: {
                    "node-key": _vm.nodeKey,
                    "check-strictly": _vm.checkStrictly,
                    "radio-type": _vm.radioType,
                    "render-content": _vm.renderContent,
                    "render-after-expand": _vm.renderAfterExpand,
                    "show-checkbox": _vm.showCheckbox,
                    node: child
                  },
                  on: { "node-expand": _vm.handleChildNodeExpand }
                })
              }),
              1
            )
          : _vm._e()
      ])
    ],
    1
  )
}
var tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = []
tree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&

// EXTERNAL MODULE: ./src/utils/dom.js
var dom = __webpack_require__(6);

// CONCATENATED MODULE: ./src/transitions/collapse-transition.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var collapse_transition_Transition = function () {
  function Transition() {
    _classCallCheck(this, Transition);
  }

  Transition.prototype.beforeEnter = function beforeEnter(el) {
    Object(dom["a" /* addClass */])(el, 'collapse-transition');
    if (!el.dataset) el.dataset = {};

    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;

    el.style.height = '0';
    el.style.paddingTop = 0;
    el.style.paddingBottom = 0;
  };

  Transition.prototype.enter = function enter(el) {
    el.dataset.oldOverflow = el.style.overflow;
    if (el.scrollHeight !== 0) {
      el.style.height = el.scrollHeight + 'px';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    } else {
      el.style.height = '';
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    }

    el.style.overflow = 'hidden';
  };

  Transition.prototype.afterEnter = function afterEnter(el) {
    // for safari: remove class then reset height is necessary
    Object(dom["d" /* removeClass */])(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
  };

  Transition.prototype.beforeLeave = function beforeLeave(el) {
    if (!el.dataset) el.dataset = {};
    el.dataset.oldPaddingTop = el.style.paddingTop;
    el.dataset.oldPaddingBottom = el.style.paddingBottom;
    el.dataset.oldOverflow = el.style.overflow;

    el.style.height = el.scrollHeight + 'px';
    el.style.overflow = 'hidden';
  };

  Transition.prototype.leave = function leave(el) {
    if (el.scrollHeight !== 0) {
      // for safari: add class after set height, or it will jump to zero height suddenly, weired
      Object(dom["a" /* addClass */])(el, 'collapse-transition');
      el.style.height = 0;
      el.style.paddingTop = 0;
      el.style.paddingBottom = 0;
    }
  };

  Transition.prototype.afterLeave = function afterLeave(el) {
    Object(dom["d" /* removeClass */])(el, 'collapse-transition');
    el.style.height = '';
    el.style.overflow = el.dataset.oldOverflow;
    el.style.paddingTop = el.dataset.oldPaddingTop;
    el.style.paddingBottom = el.dataset.oldPaddingBottom;
  };

  return Transition;
}();

/* harmony default export */ var collapse_transition = ({
  name: 'ElCollapseTransition',
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children;

    var data = {
      on: new collapse_transition_Transition()
    };

    return h('transition', data, children);
  }
});
// EXTERNAL MODULE: ./packages/radio/index.js + 5 modules
var packages_radio = __webpack_require__(15);

// EXTERNAL MODULE: ./src/mixins/emitter.js
var emitter = __webpack_require__(13);

// CONCATENATED MODULE: ./packages/tree/src/model/util.js
var NODE_KEY = '$treeNodeId';

var markNodeData = function markNodeData(node, data) {
  if (!data || data[NODE_KEY]) return;
  Object.defineProperty(data, NODE_KEY, {
    value: node.id,
    enumerable: false,
    configurable: false,
    writable: false
  });
};

var util_getNodeKey = function getNodeKey(key, data) {
  if (!key) return data[NODE_KEY];
  return data[key];
};

var findNearestComponent = function findNearestComponent(element, componentName) {
  var target = element;
  while (target && target.tagName !== 'BODY') {
    if (target.__vue__ && target.__vue__.$options.name === componentName) {
      return target.__vue__;
    }
    target = target.parentNode;
  }
  return null;
};
// EXTERNAL MODULE: ./src/dg-utils/data-convert.js
var data_convert = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








/* harmony default export */ var tree_nodevue_type_script_lang_js_ = ({
    name: 'ElTreeNode',

    componentName: 'ElTreeNode',

    mixins: [emitter["a" /* default */]],

    props: {
        // create author:lutz
        checkStrictly: Boolean,
        node: {
            default: function _default() {
                return {};
            }
        },
        radioType: String,
        nodeKey: String,
        props: {},
        renderContent: Function,
        renderAfterExpand: {
            type: Boolean,
            default: true
        },
        showCheckbox: {
            type: Boolean,
            default: false
        }
    },

    components: {
        ElCollapseTransition: collapse_transition,
        DgRadio: packages_radio["default"],
        ElCheckbox: external_element_ui_["Checkbox"],
        NodeContent: {
            props: {
                node: {
                    required: true
                }
            },
            render: function render(h) {
                var parent = this.$parent;
                var tree = parent.tree;
                var node = this.node;
                var data = node.data,
                    store = node.store;

                // add author: tangdm 增加过滤值高亮

                var temple = node.store.isHighLight && node.filter ? node.label.replace(new RegExp(node.filter + '{1}'), '<span class="dg-tree-filter__light">' + node.filter + '</span>') : node.label;

                return parent.renderContent ? parent.renderContent.call(parent._renderProxy, h, { _self: tree.$vnode.context, node: node, data: data, store: store }) : tree.$scopedSlots.default ? tree.$scopedSlots.default({ node: node, data: data }) :
                // update author: tangdm desc: 支持 `v-html` 模板语法，用于支持高亮检索词
                // <span class="el-tree-node__label">{node.label}</span>
                h('span', { 'class': 'el-tree-node__label', domProps: {
                        'innerHTML': temple
                    }
                });
            }
        }
    },

    data: function data() {
        return {
            tree: null,
            expanded: false,
            childNodeRendered: false,
            oldChecked: null,
            oldIndeterminate: null
        };
    },


    watch: {
        'node.indeterminate': function nodeIndeterminate(val) {
            this.handleSelectChange(this.node.checked, val);
        },
        'node.checked': function nodeChecked(val) {
            this.handleSelectChange(val, this.node.indeterminate);
        },
        'node.expanded': function nodeExpanded(val) {
            var _this = this;

            this.$nextTick(function () {
                return _this.expanded = val;
            });
            if (val) {
                this.childNodeRendered = true;
            }
        }
    },

    methods: {
        getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.tree.nodeKey, node.data);
        },
        handleSelectChange: function handleSelectChange(checked, indeterminate, bool) {
            if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {
                this.tree.$emit('check-change', this.node.data, checked, indeterminate);
                // create-start author:lutz  checkbox的v-model
                var _tree = this.tree,
                    seq = _tree.seq,
                    outputFormat = _tree.outputFormat;

                var data = this.tree.getCheckedKeys(false);
                this.tree.$emit('input', Object(data_convert["a" /* data2type */])(data, outputFormat, seq));
                // create-end
            }
            this.oldChecked = checked;
            this.indeterminate = indeterminate;
        },
        handleClick: function handleClick() {
            // create-start 单选禁用的情况展开子元素
            if (this.node.disabled && !this.node.checked) {
                this.handleExpandIconClick();
                return;
            }
            // create-end
            var store = this.tree.store;
            store.setCurrentNode(this.node);
            this.tree.$emit('current-change', store.currentNode ? store.currentNode.data : null, store.currentNode);
            this.tree.currentNode = this;
            if (this.tree.expandOnClickNode) {
                this.handleExpandIconClick();
            }

            if (this.tree.checkOnClickNode && !this.node.disabled) {
                this.handleCheckChange(null, {
                    target: { checked: !this.node.checked }
                });
            }

            // create-start author:lutz 普通单选的v-model
            // !showCheckbox && radioType === '' 非复选框的情况
            if (!this.showCheckbox && this.tree.radioType === '' && !this.node.disabled) {
                var _tree2 = this.tree,
                    seq = _tree2.seq,
                    outputFormat = _tree2.outputFormat;

                var data = this.node.data[this.nodeKey];
                var outVal = Object(data_convert["a" /* data2type */])(data, outputFormat, seq);
                this.tree.$emit('input', Object(data_convert["a" /* data2type */])(data, outputFormat, seq));
                this.dispatch('LSelect', 'handleCloseDrapdown');
            }
            // create-end

            this.tree.$emit('node-click', this.node.data, this.node, this);
        },
        handleContextMenu: function handleContextMenu(event) {
            if (this.tree._events['node-contextmenu'] && this.tree._events['node-contextmenu'].length > 0) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.tree.$emit('node-contextmenu', event, this.node.data, this.node, this);
        },
        handleExpandIconClick: function handleExpandIconClick() {
            if (this.node.isLeaf) return;
            if (this.expanded) {
                this.tree.$emit('node-collapse', this.node.data, this.node, this);
                this.node.collapse();
            } else {
                this.node.expand();
                this.$emit('node-expand', this.node.data, this.node, this);
            }
        },
        handleCheckChange: function handleCheckChange(value, ev) {
            var _this2 = this;

            // 通过勾选的值，判断父子节点是否关联
            var node = this.node;
            var checked = void 0;

            // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
            // if(node.store.isToggleContact) {
            //     checked = node.expanded ? (node.checked === value && node.selected ? !value : value) : value;
            // } else {
            checked = ev.target.checked;
            // }

            this.node.setChecked(checked, !this.tree.checkStrictly);
            this.$nextTick(function () {
                var store = _this2.tree.store;
                _this2.tree.$emit('check', _this2.node.data, {
                    checkedNodes: store.getCheckedNodes(),
                    checkedKeys: store.getCheckedKeys(),
                    halfCheckedNodes: store.getHalfCheckedNodes(),
                    halfCheckedKeys: store.getHalfCheckedKeys()
                });
            });
        },
        handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {
            this.broadcast('ElTreeNode', 'tree-node-expand', node);
            this.tree.$emit('node-expand', nodeData, node, instance);
        },
        handleDragStart: function handleDragStart(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-start', event, this);
        },
        handleDragOver: function handleDragOver(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-over', event, this);
            event.preventDefault();
        },
        handleDrop: function handleDrop(event) {
            event.preventDefault();
        },
        handleDragEnd: function handleDragEnd(event) {
            if (!this.tree.draggable) return;
            this.tree.$emit('tree-node-drag-end', event, this);
        },


        // lutz+
        /* 当单选框被点击的时候触发 $emit('radio', node.data: object, { radioNodes: array, radioKeys: array }) */
        handleRadioChange: function handleRadioChange(val) {
            var _this3 = this;

            this.$nextTick(function () {
                var store = _this3.tree.store;

                if (_this3.radioType === 'level') {
                    _this3.node.parent.childNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                } else {
                    var allNodes = store._getAllNodes().sort(function (a, b) {
                        return b.level - a.level;
                    });
                    allNodes.forEach(function (node) {
                        return node.setRadio(null);
                    });
                }

                _this3.node.setRadio(val);
                var radioKeys = store.getRadioKeys();
                _this3.tree.$emit('radio', _this3.node.data, { radioNodes: store.getRadioNodes(), radioKeys: radioKeys });

                var _tree3 = _this3.tree,
                    seq = _tree3.seq,
                    outputFormat = _tree3.outputFormat;


                _this3.tree.$emit('input', Object(data_convert["a" /* data2type */])(radioKeys, outputFormat, seq));
                if (_this3.radioType !== 'level') {
                    _this3.dispatch('LSelect', 'handleCloseDrapdown');
                }
            });
        }
        // lutz-

    },

    created: function created() {
        var _this4 = this;

        var parent = this.$parent;

        if (parent.isTree) {
            this.tree = parent;
        } else {
            this.tree = parent.tree;
        }

        var tree = this.tree;
        if (!tree) {
            console.warn("Can not find node's tree.");
        }

        var props = tree.props || {};
        var childrenKey = props['children'] || 'children';

        this.$watch('node.data.' + childrenKey, function () {
            _this4.node.updateChildren();
        });

        if (this.node.expanded) {
            this.expanded = true;
            this.childNodeRendered = true;
        }

        if (this.tree.accordion) {
            this.$on('tree-node-expand', function (node) {
                if (_this4.node !== node) {
                    _this4.node.collapse();
                }
            });
        }
    }
});
// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_tree_nodevue_type_script_lang_js_ = (tree_nodevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_tree_nodevue_type_script_lang_js_,
  tree_nodevue_type_template_id_3ba3ef0e_render,
  tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/tree/src/tree-node.vue"
/* harmony default export */ var tree_node = (component.exports);
// EXTERNAL MODULE: ./src/utils/merge.js
var merge = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/tree/src/model/node.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function node_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var getChildState = function getChildState(node) {
    var all = true;
    var none = true;
    var allWithoutDisable = true;
    for (var i = 0, j = node.length; i < j; i++) {
        var n = node[i];
        if (n.checked !== true || n.indeterminate) {
            all = false;
            if (!n.disabled) {
                allWithoutDisable = false;
            }
        }
        if (n.checked !== false || n.indeterminate) {
            none = false;
        }
    }

    return { all: all, none: none, allWithoutDisable: allWithoutDisable, half: !all && !none };
};

var reInitChecked = function reInitChecked(node) {
    if (node.childNodes.length === 0) return;

    // add author: tangdm desc: 冻结根节点
    if (node.store.isFrozenRoot && node.level === 1) return;

    var _getChildState = getChildState(node.childNodes),
        all = _getChildState.all,
        none = _getChildState.none,
        half = _getChildState.half;

    if (all) {
        node.checked = true;
        node.indeterminate = false;
    } else if (half) {
        node.checked = false;
        node.indeterminate = true;
    } else if (none) {
        node.checked = false;
        node.indeterminate = false;
    }

    var parent = node.parent;
    if (!parent || parent.level === 0) return;

    if (!node.store.checkStrictly) {
        reInitChecked(parent);
    }
};

var getPropertyFromData = function getPropertyFromData(node, prop) {
    var props = node.store.props;
    var data = node.data || {};
    var config = props[prop];

    if (typeof config === 'function') {
        return config(data, node);
    } else if (typeof config === 'string') {
        return data[config];
    } else if (typeof config === 'undefined') {
        var dataProp = data[prop];
        return dataProp === undefined ? '' : dataProp;
    }
};

var nodeIdSeed = 0;

var node_Node = function () {
    function Node(options) {
        node_classCallCheck(this, Node);

        this.id = nodeIdSeed++;
        this.text = null;
        this.checked = false;
        this.indeterminate = false;
        this.data = null;
        this.expanded = false;
        this.parent = null;
        this.visible = true;
        // create-start author:lutz
        this.radio = null;
        // create-end
        // create-start author:tangdm desc: 标识联动状态
        this.selected = false;
        // create-end
        // create-start author:tangdm desc: 过滤值监听
        this.filter = null;
        // create-end

        for (var name in options) {
            if (options.hasOwnProperty(name)) {
                this[name] = options[name];
            }
        }

        // internal
        this.level = 0;
        this.loaded = false;
        this.childNodes = [];
        this.loading = false;

        if (this.parent) {
            this.level = this.parent.level + 1;
        }

        var store = this.store;
        if (!store) {
            throw new Error('[Node]store is required!');
        }
        store.registerNode(this);

        var props = store.props;
        if (props && typeof props.isLeaf !== 'undefined') {
            var isLeaf = getPropertyFromData(this, 'isLeaf');
            if (typeof isLeaf === 'boolean') {
                this.isLeafByUser = isLeaf;
            }
        }

        if (store.lazy !== true && this.data) {
            this.setData(this.data);

            if (store.defaultExpandAll) {
                this.expanded = true;
            }
        } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {
            this.expand();
        } else if (store.lazy && options.store.checkLeaf && !this.data[store.props.isLeaf]) {
            this.data.disabled = true;
        }

        if (!Array.isArray(this.data)) {
            markNodeData(this, this.data);
        }
        if (!this.data) return;
        var defaultExpandedKeys = store.defaultExpandedKeys;
        var key = store.key;
        if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {
            this.expand(null, store.autoExpandParent);
        }

        if (key && store.currentNodeKey !== undefined && this.key === store.currentNodeKey) {
            store.currentNode = this;
        }

        if (store.lazy) {
            store._initDefaultCheckedNode(this);
        }

        this.updateLeafState();
    }

    Node.prototype.setData = function setData(data) {
        if (!Array.isArray(data)) {
            markNodeData(this, data);
        }

        // create-start author:lutz
        // check-leaf 只能选择子节点
        var _store = this.store,
            checkLeaf = _store.checkLeaf,
            props = _store.props;

        var isObject = Object.prototype.toString.call(data) === '[object Object]';
        if (isObject && checkLeaf && data[props.children] && data[props.children].length) {
            data[props.disabled] = true;
        }
        // create-end

        this.data = data;
        this.childNodes = [];

        var children = void 0;
        if (this.level === 0 && this.data instanceof Array) {
            children = this.data;
        } else {
            children = getPropertyFromData(this, 'children') || [];
            // create-start author:lutz
            var _store2 = this.store,
                checkStrictly = _store2.checkStrictly,
                _props = _store2.props;

            var disabled = getPropertyFromData(this, 'disabled');
            var disabledName = _props.disabled;
            // 父节点禁用、节点关联(disabled && !false)开启禁用
            if (disabled && !checkStrictly) {
                children.forEach(function (item) {
                    item[disabledName] = true;
                });
            }
            // create-end
        }

        for (var i = 0, j = children.length; i < j; i++) {
            this.insertChild({ data: children[i] });
        }
    };

    Node.prototype.contains = function contains(target) {
        var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var walk = function walk(parent) {
            var children = parent.childNodes || [];
            var result = false;
            for (var i = 0, j = children.length; i < j; i++) {
                var child = children[i];
                if (child === target || deep && walk(child)) {
                    result = true;
                    break;
                }
            }
            return result;
        };

        return walk(this);
    };

    Node.prototype.remove = function remove() {
        var parent = this.parent;
        if (parent) {
            parent.removeChild(this);
        }
    };

    Node.prototype.insertChild = function insertChild(child, index, batch) {
        if (!child) throw new Error('insertChild error: child is required.');

        if (!(child instanceof Node)) {
            if (!batch) {
                var children = this.getChildren(true);
                if (children.indexOf(child.data) === -1) {
                    if (typeof index === 'undefined' || index < 0) {
                        children.push(child.data);
                    } else {
                        children.splice(index, 0, child.data);
                    }
                }
            }
            Object(merge["a" /* default */])(child, {
                parent: this,
                store: this.store
            });
            child = new Node(child);
        }

        child.level = this.level + 1;

        if (typeof index === 'undefined' || index < 0) {
            this.childNodes.push(child);
        } else {
            this.childNodes.splice(index, 0, child);
        }

        this.updateLeafState();
    };

    Node.prototype.insertBefore = function insertBefore(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
        }
        this.insertChild(child, index);
    };

    Node.prototype.insertAfter = function insertAfter(child, ref) {
        var index = void 0;
        if (ref) {
            index = this.childNodes.indexOf(ref);
            if (index !== -1) index += 1;
        }
        this.insertChild(child, index);
    };

    Node.prototype.removeChild = function removeChild(child) {
        var children = this.getChildren() || [];
        var dataIndex = children.indexOf(child.data);
        if (dataIndex > -1) {
            children.splice(dataIndex, 1);
        }

        var index = this.childNodes.indexOf(child);

        if (index > -1) {
            this.store && this.store.deregisterNode(child);
            child.parent = null;
            this.childNodes.splice(index, 1);
        }

        this.updateLeafState();
    };

    Node.prototype.removeChildByData = function removeChildByData(data) {
        var targetNode = null;

        for (var i = 0; i < this.childNodes.length; i++) {
            if (this.childNodes[i].data === data) {
                targetNode = this.childNodes[i];
                break;
            }
        }

        if (targetNode) {
            this.removeChild(targetNode);
        }
    };

    Node.prototype.expand = function expand(callback, expandParent) {
        var _this = this;

        var done = function done() {
            if (expandParent) {
                var parent = _this.parent;
                while (parent.level > 0) {
                    parent.expanded = true;
                    parent = parent.parent;
                }
            }
            _this.expanded = true;
            if (callback) callback();
        };

        if (this.shouldLoadData()) {
            this.loadData(function (data) {
                if (data instanceof Array) {
                    if (_this.checked) {
                        _this.setChecked(true, true);
                    } else if (!_this.store.checkStrictly) {
                        reInitChecked(_this);
                    }
                    done();
                }
            });
        } else {
            done();
        }
    };

    Node.prototype.doCreateChildren = function doCreateChildren(array) {
        var _this2 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        array.forEach(function (item) {
            _this2.insertChild(Object(merge["a" /* default */])({ data: item }, defaultProps), undefined, true);
        });
    };

    Node.prototype.collapse = function collapse() {
        this.expanded = false;

        // add author: tangdm desc: 折叠状态切换
        if (this.store.isToggleContact) {
            // 折叠不关联
            if (!this.checked && this.indeterminate) {
                this.indeterminate = false;

                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
            }
        }
    };

    Node.prototype.shouldLoadData = function shouldLoadData() {
        return this.store.lazy === true && this.store.load && !this.loaded;
    };

    Node.prototype.updateLeafState = function updateLeafState() {
        if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== 'undefined') {
            this.isLeaf = this.isLeafByUser;
            return;
        }
        var childNodes = this.childNodes;
        if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
            this.isLeaf = !childNodes || childNodes.length === 0;
            return;
        }
        this.isLeaf = false;
    };

    Node.prototype.setChecked = function setChecked(value, deep, recursion, passValue) {
        var _this3 = this;

        // add author: tangdm desc: 冻结根节点
        if (this.store.isFrozenRoot && this.level === 1) return;

        // add author: tangdm desc: 增加判断是否展开关联或收缩不关联
        if (this.store.isToggleContact) {

            // 是否当前元素
            if (!recursion) {
                // 展开状态
                if (this.expanded) {
                    var newValue = void 0;
                    if (this.isLeaf) {
                        newValue = value;
                    } else {
                        var _getChildState2 = getChildState(this.childNodes),
                            all = _getChildState2.all;

                        newValue = all;
                    }

                    // this.checked = this.selected === true ? !newValue : value;
                    this.checked = value === true;
                    this.indeterminate = false;

                    if (!this.isLeaf) {
                        // 遍历子节点
                        if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                            var _getChildState3 = getChildState(this.childNodes),
                                _all = _getChildState3.all,
                                allWithoutDisable = _getChildState3.allWithoutDisable;

                            if (!this.isLeaf && !_all && allWithoutDisable) {
                                this.checked = false;
                                value = false;
                            }

                            var handleDescendants = function handleDescendants() {
                                if (deep) {
                                    var childNodes = _this3.childNodes;
                                    for (var i = 0, j = childNodes.length; i < j; i++) {
                                        var child = childNodes[i];
                                        passValue = passValue || _this3.checked !== false;
                                        var isCheck = child.disabled ? child.checked : passValue;
                                        child.setChecked(isCheck, deep, true, passValue);
                                    }

                                    var _getChildState4 = getChildState(childNodes),
                                        half = _getChildState4.half,
                                        _all2 = _getChildState4.all;

                                    if (!_all2) {
                                        _this3.checked = _all2;
                                        _this3.indeterminate = half;
                                    }
                                }
                            };

                            // 递归子节点
                            handleDescendants();
                        }
                    }
                } else {
                    this.checked = value;
                    this.indeterminate = false;

                    // 标识折叠收缩选择的状态
                    this.selected = value === true;
                    if (this.store.checkStrictly) {
                        return;
                    }
                }

                // if (!this.store.isToggleContact) {
                // 父节点状态遍历
                var parent = this.parent;
                if (!parent || parent.level === 0) return;

                reInitChecked(parent);
                // }
            } else {
                // 展开状态
                if (this.expanded) {
                    this.checked = value === true;
                    this.indeterminate = false;

                    // 遍历子节点
                    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                        var _getChildState5 = getChildState(this.childNodes),
                            _all3 = _getChildState5.all,
                            _allWithoutDisable = _getChildState5.allWithoutDisable;

                        if (!this.isLeaf && !_all3 && _allWithoutDisable) {
                            this.checked = false;
                            value = false;
                        }

                        var _handleDescendants = function _handleDescendants() {
                            if (deep) {
                                var childNodes = _this3.childNodes;
                                for (var i = 0, j = childNodes.length; i < j; i++) {
                                    var child = childNodes[i];
                                    passValue = passValue || _this3.checked !== false;
                                    var isCheck = child.disabled ? child.checked : passValue;
                                    child.setChecked(isCheck, deep, true, passValue);
                                }

                                var _getChildState6 = getChildState(childNodes),
                                    half = _getChildState6.half,
                                    _all4 = _getChildState6.all;

                                if (!_all4) {
                                    _this3.checked = _all4;
                                    _this3.indeterminate = half;
                                }
                            }
                        };

                        // 递归子节点
                        _handleDescendants();
                    }
                } else {
                    this.checked = value === true;
                    this.indeterminate = value === 'half';
                }
            }
        } else {
            this.indeterminate = value === 'half';
            this.checked = value === true;

            if (this.store.checkStrictly) return;

            if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
                var _getChildState7 = getChildState(this.childNodes),
                    _all5 = _getChildState7.all,
                    _allWithoutDisable2 = _getChildState7.allWithoutDisable;

                if (!this.isLeaf && !_all5 && _allWithoutDisable2) {
                    this.checked = false;
                    value = false;
                }

                var _handleDescendants2 = function _handleDescendants2() {
                    if (deep) {
                        var childNodes = _this3.childNodes;
                        for (var i = 0, j = childNodes.length; i < j; i++) {
                            var child = childNodes[i];
                            passValue = passValue || value !== false;
                            var isCheck = child.disabled ? child.checked : passValue;
                            child.setChecked(isCheck, deep, true, passValue);
                        }

                        var _getChildState8 = getChildState(childNodes),
                            half = _getChildState8.half,
                            _all6 = _getChildState8.all;

                        if (!_all6) {
                            _this3.checked = _all6;
                            _this3.indeterminate = half;
                        }
                    }
                };

                if (this.shouldLoadData()) {
                    // Only work on lazy load data.
                    this.loadData(function () {
                        _handleDescendants2();
                        reInitChecked(_this3);
                    }, {
                        checked: value !== false
                    });
                    return;
                } else {
                    _handleDescendants2();
                }
            }

            var _parent = this.parent;
            if (!_parent || _parent.level === 0) return;

            // 是否点击的当前元素
            if (!recursion) {
                reInitChecked(_parent);
            }
        }
    };

    Node.prototype.getChildren = function getChildren() {
        var forceInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        // this is data
        if (this.level === 0) return this.data;
        var data = this.data;
        if (!data) return null;

        var props = this.store.props;
        var children = 'children';
        if (props) {
            children = props.children || 'children';
        }

        if (data[children] === undefined) {
            data[children] = null;
        }

        if (forceInit && !data[children]) {
            data[children] = [];
        }

        return data[children];
    };

    Node.prototype.updateChildren = function updateChildren() {
        var _this4 = this;

        var newData = this.getChildren() || [];
        var oldData = this.childNodes.map(function (node) {
            return node.data;
        });

        var newDataMap = {};
        var newNodes = [];

        newData.forEach(function (item, index) {
            if (item[NODE_KEY]) {
                newDataMap[item[NODE_KEY]] = { index: index, data: item };
            } else {
                newNodes.push({ index: index, data: item });
            }
        });

        if (!this.store.lazy) {
            oldData.forEach(function (item) {
                if (!newDataMap[item[NODE_KEY]]) _this4.removeChildByData(item);
            });
        }

        newNodes.forEach(function (_ref) {
            var index = _ref.index,
                data = _ref.data;

            _this4.insertChild({ data: data }, index);
        });

        this.updateLeafState();
    };

    Node.prototype.loadData = function loadData(callback) {
        var _this5 = this;

        var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
            this.loading = true;

            var resolve = function resolve(children) {
                _this5.loaded = true;
                _this5.loading = false;
                _this5.childNodes = [];

                _this5.doCreateChildren(children, defaultProps);

                _this5.updateLeafState();

                if (callback) {
                    callback.call(_this5, children);
                }
            };

            this.store.load(this, resolve);
        } else {
            if (callback) {
                callback.call(this);
            }
        }
    };

    // create-start author:lutz
    // (radioVal: any) 写入radioVal


    Node.prototype.setRadio = function setRadio(radioVal) {
        this.radio = radioVal;
    };
    // create-end


    _createClass(Node, [{
        key: 'label',
        get: function get() {
            return getPropertyFromData(this, 'label');
        }
    }, {
        key: 'key',
        get: function get() {
            var nodeKey = this.store.key;
            if (this.data) return this.data[nodeKey];
            return null;
        }
    }, {
        key: 'disabled',
        get: function get() {
            return getPropertyFromData(this, 'disabled');
        }
    }, {
        key: 'nextSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return parent.childNodes[index + 1];
                }
            }
            return null;
        }
    }, {
        key: 'previousSibling',
        get: function get() {
            var parent = this.parent;
            if (parent) {
                var index = parent.childNodes.indexOf(this);
                if (index > -1) {
                    return index > 0 ? parent.childNodes[index - 1] : null;
                }
            }
            return null;
        }
    }]);

    return Node;
}();

/* harmony default export */ var model_node = (node_Node);
// CONCATENATED MODULE: ./packages/tree/src/model/tree-store.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function tree_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var tree_store_TreeStore = function () {
    function TreeStore(options) {
        var _this = this;

        tree_store_classCallCheck(this, TreeStore);

        this.currentNode = null;
        this.currentNodeKey = null;

        for (var option in options) {
            if (options.hasOwnProperty(option)) {
                this[option] = options[option];
            }
        }

        this.nodesMap = {};

        this.root = new model_node({
            data: this.data,
            store: this
        });

        if (this.lazy && this.load) {
            var loadFn = this.load;
            loadFn(this.root, function (data) {
                _this.root.doCreateChildren(data);
                _this._initDefaultCheckedNodes();
            });
        } else {
            this._initDefaultCheckedNodes();
        }
    }

    TreeStore.prototype.filter = function filter(value) {
        var filterNodeMethod = this.filterNodeMethod;
        var lazy = this.lazy;

        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                child.visible = filterNodeMethod.call(child, value, child.data, child);

                // add author: tangdm desc: 追加过滤值
                child.filter = value;

                traverse(child);
            });

            if (!node.visible && childNodes.length) {
                var allHidden = true;

                childNodes.forEach(function (child) {
                    if (child.visible) allHidden = false;
                });

                if (node.root) {
                    node.root.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.root.filter = value;
                } else {
                    node.visible = allHidden === false;

                    // add author: tangdm desc: 追加过滤值
                    node.filter = value;
                }
            }
            if (!value) return;

            if (node.visible && !node.isLeaf && !lazy) node.expand();
        };

        traverse(this);
    };

    TreeStore.prototype.setData = function setData(newVal) {
        var instanceChanged = newVal !== this.root.data;
        if (instanceChanged) {
            this.root.setData(newVal);
            this._initDefaultCheckedNodes();
        } else {
            this.root.updateChildren();
        }
    };

    TreeStore.prototype.getNode = function getNode(data) {
        if (data instanceof model_node) return data;
        var key = (typeof data === "undefined" ? "undefined" : _typeof(data)) !== "object" ? data : util_getNodeKey(this.key, data);
        return this.nodesMap[key] || null;
    };

    TreeStore.prototype.insertBefore = function insertBefore(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertBefore({ data: data }, refNode);
    };

    TreeStore.prototype.insertAfter = function insertAfter(data, refData) {
        var refNode = this.getNode(refData);
        refNode.parent.insertAfter({ data: data }, refNode);
    };

    TreeStore.prototype.remove = function remove(data) {
        var node = this.getNode(data);
        if (node && node.parent) {
            node.parent.removeChild(node);
        }
    };

    TreeStore.prototype.append = function append(data, parentData) {
        var parentNode = parentData ? this.getNode(parentData) : this.root;

        if (parentNode) {
            parentNode.insertChild({ data: data });
        }
    };

    TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {
        var _this2 = this;

        var defaultCheckedKeys = this.defaultCheckedKeys || [];
        var nodesMap = this.nodesMap;

        defaultCheckedKeys.forEach(function (checkedKey) {
            var node = nodesMap[checkedKey];

            if (node) {
                node.setChecked(true, !_this2.checkStrictly);
                // create-start author:lutz
                // 给radio写入值
                if (node.store.radioType === "all" || node.store.radioType === "level") {
                    node.setRadio(node.key);
                }
                // create-end
            }
        });
    };

    TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {
        var defaultCheckedKeys = this.defaultCheckedKeys || [];

        if (defaultCheckedKeys.indexOf(node.key) !== -1) {
            node.setChecked(true, !this.checkStrictly);
        }
    };

    TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {
        if (newVal !== this.defaultCheckedKeys) {
            this.defaultCheckedKeys = newVal;
            this._initDefaultCheckedNodes();
        }
    };

    TreeStore.prototype.registerNode = function registerNode(node) {
        var key = this.key;
        if (!key || !node || !node.data) return;

        var nodeKey = node.key;
        if (nodeKey !== undefined) this.nodesMap[node.key] = node;
    };

    TreeStore.prototype.deregisterNode = function deregisterNode(node) {
        var _this3 = this;

        var key = this.key;
        if (!key || !node || !node.data) return;

        node.childNodes.forEach(function (child) {
            _this3.deregisterNode(child);
        });

        delete this.nodesMap[node.key];
    };

    TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {
        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
                    checkedNodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return checkedNodes;
    };

    TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {
        var _this4 = this;

        var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        return this.getCheckedNodes(leafOnly).map(function (data) {
            return (data || {})[_this4.key];
        });
    };

    TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {
        var nodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;

            childNodes.forEach(function (child) {
                if (child.indeterminate) {
                    nodes.push(child.data);
                }

                traverse(child);
            });
        };

        traverse(this);

        return nodes;
    };

    TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {
        var _this5 = this;

        return this.getHalfCheckedNodes().map(function (data) {
            return (data || {})[_this5.key];
        });
    };

    TreeStore.prototype._getAllNodes = function _getAllNodes() {
        var allNodes = [];
        var nodesMap = this.nodesMap;
        for (var nodeKey in nodesMap) {
            if (nodesMap.hasOwnProperty(nodeKey)) {
                allNodes.push(nodesMap[nodeKey]);
            }
        }

        return allNodes;
    };

    TreeStore.prototype.updateChildren = function updateChildren(key, data) {
        var node = this.nodesMap[key];
        if (!node) return;
        var childNodes = node.childNodes;
        for (var i = childNodes.length - 1; i >= 0; i--) {
            var child = childNodes[i];
            this.remove(child.data);
        }
        for (var _i = 0, j = data.length; _i < j; _i++) {
            var _child = data[_i];
            this.append(_child, node.data);
        }
    };

    TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var checkedKeys = arguments[2];

        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var cache = Object.create(null);
        var keys = Object.keys(checkedKeys);
        allNodes.forEach(function (node) {
            return node.setChecked(false, false);
        });
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            var checked = keys.indexOf(nodeKey) > -1;
            if (!checked) {
                if (node.checked && !cache[nodeKey]) {
                    node.setChecked(false, false);
                }
                continue;
            }

            var parent = node.parent;
            while (parent && parent.level > 0) {
                cache[parent.data[key]] = true;
                parent = parent.parent;
            }

            if (node.isLeaf || this.checkStrictly) {
                node.setChecked(true, false);
                continue;
            }
            node.setChecked(true, true);

            if (leafOnly) {
                (function () {
                    node.setChecked(false, false);
                    var traverse = function traverse(node) {
                        var childNodes = node.childNodes;
                        childNodes.forEach(function (child) {
                            if (!child.isLeaf) {
                                child.setChecked(false, false);
                            }
                            traverse(child);
                        });
                    };
                    traverse(node);
                })();
            }
        }
    };

    TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            checkedKeys[(item || {})[key]] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys) {
        var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this.defaultCheckedKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (key) {
            checkedKeys[key] = true;
        });

        this._setCheckedKeys(key, leafOnly, checkedKeys);
    };

    TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys) {
        var _this6 = this;

        keys = keys || [];
        this.defaultExpandedKeys = keys;

        keys.forEach(function (key) {
            var node = _this6.getNode(key);
            if (node) node.expand(null, _this6.autoExpandParent);
        });
    };

    TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {
        var node = this.getNode(data);

        if (node) {
            node.setChecked(!!checked, deep);
        }
    };

    TreeStore.prototype.getCurrentNode = function getCurrentNode() {
        return this.currentNode;
    };

    TreeStore.prototype.setCurrentNode = function setCurrentNode(node) {
        this.currentNode = node;
    };

    TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {
        var key = node[this.key];
        var currNode = this.nodesMap[key];
        this.setCurrentNode(currNode);
    };

    TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {
        if (key === null) {
            this.currentNode = null;
            return;
        }
        var node = this.getNode(key);
        if (node) {
            this.currentNode = node;
        }
    };

    // create-start


    TreeStore.prototype.setRadio = function setRadio(data, radioVal, deep) {
        var node = this.getNode(data);
        if (node) {
            node.setRadio(radioVal, deep);
        }
    };

    // 则返回目前被选中的节点所组成的数组


    TreeStore.prototype.getRadioNodes = function getRadioNodes() {
        var checkedNodes = [];
        var traverse = function traverse(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function (child) {
                if (child.radio != null && child.radio !== "") {
                    // null || void 0 || '' 下会被认为是没有选中
                    checkedNodes.push(child.data);
                }
                traverse(child);
            });
        };
        traverse(this);
        return checkedNodes;
    };

    // 返回目前被选中的节点的 key 所组成的数组


    TreeStore.prototype.getRadioKeys = function getRadioKeys() {
        var _this7 = this;

        return this.getRadioNodes().map(function (data) {
            return (data || {})[_this7.key];
        });
    };

    // nodes设置目前勾选节点


    TreeStore.prototype.setRadioNodes = function setRadioNodes(array) {
        var key = this.key;
        var checkedKeys = {};
        array.forEach(function (item) {
            var index = (item || {})[key];
            checkedKeys[index] = index;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    // keys设置勾选节点


    TreeStore.prototype.setRadioKeys = function setRadioKeys(keys) {
        this.defaultRadioKeys = keys;
        var key = this.key;
        var checkedKeys = {};
        keys.forEach(function (item) {
            checkedKeys[item] = item;
        });
        this._setRadioKeys(key, checkedKeys);
    };

    TreeStore.prototype._setRadioKeys = function _setRadioKeys(key, checkedKey) {
        var allNodes = this._getAllNodes().sort(function (a, b) {
            return b.level - a.level;
        });
        var keys = Object.keys(checkedKey);
        for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            node.setRadio(keys.indexOf(nodeKey) !== -1 ? checkedKey[nodeKey] : null);
        }
    };

    // create-end


    return TreeStore;
}();

/* harmony default export */ var tree_store = (tree_store_TreeStore);
// EXTERNAL MODULE: ./src/dg-mixins/itemsWithDisabled.js
var dg_mixins_itemsWithDisabled = __webpack_require__(10);

// EXTERNAL MODULE: ./src/dg-utils/shear.js
var shear = __webpack_require__(5);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










var Tree = Object(shear["a" /* complex */])(external_element_ui_["Tree"], ['created', 'mounted']);

/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgTree',

    mixins: [Tree, dg_mixins_itemsWithDisabled["a" /* default */]],

    components: {
        ElTreeNode: tree_node
    },

    props: {
        iconLeaf: String,
        iconClass: String,
        // 只能选择叶子节点
        checkLeaf: Boolean,
        // node-key 现在是必须的
        nodeKey: {
            type: String,
            required: true
        },
        value: {
            type: [String, Array, Number]
        },
        // element-ui 高亮显示选中
        highlightCurrent: {
            type: Boolean,
            default: function _default() {
                return true;
            }
        },
        // radio: all：整棵树只能选一个; level：同级只能选择一个; '': 不显示默认
        radioType: {
            type: String,
            default: '',
            validator: function validator(val) {
                return ['level', 'all', ''].indexOf(val) !== -1;
            }
        },
        // 是否移除默认的键盘监听事件
        noneDefaultKeyboard: {
            type: Boolean,
            default: false
        },
        // 是否在复选的模式支持展开关联且收缩失去关联 add author: tangdm
        isToggleContact: {
            type: Boolean,
            default: false
        },
        // 是否根节点冻结 add author: tangdm
        isFrozenRoot: {
            type: Boolean,
            default: false
        },
        // 是否高亮检索值 add author: tangdm
        isHighLight: {
            type: Boolean,
            default: false
        }
    },
    watch: {
        // create author:lutz
        // v-model 功能绑定数据
        value: function value(val, oldVal) {
            // debugger;
            var radioType = this.radioType,
                seq = this.seq,
                value = this.value,
                showCheckbox = this.showCheckbox,
                itemsWithDisabled = this.itemsWithDisabled,
                nodeKey = this.nodeKey;

            var valArr = Object(data_convert["b" /* str2arr */])(value, seq, true, itemsWithDisabled, nodeKey);

            // radio
            if (radioType === 'level' || radioType === 'all') {
                this.setRadioKeys(valArr);
            }

            // checkbox
            if (showCheckbox) {
                var checkStrictly = this.checkStrictly;

                var preCheckedArr = this.getCheckedKeys();
                var oldValArr = Object(data_convert["b" /* str2arr */])(preCheckedArr, seq);

                if (valArr.length && oldValArr.length && !checkStrictly) {
                    var _nodeKey = this.nodeKey;

                    var diffArr = external_lodash_default.a.difference(oldValArr, valArr);

                    // 剔除父及祖先级元素
                    var traverseParent = function traverseParent(node, valArr) {
                        var parentNode = node.parent;
                        if (parentNode && parentNode.level != 0) {
                            external_lodash_default.a.remove(valArr, function (n) {
                                return parentNode.data[_nodeKey] === n;
                            });
                            traverseParent(parentNode, valArr);
                        }
                    };

                    // 剔除所有子代及子孙元素
                    var traverseChild = function traverseChild(node, valArr) {
                        var childNodes = node.childNodes;
                        if (childNodes && childNodes.length) {
                            childNodes.forEach(function (item) {
                                external_lodash_default.a.remove(valArr, function (n) {
                                    return n === item.data[_nodeKey];
                                });
                            });
                            traverseChild(childNodes, valArr);
                        }
                    };

                    // diffArr.forEach(item => {
                    //     const node = this.getNode(item);
                    //     if (node) {
                    //         traverseParent(node, valArr);
                    //         traverseChild(node, valArr);
                    //     }
                    // });
                }
                this.setCheckedKeys(valArr);
            }

            // highlight
            if (!showCheckbox && radioType === '' && valArr.length < 2) {
                this.setCurrentKey(valArr);
            }
        },


        // create author:lutz
        dataSource: function dataSource(val) {
            this.store.setData(this.itemsWithDisabled);
        }
    },

    // describe:数据类型转换
    created: function created() {
        var _this = this;

        console.log(this.value);
        this.isTree = true;
        // create-start author:lutz
        var valArr = Object(data_convert["b" /* str2arr */])(this.value, this.seq, true, this.dataSource);
        var checkArr = Object(data_convert["b" /* str2arr */])(this.defaultCheckedKeys, this.seq, true, this.dataSource, this.nodeKey);
        var expArr = Object(data_convert["b" /* str2arr */])(this.defaultExpandedKeys, this.seq, true, this.dataSource, this.nodeKey);
        // create-end author:lutz
        this.store = new tree_store({
            key: this.nodeKey,
            lazy: this.lazy,
            load: this.load,
            checkLeaf: this.checkLeaf,
            checkStrictly: this.checkStrictly || this.isToggleContact,
            // add author: tangdm desc: 收缩展开是否联动
            isToggleContact: this.isToggleContact,
            // add author: tangdm desc: 是否冻结根节点
            isFrozenRoot: this.isFrozenRoot,
            // add author: tangdm desc: 是否高亮检索值
            isHighLight: this.isHighLight,

            checkDescendants: this.checkDescendants,
            // update-start  author:lutz
            data: this.dataSource,
            radioType: this.radioType,
            props: this.defaultProp,
            currentNodeKey: this.currentNodeKey || this.value,
            defaultCheckedKeys: Object(data_convert["c" /* uniqArr */])(valArr, checkArr),
            defaultExpandedKeys: Object(data_convert["c" /* uniqArr */])(valArr, expArr),
            /* [code]
                data: this.data,
                props: this.props,
                currentNodeKey: this.currentNodeKey
                defaultCheckedKeys: this.defaultCheckedKeys,
                defaultExpandedKeys: this.defaultExpandedKeys
            */
            // update-end
            autoExpandParent: this.autoExpandParent,
            defaultExpandAll: this.defaultExpandAll,
            filterNodeMethod: this.filterNodeMethod
        });

        this.root = this.store.root;

        var dragState = this.dragState;

        this.$on('tree-node-drag-start', function (event, treeNode) {
            if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {
                event.preventDefault();
                return false;
            }
            event.dataTransfer.effectAllowed = 'move';

            // wrap in try catch to address IE's error when first param is 'text/plain'
            try {
                // setData is required for draggable to work in FireFox
                // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox
                event.dataTransfer.setData('text/plain', '');
            } catch (e) {}
            dragState.draggingNode = treeNode;
            _this.$emit('node-drag-start', treeNode.node, event);
        });

        this.$on('tree-node-drag-over', function (event, treeNode) {
            var dropNode = findNearestComponent(event.target, 'ElTreeNode');
            var oldDropNode = dragState.dropNode;
            if (oldDropNode && oldDropNode !== dropNode) {
                Object(dom["d" /* removeClass */])(oldDropNode.$el, 'is-drop-inner');
            }
            var draggingNode = dragState.draggingNode;
            if (!draggingNode || !dropNode) return;

            var dropPrev = true;
            var dropInner = true;
            var dropNext = true;
            var userAllowDropInner = true;
            if (typeof _this.allowDrop === 'function') {
                dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');
                userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');
                dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');
            }
            event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';
            if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
                if (oldDropNode) {
                    _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);
                }
                _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);
            }

            if (dropPrev || dropInner || dropNext) {
                dragState.dropNode = dropNode;
            }

            if (dropNode.node.nextSibling === draggingNode.node) {
                dropNext = false;
            }
            if (dropNode.node.previousSibling === draggingNode.node) {
                dropPrev = false;
            }
            if (dropNode.node.contains(draggingNode.node, false)) {
                dropInner = false;
            }
            if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
                dropPrev = false;
                dropInner = false;
                dropNext = false;
            }

            var targetPosition = dropNode.$el.getBoundingClientRect();
            var treePosition = _this.$el.getBoundingClientRect();

            var dropType = void 0;
            var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
            var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;

            var indicatorTop = -9999;
            var distance = event.clientY - targetPosition.top;
            if (distance < targetPosition.height * prevPercent) {
                dropType = 'before';
            } else if (distance > targetPosition.height * nextPercent) {
                dropType = 'after';
            } else if (dropInner) {
                dropType = 'inner';
            } else {
                dropType = 'none';
            }

            var iconPosition = dropNode.$el.querySelector('.el-tree-node__expand-icon').getBoundingClientRect();
            var dropIndicator = _this.$refs.dropIndicator;
            if (dropType === 'before') {
                indicatorTop = iconPosition.top - treePosition.top;
            } else if (dropType === 'after') {
                indicatorTop = iconPosition.bottom - treePosition.top;
            }
            dropIndicator.style.top = indicatorTop + 'px';
            dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';

            if (dropType === 'inner') {
                Object(dom["a" /* addClass */])(dropNode.$el, 'is-drop-inner');
            } else {
                Object(dom["d" /* removeClass */])(dropNode.$el, 'is-drop-inner');
            }

            dragState.showDropIndicator = dropType === 'before' || dropType === 'after';
            dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
            dragState.dropType = dropType;
            _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);
        });

        this.$on('tree-node-drag-end', function (event) {
            var draggingNode = dragState.draggingNode,
                dropType = dragState.dropType,
                dropNode = dragState.dropNode;

            event.preventDefault();
            event.dataTransfer.dropEffect = 'move';

            if (draggingNode && dropNode) {
                var draggingNodeCopy = {
                    data: draggingNode.node.data
                };
                if (dropType !== 'none') {
                    draggingNode.node.remove();
                }
                if (dropType === 'before') {
                    dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'after') {
                    dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
                } else if (dropType === 'inner') {
                    dropNode.node.insertChild(draggingNodeCopy);
                }
                if (dropType !== 'none') {
                    _this.store.registerNode(draggingNodeCopy);
                }

                Object(dom["d" /* removeClass */])(dropNode.$el, 'is-drop-inner');

                _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);
                if (dropType !== 'none') {
                    _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);
                }
            }
            if (draggingNode && !dropNode) {
                _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);
            }

            dragState.showDropIndicator = false;
            dragState.draggingNode = null;
            dragState.dropNode = null;
            dragState.allowDrop = true;
        });
    },


    methods: {
        /*  radioType: 1. all：整棵树只能选一个 2. level：同级只能选择一个 3. '': 不显示默认 */
        // 返回目前被选中的节点所组成的数组
        getRadioNodes: function getRadioNodes() {
            return this.store.getRadioNodes();
        },


        // 返回目前被选中的节点所组成的数组的 key
        getRadioKeys: function getRadioKeys() {
            return this.store.getRadioKeys();
        },


        // 设置目前勾选的节点，使用此方法必须设置 node-key 属性。function (nodes: array)
        setRadioNodes: function setRadioNodes(nodes) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioNodes');
            this.store.setRadioNodes(nodes);
        },


        // 设置勾选节点所组成的数组的 key。 function(keys: array)
        setRadioKeys: function setRadioKeys(keys) {
            if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setRadioKeys');
            this.store.setRadioKeys(keys);
        },


        // 设置radio信息。 function (data: array, radioVal: boolean, deep: boolean = false)
        setRadio: function setRadio(data, radioVal, deep) {
            this.store.setRadio(data, radioVal, deep);
        }
    },

    // edit author: tangdm descript: 去除默认的鼠标监听事件
    mounted: function mounted() {
        this.initTabIndex();
        if (!this.noneDefaultKeyboard) this.$el.addEventListener('keydown', this.handleKeydown);
    },
    updated: function updated() {
        this.treeItems = this.$el.querySelectorAll('[role=treeitem]');
        this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');
    }
});
// CONCATENATED MODULE: ./packages/tree/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
main_component.options.__file = "packages/tree/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./packages/tree/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var tree = __webpack_exports__["default"] = (main);

/***/ }),
/* 23 */,
/* 24 */,
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/utils/resize-event.js
var resize_event = __webpack_require__(11);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(4);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./src/utils/scrollbar-width.js


var scrollBarWidth = void 0;

/* harmony default export */ var scrollbar_width = (function () {
  if (external_vue_default.a.prototype.$isServer) return 0;
  if (scrollBarWidth !== undefined) return scrollBarWidth;

  var outer = document.createElement("div");
  outer.className = "el-scrollbar__wrap";
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);

  var widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";

  var inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);

  var widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  scrollBarWidth = widthNoScroll - widthWithScroll;

  return scrollBarWidth;
});
// EXTERNAL MODULE: ./src/utils/util.js + 1 modules
var util = __webpack_require__(7);

// EXTERNAL MODULE: ./src/utils/dom.js
var dom = __webpack_require__(6);

// CONCATENATED MODULE: ./packages/scrollbar/src/util.js
var BAR_MAP = {
    vertical: {
        offset: "offsetHeight",
        scroll: "scrollTop",
        scrollSize: "scrollHeight",
        size: "height",
        key: "vertical",
        axis: "Y",
        client: "clientY",
        direction: "top"
    },
    horizontal: {
        offset: "offsetWidth",
        scroll: "scrollLeft",
        scrollSize: "scrollWidth",
        size: "width",
        key: "horizontal",
        axis: "X",
        client: "clientX",
        direction: "left"
    }
};

function renderThumbStyle(_ref) {
    var move = _ref.move,
        size = _ref.size,
        bar = _ref.bar;

    var style = {};
    var translate = "translate" + bar.axis + "(" + move + "%)";

    style[bar.size] = size;
    style.transform = translate;
    style.msTransform = translate;
    style.webkitTransform = translate;

    return style;
}
// CONCATENATED MODULE: ./packages/scrollbar/src/bar.js



/* istanbul ignore next */
/* harmony default export */ var src_bar = ({
  name: 'Bar',

  props: {
    vertical: Boolean,
    size: String,
    move: Number
  },

  computed: {
    bar: function bar() {
      return BAR_MAP[this.vertical ? 'vertical' : 'horizontal'];
    },
    wrap: function wrap() {
      return this.$parent.wrap;
    }
  },

  render: function render(h) {
    var size = this.size,
        move = this.move,
        bar = this.bar;

    return h(
      'div',
      {
        'class': ['el-scrollbar__bar', 'is-' + bar.key],
        on: {
          'mousedown': this.clickTrackHandler
        }
      },
      [h('div', {
        ref: 'thumb',
        'class': 'el-scrollbar__thumb',
        on: {
          'mousedown': this.clickThumbHandler
        },

        style: renderThumbStyle({ size: size, move: move, bar: bar }) })]
    );
  },


  methods: {
    clickThumbHandler: function clickThumbHandler(e) {
      // prevent click event of right button
      if (e.ctrlKey || e.button === 2) {
        return;
      }
      this.startDrag(e);
      this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
    },
    clickTrackHandler: function clickTrackHandler(e) {
      var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
      var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
      var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];

      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
    },
    startDrag: function startDrag(e) {
      e.stopImmediatePropagation();
      this.cursorDown = true;

      Object(dom["c" /* on */])(document, 'mousemove', this.mouseMoveDocumentHandler);
      Object(dom["c" /* on */])(document, 'mouseup', this.mouseUpDocumentHandler);
      document.onselectstart = function () {
        return false;
      };
    },
    mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
      if (this.cursorDown === false) return;
      var prevPage = this[this.bar.axis];

      if (!prevPage) return;

      var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
      var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
      var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];

      this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
    },
    mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
      this.cursorDown = false;
      this[this.bar.axis] = 0;
      Object(dom["b" /* off */])(document, 'mousemove', this.mouseMoveDocumentHandler);
      document.onselectstart = null;
    }
  },

  destroyed: function destroyed() {
    Object(dom["b" /* off */])(document, 'mouseup', this.mouseUpDocumentHandler);
  }
});
// EXTERNAL MODULE: external "jquery"
var external_jquery_ = __webpack_require__(12);
var external_jquery_default = /*#__PURE__*/__webpack_require__.n(external_jquery_);

// CONCATENATED MODULE: ./packages/scrollbar/src/main.js
// reference https://github.com/noeldelgado/gemini-scrollbar/blob/master/index.js







/* istanbul ignore next */
/* harmony default export */ var main = ({
    name: "DgScrollbar",

    components: { Bar: src_bar },

    props: {
        native: Boolean,
        wrapStyle: {},
        wrapClass: {},
        viewClass: {},
        viewStyle: {},
        noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
        tag: {
            type: String,
            default: "div"
        },
        // 加载锁定 tangDM++
        busyLoading: {
            type: Boolean,
            default: false
        },
        // 触顶或触左，滚动条位置偏移一小段距离
        loadDistance: {
            type: Boolean,
            default: false
        }
    },

    data: function data() {
        return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0,
            cacheScrollHeight: null,
            cacheScrollWidth: null
        };
    },


    computed: {
        wrap: function wrap() {
            return this.$refs.wrap;
        }
    },

    render: function render(h) {
        var gutter = scrollbar_width();
        var style = this.wrapStyle;

        if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";

            if (Array.isArray(this.wrapStyle)) {
                style = Object(util["f" /* toObject */])(this.wrapStyle);
                style.marginRight = style.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
                style += gutterStyle;
            } else {
                style = gutterStyle;
            }
        }
        var view = h(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
        }, this.$slots.default);
        var wrap = h(
            "div",
            {
                ref: "wrap",
                style: style,
                on: {
                    "scroll": this.handleScroll
                },

                "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
            },
            [[view]]
        );
        var nodes = void 0;

        if (!this.native) {
            nodes = [wrap, h(src_bar, {
                attrs: { move: this.moveX, size: this.sizeWidth }
            }), h(src_bar, {
                attrs: { vertical: true, move: this.moveY, size: this.sizeHeight }
            })];
        } else {
            nodes = [h(
                "div",
                { ref: "wrap", "class": [this.wrapClass, "el-scrollbar__wrap"], style: style },
                [[view]]
            )];
        }
        return h("div", { class: "el-scrollbar" }, nodes);
    },


    methods: {
        handleScroll: function handleScroll() {
            var wrap = this.wrap;

            // create-start author:tangDM #若内容没超出，则不滚动
            if (wrap.scrollHeight === wrap.clientHeight) return false;
            // create-end author:tangDM

            this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
            this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;

            // create-start author:tangDM
            // emit for listening scroll event
            this.$emit("scroll-event", wrap);

            // added for scrollbar go to content 's top side
            this.scrollToTopEvent();

            // added for scrollbar go to content 's bottom side
            this.scrollToBottomEvent();

            // added for scrollbar go to content 's left side
            this.scrollToLeftEvent();

            // added for scrollbar go to content 's right side
            this.scrollToRightEvent();
            // create-end author:tangDM
        },

        /**
         * 滚动条滚动到顶部触发事件
         *
         * create-start author:tangDM
         */
        scrollToTopEvent: function scrollToTopEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容高度
            this.cacheScrollHeight = wrap.scrollHeight;

            if (wrap.scrollTop === 0 && !this.busyLoading) {
                this.$emit("scroll-top");
            }
        },

        /**
         * 滚动条滚动到底部触发事件
         *
         * create-start author:tangDM
         */
        scrollToBottomEvent: function scrollToBottomEvent() {
            var _this = this;

            var wrap = this.wrap;

            // 更新缓存的滚动内容高度
            this.cacheScrollHeight = wrap.scrollHeight;

            // 检测是否滚动到底部
            if (wrap.scrollTop && wrap.scrollTop + wrap.clientHeight === wrap.scrollHeight && !this.busyLoading) {
                this.$nextTick(function () {
                    _this.$emit("scroll-bottom");
                });
            }
        },

        /**
         * 滚动条滚动到左侧触发事件
         *
         * create-start author:tangDM
         */
        scrollToLeftEvent: function scrollToLeftEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容宽度
            this.cacheScrollWidth = wrap.scrollWidth;

            if (wrap.scrollLeft === 0 && !this.busyLoading) {
                this.$emit("scroll-left");
            }
        },

        /**
         * 滚动条滚动到右侧触发事件
         *
         * create-start author:tangDM
         */
        scrollToRightEvent: function scrollToRightEvent() {
            var wrap = this.wrap;

            // 更新缓存的滚动内容宽度
            this.cacheScrollWidth = wrap.scrollWidth;

            if (wrap.scrollLeft + wrap.clientWidth === wrap.scrollWidth && !this.busyLoading) {
                this.$emit("scroll-right");
            }
        },

        /**
         * 滚动条滚动置顶
         *
         * create-start author:tangDM
         */
        goScrollToTop: function goScrollToTop() {
            this.goScrollToYAxis(0);
        },

        /**
         * 滚动条滚动置底
         *
         * create-start author:tangDM
         */
        goScrollToBottom: function goScrollToBottom() {
            this.goScrollToYAxis(this.wrap.scrollHeight);
        },

        /**
         * 滚动到 YAxis 指定的位置
         *
         * @param y 滚动到的位置值
         * @param animateTime 滚动执行的时间
         * @param callback [Function] 回调方法
         *
         * create-start author:tangDM
         */
        goScrollToYAxis: function goScrollToYAxis(y) {
            var animateTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
            var callback = arguments[2];

            external_jquery_default()(this.wrap).animate({
                scrollTop: y
            }, animateTime, function () {
                callback && callback();
            });

            this.moveY = y * 100 / this.wrap.clientHeight;
        },


        /**
         * 滚动到 XAxis 指定的位置
         *
         * @param x 滚动到的位置值
         * @param animateTime 滚动执行的时间
         * @param callback [Function] 回调方法
         *
         * create-start author:tangDM
         */
        goScrollToXAxis: function goScrollToXAxis(x) {
            var animateTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
            var callback = arguments[2];

            external_jquery_default()(this.wrap).animate({
                scrollLeft: x
            }, animateTime, function () {
                callback && callback();
            });

            this.moveX = x / this.wrap.clientWidth;
        },

        /**
         * 重置滚动条的尺寸
         *
         * create-start author:tangDM
         */
        update: function update() {
            var heightPercentage = void 0,
                widthPercentage = void 0;
            var wrap = this.wrap;
            if (!wrap) return;

            heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
            widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;

            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";

            // create-start author:tangDM #更新滚动位置
            this.wrap.scrollTop = this.loadDistance && this.cacheScrollHeight && wrap.scrollTop === 0 ? wrap.scrollHeight - this.cacheScrollHeight : wrap.scrollTop;
            this.wrap.scrollLeft = this.loadDistance && this.cacheScrollWidth && wrap.scrollLeft === 0 ? wrap.scrollWidth - this.cacheScrollWidth : wrap.scrollLeft;
            // create-end
        }
    },

    mounted: function mounted() {
        if (this.native) return;
        this.$nextTick(this.update);
        !this.noresize && Object(resize_event["a" /* addResizeListener */])(this.$refs.resize, this.update);
    },
    beforeDestroy: function beforeDestroy() {
        if (this.native) return;
        !this.noresize && Object(resize_event["b" /* removeResizeListener */])(this.$refs.resize, this.update);
    }
});
// CONCATENATED MODULE: ./packages/scrollbar/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var scrollbar = __webpack_exports__["default"] = (main);

/***/ }),
/* 26 */,
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/base/select.vue?vue&type=template&id=64b53866&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      directives: [
        {
          name: "clickoutside",
          rawName: "v-clickoutside",
          value: _vm.handleClose,
          expression: "handleClose"
        }
      ],
      class: [
        "el-select",
        _vm.selectSize ? "el-select--" + _vm.selectSize : ""
      ],
      on: {
        click: function($event) {
          $event.stopPropagation()
          return _vm.toggleMenu($event)
        }
      }
    },
    [
      _vm.multiple
        ? _c(
            "div",
            {
              ref: "tags",
              staticClass: "el-select__tags",
              style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
            },
            [
              _vm.collapseTags && _vm.selected.length
                ? _c(
                    "span",
                    [
                      _c(
                        "el-tag",
                        {
                          attrs: {
                            "disable-transitions": "",
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: _vm.selected[0].hitState
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, _vm.selected[0])
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: _vm.selected[0].currentLabel }
                            },
                            [_vm._v(_vm._s(_vm.selected[0].currentLabel))]
                          )
                        ]
                      ),
                      _vm.selected.length > 1
                        ? _c(
                            "el-tag",
                            {
                              attrs: {
                                closable: false,
                                size: _vm.collapseTagSize,
                                "disable-transitions": "",
                                title: _vm.selectedOtherLabel
                              }
                            },
                            [
                              _c(
                                "span",
                                { staticClass: "el-select__tags-text" },
                                [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                              )
                            ]
                          )
                        : _vm._e()
                    ],
                    1
                  )
                : _vm._e(),
              !_vm.collapseTags
                ? _c(
                    "transition-group",
                    { on: { "after-leave": _vm.resetInputHeight } },
                    _vm._l(_vm.selected, function(item) {
                      return _c(
                        "el-tag",
                        {
                          key: _vm.getValueKey(item),
                          attrs: {
                            closable: !_vm.selectDisabled,
                            size: _vm.collapseTagSize,
                            hit: item.hitState,
                            "disable-transitions": ""
                          },
                          on: {
                            close: function($event) {
                              return _vm.deleteTag($event, item)
                            }
                          }
                        },
                        [
                          _c(
                            "span",
                            {
                              staticClass: "el-select__tags-text",
                              attrs: { title: item.currentLabel }
                            },
                            [_vm._v(_vm._s(item.currentLabel))]
                          )
                        ]
                      )
                    }),
                    1
                  )
                : _vm._e(),
              _vm.filterable
                ? _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.query,
                        expression: "query"
                      }
                    ],
                    ref: "input",
                    staticClass: "el-select__input",
                    class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                    style: {
                      "flex-grow": "1",
                      "max-width": _vm.inputWidth - 42 + "px",
                      width: _vm.inputLength / (_vm.inputWidth - 32) + "%"
                    },
                    attrs: {
                      type: "text",
                      disabled: _vm.selectDisabled,
                      autocomplete: _vm.autoComplete || _vm.autocomplete
                    },
                    domProps: { value: _vm.query },
                    on: {
                      focus: _vm.handleFocus,
                      blur: function($event) {
                        _vm.softFocus = false
                      },
                      click: function($event) {
                        $event.stopPropagation()
                      },
                      keyup: _vm.managePlaceholder,
                      keydown: [
                        _vm.resetInputState,
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "down", 40, $event.key, [
                              "Down",
                              "ArrowDown"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("next")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "up", 38, $event.key, [
                              "Up",
                              "ArrowUp"
                            ])
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.navigateOptions("prev")
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )
                          ) {
                            return null
                          }
                          $event.preventDefault()
                          return _vm.selectOption($event)
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k($event.keyCode, "esc", 27, $event.key, [
                              "Esc",
                              "Escape"
                            ])
                          ) {
                            return null
                          }
                          $event.stopPropagation()
                          $event.preventDefault()
                          _vm.visible = false
                        },
                        function($event) {
                          if (
                            !$event.type.indexOf("key") &&
                            _vm._k(
                              $event.keyCode,
                              "delete",
                              [8, 46],
                              $event.key,
                              ["Backspace", "Delete", "Del"]
                            )
                          ) {
                            return null
                          }
                          return _vm.deletePrevTag($event)
                        }
                      ],
                      compositionstart: _vm.handleComposition,
                      compositionupdate: _vm.handleComposition,
                      compositionend: _vm.handleComposition,
                      input: [
                        function($event) {
                          if ($event.target.composing) {
                            return
                          }
                          _vm.query = $event.target.value
                        },
                        _vm.debouncedQueryChange
                      ]
                    }
                  })
                : _vm._e()
            ],
            1
          )
        : _vm._e(),
      _c(
        "el-input",
        {
          ref: "reference",
          class: { "is-focus": _vm.visible },
          attrs: {
            title: _vm.selectedLabel,
            type: "text",
            placeholder: _vm.currentPlaceholder,
            name: _vm.name,
            id: _vm.id,
            autocomplete: _vm.autoComplete || _vm.autocomplete,
            size: _vm.selectSize,
            disabled: _vm.selectDisabled,
            readonly: _vm.readonly,
            "validate-event": false
          },
          on: { focus: _vm.handleFocus, blur: _vm.handleBlur },
          nativeOn: {
            keyup: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            keydown: [
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("next")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "up", 38, $event.key, [
                    "Up",
                    "ArrowUp"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                return _vm.navigateOptions("prev")
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")
                ) {
                  return null
                }
                $event.preventDefault()
                return _vm.selectOption($event)
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "esc", 27, $event.key, [
                    "Esc",
                    "Escape"
                  ])
                ) {
                  return null
                }
                $event.stopPropagation()
                $event.preventDefault()
                _vm.visible = false
              },
              function($event) {
                if (
                  !$event.type.indexOf("key") &&
                  _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")
                ) {
                  return null
                }
                _vm.visible = false
              }
            ],
            paste: function($event) {
              return _vm.debouncedOnInputChange($event)
            },
            mouseenter: function($event) {
              _vm.inputHovering = true
            },
            mouseleave: function($event) {
              _vm.inputHovering = false
            }
          },
          model: {
            value: _vm.selectedLabel,
            callback: function($$v) {
              _vm.selectedLabel = $$v
            },
            expression: "selectedLabel"
          }
        },
        [
          _vm.$slots.prefix
            ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2)
            : _vm._e(),
          _c("template", { slot: "suffix" }, [
            _c("i", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.showClose,
                  expression: "!showClose"
                }
              ],
              class: [
                "el-select__caret",
                "el-input__icon",
                "el-icon-" + _vm.iconClass
              ]
            }),
            _vm.showClose
              ? _c("i", {
                  staticClass:
                    "el-select__caret el-input__icon el-icon-circle-close",
                  on: { click: _vm.handleClearClick }
                })
              : _vm._e()
          ])
        ],
        2
      ),
      _c(
        "transition",
        {
          attrs: { name: "el-zoom-in-top" },
          on: {
            "before-enter": _vm.handleMenuEnter,
            "after-leave": _vm.doDestroy
          }
        },
        [
          _c(
            "el-select-menu",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible && _vm.emptyText !== false,
                  expression: "visible && emptyText !== false"
                }
              ],
              ref: "popper",
              attrs: { "append-to-body": _vm.popperAppendToBody }
            },
            [
              _vm.emptyText &&
              (!_vm.allowCreate ||
                _vm.loading ||
                (_vm.allowCreate && _vm.options.length === 0))
                ? [
                    _vm.$slots.empty
                      ? _vm._t("empty")
                      : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                          _vm._v(_vm._s(_vm.emptyText))
                        ])
                  ]
                : _vm._e(),
              _c(
                "dg-scrollbar",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.options.length > 0 && !_vm.loading,
                      expression: "options.length > 0 && !loading"
                    }
                  ],
                  ref: "scrollbar",
                  class: _vm.scrollbarCls,
                  attrs: {
                    "wrap-class": "el-select-dropdown__wrap",
                    "view-class":
                      "el-select-dropdown__list dg-select-dropdown__list"
                  },
                  on: { "scroll-bottom": _vm.handleScrollToBottom }
                },
                [_vm._t("default")],
                2
              )
            ],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/base/select.vue?vue&type=template&id=64b53866&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// EXTERNAL MODULE: ./packages/scrollbar/index.js + 4 modules
var scrollbar = __webpack_require__(25);

// EXTERNAL MODULE: external "throttle-debounce/debounce"
var debounce_ = __webpack_require__(14);
var debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);

// EXTERNAL MODULE: ./src/utils/resize-event.js
var resize_event = __webpack_require__(11);

// EXTERNAL MODULE: ./src/dg-utils/data-convert.js
var data_convert = __webpack_require__(3);

// EXTERNAL MODULE: ./src/dg-utils/shear.js
var shear = __webpack_require__(5);

// EXTERNAL MODULE: ./src/dg-mixins/convert.js
var convert = __webpack_require__(9);

// EXTERNAL MODULE: ./src/utils/util.js + 1 modules
var util = __webpack_require__(7);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/base/select.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










var Select = Object(shear["a" /* complex */])(external_element_ui_["Select"], ['created', 'watch', 'mounted']);

/* harmony default export */ var selectvue_type_script_lang_js_ = ({
    name: 'LSelect',

    componentName: 'LSelect',

    mixins: [Select, convert["a" /* default */]],

    components: {
        DgScrollbar: scrollbar["default"]
    },

    props: {
        // 给下拉框追加class
        scrollbarClass: String,

        seq: {
            type: String,
            default: ','
        },

        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },

        // 下拉树组件附加的数据
        treeData: {
            type: Array,
            default: function _default() {
                return [];
            }
        },

        // 追加文本翻译的数据 [{value: value, label: label}]
        translateData: {
            type: Array,
            default: function _default() {
                return [];
            }
        }
    },

    data: function data() {
        return {
            // 本地文本翻译的数据
            translateLocalData: this.translateData
        };
    },


    watch: {
        translateData: function translateData(val) {
            this.translateLocalData = val;
        },
        selectDisabled: function selectDisabled() {
            var _this = this;

            this.$nextTick(function () {
                _this.resetInputHeight();
            });
        },
        placeholder: function placeholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
        },
        value: function value(val, oldVal) {
            if (this.multiple) {
                this.resetInputHeight();
                if (val && val.length > 0 || this.$refs.input && this.query !== '') {
                    this.currentPlaceholder = '';
                } else {
                    this.currentPlaceholder = this.cachedPlaceHolder;
                }
                if (this.filterable && !this.reserveKeyword) {
                    this.query = '';
                    this.handleQueryChange(this.query);
                }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
                this.inputLength = 20;
            }
            if (!Object(util["g" /* valueEquals */])(val, oldVal)) {
                this.dispatch('ElFormItem', 'el.form.change', val);
            }
        },
        visible: function visible(val) {
            var _this2 = this;

            if (!val) {
                this.broadcast('ElSelectDropdown', 'destroyPopper');
                if (this.$refs.input) {
                    this.$refs.input.blur();
                }
                this.query = '';

                // add author: tangdm descript: 增加搜索查询
                // this.handleQueryChange(this.query);
                this.previousQuery = null;
                this.selectedLabel = '';
                this.inputLength = 20;
                this.menuVisibleOnFocus = false;
                this.resetHoverIndex();
                this.$nextTick(function () {
                    if (_this2.$refs.input && _this2.$refs.input.value === '' && _this2.selected.length === 0) {
                        _this2.currentPlaceholder = _this2.cachedPlaceHolder;
                    }
                });
                if (!this.multiple) {
                    if (this.selected) {
                        if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                            this.selectedLabel = this.createdLabel;
                        } else {
                            this.selectedLabel = this.selected.currentLabel;
                        }
                        if (this.filterable) this.query = this.selectedLabel;
                    }

                    if (this.filterable) {
                        this.currentPlaceholder = this.cachedPlaceHolder;
                    }
                }
            } else {
                this.broadcast('ElSelectDropdown', 'updatePopper');
                if (this.filterable) {
                    this.query = this.remote ? '' : this.selectedLabel;
                    this.handleQueryChange(this.query);
                    if (this.multiple) {
                        this.$refs.input.focus();
                    } else {
                        if (!this.remote) {
                            this.broadcast('ElOption', 'queryChange', '');
                            this.broadcast('ElOptionGroup', 'queryChange');
                        }

                        if (this.selectedLabel) {
                            this.currentPlaceholder = this.selectedLabel;
                            this.selectedLabel = '';
                        }
                    }
                }
            }
            this.$emit('visible-change', val);
        },
        options: function options() {
            var _this3 = this;

            if (this.$isServer) return;
            this.$nextTick(function () {
                _this3.broadcast('ElSelectDropdown', 'updatePopper');
            });
            if (this.multiple) {
                this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll('input');
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
                this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
                this.checkDefaultFirstOption();
            }
        }
    },

    computed: {
        // update author:lutz
        showClose: function showClose() {
            var val = this.getVal();
            var hasValue = this.multiple ? Array.isArray(val) && val.length > 0 : val !== undefined && val !== null && val !== '';
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
        },
        scrollbarCls: function scrollbarCls() {
            var allowCreate = this.allowCreate,
                query = this.query,
                filteredOptionsCount = this.filteredOptionsCount,
                scrollbarClass = this.scrollbarClass;

            return [!allowCreate && query && filteredOptionsCount === 0 ? 'is-empty' : '', scrollbarClass || ''].join(' ');
        },


        // add author: tangdm descript: 增加标题显示
        selectedOtherLabel: function selectedOtherLabel() {
            if (this.selected.length > 1) {
                var labels = this.selected.map(function (p) {
                    return p.currentLabel;
                });
                var filterLabels = labels.slice(1);
                return filterLabels.join(",");
            } else {
                return "";
            }
        }
    },

    methods: {
        // 解决因树组件展开收起后引发的样式定位问题
        updatePopper: function updatePopper() {
            var _this4 = this;

            setTimeout(function () {
                _this4.broadcast('ElSelectDropdown', 'updatePopper');
            }, 300);
        },
        resetInputHeight: function resetInputHeight() {
            var _this5 = this;

            if (this.collapseTags && !this.filterable) return;
            this.$nextTick(function () {
                if (!_this5.$refs.reference) return;
                var inputChildNodes = _this5.$refs.reference.$el.childNodes;
                var input = [].filter.call(inputChildNodes, function (item) {
                    return item.tagName === 'INPUT';
                })[0];
                var tags = _this5.$refs.tags;
                var sizeInMap = _this5.initialInputHeight || 40;

                // update author: tangdm descript: 不同分辨率兼容高度问题
                // [code] input.style.height = this.selected.length === 0
                //        ? sizeInMap + 'px'
                //        : Math.max(
                //        tags ? (tags.clientHeight + (tags.clientHeight > sizeInMap ? 6 : 0)) : 0,
                //        sizeInMap
                // ) + 'px';

                input.style.height = _this5.selected.length === 0 ? sizeInMap + 'px' : Math.max(tags ? tags.clientHeight : 0, sizeInMap) + 'px';
                if (_this5.visible && _this5.emptyText !== false) {
                    _this5.broadcast('ElSelectDropdown', 'updatePopper');
                }
            });
        },


        // create author:lutz 下拉触发
        handleScrollToBottom: function handleScrollToBottom() {
            this.$emit('scroll-bottom');
        },


        // create author:lutz 关闭下拉框
        handleCloseDrapdown: function handleCloseDrapdown() {
            this.visible = false;
        },


        // create author:lutz 转化value数据格式
        getVal: function getVal() {
            var multiple = this.multiple,
                value = this.value,
                seq = this.seq;

            return multiple ? Object(data_convert["b" /* str2arr */])(value, seq, true) : Object(data_convert["a" /* data2type */])(value, 'String', seq);
        },
        getOption: function getOption(value) {
            var option = void 0;
            var isSearchedValue = false;
            var isObject = Object.prototype.toString.call(value).toLowerCase() === '[object object]';
            var isNull = Object.prototype.toString.call(value).toLowerCase() === '[object null]';
            var isUndefined = Object.prototype.toString.call(value).toLowerCase() === '[object undefined]';
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
                var cachedOption = this.cachedOptions[i];
                var isEqual = isObject ? Object(util["b" /* getValueByPath */])(cachedOption.value, this.valueKey) === Object(util["b" /* getValueByPath */])(value, this.valueKey) : cachedOption.value === value;
                if (isEqual) {
                    // add author: tangdm descript: 追加文本翻译
                    isSearchedValue = true;

                    option = cachedOption;

                    // add author: tangdm 追加翻译缓存
                    this.translateLocalData.push({
                        label: cachedOption.currentLabel,
                        value: cachedOption.value
                    });
                    break;
                }
            }

            // add author: tangdm descript: 追加文本翻译
            if (!isSearchedValue) {
                for (var _i = 0, len = this.translateLocalData.length; _i < len; _i++) {
                    var _cachedOption = this.translateLocalData[_i];
                    _cachedOption.currentLabel = _cachedOption.label;
                    var _isEqual = isObject ? Object(util["b" /* getValueByPath */])(_cachedOption.value, this.valueKey) === Object(util["b" /* getValueByPath */])(value, this.valueKey) : _cachedOption.value === value;
                    if (_isEqual) {
                        isSearchedValue = true;
                        option = _cachedOption;
                        break;
                    }
                }
            }
            if (option) return option;
            var label = !isObject && !isNull && !isUndefined ? value : '';
            var newOption = {
                value: value,
                currentLabel: label
            };
            if (this.multiple) {
                newOption.hitState = false;
            }
            return newOption;
        },


        // update author:lutz
        setSelected: function setSelected() {
            var _this6 = this;

            var val = this.getVal();

            if (!this.multiple) {
                var option = this.getOption(val);
                if (option.created) {
                    this.createdLabel = option.currentLabel;
                    this.createdSelected = true;
                } else {
                    this.createdSelected = false;
                }
                this.selectedLabel = option.currentLabel;
                this.selected = option;
                if (this.filterable) this.query = this.selectedLabel;
                return;
            }

            var result = [];
            if (Array.isArray(val)) {
                val.forEach(function (value) {
                    var obj = _this6.getOption(value);
                    result.push(obj);
                });
            }
            this.selected = result;
            this.$nextTick(function () {
                _this6.resetInputHeight();
            });
        },


        // update author:lutz
        // update author: tangdm descript: repair the only one data for un-delete tag
        deleteTag: function deleteTag(event, tag) {
            var val = this.getVal();
            var index = this.selected.indexOf(tag);
            if (index > -1 && !this.selectDisabled) {
                var value = val.slice();
                value.splice(index, 1);
                if (value.length === 0) value = "";
                this.$emit('input', value);
                this.emitChange(value);
                this.$emit('remove-tag', tag.value);
            }
            event.stopPropagation();
        },


        // update author:lutz
        deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
                var val = this.getVal().slice();
                val.pop();
                var outputFormat = this.outputFormat,
                    seq = this.seq;

                val = Object(data_convert["a" /* data2type */])(val, outputFormat, seq);
                this.$emit('input', val);
                this.emitChange(val);
            }
        }
    },

    // update author:lutz
    created: function created() {
        var _this7 = this;

        this.cachedPlaceHolder = this.currentPlaceholder = this.placeholder;

        this.debouncedOnInputChange = debounce_default()(this.debounce, function () {
            _this7.onInputChange();
        });

        this.debouncedQueryChange = debounce_default()(this.debounce, function (e) {
            _this7.handleQueryChange(e.target.value);
        });

        this.$on('handleCloseDrapdown', this.handleCloseDrapdown);
        this.$on('handleOptionClick', this.handleOptionSelect);
        this.$on('setSelected', this.setSelected);
    },


    // update author:lutz
    mounted: function mounted() {
        var _this8 = this;

        var val = this.getVal();
        if (this.multiple && Array.isArray(val) && val.length > 0) {
            this.currentPlaceholder = '';
        }
        Object(resize_event["a" /* addResizeListener */])(this.$el, this.handleResize);
        var reference = this.$refs.reference;
        if (reference && reference.$el) {
            var sizeMap = { medium: 36, small: 32, mini: 28 };

            // add author: tangdm descript: 增加分辨率识别
            var clientBodyWidth = document.body.clientWidth;
            var autoFixedHeight = clientBodyWidth < 1366 ? 24 : clientBodyWidth < 1681 ? 28 : 32;

            // update author: tangdm [code] this.initialInputHeight = input.getBoundingClientRect().height || sizeMap[this.selectSize];
            this.initialInputHeight = sizeMap[this.selectSize] || autoFixedHeight;
        }
        if (this.remote && this.multiple) {
            this.resetInputHeight();
        }
        this.$nextTick(function () {
            if (reference && reference.$el) {
                _this8.inputWidth = reference.$el.getBoundingClientRect().width;
            }
        });
        this.setSelected();
    }
});
// CONCATENATED MODULE: ./packages/base/select.vue?vue&type=script&lang=js&
 /* harmony default export */ var base_selectvue_type_script_lang_js_ = (selectvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/base/select.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  base_selectvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/base/select.vue"
/* harmony default export */ var base_select = __webpack_exports__["a"] = (component.exports);

/***/ }),
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */
/***/ (function(module, exports) {

this["pinyin"] = /******/function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/var installedModules = {}; // The require function
    /******/
    /******/ /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports; // Create a new module (and put it into the cache)
        /******/
        /******/ /******/var module = installedModules[moduleId] = {
            /******/exports: {},
            /******/id: moduleId,
            /******/loaded: false
            /******/
        }; // Execute the module function
        /******/
        /******/ /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__); // Flag the module as loaded
        /******/
        /******/ /******/module.loaded = true; // Return the exports of the module
        /******/
        /******/ /******/return module.exports;
        /******/
    } // expose the modules object (__webpack_modules__)
    /******/
    /******/
    /******/ /******/__webpack_require__.m = modules; // expose the module cache
    /******/
    /******/ /******/__webpack_require__.c = installedModules; // __webpack_public_path__
    /******/
    /******/ /******/__webpack_require__.p = ""; // Load entry module and return exports
    /******/
    /******/ /******/return __webpack_require__(0);
    /******/
}(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    module.exports = __webpack_require__(5);

    /***/
},
/* 1 */
/***/function (module, exports) {
    /* eslint-disable no-unused-vars */
    "use strict";

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
        }

        return Object(val);
    }

    module.exports = Object.assign || function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);

            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }

            if (Object.getOwnPropertySymbols) {
                symbols = Object.getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (propIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }

        return to;
    };

    /***/
},
/* 2 */
/***/function (module, exports) {
    "use strict";

    module.exports = {
        èr: "二贰",
        shí: "十时实蚀",
        yǐ: "乙已以蚁倚",
        yī: "一衣医依伊揖壹",
        "chǎng,ān,hàn": "厂",
        "dīng,zhēng": "丁",
        qī: "七戚欺漆柒凄嘁",
        "bǔ,bo": "卜",
        rén: "人仁",
        rù: "入褥",
        jiǔ: "九久酒玖灸韭",
        ér: "儿而",
        bā: "八巴疤叭芭捌笆",
        "jǐ,jī": "几",
        "le,liǎo": "了",
        lì: "力历厉立励利例栗粒吏沥荔俐莉砾雳痢",
        dāo: "刀",
        nǎi: "乃奶",
        sān: "三叁",
        yòu: "又右幼诱佑",
        yú: "于余鱼娱渔榆愚隅逾舆",
        shì: "士示世市式势事侍饰试视柿是适室逝释誓拭恃嗜",
        "gān,gàn": "干",
        gōng: "工弓公功攻宫恭躬",
        kuī: "亏盔窥",
        tǔ: "土",
        cùn: "寸",
        "dà,dài,tài": "大",
        cái: "才材财裁",
        xià: "下夏",
        zhàng: "丈仗帐胀障杖账",
        "yǔ,yù,yú": "与",
        "shàng,shǎng": "上",
        "wàn,mò": "万",
        kǒu: "口",
        xiǎo: "小晓",
        jīn: "巾斤今金津筋襟",
        shān: "山删衫珊",
        qiān: "千迁牵谦签",
        qǐ: "乞企启起",
        chuān: "川穿",
        "gè,gě": "个各",
        sháo: "勺芍",
        yì: "亿义艺忆议亦异役译易疫益谊意毅翼屹抑邑绎奕逸肄溢",
        jí: "及吉级极即急疾集籍棘辑嫉",
        fán: "凡烦矾樊",
        xī: "夕西吸希析牺息悉惜稀锡溪熄膝昔晰犀熙嬉蟋",
        wán: "丸完玩顽",
        "me,mó,ma,yāo": "么",
        "guǎng,ān": "广",
        "wáng,wú": "亡",
        mén: "门们",
        shī: "尸失师诗狮施湿虱",
        zhī: "之支汁芝肢脂蜘",
        jǐ: "己挤脊",
        zǐ: "子紫姊籽滓",
        wèi: "卫未位味畏胃喂慰谓猬蔚魏",
        yě: "也冶野",
        "nǚ,rǔ": "女",
        rèn: "刃认韧纫",
        fēi: "飞非啡",
        xí: "习席袭媳",
        mǎ: "马码玛",
        "chā,chá,chǎ": "叉",
        fēng: "丰封疯峰锋蜂枫",
        xiāng: "乡香箱厢湘镶",
        jǐng: "井警阱",
        "wáng,wàng": "王",
        kāi: "开揩",
        tiān: "天添",
        wú: "无吴芜梧蜈",
        "fū,fú": "夫",
        zhuān: "专砖",
        yuán: "元园原圆援缘源袁猿辕",
        yún: "云匀耘",
        "zhā,zā,zhá": "扎",
        mù: "木目牧墓幕暮慕沐募睦穆",
        wǔ: "五午伍武侮舞捂鹉",
        tīng: "厅听",
        "bù,fǒu": "不",
        "qū,ōu": "区",
        quǎn: "犬",
        tài: "太态泰汰",
        yǒu: "友",
        "chē,jū": "车",
        pǐ: "匹",
        yóu: "尤由邮犹油游",
        jù: "巨拒具俱剧距惧锯聚炬",
        yá: "牙芽崖蚜涯衙",
        bǐ: "比彼笔鄙匕秕",
        jiē: "皆阶接街秸",
        hù: "互户护沪",
        "qiè,qiē": "切",
        "wǎ,wà": "瓦",
        zhǐ: "止旨址纸指趾",
        "tún,zhūn": "屯",
        "shǎo,shào": "少",
        rì: "日",
        "zhōng,zhòng": "中",
        gāng: "冈刚纲缸肛",
        "nèi,nà": "内",
        bèi: "贝备倍辈狈惫焙",
        shuǐ: "水",
        "jiàn,xiàn": "见",
        niú: "牛",
        shǒu: "手守首",
        máo: "毛矛茅锚",
        qì: "气弃汽器迄泣",
        shēng: "升生声牲笙甥",
        "cháng,zhǎng": "长",
        "shén,shí": "什",
        "piàn,piān": "片",
        "pú,pū": "仆",
        "huà,huā": "化",
        bì: "币必毕闭毙碧蔽弊避壁庇蓖痹璧",
        "chóu,qiú": "仇",
        "zhuǎ,zhǎo": "爪",
        "jǐn,jìn": "仅",
        réng: "仍",
        "fù,fǔ": "父",
        "cóng,zòng": "从",
        fǎn: "反返",
        jiè: "介戒届界借诫",
        xiōng: "凶兄胸匈汹",
        "fēn,fèn": "分",
        fá: "乏伐罚阀筏",
        cāng: "仓苍舱沧",
        yuè: "月阅悦跃越岳粤",
        "shì,zhī": "氏",
        wù: "勿务物误悟雾坞晤",
        qiàn: "欠歉",
        "fēng,fěng": "风",
        dān: "丹耽",
        wū: "乌污呜屋巫诬",
        fèng: "凤奉",
        "gōu,gòu": "勾",
        wén: "文闻蚊",
        "liù,lù": "六",
        huǒ: "火伙",
        fāng: "方芳",
        "dǒu,dòu": "斗",
        "wèi,wéi": "为",
        dìng: "订定锭",
        jì: "计记技忌际季剂迹既继寄绩妓荠寂鲫冀",
        xīn: "心辛欣新薪锌",
        "chǐ,chě": "尺",
        yǐn: "引饮蚓瘾",
        chǒu: "丑",
        kǒng: "孔恐",
        duì: "队对",
        bàn: "办半扮伴瓣绊",
        "yǔ,yú": "予",
        yǔn: "允陨",
        quàn: "劝",
        shū: "书叔殊梳舒疏输蔬抒枢淑",
        shuāng: "双霜",
        yù: "玉育狱浴预域欲遇御裕愈誉芋郁喻寓豫",
        huàn: "幻换唤患宦涣焕痪",
        kān: "刊堪勘",
        mò: "末沫漠墨默茉陌寞",
        jī: "击饥圾机肌鸡积基激讥叽唧畸箕",
        "dǎ,dá": "打",
        qiǎo: "巧",
        "zhèng,zhēng": "正症挣",
        pū: "扑",
        "bā,pá": "扒",
        gān: "甘肝竿柑",
        qù: "去",
        rēng: "扔",
        gǔ: "古谷股鼓",
        běn: "本",
        "jié,jiē": "节结",
        "shù,shú,zhú": "术",
        bǐng: "丙柄饼秉禀",
        "kě,kè": "可",
        zuǒ: "左",
        bù: "布步怖部埠",
        "shí,dàn": "石",
        lóng: "龙聋隆咙胧窿",
        yà: "轧亚讶",
        miè: "灭蔑",
        píng: "平评凭瓶萍坪",
        dōng: "东冬",
        "kǎ,qiǎ": "卡",
        "běi,bèi": "北",
        yè: "业页夜液谒腋",
        jiù: "旧救就舅臼疚",
        shuài: "帅蟀",
        guī: "归规闺硅瑰",
        "zhàn,zhān": "占",
        dàn: "旦但诞淡蛋氮",
        "qiě,jū": "且",
        "yè,xié": "叶",
        jiǎ: "甲钾",
        dīng: "叮盯",
        shēn: "申伸身深呻绅",
        "hào,háo": "号",
        diàn: "电店垫殿玷淀惦奠",
        tián: "田甜恬",
        shǐ: "史使始驶矢屎",
        "zhī,zhǐ": "只",
        yāng: "央殃秧鸯",
        diāo: "叼雕刁碉",
        jiào: "叫轿较窖酵",
        lìng: "另",
        "dāo,tāo": "叨",
        sì: "四寺饲肆",
        tàn: "叹炭探碳",
        qiū: "丘秋蚯",
        hé: "禾河荷盒",
        fù: "付负妇附咐赴复傅富腹覆赋缚",
        dài: "代带贷怠袋逮戴",
        xiān: "仙先掀锨",
        yí: "仪宜姨移遗夷胰",
        bái: "白",
        "zǎi,zǐ,zī": "仔",
        chì: "斥赤翅",
        tā: "他它塌",
        guā: "瓜刮",
        hū: "乎呼忽",
        cóng: "丛",
        "lìng,líng,lǐng": "令",
        yòng: "用",
        shuǎi: "甩",
        yìn: "印",
        "lè,yuè": "乐",
        "jù,gōu": "句",
        cōng: "匆葱聪囱",
        fàn: "犯饭泛范贩",
        cè: "册厕测策",
        wài: "外",
        "chù,chǔ": "处",
        niǎo: "鸟",
        bāo: "包胞苞褒",
        zhǔ: "主煮嘱拄",
        shǎn: "闪陕",
        lán: "兰拦栏蓝篮澜",
        "tóu,tou": "头",
        huì: "汇绘贿惠慧讳诲晦秽",
        hàn: "汉旱捍悍焊撼翰憾",
        tǎo: "讨",
        xué: "穴学",
        xiě: "写",
        "níng,nìng,zhù": "宁",
        ràng: "让",
        lǐ: "礼李里理鲤",
        xùn: "训讯迅汛驯逊殉",
        yǒng: "永咏泳勇蛹踊",
        mín: "民",
        chū: "出初",
        ní: "尼",
        sī: "司丝私斯撕嘶",
        liáo: "辽疗僚聊寥嘹缭",
        jiā: "加佳嘉枷",
        nú: "奴",
        "zhào,shào": "召",
        biān: "边编鞭蝙",
        pí: "皮疲脾啤",
        yùn: "孕运韵酝蕴",
        "fā,fà": "发",
        shèng: "圣胜剩",
        "tái,tāi": "台苔",
        jiū: "纠究揪鸠",
        mǔ: "母亩牡拇姆",
        "káng,gāng": "扛",
        xíng: "刑形型邢",
        dòng: "动冻栋洞",
        kǎo: "考烤拷",
        kòu: "扣寇",
        tuō: "托拖脱",
        lǎo: "老",
        gǒng: "巩汞拱",
        zhí: "执直侄值职植",
        kuò: "扩阔廓",
        yáng: "扬阳杨洋",
        "dì,de": "地",
        "sǎo,sào": "扫",
        "chǎng,cháng": "场",
        ěr: "耳尔饵",
        máng: "芒忙盲茫",
        xiǔ: "朽",
        "pǔ,pò,pō,piáo": "朴",
        quán: "权全泉拳痊",
        "guò,guo,guō": "过",
        chén: "臣尘辰沉陈晨忱",
        zài: "再在",
        xié: "协胁斜携鞋谐",
        "yā,yà": "压",
        yàn: "厌艳宴验雁焰砚唁谚堰",
        "yǒu,yòu": "有",
        cún: "存",
        bǎi: "百摆",
        "kuā,kuà": "夸",
        jiàng: "匠酱",
        duó: "夺踱",
        huī: "灰挥恢辉徽",
        dá: "达",
        sǐ: "死",
        liè: "列劣烈猎",
        guǐ: "轨鬼诡",
        "xié,yá,yé,yú,xú": "邪",
        "jiá,jiā,gā,xiá": "夹",
        chéng: "成呈诚承城程惩橙",
        mài: "迈麦卖",
        "huà,huá": "划",
        zhì: "至志帜制质治致秩智置挚掷窒滞稚",
        cǐ: "此",
        zhēn: "贞针侦珍真斟榛",
        jiān: "尖奸歼坚肩艰兼煎",
        guāng: "光",
        "dāng,dàng": "当",
        zǎo: "早枣澡蚤藻",
        "tù,tǔ": "吐",
        "xià,hè": "吓",
        chóng: "虫崇",
        tuán: "团",
        "tóng,tòng": "同",
        "qū,qǔ": "曲",
        diào: "吊钓掉",
        yīn: "因阴音姻茵",
        chī: "吃嗤痴",
        "ma,má,mǎ": "吗",
        yǔ: "屿宇羽",
        fān: "帆翻",
        huí: "回茴蛔",
        "qǐ,kǎi": "岂",
        zé: "则责",
        suì: "岁碎穗祟遂隧",
        ròu: "肉",
        "zhū,shú": "朱",
        wǎng: "网往枉",
        nián: "年",
        diū: "丢",
        shé: "舌",
        zhú: "竹逐烛",
        qiáo: "乔侨桥瞧荞憔",
        wěi: "伟伪苇纬萎",
        "chuán,zhuàn": "传",
        pāng: "乓",
        pīng: "乒",
        "xiū,xǔ": "休",
        fú: "伏扶俘浮符幅福凫芙袱辐蝠",
        yōu: "优忧悠幽",
        yán: "延严言岩炎沿盐颜阎蜒檐",
        jiàn: "件建荐贱剑健舰践鉴键箭涧",
        "rèn,rén": "任",
        "huá,huà,huā": "华",
        "jià,jiè,jie": "价",
        shāng: "伤商",
        "fèn,bīn": "份",
        fǎng: "仿访纺",
        "yǎng,áng": "仰",
        zì: "自字",
        "xiě,xuè": "血",
        xiàng: "向项象像橡",
        "sì,shì": "似",
        hòu: "后厚候",
        zhōu: "舟州周洲",
        "háng,xíng": "行",
        "huì,kuài": "会",
        shā: "杀纱杉砂",
        "hé,gě": "合",
        zhào: "兆赵照罩",
        zhòng: "众仲",
        yé: "爷",
        sǎn: "伞",
        "chuàng,chuāng": "创",
        duǒ: "朵躲",
        wēi: "危威微偎薇巍",
        xún: "旬寻巡询循",
        zá: "杂砸",
        míng: "名明鸣铭螟",
        duō: "多哆",
        zhēng: "争征睁筝蒸怔狰",
        sè: "色涩瑟",
        zhuàng: "壮状撞",
        "chōng,chòng": "冲",
        bīng: "冰兵",
        zhuāng: "庄装妆桩",
        qìng: "庆",
        liú: "刘留流榴琉硫瘤",
        "qí,jì,zī,zhāi": "齐",
        cì: "次赐",
        jiāo: "交郊浇娇骄胶椒焦蕉礁",
        chǎn: "产铲阐",
        wàng: "妄忘旺望",
        chōng: "充",
        wèn: "问",
        chuǎng: "闯",
        "yáng,xiáng": "羊",
        "bìng,bīng": "并",
        dēng: "灯登蹬",
        mǐ: "米",
        guān: "关官棺",
        "hàn,hán": "汗",
        jué: "决绝掘诀爵",
        jiāng: "江姜僵缰",
        "tāng,shāng": "汤",
        chí: "池驰迟持弛",
        "xīng,xìng": "兴",
        zhái: "宅",
        ān: "安氨庵鞍",
        jiǎng: "讲奖桨蒋",
        jūn: "军均君钧",
        "xǔ,hǔ": "许",
        fěng: "讽",
        "lùn,lún": "论",
        nóng: "农浓脓",
        shè: "设社舍涉赦",
        "nà,nǎ,nèi,nā": "那",
        "jìn,jǐn": "尽",
        dǎo: "导岛蹈捣祷",
        "sūn,xùn": "孙",
        zhèn: "阵振震镇",
        shōu: "收",
        fáng: "防妨房肪",
        rú: "如儒蠕",
        mā: "妈",
        "xì,hū": "戏",
        "hǎo,hào": "好",
        "tā,jiě": "她",
        "guān,guàn": "观冠",
        huān: "欢",
        "hóng,gōng": "红",
        mǎi: "买",
        "xiān,qiàn": "纤",
        "jì,jǐ": "纪济",
        "yuē,yāo": "约",
        shòu: "寿受授售兽瘦",
        "nòng,lòng": "弄",
        jìn: "进近晋浸",
        wéi: "违围唯维桅",
        "yuǎn,yuàn": "远",
        tūn: "吞",
        tán: "坛谈痰昙谭潭檀",
        fǔ: "抚斧府俯辅腐甫脯",
        "huài,pēi,pī,péi": "坏",
        rǎo: "扰",
        pī: "批披坯霹",
        zhǎo: "找沼",
        chě: "扯",
        zǒu: "走",
        chāo: "抄钞超",
        bà: "坝爸霸",
        gòng: "贡",
        "zhé,shé,zhē": "折",
        "qiǎng,qiāng,chēng": "抢",
        zhuā: "抓",
        xiào: "孝笑效哮啸",
        pāo: "抛",
        tóu: "投",
        kàng: "抗炕",
        fén: "坟焚",
        kēng: "坑",
        dǒu: "抖陡蚪",
        "ké,qiào": "壳",
        "fāng,fáng": "坊",
        niǔ: "扭纽钮",
        kuài: "块快筷",
        "bǎ,bà": "把",
        bào: "报抱爆豹",
        jié: "劫杰洁捷截竭",
        què: "却确鹊",
        huā: "花",
        fēn: "芬吩纷氛",
        qín: "芹琴禽勤秦擒",
        láo: "劳牢",
        lú: "芦炉卢庐颅",
        "gān,gǎn": "杆",
        kè: "克刻客课",
        "sū,sù": "苏",
        dù: "杜渡妒镀",
        "gàng,gāng": "杠",
        cūn: "村",
        qiú: "求球囚",
        xìng: "杏幸性姓",
        "gèng,gēng": "更",
        liǎng: "两",
        "lì,lí": "丽",
        shù: "束述树竖恕庶墅漱",
        dòu: "豆逗痘",
        "hái,huán": "还",
        "fǒu,pǐ": "否",
        lái: "来莱",
        lián: "连怜帘莲联廉镰",
        "xiàn,xuán": "县",
        "zhù,chú": "助",
        dāi: "呆",
        kuàng: "旷况矿框眶",
        "ya,yā": "呀",
        zú: "足族",
        dūn: "吨蹲墩",
        kùn: "困",
        nán: "男",
        "chǎo,chāo": "吵",
        "yuán,yún,yùn": "员",
        chuàn: "串",
        chuī: "吹炊",
        "ba,bā": "吧",
        hǒu: "吼",
        gǎng: "岗",
        "bié,biè": "别",
        "dīng,dìng": "钉",
        gào: "告",
        wǒ: "我",
        luàn: "乱",
        tū: "秃突凸",
        xiù: "秀袖绣锈嗅",
        "gū,gù": "估",
        měi: "每美",
        "hé,hē,hè": "何",
        "tǐ,tī,bèn": "体",
        "bó,bǎi,bà": "伯",
        zuò: "作坐座做",
        líng: "伶灵铃陵零龄玲凌菱蛉翎",
        dī: "低堤滴",
        "yòng,yōng": "佣",
        nǐ: "你拟",
        zhù: "住注驻柱祝铸贮蛀",
        zào: "皂灶造燥躁噪",
        "fó,fú,bì,bó": "佛",
        chè: "彻撤澈",
        tuǒ: "妥椭",
        lín: "邻林临琳磷鳞",
        hán: "含寒函涵韩",
        chà: "岔衩",
        cháng: "肠尝常偿",
        "dù,dǔ": "肚",
        "guī,jūn,qiū": "龟",
        miǎn: "免勉娩冕缅",
        "jiǎo,jué": "角",
        kuáng: "狂",
        "tiáo,tiāo": "条",
        luǎn: "卵",
        yíng: "迎盈营蝇赢荧莹萤",
        "xì,jì": "系",
        chuáng: "床",
        kù: "库裤酷",
        "yìng,yīng": "应",
        lěng: "冷",
        "zhè,zhèi": "这",
        xù: "序叙绪续絮蓄旭恤酗婿",
        xián: "闲贤弦咸衔嫌涎舷",
        "jiān,jiàn": "间监",
        pàn: "判盼叛畔",
        "mēn,mèn": "闷",
        wāng: "汪",
        "dì,tì,tuí": "弟",
        "shā,shà": "沙",
        "shà,shā": "煞",
        càn: "灿",
        wò: "沃卧握",
        "méi,mò": "没",
        gōu: "沟钩",
        "shěn,chén": "沈",
        huái: "怀槐徊淮",
        sòng: "宋送诵颂讼",
        hóng: "宏虹洪鸿",
        qióng: "穷琼",
        zāi: "灾栽",
        liáng: "良梁粮粱",
        zhèng: "证郑政",
        bǔ: "补捕哺",
        sù: "诉肃素速塑粟溯",
        "shí,zhì": "识",
        cí: "词辞慈磁祠瓷雌",
        zhěn: "诊枕疹",
        "niào,suī": "尿",
        céng: "层",
        jú: "局菊橘",
        "wěi,yǐ": "尾",
        zhāng: "张章彰樟",
        gǎi: "改",
        lù: "陆录鹿路赂",
        "ē,ā": "阿",
        zǔ: "阻组祖诅",
        miào: "妙庙",
        yāo: "妖腰邀夭吆",
        nǔ: "努",
        "jìn,jìng": "劲",
        rěn: "忍",
        qū: "驱屈岖蛆躯",
        chún: "纯唇醇",
        nà: "纳钠捺",
        bó: "驳脖博搏膊舶渤",
        "zòng,zǒng": "纵",
        "wén,wèn": "纹",
        lǘ: "驴",
        huán: "环",
        qīng: "青轻倾清蜻氢卿",
        xiàn: "现限线宪陷馅羡献腺",
        biǎo: "表",
        "mǒ,mò,mā": "抹",
        lǒng: "拢垄",
        "dān,dàn,dǎn": "担",
        bá: "拔跋",
        jiǎn: "拣茧俭捡检减剪简柬碱",
        tǎn: "坦毯袒",
        chōu: "抽",
        yā: "押鸦鸭",
        guǎi: "拐",
        pāi: "拍",
        zhě: "者",
        dǐng: "顶鼎",
        yōng: "拥庸",
        "chāi,cā": "拆",
        dǐ: "抵",
        "jū,gōu": "拘",
        lā: "垃",
        "lā,lá": "拉",
        "bàn,pàn": "拌",
        zhāo: "招昭",
        pō: "坡泼颇",
        bō: "拨波玻菠播",
        "zé,zhái": "择",
        tái: "抬",
        "qí,jī": "其奇",
        qǔ: "取娶",
        kǔ: "苦",
        mào: "茂贸帽貌",
        "ruò,rě": "若",
        miáo: "苗描瞄",
        "píng,pēng": "苹",
        yīng: "英樱鹰莺婴缨鹦",
        qié: "茄",
        jīng: "茎京经惊晶睛精荆兢鲸",
        "zhī,qí": "枝",
        bēi: "杯悲碑卑",
        "guì,jǔ": "柜",
        bǎn: "板版",
        sōng: "松",
        qiāng: "枪腔",
        gòu: "构购够垢",
        "sàng,sāng": "丧",
        huà: "画话桦",
        huò: "或货获祸惑霍",
        "cì,cī": "刺",
        "yǔ,yù": "雨语",
        "bēn,bèn": "奔",
        fèn: "奋粪愤忿",
        hōng: "轰烘",
        "qī,qì": "妻",
        ōu: "欧殴鸥",
        qǐng: "顷请",
        "zhuǎn,zhuàn,zhuǎi": "转",
        zhǎn: "斩盏展",
        ruǎn: "软",
        lún: "轮仑伦沦",
        dào: "到盗悼道稻",
        chǐ: "齿耻侈",
        kěn: "肯垦恳啃",
        hǔ: "虎",
        "xiē,suò": "些",
        lǔ: "虏鲁卤",
        shèn: "肾渗慎",
        shàng: "尚",
        guǒ: "果裹",
        kūn: "昆坤",
        guó: "国",
        chāng: "昌猖",
        chàng: "畅唱",
        diǎn: "典点碘",
        gù: "固故顾雇",
        áng: "昂",
        zhōng: "忠终钟盅衷",
        "ne,ní": "呢",
        àn: "岸按案暗",
        "tiě,tiē,tiè,": "帖",
        luó: "罗萝锣箩骡螺逻",
        kǎi: "凯慨",
        "lǐng,líng": "岭",
        bài: "败拜",
        tú: "图徒途涂屠",
        chuí: "垂锤捶",
        "zhī,zhì": "知织",
        guāi: "乖",
        gǎn: "秆赶敢感橄",
        "hé,hè,huó,huò,hú": "和",
        "gòng,gōng": "供共",
        "wěi,wēi": "委",
        "cè,zè,zhāi": "侧",
        pèi: "佩配沛",
        "pò,pǎi": "迫",
        "de,dì,dí": "的",
        pá: "爬",
        suǒ: "所索锁琐",
        jìng: "径竞竟敬静境镜靖",
        mìng: "命",
        "cǎi,cài": "采",
        niàn: "念",
        tān: "贪摊滩瘫",
        rǔ: "乳辱",
        pín: "贫",
        fū: "肤麸孵敷",
        fèi: "肺废沸费吠",
        zhǒng: "肿",
        péng: "朋棚蓬膨硼鹏澎篷",
        "fú,fù": "服",
        féi: "肥",
        hūn: "昏婚荤",
        tù: "兔",
        hú: "狐胡壶湖蝴弧葫",
        gǒu: "狗苟",
        bǎo: "饱宝保",
        xiǎng: "享响想",
        biàn: "变遍辨辩辫",
        "dǐ,de": "底",
        "jìng,chēng": "净",
        fàng: "放",
        nào: "闹",
        zhá: "闸铡",
        "juàn,juǎn": "卷",
        "quàn,xuàn": "券",
        "dān,shàn,chán": "单",
        chǎo: "炒",
        "qiǎn,jiān": "浅",
        fǎ: "法",
        "xiè,yì": "泄",
        lèi: "泪类",
        zhān: "沾粘毡瞻",
        "pō,bó": "泊",
        "pào,pāo": "泡",
        xiè: "泻卸屑械谢懈蟹",
        "ní,nì": "泥",
        "zé,shì": "泽",
        pà: "怕帕",
        guài: "怪",
        zōng: "宗棕踪",
        shěn: "审婶",
        zhòu: "宙昼皱骤咒",
        "kōng,kòng,kǒng": "空",
        "láng,làng": "郎",
        chèn: "衬趁",
        gāi: "该",
        "xiáng,yáng": "详",
        "lì,dài": "隶",
        jū: "居鞠驹",
        "shuā,shuà": "刷",
        mèng: "孟梦",
        gū: "孤姑辜咕沽菇箍",
        "jiàng,xiáng": "降",
        mèi: "妹昧媚",
        jiě: "姐",
        jià: "驾架嫁稼",
        "cān,shēn,cēn,sān": "参",
        liàn: "练炼恋链",
        xì: "细隙",
        shào: "绍哨",
        tuó: "驼驮鸵",
        guàn: "贯惯灌罐",
        zòu: "奏揍",
        chūn: "春椿",
        bāng: "帮邦梆",
        "dú,dài": "毒",
        guà: "挂卦褂",
        kuǎ: "垮",
        "kuà,kū": "挎",
        náo: "挠",
        "dǎng,dàng": "挡",
        shuān: "拴栓",
        tǐng: "挺艇",
        "kuò,guā": "括",
        "shí,shè": "拾",
        "tiāo,tiǎo": "挑",
        wā: "挖蛙洼",
        pīn: "拼",
        "shèn,shén": "甚",
        mǒu: "某",
        nuó: "挪",
        gé: "革阁格隔",
        "xiàng,hàng": "巷",
        cǎo: "草",
        chá: "茶察茬",
        dàng: "荡档",
        huāng: "荒慌",
        róng: "荣绒容熔融茸蓉溶榕",
        "nán,nā": "南",
        biāo: "标彪膘",
        yào: "药耀",
        kū: "枯哭窟",
        "xiāng,xiàng": "相",
        "chá,zhā": "查",
        liǔ: "柳",
        "bǎi,bó,bò": "柏",
        "yào,yāo": "要",
        wāi: "歪",
        "yán,yàn": "研",
        lí: "厘狸离犁梨璃黎漓篱",
        "qì,qiè": "砌",
        miàn: "面",
        kǎn: "砍坎",
        shuǎ: "耍",
        nài: "耐奈",
        cán: "残蚕惭",
        zhàn: "战站栈绽蘸",
        "bèi,bēi": "背",
        lǎn: "览懒揽缆榄",
        "shěng,xǐng": "省",
        "xiāo,xuē": "削",
        zhǎ: "眨",
        "hǒng,hōng,hòng": "哄",
        xiǎn: "显险",
        "mào,mò": "冒",
        "yǎ,yā": "哑",
        yìng: "映硬",
        zuó: "昨",
        xīng: "星腥猩",
        pā: "趴",
        guì: "贵桂跪刽",
        "sī,sāi": "思",
        xiā: "虾瞎",
        "mǎ,mā,mà": "蚂",
        suī: "虽",
        pǐn: "品",
        mà: "骂",
        "huá,huā": "哗",
        "yè,yàn,yān": "咽",
        "zán,zǎ": "咱",
        "hā,hǎ,hà": "哈",
        yǎo: "咬舀",
        "nǎ,něi,na,né": "哪",
        "hāi,ké": "咳",
        xiá: "峡狭霞匣侠暇辖",
        "gǔ,gū": "骨",
        "gāng,gàng": "钢",
        tiē: "贴",
        "yào,yuè": "钥",
        "kàn,kān": "看",
        jǔ: "矩举",
        zěn: "怎",
        xuǎn: "选癣",
        "zhòng,zhǒng,chóng": "种",
        miǎo: "秒渺藐",
        kē: "科棵颗磕蝌",
        "biàn,pián": "便",
        "zhòng,chóng": "重",
        liǎ: "俩",
        duàn: "段断缎锻",
        cù: "促醋簇",
        shùn: "顺瞬",
        xiū: "修羞",
        sú: "俗",
        qīn: "侵钦",
        "xìn,shēn": "信",
        huáng: "皇黄煌凰惶蝗蟥",
        "zhuī,duī": "追",
        jùn: "俊峻骏竣",
        "dài,dāi": "待",
        xū: "须虚需",
        hěn: "很狠",
        dùn: "盾顿钝",
        lǜ: "律虑滤氯",
        pén: "盆",
        "shí,sì,yì": "食",
        dǎn: "胆",
        táo: "逃桃陶萄淘",
        pàng: "胖",
        "mài,mò": "脉",
        dú: "独牍",
        jiǎo: "狡饺绞脚搅",
        yuàn: "怨院愿",
        ráo: "饶",
        wān: "弯湾豌",
        āi: "哀哎埃",
        "jiāng,jiàng": "将浆",
        tíng: "亭庭停蜓廷",
        liàng: "亮谅辆晾",
        "dù,duó": "度",
        chuāng: "疮窗",
        "qīn,qìng": "亲",
        zī: "姿资滋咨",
        dì: "帝递第蒂缔",
        "chà,chā,chāi,cī": "差",
        yǎng: "养氧痒",
        qián: "前钱钳潜黔",
        mí: "迷谜靡",
        nì: "逆昵匿腻",
        "zhà,zhá": "炸",
        zǒng: "总",
        làn: "烂滥",
        "pào,páo,bāo": "炮",
        tì: "剃惕替屉涕",
        "sǎ,xǐ": "洒",
        zhuó: "浊啄灼茁卓酌",
        "xǐ,xiǎn": "洗",
        qià: "洽恰",
        pài: "派湃",
        huó: "活",
        rǎn: "染",
        héng: "恒衡",
        hún: "浑魂",
        nǎo: "恼脑",
        "jué,jiào": "觉",
        hèn: "恨",
        xuān: "宣轩喧",
        qiè: "窃怯",
        "biǎn,piān": "扁",
        ǎo: "袄",
        shén: "神",
        "shuō,shuì,yuè": "说",
        tuì: "退蜕",
        chú: "除厨锄雏橱",
        méi: "眉梅煤霉玫枚媒楣",
        hái: "孩",
        wá: "娃",
        "lǎo,mǔ": "姥",
        nù: "怒",
        hè: "贺赫褐鹤",
        róu: "柔揉蹂",
        bǎng: "绑膀",
        lěi: "垒蕾儡",
        rào: "绕",
        "gěi,jǐ": "给",
        luò: "骆洛",
        "luò,lào": "络",
        tǒng: "统桶筒捅",
        gēng: "耕羹",
        hào: "耗浩",
        bān: "班般斑搬扳颁",
        zhū: "珠株诸猪蛛",
        lāo: "捞",
        fěi: "匪诽",
        "zǎi,zài": "载",
        "mái,mán": "埋",
        "shāo,shào": "捎稍",
        zhuō: "捉桌拙",
        niē: "捏",
        kǔn: "捆",
        "dū,dōu": "都",
        sǔn: "损笋",
        juān: "捐鹃",
        zhé: "哲辙",
        rè: "热",
        wǎn: "挽晚碗惋婉",
        "ái,āi": "挨",
        "mò,mù": "莫",
        "è,wù,ě,wū": "恶",
        tóng: "桐铜童彤瞳",
        "xiào,jiào": "校",
        "hé,hú": "核",
        yàng: "样漾",
        gēn: "根跟",
        gē: "哥鸽割歌戈",
        chǔ: "础储楚",
        pò: "破魄",
        tào: "套",
        chái: "柴豺",
        dǎng: "党",
        mián: "眠绵棉",
        shài: "晒",
        jǐn: "紧锦谨",
        "yūn,yùn": "晕",
        "huàng,huǎng": "晃",
        shǎng: "晌赏",
        ēn: "恩",
        "ài,āi": "唉",
        "ā,á,ǎ,à,a": "啊",
        "bà,ba,pí": "罢",
        zéi: "贼",
        tiě: "铁",
        "zuàn,zuān": "钻",
        "qiān,yán": "铅",
        quē: "缺",
        tè: "特",
        "chéng,shèng": "乘",
        dí: "敌笛涤嘀嫡",
        zū: "租",
        chèng: "秤",
        "mì,bì": "秘泌",
        "chēng,chèn,chèng": "称",
        tòu: "透",
        zhài: "债寨",
        "dào,dǎo": "倒",
        "tǎng,cháng": "倘",
        "chàng,chāng": "倡",
        juàn: "倦绢眷",
        "chòu,xiù": "臭",
        "shè,yè,yì": "射",
        xú: "徐",
        háng: "航杭",
        ná: "拿",
        wēng: "翁嗡",
        diē: "爹跌",
        ài: "爱碍艾隘",
        "gē,gé": "胳搁",
        cuì: "脆翠悴粹",
        zàng: "脏葬",
        láng: "狼廊琅榔",
        féng: "逢",
        è: "饿扼遏愕噩鳄",
        "shuāi,cuī": "衰",
        gāo: "高糕羔篙",
        zhǔn: "准",
        bìng: "病",
        téng: "疼腾誊藤",
        "liáng,liàng": "凉量",
        táng: "唐堂塘膛糖棠搪",
        pōu: "剖",
        "chù,xù": "畜",
        "páng,bàng": "旁磅",
        lǚ: "旅屡吕侣铝缕履",
        fěn: "粉",
        liào: "料镣",
        shāo: "烧",
        yān: "烟淹",
        tāo: "涛掏滔",
        lào: "涝酪",
        zhè: "浙蔗",
        xiāo: "消宵销萧硝箫嚣",
        hǎi: "海",
        "zhǎng,zhàng": "涨",
        làng: "浪",
        rùn: "润闰",
        tàng: "烫",
        "yǒng,chōng": "涌",
        huǐ: "悔毁",
        "qiāo,qiǎo": "悄",
        hài: "害亥骇",
        "jiā,jia,jie": "家",
        kuān: "宽",
        bīn: "宾滨彬缤濒",
        zhǎi: "窄",
        lǎng: "朗",
        "dú,dòu": "读",
        zǎi: "宰",
        "shàn,shān": "扇",
        "shān,shàn": "苫",
        wà: "袜",
        xiáng: "祥翔",
        shuí: "谁",
        páo: "袍咆",
        "bèi,pī": "被",
        "tiáo,diào,zhōu": "调",
        yuān: "冤鸳渊",
        "bō,bāo": "剥",
        ruò: "弱",
        péi: "陪培赔",
        niáng: "娘",
        tōng: "通",
        "néng,nài": "能",
        "nán,nàn,nuó": "难",
        sāng: "桑",
        pěng: "捧",
        dǔ: "堵赌睹",
        yǎn: "掩眼演衍",
        duī: "堆",
        "pái,pǎi": "排",
        tuī: "推",
        "jiào,jiāo": "教",
        lüè: "掠略",
        "jù,jū": "据",
        kòng: "控",
        "zhù,zhuó,zhe": "著",
        "jūn,jùn": "菌",
        "lè,lēi": "勒",
        méng: "萌盟檬朦",
        cài: "菜",
        tī: "梯踢剔",
        "shāo,sào": "梢",
        "fù,pì": "副",
        "piào,piāo": "票",
        shuǎng: "爽",
        "shèng,chéng": "盛",
        "què,qiāo,qiǎo": "雀",
        xuě: "雪",
        "chí,shi": "匙",
        xuán: "悬玄漩",
        "mī,mí": "眯",
        "la,lā": "啦",
        "shé,yí": "蛇",
        "lèi,léi,lěi": "累",
        "zhǎn,chán": "崭",
        "quān,juàn,juān": "圈",
        yín: "银吟淫",
        bèn: "笨",
        "lóng,lǒng": "笼",
        mǐn: "敏皿闽悯",
        nín: "您",
        ǒu: "偶藕",
        tōu: "偷",
        piān: "偏篇翩",
        "dé,děi,de": "得",
        "jiǎ,jià": "假",
        pán: "盘",
        chuán: "船",
        cǎi: "彩睬踩",
        lǐng: "领",
        liǎn: "脸敛",
        "māo,máo": "猫",
        měng: "猛锰",
        cāi: "猜",
        háo: "毫豪壕嚎",
        má: "麻",
        guǎn: "馆管",
        còu: "凑",
        hén: "痕",
        kāng: "康糠慷",
        "xuán,xuàn": "旋",
        "zhe,zhuó,zháo,zhāo": "着",
        "lǜ,shuài": "率",
        "gài,gě,hé": "盖",
        cū: "粗",
        "lín,lìn": "淋",
        "qú,jù": "渠",
        "jiàn,jiān": "渐溅",
        "hùn,hún": "混",
        pó: "婆",
        qíng: "情晴擎",
        cǎn: "惨",
        "sù,xiǔ,xiù": "宿",
        yáo: "窑谣摇遥肴姚",
        móu: "谋",
        mì: "密蜜觅",
        huǎng: "谎恍幌",
        "tán,dàn": "弹",
        suí: "随",
        "yǐn,yìn": "隐",
        "jǐng,gěng": "颈",
        shéng: "绳",
        qí: "骑棋旗歧祈脐畦崎鳍",
        chóu: "绸酬筹稠愁畴",
        "lǜ,lù": "绿",
        dā: "搭",
        kuǎn: "款",
        tǎ: "塔",
        "qū,cù": "趋",
        "tí,dī,dǐ": "提",
        "jiē,qì": "揭",
        xǐ: "喜徙",
        sōu: "搜艘",
        chā: "插",
        "lǒu,lōu": "搂",
        "qī,jī": "期",
        rě: "惹",
        "sàn,sǎn": "散",
        dǒng: "董懂",
        "gě,gé": "葛",
        pú: "葡菩蒲",
        "zhāo,cháo": "朝",
        "luò,là,lào": "落",
        kuí: "葵魁",
        bàng: "棒傍谤",
        "yǐ,yī": "椅",
        sēn: "森",
        "gùn,hùn": "棍",
        bī: "逼",
        "zhí,shi": "殖",
        "xià,shà": "厦",
        "liè,liě": "裂",
        xióng: "雄熊",
        zàn: "暂赞",
        yǎ: "雅",
        chǎng: "敞",
        zhǎng: "掌",
        shǔ: "暑鼠薯黍蜀署曙",
        zuì: "最罪醉",
        hǎn: "喊罕",
        "jǐng,yǐng": "景",
        lǎ: "喇",
        "pēn,pèn": "喷",
        "pǎo,páo": "跑",
        chuǎn: "喘",
        "hē,hè,yè": "喝",
        hóu: "喉猴",
        "pù,pū": "铺",
        hēi: "黑",
        guō: "锅郭",
        ruì: "锐瑞",
        duǎn: "短",
        é: "鹅额讹俄",
        děng: "等",
        kuāng: "筐",
        shuì: "税睡",
        "zhù,zhú": "筑",
        shāi: "筛",
        "dá,dā": "答",
        ào: "傲澳懊",
        pái: "牌徘",
        "bǎo,bǔ,pù": "堡",
        "ào,yù": "奥",
        "fān,pān": "番",
        "là,xī": "腊",
        huá: "猾滑",
        rán: "然燃",
        chán: "馋缠蝉",
        mán: "蛮馒",
        tòng: "痛",
        shàn: "善擅膳赡",
        zūn: "尊遵",
        pǔ: "普谱圃浦",
        "gǎng,jiǎng": "港",
        "céng,zēng": "曾",
        wēn: "温瘟",
        kě: "渴",
        zhā: "渣",
        duò: "惰舵跺",
        gài: "溉概丐钙",
        kuì: "愧",
        "yú,tōu": "愉",
        wō: "窝蜗",
        cuàn: "窜篡",
        qún: "裙群",
        "qiáng,qiǎng,jiàng": "强",
        "shǔ,zhǔ": "属",
        "zhōu,yù": "粥",
        sǎo: "嫂",
        huǎn: "缓",
        piàn: "骗",
        mō: "摸",
        "shè,niè": "摄",
        "tián,zhèn": "填",
        gǎo: "搞稿镐",
        suàn: "蒜算",
        "méng,mēng,měng": "蒙",
        "jìn,jīn": "禁",
        lóu: "楼娄",
        lài: "赖癞",
        "lù,liù": "碌",
        pèng: "碰",
        léi: "雷",
        báo: "雹",
        dū: "督",
        nuǎn: "暖",
        xiē: "歇楔蝎",
        kuà: "跨胯",
        "tiào,táo": "跳",
        "é,yǐ": "蛾",
        sǎng: "嗓",
        qiǎn: "遣谴",
        cuò: "错挫措锉",
        ǎi: "矮蔼",
        shǎ: "傻",
        cuī: "催摧崔",
        tuǐ: "腿",
        chù: "触矗",
        "jiě,jiè,xiè": "解",
        "shù,shǔ,shuò": "数",
        mǎn: "满",
        "liū,liù": "溜",
        gǔn: "滚",
        "sāi,sài,sè": "塞",
        "pì,bì": "辟",
        dié: "叠蝶谍碟",
        "fèng,féng": "缝",
        qiáng: "墙",
        "piě,piē": "撇",
        zhāi: "摘斋",
        shuāi: "摔",
        "mó,mú": "模",
        "bǎng,bàng": "榜",
        zhà: "榨乍诈",
        niàng: "酿",
        zāo: "遭糟",
        suān: "酸",
        "shang,cháng": "裳",
        sòu: "嗽",
        là: "蜡辣",
        qiāo: "锹敲跷",
        zhuàn: "赚撰",
        wěn: "稳吻紊",
        bí: "鼻荸",
        mó: "膜魔馍摹蘑",
        "xiān,xiǎn": "鲜",
        "yí,nǐ": "疑",
        "gāo,gào": "膏",
        zhē: "遮",
        duān: "端",
        màn: "漫慢曼幔",
        "piāo,piào,piǎo": "漂",
        lòu: "漏陋",
        sài: "赛",
        nèn: "嫩",
        dèng: "凳邓瞪",
        "suō,sù": "缩",
        "qù,cù": "趣",
        "sā,sǎ": "撒",
        "tàng,tāng": "趟",
        chēng: "撑",
        zēng: "增憎",
        cáo: "槽曹",
        "héng,hèng": "横",
        piāo: "飘",
        "mán,mén": "瞒",
        tí: "题蹄啼",
        yǐng: "影颖",
        "bào,pù": "暴",
        tà: "踏蹋",
        kào: "靠铐",
        pì: "僻屁譬",
        tǎng: "躺",
        dé: "德",
        "mó,mā": "摩",
        shú: "熟秫赎",
        "hú,hū,hù": "糊",
        "pī,pǐ": "劈",
        cháo: "潮巢",
        cāo: "操糙",
        "yàn,yān": "燕",
        diān: "颠掂",
        "báo,bó,bò": "薄",
        cān: "餐",
        xǐng: "醒",
        zhěng: "整拯",
        zuǐ: "嘴",
        zèng: "赠",
        "mó,mò": "磨",
        níng: "凝狞柠",
        "jiǎo,zhuó": "缴",
        cā: "擦",
        "cáng,zàng": "藏",
        "fán,pó": "繁",
        "bì,bei": "臂",
        bèng: "蹦泵",
        pān: "攀潘",
        "chàn,zhàn": "颤",
        "jiāng,qiáng": "疆",
        rǎng: "壤攘",
        "jiáo,jué,jiào": "嚼",
        "rǎng,rāng": "嚷",
        chǔn: "蠢",
        "lù,lòu": "露",
        "náng,nāng": "囊",
        dǎi: "歹",
        rǒng: "冗",
        "hāng,bèn": "夯",
        "āo,wā": "凹",
        "féng,píng": "冯",
        yū: "迂淤",
        "xū,yù": "吁",
        "lèi,lē": "肋",
        kōu: "抠",
        "lūn,lún": "抡",
        "jiè,gài": "芥",
        "xīn,xìn": "芯",
        "chā,chà": "杈",
        "xiāo,xiào": "肖",
        "zhī,zī": "吱",
        "ǒu,ōu,òu": "呕",
        "nà,nè": "呐",
        "qiàng,qiāng": "呛",
        "tún,dùn": "囤",
        "kēng,háng": "吭",
        shǔn: "吮",
        "diàn,tián": "佃",
        "sì,cì": "伺",
        zhǒu: "肘帚",
        "diàn,tián,shèng": "甸",
        "páo,bào": "刨",
        lìn: "吝赁躏",
        "duì,ruì,yuè": "兑",
        zhuì: "坠缀赘",
        "kē,kě": "坷",
        "tuò,tà,zhí": "拓",
        "fú,bì": "拂",
        "nǐng,níng,nìng": "拧",
        "ào,ǎo,niù": "拗",
        "kē,hē": "苛",
        "yān,yǎn": "奄",
        "hē,a,kē": "呵",
        "gā,kā": "咖",
        biǎn: "贬匾",
        "jiǎo,yáo": "侥",
        "chà,shā": "刹",
        āng: "肮",
        wèng: "瓮",
        "nüè,yào": "疟",
        páng: "庞螃",
        "máng,méng": "氓",
        "gē,yì": "疙",
        "jǔ,jù": "沮",
        "zú,cù": "卒",
        nìng: "泞",
        chǒng: "宠",
        "wǎn,yuān": "宛",
        "mí,mǐ": "弥",
        "qì,qiè,xiè": "契",
        "xié,jiā": "挟",
        "duò,duǒ": "垛",
        jiá: "荚颊",
        "zhà,shān,shi,cè": "栅",
        "bó,bèi": "勃",
        "zhóu,zhòu": "轴",
        nüè: "虐",
        "liē,liě,lié,lie": "咧",
        dǔn: "盹",
        xūn: "勋",
        "yo,yō": "哟",
        mī: "咪",
        "qiào,xiào": "俏",
        "hóu,hòu": "侯",
        pēi: "胚",
        tāi: "胎",
        luán: "峦",
        sà: "飒萨",
        shuò: "烁",
        xuàn: "炫",
        "píng,bǐng": "屏",
        "nà,nuó": "娜",
        "pá,bà": "耙",
        gěng: "埂耿梗",
        niè: "聂镊孽",
        mǎng: "莽",
        "qī,xī": "栖",
        "jiǎ,gǔ": "贾",
        chěng: "逞",
        pēng: "砰烹",
        "láo,lào": "唠",
        "bàng,bèng": "蚌",
        "gōng,zhōng": "蚣",
        "li,lǐ,lī": "哩",
        suō: "唆梭嗦",
        hēng: "哼",
        zāng: "赃",
        qiào: "峭窍撬",
        mǎo: "铆",
        ǎn: "俺",
        sǒng: "耸",
        "juè,jué": "倔",
        "yīn,yān,yǐn": "殷",
        guàng: "逛",
        něi: "馁",
        "wō,guō": "涡",
        "lào,luò": "烙",
        nuò: "诺懦糯",
        zhūn: "谆",
        "niǎn,niē": "捻",
        qiā: "掐",
        "yè,yē": "掖",
        "chān,xiān,càn,shǎn": "掺",
        "dǎn,shàn": "掸",
        "fēi,fěi": "菲",
        "qián,gān": "乾",
        shē: "奢赊",
        "shuò,shí": "硕",
        "luō,luó,luo": "啰",
        shá: "啥",
        "hǔ,xià": "唬",
        tuò: "唾",
        bēng: "崩",
        "dāng,chēng": "铛",
        "xiǎn,xǐ": "铣",
        "jiǎo,jiáo": "矫",
        tiáo: "笤",
        "kuǐ,guī": "傀",
        xìn: "衅",
        dōu: "兜",
        "jì,zhài": "祭",
        xiáo: "淆",
        "tǎng,chǎng": "淌",
        "chún,zhūn": "淳",
        shuàn: "涮",
        dāng: "裆",
        "wèi,yù": "尉",
        "duò,huī": "堕",
        "chuò,chāo": "绰",
        "bēng,běng,bèng": "绷",
        "zōng,zèng": "综",
        "zhuó,zuó": "琢",
        "chuǎi,chuài,chuāi,tuán,zhuī": "揣",
        "péng,bāng": "彭",
        chān: "搀",
        cuō: "搓",
        sāo: "搔",
        yē: "椰",
        "zhuī,chuí": "椎",
        "léng,lēng,líng": "棱",
        hān: "酣憨",
        sū: "酥",
        záo: "凿",
        "qiào,qiáo": "翘",
        "zhā,chā": "喳",
        bǒ: "跛",
        "há,gé": "蛤",
        "qiàn,kàn": "嵌",
        bāi: "掰",
        "yān,ā": "腌",
        wàn: "腕",
        "dūn,duì": "敦",
        "kuì,huì": "溃",
        jiǒng: "窘",
        "sāo,sǎo": "骚",
        pìn: "聘",
        bǎ: "靶",
        xuē: "靴薛",
        hāo: "蒿",
        léng: "楞",
        "kǎi,jiē": "楷",
        "pín,bīn": "频",
        zhuī: "锥",
        tuí: "颓",
        sāi: "腮",
        "liú,liù": "馏",
        "nì,niào": "溺",
        qǐn: "寝",
        luǒ: "裸",
        miù: "谬",
        "jiǎo,chāo": "剿",
        "áo,āo": "熬",
        niān: "蔫",
        "màn,wàn": "蔓",
        "chá,chā": "碴",
        "xūn,xùn": "熏",
        tiǎn: "舔",
        sēng: "僧",
        "da,dá": "瘩",
        guǎ: "寡",
        "tuì,tùn": "褪",
        niǎn: "撵碾",
        "liáo,liāo": "撩",
        "cuō,zuǒ": "撮",
        ruǐ: "蕊",
        "cháo,zhāo": "嘲",
        biē: "憋鳖",
        "hēi,mò": "嘿",
        "zhuàng,chuáng": "幢",
        "jī,qǐ": "稽",
        lǒu: "篓",
        lǐn: "凛檩",
        "biě,biē": "瘪",
        "liáo,lào,lǎo": "潦",
        "chéng,dèng": "澄",
        "lèi,léi": "擂",
        piáo: "瓢",
        shà: "霎",
        "mò,má": "蟆",
        qué: "瘸",
        "liáo,liǎo": "燎",
        "liào,liǎo": "瞭",
        "sào,sāo": "臊",
        "mí,méi": "糜",
        ái: "癌",
        tún: "臀",
        "huò,huō,huá": "豁",
        "pù,bào": "瀑",
        chuō: "戳",
        "zǎn,cuán": "攒",
        cèng: "蹭",
        "bò,bǒ": "簸",
        "bó,bù": "簿",
        bìn: "鬓",
        suǐ: "髓",
        ráng: "瓤"
    };

    /***/
},
/* 3 */
/***/function (module, exports) {
    // 带音标字符。
    "use strict";

    module.exports = {
        ā: "a1",
        á: "a2",
        ǎ: "a3",
        à: "a4",
        ē: "e1",
        é: "e2",
        ě: "e3",
        è: "e4",
        ō: "o1",
        ó: "o2",
        ǒ: "o3",
        ò: "o4",
        ī: "i1",
        í: "i2",
        ǐ: "i3",
        ì: "i4",
        ū: "u1",
        ú: "u2",
        ǔ: "u3",
        ù: "u4",
        ü: "v0",
        ǘ: "v2",
        ǚ: "v3",
        ǜ: "v4",
        ń: "n2",
        ň: "n3",
        "": "m2"
    };

    /***/
},
/* 4 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var assign = __webpack_require__(1);
    // XXX: Symbol when web support.
    var PINYIN_STYLE = {
        NORMAL: 0, // 普通风格，不带音标。
        TONE: 1, // 标准风格，音标在韵母的第一个字母上。
        TONE2: 2, // 声调以数字形式在拼音之后，使用数字 0~4 标识。
        TO3NE: 5, // 声调以数字形式在声母之后，使用数字 0~4 标识。
        INITIALS: 3, // 仅需要声母部分。
        FIRST_LETTER: 4
    };
    var DEFAULT_OPTIONS = {
        style: PINYIN_STYLE.TONE, // 风格
        segment: false, // 分词。
        heteronym: false
    };

    // 声母表。
    var INITIALS = "b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s".split(",");
    // 韵母表。
    //const FINALS = "ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v".split(",");
    // 带音标字符。
    var PHONETIC_SYMBOL = __webpack_require__(3);
    var RE_PHONETIC_SYMBOL = new RegExp("([" + Object.keys(PHONETIC_SYMBOL).join("") + "])", "g");
    var RE_TONE2 = /([aeoiuvnm])([0-4])$/;

    /*
     * 格式化拼音为声母（Initials）形式。
     * @param {String}
     * @return {String}
     */
    function initials(pinyin) {
        for (var i = 0, l = INITIALS.length; i < l; i++) {
            if (pinyin.indexOf(INITIALS[i]) === 0) {
                return INITIALS[i];
            }
        }
        return "";
    }

    var Pinyin = function () {
        function Pinyin(dict) {
            _classCallCheck(this, Pinyin);

            this._dict = dict;
        }

        _createClass(Pinyin, [{
            key: "convert",

            // @param {String} hans 要转为拼音的目标字符串（汉字）。
            // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。
            // @return {Array} 返回的拼音列表。
            value: function convert(hans, options) {
                if (typeof hans !== "string") {
                    return [];
                }

                options = assign({}, DEFAULT_OPTIONS, options);

                var pys = [];
                var nohans = "";

                for (var i = 0, firstCharCode = undefined, words = undefined, l = hans.length; i < l; i++) {
                    words = hans[i];
                    firstCharCode = words.charCodeAt(0);

                    if (this._dict[firstCharCode]) {
                        // ends of non-chinese words.
                        if (nohans.length > 0) {
                            pys.push([nohans]);
                            nohans = ""; // reset non-chinese words.
                        }

                        pys.push(this.single_pinyin(words, options));
                    } else {
                        nohans += words;
                    }
                }

                // 清理最后的非中文字符串。
                if (nohans.length > 0) {
                    pys.push([nohans]);
                    nohans = ""; // reset non-chinese words.
                }
                return pys;
            }
        }, {
            key: "single_pinyin",

            // 单字拼音转换。
            // @param {String} han, 单个汉字
            // @return {Array} 返回拼音列表，多音字会有多个拼音项。
            value: function single_pinyin(han, options) {
                if (typeof han !== "string") {
                    return [];
                }
                if (han.length !== 1) {
                    return this.single_pinyin(han.charAt(0), options);
                }

                var hanCode = han.charCodeAt(0);

                if (!this._dict[hanCode]) {
                    return [han];
                }

                var pys = this._dict[hanCode].split(",");
                if (!options.heteronym) {
                    return [Pinyin.toFixed(pys[0], options.style)];
                }

                // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。
                var py_cached = {};
                var pinyins = [];
                for (var i = 0, py = undefined, l = pys.length; i < l; i++) {
                    py = Pinyin.toFixed(pys[i], options.style);
                    if (py_cached.hasOwnProperty(py)) {
                        continue;
                    }
                    py_cached[py] = py;

                    pinyins.push(py);
                }
                return pinyins;
            }
        }, {
            key: "compare",

            /**
             * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。
             *
             * @param {String} hanA 汉字字符串 A。
             * @return {String} hanB 汉字字符串 B。
             * @return {Number} 返回 -1，0，或 1。
             */
            value: function compare(hanA, hanB) {
                var pinyinA = this.convert(hanA, DEFAULT_OPTIONS);
                var pinyinB = this.convert(hanB, DEFAULT_OPTIONS);
                return String(pinyinA).localeCompare(pinyinB);
            }
        }], [{
            key: "toFixed",

            /**
             * 格式化拼音风格。
             *
             * @param {String} pinyin TONE 风格的拼音。
             * @param {ENUM} style 目标转换的拼音风格。
             * @return {String} 转换后的拼音。
             */
            value: function toFixed(pinyin, style) {
                var tone = ""; // 声调。
                var first_letter = undefined;
                var py = undefined;
                switch (style) {
                    case PINYIN_STYLE.INITIALS:
                        return initials(pinyin);

                    case PINYIN_STYLE.FIRST_LETTER:
                        first_letter = pinyin.charAt(0);
                        if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {
                            first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);
                        }
                        return first_letter;

                    case PINYIN_STYLE.NORMAL:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, "$1");
                        });

                    case PINYIN_STYLE.TO3NE:
                        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {
                            return PHONETIC_SYMBOL[$1_phonetic];
                        });

                    case PINYIN_STYLE.TONE2:
                        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {
                            // 声调数值。
                            tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$2");

                            return PHONETIC_SYMBOL[$1].replace(RE_TONE2, "$1");
                        });
                        return py + tone;

                    case PINYIN_STYLE.TONE:
                    default:
                        return pinyin;
                }
            }
        }, {
            key: "STYLE_NORMAL",
            get: function get() {
                return PINYIN_STYLE.NORMAL;
            }
        }, {
            key: "STYLE_TONE",
            get: function get() {
                return PINYIN_STYLE.TONE;
            }
        }, {
            key: "STYLE_TONE2",
            get: function get() {
                return PINYIN_STYLE.TONE2;
            }
        }, {
            key: "STYLE_TO3NE",
            get: function get() {
                return PINYIN_STYLE.TO3NE;
            }
        }, {
            key: "STYLE_INITIALS",
            get: function get() {
                return PINYIN_STYLE.INITIALS;
            }
        }, {
            key: "STYLE_FIRST_LETTER",
            get: function get() {
                return PINYIN_STYLE.FIRST_LETTER;
            }
        }, {
            key: "DEFAULT_OPTIONS",
            get: function get() {
                return DEFAULT_OPTIONS;
            }
        }]);

        return Pinyin;
    }();

    module.exports = Pinyin;
    // 仅保留首字母。
    // 多音字

    /***/
},
/* 5 */
/***/function (module, exports, __webpack_require__) {
    "use strict";

    // 解压拼音库。
    // @param {Object} dict_combo, 压缩的拼音库。
    // @param {Object} 解压的拼音库。

    function buildPinyinCache(dict_combo) {
        var hans = undefined;
        var uncomboed = {};

        for (var py in dict_combo) {
            hans = dict_combo[py];
            for (var i = 0, han = undefined, l = hans.length; i < l; i++) {
                han = hans.charCodeAt(i);
                if (!uncomboed.hasOwnProperty(han)) {
                    uncomboed[han] = py;
                } else {
                    uncomboed[han] += "," + py;
                }
            }
        }

        return uncomboed;
    }

    var PINYIN_DICT = buildPinyinCache(__webpack_require__(2));
    var Pinyin = __webpack_require__(4);
    var pinyin = new Pinyin(PINYIN_DICT);

    module.exports = pinyin.convert.bind(pinyin);
    module.exports.compare = pinyin.compare.bind(pinyin);
    module.exports.STYLE_NORMAL = Pinyin.STYLE_NORMAL;
    module.exports.STYLE_TONE = Pinyin.STYLE_TONE;
    module.exports.STYLE_TONE2 = Pinyin.STYLE_TONE2;
    module.exports.STYLE_TO3NE = Pinyin.STYLE_TO3NE;
    module.exports.STYLE_INITIALS = Pinyin.STYLE_INITIALS;
    module.exports.STYLE_FIRST_LETTER = Pinyin.STYLE_FIRST_LETTER;

    /***/
}
/******/
]);
//# sourceMappingURL=bundle.js.map

/***/ }),
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/main.vue?vue&type=template&id=5febe2cc&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-tree-select" },
    [
      _c(
        "l-select",
        _vm._b(
          {
            attrs: {
              "tree-data": _vm.data,
              "scrollbar-class": _vm.scrollbarCls
            },
            on: {
              "visible-change": _vm.handleSelectFilerClose,
              clear: _vm.clearDeaulf
            },
            model: {
              value: _vm.val,
              callback: function($$v) {
                _vm.val = $$v
              },
              expression: "val"
            }
          },
          "l-select",
          _vm.selectProp,
          false
        ),
        [
          _c(
            "dg-tree",
            _vm._g(
              _vm._b(
                {
                  ref: "tree",
                  on: { "check-change": _vm.handleCheckChange },
                  model: {
                    value: _vm.checkedTree,
                    callback: function($$v) {
                      _vm.checkedTree = $$v
                    },
                    expression: "checkedTree"
                  }
                },
                "dg-tree",
                _vm.treeBind,
                false
              ),
              _vm.$listeners
            )
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-select/src/main.vue?vue&type=template&id=5febe2cc&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/option.vue?vue&type=template&id=ecc85670&
var optionvue_type_template_id_ecc85670_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("span", { staticClass: "el-tree-node__label" }, [
    _vm._v(_vm._s(_vm.label))
  ])
}
var optionvue_type_template_id_ecc85670_staticRenderFns = []
optionvue_type_template_id_ecc85670_render._withStripped = true


// CONCATENATED MODULE: ./packages/tree-select/src/option.vue?vue&type=template&id=ecc85670&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/option.vue?vue&type=script&lang=js&
//
//
//
//



/* harmony default export */ var optionvue_type_script_lang_js_ = ({
    mixins: [external_element_ui_["Option"]]
});
// CONCATENATED MODULE: ./packages/tree-select/src/option.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_optionvue_type_script_lang_js_ = (optionvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/tree-select/src/option.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_optionvue_type_script_lang_js_,
  optionvue_type_template_id_ecc85670_render,
  optionvue_type_template_id_ecc85670_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/tree-select/src/option.vue"
/* harmony default export */ var src_option = (component.exports);
// EXTERNAL MODULE: ./packages/base/select.vue + 4 modules
var base_select = __webpack_require__(27);

// EXTERNAL MODULE: ./src/dg-mixins/convert.js
var convert = __webpack_require__(9);

// EXTERNAL MODULE: ./packages/tree/index.js + 14 modules
var packages_tree = __webpack_require__(22);

// EXTERNAL MODULE: ./packages/tree-select/src/pinyin.js
var pinyin = __webpack_require__(41);

// EXTERNAL MODULE: ./src/utils/merge.js
var merge = __webpack_require__(8);

// EXTERNAL MODULE: ./src/dg-utils/data-convert.js
var data_convert = __webpack_require__(3);

// EXTERNAL MODULE: ./src/dg-utils/children.refs.js
var children_refs = __webpack_require__(19);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree-select/src/main.vue?vue&type=script&lang=js&
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//











// 继承树的方法
var TreeRefs = {};
packages_tree["default"].mixins.forEach(function (item) {
    if (item.name === 'ElTree') {
        TreeRefs = Object(children_refs["a" /* default */])(packages_tree["default"].mixins[0], 'tree');
    }
});

/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgTreeSelect',

    mixins: [convert["a" /* default */]],

    components: {
        LSelect: base_select["a" /* default */],
        DgTree: packages_tree["default"]
    },

    props: {
        treeProps: Object,
        //  别名参数
        props: Object,
        // 只能选择叶子节点需要与checkStrictly配合使用
        checkLeaf: Boolean,
        // 是否开启多选
        multiple: Boolean,
        disabled: Boolean,
        data: {
            type: Array,
            required: false
        },
        scrollbarClass: String,
        clearable: Boolean,
        // 是否父子关联 checked 生效
        checkStrictly: Boolean,
        radioType: {
            type: String,
            default: ''
        },
        value: { required: true },
        // 数据分割符号
        seq: {
            type: String,
            default: ','
        },
        // 输出的数据类型
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 过滤节点的方法
        filterNodeMethod: Function,
        // 可显示的类型
        visibleType: {
            type: String,
            default: 'all',
            validator: function validator(val) {
                return ['all', 'leaf', 'branch', 'all_with_indeterminate'].indexOf(val) !== -1;
            }
        }
    },

    data: function data() {
        return {
            // 数据源
            dataSource: this.data,
            // select 传值的搜索条件
            filterText: '',
            // 树会导致 v-model value 值变化两次，增加缓存控制
            filterTreeCacheVal: this.value,
            // 别名属性
            alias: {
                value: 'id',
                label: 'label',
                children: 'children',
                disabled: 'disabled',
                isLeaf: 'isLeaf'
            }
        };
    },


    watch: {
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        },
        props: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.alias = Object(merge["a" /* default */])(this.alias, val);
            }
        },
        filterText: function filterText(val) {
            this.$refs.tree.filter(val);
        }
    },

    computed: {
        /**
         * 选择框组件数据处理
         */
        val: {
            get: function get() {
                var value = this.value,
                    seq = this.seq;

                // 过滤数据

                var filterValue = this.filterNodeKey(value);

                return Object(data_convert["a" /* data2type */])(filterValue, 'String', seq);
            },
            set: function set(val) {
                var _this = this;

                var tree = this.$refs.tree;

                if (!val) val = [];

                if (this.visibleType === 'branch') {
                    if (val.length === 0) tree.setCheckedKeys(val);

                    val.forEach(function (item) {
                        var nodes = tree.getNode(item);
                        var keys = _this.allKeyNodes(nodes.childNodes);
                        val = external_lodash_default.a.concat(val, keys);
                    });

                    tree.setCheckedKeys(val);
                } else {
                    // 对数据进行过滤
                    tree.setCheckedKeys(val);
                }
                this.setTreeOrSelectData(val);
            }
        },
        /**
         * 树组件数据处理
         *
         */
        checkedTree: {
            get: function get() {
                var value = this.value,
                    seq = this.seq;


                return Object(data_convert["a" /* data2type */])(value, 'String', seq);
            },
            set: function set(val) {
                // change 事件触发
                this.setTreeOrSelectData(val);
            }
        },

        /**
         * 滚动条样式
         *
         */
        scrollbarCls: function scrollbarCls() {
            return 'dg-tree-select__scrollbar ' + this.scrollbarClass;
        },


        /**
         * 合并 tree Props
         *
         */
        treeBind: function treeBind() {
            return Object(merge["a" /* default */])({}, this.treeProps, {
                data: this.dataSource,
                props: this.alias,
                'node-key': this.alias.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': external_lodash_default.a.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-after-expand': false,
                'render-content': this.renderContent
            });
        },


        /**
         * 合并 select Props
         *
         */
        selectProp: function selectProp() {
            return Object(merge["a" /* default */])({}, this.$attrs, {
                disabled: this.disabled,
                multiple: this.multiple,
                clearable: this.clearable,
                seq: this.seq,
                'output-format': this.outputFormat,
                'filter-method': this.handleSelectFiler
            });
        }
    },

    created: function created() {
        console && console.warn && console.warn("dg-tree-select组件在接下来的版本将要移除，请使用dg-tree-drop");
    },


    methods: _extends({
        /**
         * 检索值
         *
         * @param query [String] 查询文本
         */
        handleSelectFiler: function handleSelectFiler(query) {
            this.filterText = query;
        },


        /**
         * 设置树或选择框的事件触发
         *
         */
        setTreeOrSelectData: function setTreeOrSelectData(val) {
            var outputFormat = this.outputFormat,
                seq = this.seq;

            // 值类型转化, 若是多选的话，val 的值为 []，需要值进行转化

            if (val && val.length === 0) val = '';

            // 过滤树会触发 父级选择框半选或全选状态
            if (val !== this.filterTreeCacheVal) {
                // 更新缓存值
                this.filterTreeCacheVal = val;

                // 获取选中的树节点值
                var tree = this.$refs.tree;
                var nodes = this.multiple ? tree.getCheckedNodes() : tree.getCurrentNode();

                // 触发 input or change 事件改变
                this.$emit('input', Object(data_convert["a" /* data2type */])(val, outputFormat, seq), nodes);
                this.$emit('change', Object(data_convert["a" /* data2type */])(val, outputFormat, seq), nodes);
            }
        },


        // tree 过滤是否显示true or false
        filterNode: function filterNode() {
            var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
            var data = arguments[1];

            if (!query) {
                return true;
            }

            var label = this.defaultProp.label;

            var labelValue = external_lodash_default.a.toUpper(data[label]);

            query = external_lodash_default.a.toUpper(query);

            if (labelValue.indexOf(query) !== -1) {
                return true;
            }

            var toPinyin = Object(pinyin["pinyin"])(labelValue, {
                heteronym: true, // 多音
                style: pinyin["pinyin"].STYLE_NORMAL // 无声调
            });

            if (toPinyin && toPinyin.length > 0) {
                var str = '';
                for (var key in toPinyin) {
                    str += toPinyin[key].join('');
                }
                str = external_lodash_default.a.toUpper(str);
                toPinyin = str;
            }

            return toPinyin.indexOf(query) !== -1;
        },


        /**
         * 置空 tree 选中状态
         *
         */
        handleSelectFilerClose: function handleSelectFilerClose(bool) {
            var val = this.val;

            if (bool) {
                /*
                    BUG描述
                        form reset 多触发选中，照成父组件数据的change
                    修复：
                        this.value === '' 下拉打开的时候判断，清空选中数据
                */
                if (external_lodash_default.a.isEmpty(val) || val.length < 1) {
                    this.clearDeaulf();
                }
            } else {
                this.filterText = '';
            }
        },


        /**
         * 清空检索值
         *
         */
        clearDeaulf: function clearDeaulf() {
            var tree = this.$refs.tree;

            // 清空检索值
            this.filterText = '';

            // 清空选中数据及状态
            tree.setRadioKeys([]);
            tree.setCurrentKey(null);
            this.$emit("input", "");
        },


        /**
         * 过滤类型数据
         *
         * @param value 文本数据值
         * @return value 过滤后的文本数据值
         */
        filterNodeKey: function filterNodeKey(value) {
            // 若为空数据
            if (value === null) return "";

            // 验证值是否为空，是否为空数组，为全类型
            if (typeof value === 'string' && !value || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.length === 0 || this.visibleType === 'all') {
                return value;
            }

            // 若是多选情况，过滤
            if (this.multiple) {
                var tree = this.$refs.tree;
                if (!tree) {
                    return value;
                }

                var visibleType = this.visibleType,
                    defaultProp = this.defaultProp;
                var keyId = defaultProp.value,
                    children = defaultProp.children;

                // 获取选中节点

                var getCheckNodes = function getCheckNodes(leafOnly, includeHalfChecked) {
                    var needId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                    var check = tree.getCheckedNodes(leafOnly, includeHalfChecked);
                    return needId ? check.map(function (item) {
                        return item[keyId];
                    }) : check;
                };

                switch (visibleType) {
                    case 'leaf':
                        {
                            return getCheckNodes(true, false);
                        }
                    case 'branch':
                        {
                            var allNodes = getCheckNodes(false, false, false);
                            var diffNodes = function diffNodes(allNodes) {
                                var child = [];
                                var del = []; // 剔除的id
                                // 去掉重复的选中项
                                var flatter = function flatter(arr) {
                                    arr.forEach(function (item) {
                                        var _$findIndex;

                                        var index = external_lodash_default.a.findIndex(child, (_$findIndex = {}, _$findIndex[keyId] = item[keyId], _$findIndex));
                                        if (index > -1) {
                                            del = del.concat(child.splice(index, 1));
                                        } else {
                                            var _$findIndex2;

                                            var delIndex = external_lodash_default.a.findIndex(del, (_$findIndex2 = {}, _$findIndex2[keyId] = item[keyId], _$findIndex2));
                                            if (delIndex === -1) {
                                                child.push(item);
                                            }
                                        }
                                        if (item[children] && item[children].length) {
                                            flatter(item[children]);
                                        }
                                    });
                                };
                                flatter(allNodes);
                                return child;
                            };
                            return diffNodes(allNodes).map(function (item) {
                                return item[keyId];
                            });
                        }
                    case 'all_with_indeterminate':
                        {
                            return getCheckNodes(false, true);
                        }
                }
            }

            return value;
        },


        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false 是否过滤叶子节点
         * @param val [Array] data 返回节点的 key 值
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.alias.children] && base[self.alias.children].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.alias.children]);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    if (val) {
                        if (item[self.alias.children] && item[self.alias.children].length > 0) {
                            _treeAllKey.push(item[self.alias.value]);
                        }
                    } else {
                        _treeAllKey.push(item[self.alias.value]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        allKeyNodes: function allKeyNodes(data) {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(data);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base.childNodes && base.childNodes.length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base.childNodes);
                    }

                    return base;
                });

                _treeData.forEach(function (item) {
                    _treeAllKey.push(item.key);
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },
        handleCheckChange: function handleCheckChange(data, checked, indeterminate) {
            var value = Object(data_convert["a" /* data2type */])(this.value, 'String', this.seq);

            // 若存在缓存值，则原先不归属于树节点（懒加载情况下），则进行追加文本显示
            if (this.treeBind.lazy && this.multiple) {

                // 正则表达式，是否存在 "," 分割
                var reg = /^.*[\,,].*$/;
                // 缓存字段数据
                var cacheArray = [];

                if (value) {
                    // 缓存字段是否为多个数据
                    if (reg.test(value)) {
                        cacheArray = value.split(",");
                    } else {
                        cacheArray.push(value);
                    }
                }

                // 选中字段
                if (checked) {
                    var selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var coopArray = external_lodash_default.a.concat(selectedTreeKeys, cacheArray);
                    cacheArray = external_lodash_default.a.uniq(coopArray);
                } else {
                    var nodes = this.$refs.tree.getNode(data);
                    var _selectedTreeKeys = this.$refs.tree.getCheckedKeys(false);
                    var filterArray = this.allKeyNodes(nodes.childNodes);
                    filterArray.push(nodes.key);
                    cacheArray = external_lodash_default.a.concat(cacheArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.uniq(cacheArray);
                    filterArray = external_lodash_default.a.difference(filterArray, _selectedTreeKeys);
                    cacheArray = external_lodash_default.a.difference(cacheArray, filterArray);
                    cacheArray = cacheArray ? cacheArray : [];
                }

                this.$emit("input", Object(data_convert["a" /* data2type */])(cacheArray, 'String', this.seq));

                this.$emit("check-change", data, checked, indeterminate);
            } else {
                var _seq = this.seq,
                    outputFormat = this.outputFormat;

                var _data = this.$refs.tree.getCheckedKeys(false);
                this.$emit('input', Object(data_convert["a" /* data2type */])(_data, outputFormat, _seq));

                this.$emit("check-change", data, checked, indeterminate);
            }
        },


        // 渲染 option 到 tree
        renderContent: function renderContent(h, _ref) {
            var node = _ref.node,
                data = _ref.data,
                store = _ref.store;
            var _defaultProp = this.defaultProp,
                label = _defaultProp.label,
                value = _defaultProp.value,
                disabled = _defaultProp.disabled;


            return h(src_option, {
                props: {
                    key: data[value],
                    label: data[label],
                    value: data[value],
                    disabled: data[disabled]
                }
            });
        }
    }, TreeRefs)
});
// CONCATENATED MODULE: ./packages/tree-select/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/tree-select/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
main_component.options.__file = "packages/tree-select/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./packages/tree-select/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var tree_select = __webpack_exports__["default"] = (main);

/***/ })
/******/ ]);