module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 49);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),

/***/ 49:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/main.vue?vue&type=template&id=5c654dd8&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-transfer" },
    [
      _vm.type === "tree"
        ? [
            _c(
              "transfer-tree",
              _vm._g(
                _vm._b(
                  { attrs: { value: _vm.value, data: _vm.dataSource } },
                  "transfer-tree",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.$slots["left-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "left-footer" },
                        slot: "left-footer"
                      },
                      [_vm._t("left-footer")],
                      2
                    )
                  : _vm._e(),
                _vm.$slots["right-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "right-footer" },
                        slot: "right-footer"
                      },
                      [_vm._t("right-footer")],
                      2
                    )
                  : _vm._e()
              ]
            )
          ]
        : _vm.type === "table"
        ? [
            _c(
              "transfer-table",
              _vm._g(
                _vm._b(
                  { attrs: { value: _vm.value, data: _vm.dataSource } },
                  "transfer-table",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.$slots["left-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "left-footer" },
                        slot: "left-footer"
                      },
                      [_vm._t("left-footer")],
                      2
                    )
                  : _vm._e(),
                _vm.$slots["right-footer"]
                  ? _c(
                      "div",
                      {
                        staticClass: "transfer-footer",
                        attrs: { slot: "right-footer" },
                        slot: "right-footer"
                      },
                      [_vm._t("right-footer")],
                      2
                    )
                  : _vm._e()
              ]
            )
          ]
        : [
            _c(
              "div",
              [
                _c(
                  "el-transfer",
                  _vm._g(
                    _vm._b(
                      {
                        attrs: {
                          value: _vm.value,
                          props: _vm.defaultProps,
                          data: _vm.dataSource
                        },
                        scopedSlots: _vm._u(
                          [
                            {
                              key: "default",
                              fn: function(ref) {
                                var option = ref.option
                                return _c(
                                  "span",
                                  {},
                                  [
                                    _vm._t(
                                      "content-area",
                                      [
                                        _vm._v(
                                          _vm._s(
                                            option[_vm.defaultProps.label]
                                          ) + "\n          "
                                        )
                                      ],
                                      { option: option }
                                    )
                                  ],
                                  2
                                )
                              }
                            }
                          ],
                          null,
                          true
                        )
                      },
                      "el-transfer",
                      _vm.$attrs,
                      false
                    ),
                    _vm.$listeners
                  ),
                  [
                    _vm.$slots["left-footer"]
                      ? _c(
                          "div",
                          {
                            staticClass: "transfer-footer",
                            attrs: { slot: "left-footer" },
                            slot: "left-footer"
                          },
                          [_vm._t("left-footer")],
                          2
                        )
                      : _vm._e(),
                    _vm.$slots["right-footer"]
                      ? _c(
                          "div",
                          {
                            staticClass: "transfer-footer",
                            attrs: { slot: "right-footer" },
                            slot: "right-footer"
                          },
                          [_vm._t("right-footer")],
                          2
                        )
                      : _vm._e()
                  ]
                )
              ],
              1
            )
          ]
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/main.vue?vue&type=template&id=5c654dd8&

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-tree.vue?vue&type=template&id=2d98c0f5&
var transfer_treevue_type_template_id_2d98c0f5_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-tree-transfer" }, [
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              ref: "checkBoxLeft",
              attrs: { indeterminate: _vm.sourceIsIndeterminate },
              on: { change: _vm.sourceAllBoxCheck },
              model: {
                value: _vm.sourceCheckAll,
                callback: function($$v) {
                  _vm.sourceCheckAll = $$v
                },
                expression: "sourceCheckAll"
              }
            },
            [
              _vm.titles[0] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[0]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-left")
        ],
        2
      ),
      _c("div", { staticClass: "el-transfer-panel__body" }, [
        _c(
          "div",
          {
            staticClass: "el-transfer-panel__list",
            staticStyle: { padding: "0" }
          },
          [
            _vm.filterable
              ? _c(
                  "el-input",
                  {
                    staticClass: "el-transfer-panel__filter",
                    attrs: { placeholder: _vm.placeholder, size: "small" },
                    model: {
                      value: _vm.filterFrom,
                      callback: function($$v) {
                        _vm.filterFrom = $$v
                      },
                      expression: "filterFrom"
                    }
                  },
                  [
                    _c("i", {
                      class: ["el-input__icon", "el-icon-search"],
                      attrs: { slot: "prefix" },
                      slot: "prefix"
                    })
                  ]
                )
              : _vm._e(),
            _c("el-tree", {
              ref: "from-tree",
              class: [_vm.filterable ? "is-filterable" : ""],
              attrs: {
                data: _vm.sourceData,
                "show-checkbox": "",
                "node-key": _vm.valueName,
                "default-expanded-keys": _vm.sourceExpandedKeys,
                props: _vm.treeProps,
                "filter-node-method": _vm.filterNodeFrom,
                "default-expand-all": _vm.openAll,
                "render-content": _vm.renderContent,
                "default-checked-keys": _vm.sourceCheckKeys
              },
              on: { check: _vm.sourceTreeChecked }
            })
          ],
          1
        )
      ]),
      _vm.$slots["left-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("left-footer")],
            2
          )
        : _vm._e()
    ]),
    _c(
      "div",
      { staticClass: "el-transfer__buttons" },
      [
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.targetDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToSource($event)
              }
            }
          },
          [
            _c("i", { staticClass: "el-icon-arrow-left" }),
            _vm.buttonTexts[0] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))])
              : _vm._e()
          ]
        ),
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.sourceDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToTarget($event)
              }
            }
          },
          [
            _vm.buttonTexts[1] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))])
              : _vm._e(),
            _c("i", { staticClass: "el-icon-arrow-right" })
          ]
        )
      ],
      1
    ),
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              ref: "checkBoxRight",
              attrs: { indeterminate: _vm.targetIsIndeterminate },
              on: { change: _vm.targetAllBoxCheck },
              model: {
                value: _vm.targetCheckAll,
                callback: function($$v) {
                  _vm.targetCheckAll = $$v
                },
                expression: "targetCheckAll"
              }
            },
            [
              _vm.titles[1] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[1]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-right")
        ],
        2
      ),
      _c("div", { staticClass: "el-transfer-panel__body" }, [
        _c(
          "div",
          {
            staticClass: "el-transfer-panel__list",
            staticStyle: { padding: "0" }
          },
          [
            _vm.filterable && _vm.accept !== "list"
              ? _c(
                  "el-input",
                  {
                    staticClass: "el-transfer-panel__filter",
                    attrs: { placeholder: _vm.placeholder, size: "small" },
                    model: {
                      value: _vm.filterTo,
                      callback: function($$v) {
                        _vm.filterTo = $$v
                      },
                      expression: "filterTo"
                    }
                  },
                  [
                    _c("i", {
                      class: ["el-input__icon", "el-icon-search"],
                      attrs: { slot: "prefix" },
                      slot: "prefix"
                    })
                  ]
                )
              : _vm._e(),
            _vm.accept === "tree"
              ? [
                  _c("el-tree", {
                    ref: "to-tree",
                    class: [_vm.filterable ? "is-filterable" : ""],
                    attrs: {
                      data: _vm.targetData,
                      "show-checkbox": "",
                      "node-key": _vm.valueName,
                      "default-expanded-keys": _vm.targetExpandedKeys,
                      props: _vm.treeProps,
                      "filter-node-method": _vm.filterNodeTo,
                      "default-expand-all": _vm.openAll,
                      "render-content": _vm.renderContent,
                      "default-checked-keys": _vm.targetCheckKeys
                    },
                    on: { check: _vm.toTreeChecked }
                  })
                ]
              : _vm._e(),
            _vm.accept === "list"
              ? [
                  _c(
                    "el-checkbox-group",
                    {
                      staticClass: "el-transfer-panel__list",
                      model: {
                        value: _vm.acceptCheckedKeys,
                        callback: function($$v) {
                          _vm.acceptCheckedKeys = $$v
                        },
                        expression: "acceptCheckedKeys"
                      }
                    },
                    _vm._l(_vm.acceptData, function(item, index) {
                      return _c(
                        "el-checkbox",
                        {
                          key: index,
                          staticClass: "el-transfer-panel__item",
                          attrs: {
                            label: item.id,
                            disabled: item[_vm.disabledName],
                            title: item[_vm.labelName]
                          }
                        },
                        [_vm._v(_vm._s(item[_vm.labelName]))]
                      )
                    }),
                    1
                  )
                ]
              : _vm._e()
          ],
          2
        )
      ]),
      _vm.$slots["right-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("right-footer")],
            2
          )
        : _vm._e()
    ])
  ])
}
var transfer_treevue_type_template_id_2d98c0f5_staticRenderFns = []
transfer_treevue_type_template_id_2d98c0f5_render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue?vue&type=template&id=2d98c0f5&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-tree.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var transfer_treevue_type_script_lang_js_ = ({
    name: 'TransferTree',
    props: {
        leftDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        rightDefaultChecked: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: []
        },
        // 值的字段名称
        valueName: {
            type: String,
            default: 'value'
        },
        // 显示的字段名称
        labelName: {
            type: String,
            default: 'label'
        },
        // 禁用值的名称
        disabledName: {
            type: String,
            default: 'disabled'
        },
        // 子节点数组的名称
        childrenName: {
            type: String,
            default: 'children'
        },
        // 父级节点名称
        pidName: {
            type: String,
            default: 'pid'
        },
        // 标题配置
        titles: {
            type: Array,
            default: function _default() {
                return ['源列表', '目标列表'];
            }
        },
        // 按钮文本配置
        buttonTexts: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 穿梭后是否展开节点
        transferOpenNode: {
            type: Boolean,
            default: false
        },
        // 筛选 placeholder
        placeholder: {
            type: String,
            default: '输入关键字进行过滤'
        },
        // 是否展开所有节点
        openAll: {
            type: Boolean,
            default: true
        },
        // 自定义树节点
        renderContent: Function,
        // 是否启用筛选
        filterable: {
            type: Boolean,
            default: false
        },
        // 目标数据的展现形式，仅在 `type` 参数值为 `tree` 时生效，可选项为 `list`
        accept: {
            type: String,
            default: 'tree'
        }
    },
    data: function data() {
        return {
            // 内部数据配置项
            dataSource: this.data,
            // props 的字段别名
            treeProps: {
                label: this.labelName,
                children: this.childrenName,
                disabled: this.disabledName
            },
            // 是否半选源列表数据状态
            sourceIsIndeterminate: false,
            // 是否半选源列表数据状态
            sourceCheckAll: false,
            // 是否半选目标列表数据状态
            targetIsIndeterminate: false,
            // 是否半选目标列表数据状态
            targetCheckAll: false,
            // 源数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            sourceCheckKeys: [],
            // 目标数据选中key数组 以此属性关联穿梭按钮，总全选、半选状态
            targetCheckKeys: [],
            // 源数据展开节点
            sourceExpandedKeys: [],
            // 目标数据展开节点
            targetExpandedKeys: [],
            // 添加按钮是否禁用
            sourceDisabled: true,
            // 移除按钮是否禁用
            targetDisabled: true,
            // 源数据筛选
            filterFrom: '',
            // 目标数据筛选
            filterTo: '',
            // 目标列表数据勾选
            acceptCheckedKeys: []
        };
    },

    computed: {
        /**
         * 源列表数据监听
         *
         * @return {Array}
         */
        sourceData: function sourceData() {
            var _this = this;

            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this.pidName] = 0;
            });

            // 构造除去选中值 `this.selectedKeyValue` 的源数据
            return this.constructTreeBox(this.selectedKeyValue, _treeData);
        },

        /**
         * 目标列表数据监听
         *
         */
        targetData: function targetData() {
            var _this2 = this;

            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 对于顶级节点加入父级 ID 值
            _treeData.forEach(function (item) {
                item[_this2.pidName] = 0;
            });

            // 构造除去反向选中值 `this.unselectedKeyValue` 的目标树数据
            return this.constructTreeBox(this.unselectedKeyValue, _treeData);
        },

        /**
         * 接收列表数据
         *
         * @return {Array}
         */
        acceptData: function acceptData() {
            // 初始化数据
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);

            // 目标列表数据
            var _selectedList = [];

            // 获取选中值列表选项数据
            this.constructListBox(this.value, _treeData, _selectedList);

            return _selectedList;
        },

        /**
         * 过滤掉禁用的数据
         * 
         * @return { Array }
         */
        filterAcceptData: function filterAcceptData() {
            var _this3 = this;

            return this.acceptData.filter(function (item) {
                return !item[_this3.disabledName];
            });
        },

        /**
         * 查找所有选中的 key 值
         *
         * @return {Array}
         */
        selectedKeyValue: function selectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.cloneDeep(this.value);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },

        /**
         * 查找所有未选中的 key 值
         *
         * @return {Array}
         */
        unselectedKeyValue: function unselectedKeyValue() {
            // 初始化
            var _treeData = external_lodash_default.a.cloneDeep(this.dataSource);
            var _selectedKey = external_lodash_default.a.difference(this.allKeyValue(true), this.selectedKeyValue);
            var self = this;

            // 递归获取选中的 key 值（包含父级的）
            function getSelectedKeyValue(data, key) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getSelectedKeyValue(base[self.childrenName], base[self.valueName]);
                    }

                    return base;
                });

                // 计算同级的数量
                var _count = 0;
                _selectedKey.forEach(function (item) {
                    data.forEach(function (child) {
                        if (child[self.valueName] === item) {
                            _count++;
                        }
                    });
                });

                // 加入父级 key 值
                if (_count === data.length && key) {
                    _selectedKey.push(key);
                }
            }

            // 执行方法
            getSelectedKeyValue(_treeData, undefined);

            return _selectedKey;
        },

        /**
         * 检测按钮文本值
         *
         */
        hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
        }
    },

    watch: {
        // 监听数据
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        },
        // 目标列表数据 状态检测
        acceptCheckedKeys: function acceptCheckedKeys(val) {
            var _this4 = this;

            // 检测是否存在可选值
            var existValue = [];
            val.forEach(function (p) {
                var filterValue = _this4.filterAcceptData.filter(function (item) {
                    return item[_this4.valueName] === p;
                });
                if (filterValue.length > 0) {
                    existValue.push(p);
                }
            });

            if (existValue.length > 0) {
                // 穿梭按钮是否禁用
                this.targetDisabled = false;
                // 总半选是否开启
                this.targetIsIndeterminate = true;

                // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
                var allCheck = existValue;
                if (allCheck.length == this.acceptData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
            }
        },

        // 源数据 状态监测
        sourceCheckKeys: function sourceCheckKeys(val) {
            // val -> obj, data -> keyArray
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.sourceDisabled = false;
                // 总半选是否开启
                this.sourceIsIndeterminate = true;

                // 默认数据个数
                var data = this.allKeyValue(true, this.sourceData);

                if (val.length == data.length) {
                    // 关闭半选 开启全选
                    this.sourceIsIndeterminate = false;
                    this.sourceCheckAll = true;
                } else {
                    this.sourceIsIndeterminate = true;
                    this.sourceCheckAll = false;
                }
            } else {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
            }
        },

        // 目标树数据 状态监测
        targetCheckKeys: function targetCheckKeys(val) {
            var _this5 = this;

            // 穿梭按钮是否禁用
            this.targetDisabled = false;
            // 总半选是否开启
            this.targetIsIndeterminate = false;

            // 列表类型
            if (this.accept === 'list') {

                // 检测监听到真实的值
                var existValue = [];
                val.forEach(function (p) {
                    var filterValue = _this5.filterAcceptData.filter(function (item) {
                        return item[_this5.valueName] === p;
                    });
                    if (filterValue.length > 0) {
                        existValue.push(p);
                    }
                });

                // 不选中时， 全部关闭
                if (existValue.length <= 0) {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                    return;
                }

                if (existValue.length === this.acceptData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                // 不选中时， 全部关闭
                if (val.length > 0) {
                    var data = this.allKeyValue(true, this.targetData);

                    if (val.length === data.length) {
                        // 关闭半选 开启全选
                        this.targetIsIndeterminate = false;
                        this.targetCheckAll = true;
                    } else {
                        this.targetIsIndeterminate = true;
                        this.targetCheckAll = false;
                    }
                } else {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                }
            }
        },

        // 左侧 数据筛选
        filterFrom: function filterFrom(val) {
            this.$refs['from-tree'].filter(val);
        },

        // 右侧 数据筛选（目前未对目标列表数据做筛选）
        filterTo: function filterTo(val) {
            this.$refs['to-tree'].filter(val);
        }
    },

    components: {
        ElTransfer: external_element_ui_["Transfer"]
    },

    methods: {
        /**
         * 加入左侧穿梭框
         *
         */
        addToSource: function addToSource() {
            var _this6 = this;

            // 初始化
            var keys = [];

            // 检测接入数据的方式
            if (this.accept === 'list') {
                keys = this.acceptCheckedKeys;
            } else {
                keys = this.$refs['to-tree'].getCheckedKeys(true);
            }
            var _newValue = external_lodash_default.a.difference(this.value, keys);

            // 触发输入框的改变
            this.$emit('input', _newValue);
            // 触发 change 事件的改变
            this.$emit('change', _newValue, 'left', keys);

            // 处理完毕按钮恢复禁用状态
            this.targetCheckKeys = [];
            this.$refs.checkBoxRight.$el.control.checked = false;

            // 目标数据节点展开
            if (this.transferOpenNode) {
                this.sourceExpandedKeys = keys;
            }

            // 重置过滤值
            if (this.filterFrom) {
                var defaults = this.filterFrom;
                this.filterFrom = "";

                // 延迟执行
                this.$nextTick(function () {
                    _this6.filterFrom = defaults;
                });
            }

            // 清空检索值
            this.filterTo = "";
        },

        /**
         * 加入右侧穿梭框
         *
         */
        addToTarget: function addToTarget() {
            var _this7 = this;

            var keys = this.$refs['from-tree'].getCheckedKeys(true);

            var _newValue = external_lodash_default.a.union(this.value, keys);

            // 触发输入框的改变
            this.$emit('input', _newValue);

            // 触发 change 事件的改变
            this.$emit('change', _newValue, 'right', keys);

            // 处理完毕按钮恢复禁用状态
            this.sourceCheckKeys = [];
            this.$refs.checkBoxLeft.$el.control.checked = false;

            // 清空选中数据
            if (this.accept === 'list') {
                this.acceptCheckedKeys = [];
            }

            // 目标数据节点展开
            if (this.transferOpenNode) {
                this.targetExpandedKeys = keys;
            }

            // 重置过滤值
            if (this.filterTo) {
                var defaults = this.filterTo;
                this.filterTo = "";

                // 延迟执行
                this.$nextTick(function () {
                    _this7.filterTo = defaults;
                });
            }

            // 清空检索值
            this.filterFrom = "";
        },

        /**
         * 源列表数据全选改变状态
         *
         * @param val
         */
        sourceAllBoxCheck: function sourceAllBoxCheck(val) {
            if (this.sourceData.length == 0) {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
                return;
            }

            if (val) {
                var node = this.$refs['from-tree'].store.root;
                var keys = this.getVisibleNodeKeys(node);

                this.sourceCheckKeys = keys;
                this.$refs['from-tree'].setCheckedKeys(keys);
            } else {
                this.$refs['from-tree'].setCheckedNodes([]);
                this.sourceCheckKeys = [];
            }
        },

        /**
         * 目标列表数据全选改变状态
         *
         * @param val
         */
        targetAllBoxCheck: function targetAllBoxCheck(val) {
            var _this8 = this;

            // 列表类型接收收据
            if (this.accept === 'list') {

                // 检测是否存在可选列表值
                if (this.filterAcceptData.length == 0) return;

                if (val) {
                    // 获取可选列表值的 Key 值数据
                    var selectedValue = this.filterAcceptData.map(function (item) {
                        return item[_this8.valueName];
                    });

                    this.targetCheckKeys = selectedValue;
                    this.acceptCheckedKeys = selectedValue;
                } else {
                    this.targetCheckKeys = [];
                    this.acceptCheckedKeys = [];
                }
            } else {
                if (this.targetData.length == 0) {
                    this.targetDisabled = true;
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = false;
                    return;
                }

                if (val) {
                    var node = this.$refs['to-tree'].store.root;
                    var keys = this.getVisibleNodeKeys(node);

                    this.targetCheckKeys = keys;
                    this.$refs['to-tree'].setCheckedKeys(keys);
                } else {
                    this.$refs['to-tree'].setCheckedNodes([]);
                    this.targetCheckKeys = [];
                }
            }
        },

        /**
         * 源列表数据选中事件 - 是否禁用穿梭按钮
         *
         * @param nodeObj
         * @param treeObj
         */
        sourceTreeChecked: function sourceTreeChecked(nodeObj, treeObj) {
            var _this9 = this;

            // 查找父节点
            var pids = treeObj.checkedNodes.map(function (p) {
                return p[_this9.pidName];
            });

            // 过滤后的元素
            var filterKeys = external_lodash_default.a.difference(treeObj.checkedKeys, pids);
            this.sourceCheckKeys = filterKeys;

            this.$emit('left-check-change', nodeObj, treeObj);
        },

        // 目标树选中事件 - 是否禁用穿梭按钮
        toTreeChecked: function toTreeChecked(nodeObj, treeObj) {
            var _this10 = this;

            // 查找父节点
            var pids = treeObj.checkedNodes.map(function (p) {
                return p[_this10.pidName];
            });

            // 过滤后的元素
            var filterKeys = external_lodash_default.a.difference(treeObj.checkedKeys, pids);
            this.targetCheckKeys = filterKeys;

            this.$emit('right-check-change', nodeObj, treeObj);
        },

        /**
         * 源列表数据 筛选
         *
         */
        filterNodeFrom: function filterNodeFrom(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-from']) {
                return this.$attrs['filter-node-from'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        /**
         * 目标列表数据 筛选
         *
         * @param value
         * @param data
         */
        filterNodeTo: function filterNodeTo(value, data) {
            // 支持自定义过滤事件
            if (this.$attrs['filter-node-to']) {
                return this.$attrs['filter-node-to'](value, data);
            }

            if (!value) return true;
            return data[this.treeProps.label].indexOf(value) !== -1;
        },

        /**
         * 递归函数 获取目标树结构数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructTreeBox: function constructTreeBox(value, data) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return data;

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructTreeBox(value, base[self.childrenName]);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data = _data.filter(function (base) {
                    return base[self.valueName] !== item;
                });
            });

            return _data;
        },

        /**
         * 查找所有的 key 值
         *
         * @param val [Boolean] true/false
         * @param val [Array] data
         */
        allKeyValue: function allKeyValue(val, data) {
            // 初始化
            var _treeData = data ? external_lodash_default.a.cloneDeep(data) : external_lodash_default.a.cloneDeep(this.dataSource);
            var _treeAllKey = [];
            var self = this;

            // 递归获取所有的 key 值
            function getAllKeyValue(data) {
                // 初始化数据
                var _treeData = external_lodash_default.a.cloneDeep(data);

                _treeData.map(function (base) {
                    // 检测子节点数据是否存在
                    if (base[self.childrenName] && base[self.childrenName].length > 0) {
                        // 若存在，则进行递归，获取子节点
                        getAllKeyValue(base[self.childrenName]);
                    }

                    return base;
                });

                data.forEach(function (item) {
                    if (val) {
                        if (item[self.childrenName] && item[self.childrenName].length === 0) {
                            _treeAllKey.push(item[self.valueName]);
                        }
                    } else {
                        _treeAllKey.push(item[self.valueName]);
                    }
                });
            }

            // 执行方法
            getAllKeyValue(_treeData);

            return _treeAllKey;
        },

        /**
         * 构建目标列表数据
         *
         * @param value
         * @param data
         * @return {*}
         */
        constructListBox: function constructListBox(value, data, selectedList) {
            // 初始化数据
            var self = this;

            // 检测数据数组
            if (data.length === 0 || value.length === 0) return [];

            // 遍历数据结构
            var _data = data.map(function (base) {
                // 检测子节点数据是否存在
                if (base[self.childrenName] && base[self.childrenName].length > 0) {
                    // 若存在，则进行递归，获取子节点
                    base[self.childrenName] = self.constructListBox(value, base[self.childrenName], selectedList);
                }

                return base;
            });

            // 过滤数据
            value.forEach(function (item) {
                _data.forEach(function (base) {
                    if (base[self.valueName] === item) {
                        selectedList.push(base);
                    }
                });
            });

            return _data;
        },

        /**
         * 获取可视化的子节点的值
         * 
         * @node node
         */
        getVisibleNodeKeys: function getVisibleNodeKeys(node) {
            var _this11 = this;

            // 节点 keys 数组
            var keys = [];

            // 节点的数据
            if (node.childNodes.length > 0) {
                node.childNodes.forEach(function (node) {
                    var childKeys = _this11.getVisibleNodeKeys(node);
                    keys = external_lodash_default.a.concat(childKeys, keys);
                });
            }

            if (node.visible && node.isLeaf && !node.disabled) {
                keys.push(node.key);
            }

            return keys;
        }
    },

    created: function created() {
        this.sourceCheckKeys = this.leftDefaultChecked;
        this.targetCheckKeys = this.rightDefaultChecked;
        if (this.accept === 'list') {
            this.acceptCheckedKeys = this.rightDefaultChecked;
        }
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_transfer_treevue_type_script_lang_js_ = (transfer_treevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/transfer/src/transfer-tree.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_transfer_treevue_type_script_lang_js_,
  transfer_treevue_type_template_id_2d98c0f5_render,
  transfer_treevue_type_template_id_2d98c0f5_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/transfer/src/transfer-tree.vue"
/* harmony default export */ var transfer_tree = (component.exports);
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-table.vue?vue&type=template&id=0fb0f587&scoped=true&
var transfer_tablevue_type_template_id_0fb0f587_scoped_true_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "dg-table-transfer" }, [
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              attrs: { indeterminate: _vm.sourceIsIndeterminate },
              on: { change: _vm.sourceAllBoxCheck },
              model: {
                value: _vm.sourceCheckAll,
                callback: function($$v) {
                  _vm.sourceCheckAll = $$v
                },
                expression: "sourceCheckAll"
              }
            },
            [
              _vm.titles[0] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[0]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-left")
        ],
        2
      ),
      _c(
        "div",
        { staticClass: "el-transfer-panel__body" },
        [
          _vm.filterable
            ? _c(
                "el-input",
                {
                  staticClass: "el-transfer-panel__filter",
                  class: { "el-transfer-panel__search": _vm.filterable },
                  attrs: { placeholder: _vm.filterPlaceholder, size: "small" },
                  model: {
                    value: _vm.filterFrom,
                    callback: function($$v) {
                      _vm.filterFrom = $$v
                    },
                    expression: "filterFrom"
                  }
                },
                [
                  _c("i", {
                    class: ["el-input__icon", "el-icon-search"],
                    attrs: { slot: "prefix" },
                    slot: "prefix"
                  })
                ]
              )
            : _vm._e(),
          _c(
            "el-table",
            {
              ref: "multipleSourceTable",
              staticStyle: { width: "100%" },
              attrs: {
                border: "",
                data: _vm.sourceData,
                "header-cell-style": _vm.headerCellStyle
              },
              on: { "selection-change": _vm.handleSelectionChangeSource }
            },
            [
              _c("el-table-column", { attrs: { type: "selection" } }),
              _vm._l(_vm.columnLabelNameList, function(item, index) {
                return _c("el-table-column", {
                  key: "sourceId" + item.val + index,
                  attrs: {
                    prop: item.val,
                    label: item.label,
                    "show-overflow-tooltip": ""
                  }
                })
              })
            ],
            2
          )
        ],
        1
      ),
      _vm.$slots["left-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("left-footer")],
            2
          )
        : _vm._e()
    ]),
    _c(
      "div",
      { staticClass: "el-transfer__buttons" },
      [
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.targetDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToSource($event)
              }
            }
          },
          [
            _c("i", { staticClass: "el-icon-arrow-left" }),
            _vm.buttonTexts[0] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))])
              : _vm._e()
          ]
        ),
        _c(
          "el-button",
          {
            class: [
              "el-transfer__button",
              _vm.hasButtonTexts ? "is-with-texts" : ""
            ],
            attrs: { type: "primary", disabled: _vm.sourceDisabled },
            nativeOn: {
              click: function($event) {
                return _vm.addToTarget($event)
              }
            }
          },
          [
            _vm.buttonTexts[1] !== undefined
              ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))])
              : _vm._e(),
            _c("i", { staticClass: "el-icon-arrow-right" })
          ]
        )
      ],
      1
    ),
    _c("div", { staticClass: "el-transfer-panel" }, [
      _c(
        "p",
        { staticClass: "el-transfer-panel__header" },
        [
          _c(
            "el-checkbox",
            {
              attrs: { indeterminate: _vm.targetIsIndeterminate },
              on: { change: _vm.targetAllBoxCheck },
              model: {
                value: _vm.targetCheckAll,
                callback: function($$v) {
                  _vm.targetCheckAll = $$v
                },
                expression: "targetCheckAll"
              }
            },
            [
              _vm.titles[1] !== undefined
                ? [_vm._v(_vm._s(_vm.titles[1]))]
                : _vm._e()
            ],
            2
          ),
          _vm._t("title-right")
        ],
        2
      ),
      _c(
        "div",
        { staticClass: "el-transfer-panel__body" },
        [
          _vm.filterable
            ? _c(
                "el-input",
                {
                  staticClass: "el-transfer-panel__filter",
                  class: { "el-transfer-panel__search": _vm.filterable },
                  attrs: { placeholder: _vm.filterPlaceholder, size: "small" },
                  model: {
                    value: _vm.filterTo,
                    callback: function($$v) {
                      _vm.filterTo = $$v
                    },
                    expression: "filterTo"
                  }
                },
                [
                  _c("i", {
                    class: ["el-input__icon", "el-icon-search"],
                    attrs: { slot: "prefix" },
                    slot: "prefix"
                  })
                ]
              )
            : _vm._e(),
          _c(
            "el-table",
            {
              ref: "multipleTargetTable",
              staticStyle: { width: "100%" },
              attrs: {
                border: "",
                data: _vm.targetData,
                "header-cell-style": _vm.headerCellStyle
              },
              on: { "selection-change": _vm.handleSelectionChangeTarget }
            },
            [
              _c("el-table-column", { attrs: { type: "selection" } }),
              _c("el-table-column", {
                key: "targetId" + _vm.labelName + _vm.columnName,
                attrs: {
                  prop: _vm.labelName,
                  label: _vm.columnName,
                  "show-overflow-tooltip": ""
                }
              }),
              _c("template", { slot: "empty" }, [
                _c("div", { staticStyle: { height: "100px" } }, [
                  _c("p", { staticClass: "el-transfer-panel__empty" }, [
                    _vm._v("无数据")
                  ])
                ])
              ])
            ],
            2
          )
        ],
        1
      ),
      _vm.$slots["right-footer"]
        ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("right-footer")],
            2
          )
        : _vm._e()
    ])
  ])
}
var transfer_tablevue_type_template_id_0fb0f587_scoped_true_staticRenderFns = []
transfer_tablevue_type_template_id_0fb0f587_scoped_true_render._withStripped = true


// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue?vue&type=template&id=0fb0f587&scoped=true&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/transfer-table.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var transfer_tablevue_type_script_lang_js_ = ({
    name: "TransferTable",
    data: function data() {
        return {
            // 源数据选中key数组
            sourceCheckKeys: [],
            // 目标数据选中key数组
            targetCheckKeys: [],
            // 是否半选源列表数据状态
            sourceIsIndeterminate: false,
            // 是否半选源列表数据状态
            sourceCheckAll: false,
            // 添加按钮是否禁用
            sourceDisabled: true,
            // 移除按钮是否禁用
            targetDisabled: true,
            // 是否半选目标列表数据状态
            targetIsIndeterminate: false,
            // 是否半选目标列表数据状态
            targetCheckAll: false,
            // 右侧列名字段
            columnName: String,
            // 目标列表
            targetData: [],
            // 源列表
            sourceData: [],
            // 源数据筛选
            filterFrom: '',
            // 目标数据筛选
            filterTo: '',
            // 实际源数据
            realSourceData: [],
            // 实际目标数据
            realTargetData: []
        };
    },

    props: {
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 是否启用筛选
        filterable: {
            type: Boolean,
            default: false
        },
        // 筛选 filter-placeholder
        filterPlaceholder: {
            type: String,
            default: '输入关键字进行过滤'
        },
        // 标题配置
        titles: {
            type: Array,
            default: function _default() {
                return ['列表一', '列表二'];
            }
        },
        // 表头样式设置
        headerCellStyle: {
            type: Object,
            default: function _default() {}
        },
        // 按钮文本配置
        buttonTexts: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 右侧显示列名字段
        labelName: {
            type: String,
            default: 'label'
        },
        // 所有列名和参数对应字段
        columnLabelNameList: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        pageSize: {
            type: Number,
            default: 10
        }
    },
    methods: {
        /**
         * 源列表数据全选改变状态
         *
         * @param val
         */
        sourceAllBoxCheck: function sourceAllBoxCheck(val) {
            if (this.sourceData.length == 0) {
                return;
            }
            if (val) {
                this.sourceCheckKeys = this.sourceData;
                this.$refs.multipleSourceTable.toggleAllSelection();
            } else {
                this.sourceCheckKeys = [];
                this.$refs.multipleSourceTable.clearSelection();
            }
        },

        /**
         * 目标列表数据全选改变状态
         *
         * @param val
         */
        targetAllBoxCheck: function targetAllBoxCheck(val) {
            if (this.targetData.length == 0) {
                return;
            }
            if (val) {
                this.targetCheckKeys = this.targetData;
                this.$refs.multipleTargetTable.toggleAllSelection();
            } else {
                this.targetCheckKeys = [];
                this.$refs.multipleTargetTable.clearSelection();
            }
        },

        /**
         * 加入左侧穿梭框
         *
         */
        addToSource: function addToSource() {
            // 初始化
            var keys = this.targetCheckKeys;
            var _newValue = external_lodash_default.a.union(this.sourceData, keys);
            this.sourceData = _newValue;
            this.realSourceData = _newValue;

            var _newTarget = external_lodash_default.a.difference(this.targetData, keys);
            this.targetData = _newTarget;
            this.realTargetData = _newTarget;
            // this.toggleSelection(this.$refs.multipleSourceTable, this.sourceCheckKeys)

            // 处理完毕按钮恢复禁用状态
            this.targetCheckKeys = [];
        },

        /**
         * 加入右侧穿梭框
         *
         */
        addToTarget: function addToTarget() {
            var keys = this.sourceCheckKeys;

            var _newValue = external_lodash_default.a.union(this.targetData, keys);
            this.targetData = _newValue;
            this.realTargetData = _newValue;

            var _newSource = external_lodash_default.a.difference(this.sourceData, keys);
            this.sourceData = _newSource;
            this.realSourceData = _newSource;

            // 处理完毕按钮恢复禁用状态
            this.sourceCheckKeys = [];
        },
        handleSelectionChangeSource: function handleSelectionChangeSource(val) {
            this.sourceCheckKeys = val;
        },
        handleSelectionChangeTarget: function handleSelectionChangeTarget(val) {
            this.targetCheckKeys = val;
        },

        // 获取表格选中行数
        toggleSelection: function toggleSelection(refs, rows) {
            if (rows) {
                rows.forEach(function (row) {
                    refs.setCurrentRow(row);
                });
            } else {
                refs.clearSelection();
            }
        }
    },
    computed: {
        /**
         * 检测按钮文本值
         *
         */
        hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
        }
    },
    watch: {
        // 源数据 状态监测
        sourceCheckKeys: function sourceCheckKeys(val) {
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.sourceDisabled = false;
                // 总半选是否开启
                this.sourceIsIndeterminate = true;

                // 总全选是否开启 - 根据选中节点中为根节点的数量是否和源数据长度相等
                var allCheck = val;
                if (allCheck.length == this.sourceData.length) {
                    // 关闭半选 开启全选
                    this.sourceIsIndeterminate = false;
                    this.sourceCheckAll = true;
                } else {
                    this.sourceIsIndeterminate = true;
                    this.sourceCheckAll = false;
                }
            } else {
                this.sourceDisabled = true;
                this.sourceIsIndeterminate = false;
                this.sourceCheckAll = false;
            }
        },

        // 目标树数据 状态监测
        targetCheckKeys: function targetCheckKeys(val) {
            if (val.length > 0) {
                // 穿梭按钮是否禁用
                this.targetDisabled = false;
                // 总半选是否开启
                this.targetIsIndeterminate = true;

                // 总全选是否开启
                var allCheck = val;
                if (allCheck.length == this.targetData.length) {
                    // 关闭半选 开启全选
                    this.targetIsIndeterminate = false;
                    this.targetCheckAll = true;
                } else {
                    this.targetIsIndeterminate = true;
                    this.targetCheckAll = false;
                }
            } else {
                this.targetDisabled = true;
                this.targetIsIndeterminate = false;
                this.targetCheckAll = false;
            }
        },

        // 左侧 数据筛选
        filterFrom: function filterFrom(val) {
            var _this = this;

            if (val.length > 0) {
                this.sourceData = this.sourceData.filter(function (item) {
                    return item[_this.labelName].indexOf(val) > -1;
                });
            } else {
                this.sourceData = this.realSourceData;
            }
        },

        // 右侧 数据筛选
        filterTo: function filterTo(val) {
            var _this2 = this;

            if (val.length > 0) {
                this.targetData = this.targetData.filter(function (item) {
                    return item[_this2.labelName].indexOf(val) > -1;
                });
            } else {
                this.targetData = this.realTargetData;
            }
        }
    },
    created: function created() {
        var _this3 = this;

        this.realSourceData = this.data;
        if (this.data.length > 10) {
            this.sourceData = external_lodash_default.a.slice(this.data, 0, this.pageSize);
        } else {
            this.sourceData = this.data;
        }

        this.columnLabelNameList.forEach(function (item) {
            if (item.val == _this3.labelName) {
                _this3.columnName = item.label;
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_transfer_tablevue_type_script_lang_js_ = (transfer_tablevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/transfer/src/transfer-table.vue





/* normalize component */

var transfer_table_component = Object(componentNormalizer["a" /* default */])(
  src_transfer_tablevue_type_script_lang_js_,
  transfer_tablevue_type_template_id_0fb0f587_scoped_true_render,
  transfer_tablevue_type_template_id_0fb0f587_scoped_true_staticRenderFns,
  false,
  null,
  "0fb0f587",
  null
  
)

/* hot reload */
if (false) { var transfer_table_api; }
transfer_table_component.options.__file = "packages/transfer/src/transfer-table.vue"
/* harmony default export */ var transfer_table = (transfer_table_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/transfer/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgTransfer',

    components: {
        TransferTable: transfer_table,
        TransferTree: transfer_tree
    },

    props: {
        // 默认选中值
        value: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 选项配置数据
        data: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        // 支持的类型 可选项为 "tree"
        type: {
            type: String,
            default: ''
        }
    },

    watch: {
        data: {
            deep: true,
            immediate: true,
            handler: function handler(val) {
                this.dataSource = val;
            }
        }
    },

    computed: {
        defaultProps: function defaultProps() {
            var _ref = this.$attrs.props || {},
                key = _ref.key,
                label = _ref.label,
                disabled = _ref.disabled;

            var valueName = this.$attrs['key-name'] || this.$attrs['value-name'] || key || 'key';
            var labelName = this.$attrs['label-name'] || label || 'label';
            var disabledName = this.$attrs['disabled-name'] || disabled || 'disabled';
            return {
                key: valueName,
                label: labelName,
                disabled: disabledName
            };
        }
    },

    data: function data() {
        return {
            dataSource: []
        };
    }
});
// CONCATENATED MODULE: ./packages/transfer/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/transfer/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
main_component.options.__file = "packages/transfer/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./packages/transfer/index.js


/* istanbul ignore next */
main.install = function (Vue) {
    Vue.component(main.name, main);
};

/* harmony default export */ var transfer = __webpack_exports__["default"] = (main);

/***/ })

/******/ });