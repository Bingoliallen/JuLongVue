module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 54);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("jquery");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),

/***/ 32:
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/popup/popup-manager");

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),

/***/ 54:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(4);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/main.vue?vue&type=template&id=3d3e5052&
var mainvue_type_template_id_3d3e5052_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "transition",
    {
      attrs: { name: "dialog-fade" },
      on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
    },
    [
      _c(
        "div",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.visible,
              expression: "visible"
            }
          ],
          staticClass: "el-dialog__wrapper",
          on: {
            click: function($event) {
              if ($event.target !== $event.currentTarget) {
                return null
              }
              return _vm.handleWrapperClick($event)
            }
          }
        },
        [
          _c(
            "div",
            {
              ref: "dialog",
              staticClass: "el-dialog dg-dialog",
              class: [
                {
                  "is-fullscreen": _vm.fullscreen,
                  "el-dialog--center":
                    _vm.center /*'dg-dialog--vertical': vertical*/
                },
                _vm.customClass
              ],
              style: _vm.style,
              attrs: {
                role: "dialog",
                "aria-modal": "true",
                "aria-label": _vm.title || "dialog"
              }
            },
            [
              _c(
                "div",
                { class: ["el-dialog__header", "dg-dialog__header"] },
                [
                  _vm._t("title", [
                    _c("span", { staticClass: "el-dialog__title" }, [
                      _vm._v(_vm._s(_vm.title))
                    ])
                  ]),
                  _vm.showClose
                    ? _c(
                        "button",
                        {
                          staticClass: "el-dialog__headerbtn",
                          attrs: { type: "button", "aria-label": "Close" },
                          on: { click: _vm.handleClose }
                        },
                        [
                          _c("i", {
                            staticClass:
                              "el-dialog__close el-icon el-icon-close"
                          })
                        ]
                      )
                    : _vm._e()
                ],
                2
              ),
              _vm.rendered
                ? _c(
                    "div",
                    { staticClass: "el-dialog__body dg-dialog__body" },
                    [_vm._t("default")],
                    2
                  )
                : _vm._e(),
              _vm.$slots.footer
                ? _c(
                    "div",
                    { staticClass: "el-dialog__footer dg-dialog__footer" },
                    [_vm._t("footer")],
                    2
                  )
                : _vm._e()
            ]
          )
        ]
      )
    ]
  )
}
var staticRenderFns = []
mainvue_type_template_id_3d3e5052_render._withStripped = true


// CONCATENATED MODULE: ./packages/dialog/src/main.vue?vue&type=template&id=3d3e5052&

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/dialog/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgDialog',

    mixins: [external_element_ui_["Dialog"]],

    props: {
        vertical: {
            type: Boolean,
            default: false
        },

        headType: {
            type: String,
            default: ''
        }
    }
});
// CONCATENATED MODULE: ./packages/dialog/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/dialog/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_3d3e5052_render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
main_component.options.__file = "packages/dialog/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// EXTERNAL MODULE: ./src/utils/merge.js
var merge = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/dialog/src/dialog.js
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





var dialog_dialog = function dialog(options) {
    var _$root$$options = this.$root.$options,
        router = _$root$$options.router,
        store = _$root$$options.store;

    var com = options.component.default ? options.component.default : options.component;
    // // 指令和注入
    // let cfg = {
    //     directives: {
    //         footer: {
    //             inserted(el, binding, vnode) {
    //                 // 检测是否存在
    //                 if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
    //                     // 构建新的按钮区域
    //                     let dom = document.createElement('div');
    //                     dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
    //                     dom.appendChild(el);

    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.appendChild(dom);
    //                 } else {
    //                     // 追加入指定位置
    //                     vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
    //                 }
    //             }
    //         }
    //     }
    // };

    // 混入对象
    var mixin = function mixin(comObj) {
        var component = comObj.default || comObj;
        var com = _extends({}, component);
        // com.mixins = com.mixins ? [cfg, ...com.mixins] : [cfg];
        return com;
    };

    // 加入指令
    com = mixin(com);

    var instance = new external_vue_default.a({
        router: router,
        store: store,
        data: Object(merge["a" /* default */])({
            appendToBody: true,
            center: true,
            visible: true,
            'head-type': 'info',
            vertical: true
        }, options),
        render: function render(h) {
            var _this = this;

            return h(main, {
                props: Object(merge["a" /* default */])({}, options, {
                    appendToBody: true,
                    visible: this.visible
                }),
                on: {
                    'update:visible': function updateVisible(status) {
                        _this.visible = status;
                    },
                    open: function open() {
                        options.on && options.on.open && options.on.open();
                    },
                    opened: function opened() {
                        options.on && options.on.opened && options.on.opened();
                    },
                    close: function close(e) {
                        instance.close(e);
                    }
                }
            }, [h(com, {
                props: options.props,
                on: _extends({
                    close: function close(e) {
                        instance.close(e);
                    }
                }, options.on)
            })]);
        },

        methods: {
            show: function show() {
                this.visible = true;
            },
            hide: function hide() {
                this.visible = false;
            },
            destroy: function destroy() {
                this.$destroy();
            },

            close: function close() {
                if (options.close && options.close() === 'hide') {
                    return;
                }
                instance.destroy();
            }
        }
    });
    return instance.$mount();
};

/* harmony default export */ var src_dialog = (dialog_dialog);
// EXTERNAL MODULE: external "jquery"
var external_jquery_ = __webpack_require__(12);
var external_jquery_default = /*#__PURE__*/__webpack_require__.n(external_jquery_);

// CONCATENATED MODULE: ./packages/dialog/src/layer-source.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**

 @Name：layer v3.1.1 Web弹层组件
 @Author：贤心
 @Site：http://layer.layui.com
 @License：MIT

 */

var isLayui = window.layui && layui.define,
    $ = external_jquery_default.a,
    win,
    _ready = {
    getPath: function () {
        var jsPath = document.currentScript ? document.currentScript.src : function () {
            var js = document.scripts,
                last = js.length - 1,
                src;
            for (var i = last; i > 0; i--) {
                if (js[i].readyState === 'interactive') {
                    src = js[i].src;
                    break;
                }
            }
            return src || js[last].src;
        }();
        return jsPath.substring(0, jsPath.lastIndexOf('/') + 1);
    }(),

    config: {},
    end: {},
    minIndex: 0,
    minLeft: [],
    btn: ['&#x786E;&#x5B9A;', '&#x53D6;&#x6D88;'],

    // 五种原始层模式
    type: ['dialog', 'page', 'iframe', 'loading', 'tips'],

    // 获取节点的style属性值
    getStyle: function getStyle(node, name) {
        var style = node.currentStyle ? node.currentStyle : window.getComputedStyle(node, null);
        return style[style.getPropertyValue ? 'getPropertyValue' : 'getAttribute'](name);
    },

    // 载入CSS配件
    link: function link(href, fn, cssname) {
        // 未设置路径，则不主动加载css
        if (!layer_source_layer.path) return;

        var head = document.getElementsByTagName('head')[0],
            link = document.createElement('link');
        if (typeof fn === 'string') cssname = fn;
        var app = (cssname || href).replace(/\.|\//g, '');
        var id = 'layuicss-' + app,
            timeout = 0;

        link.rel = 'stylesheet';
        link.href = layer_source_layer.path + href;
        link.id = id;

        if (!document.getElementById(id)) {
            head.appendChild(link);
        }

        if (typeof fn !== 'function') return;

        // 轮询css是否加载完毕
        (function poll() {
            if (++timeout > 8 * 1000 / 100) {
                return window.console && console.error('layer.css: Invalid');
            }
            parseInt(_ready.getStyle(document.getElementById(id), 'width')) === 1989 ? fn() : setTimeout(poll, 100);
        })();
    }
};

// 默认内置方法。
var layer_source_layer = {
    v: '3.1.1',
    ie: function () {
        // ie版本
        var agent = navigator.userAgent.toLowerCase();
        return !!window.ActiveXObject || 'ActiveXObject' in window ? (agent.match(/msie\s(\d+)/) || [])[1] || '11' // 由于ie11并没有msie的标识
        : false;
    }(),
    index: window.layer && window.layer.v ? 100000 : 0,
    path: _ready.getPath,
    config: function config(options, fn) {
        options = options || {};
        layer_source_layer.cache = _ready.config = $.extend({}, _ready.config, options);
        layer_source_layer.path = _ready.config.path || layer_source_layer.path;
        typeof options.extend === 'string' && (options.extend = [options.extend]);

        if (_ready.config.path) layer_source_layer.ready();

        if (!options.extend) return this;

        isLayui ? layui.addcss('modules/layer/' + options.extend) : _ready.link('theme/' + options.extend);

        return this;
    },

    // 主体CSS等待事件
    ready: function ready(callback) {
        var cssname = 'layer',
            ver = '',
            path = (isLayui ? 'modules/layer/' : 'theme/') + 'default/layer.css?v=' + layer_source_layer.v + ver;
        isLayui ? layui.addcss(path, callback, cssname) : _ready.link(path, callback, cssname);
        return this;
    },

    // 各种快捷引用
    alert: function alert(content, options, yes) {
        var type = typeof options === 'function';
        if (type) yes = options;
        return layer_source_layer.open($.extend({
            content: content,
            yes: yes
        }, type ? {} : options));
    },

    confirm: function confirm(content, options, yes, cancel) {
        var type = typeof options === 'function';
        if (type) {
            cancel = yes;
            yes = options;
        }
        return layer_source_layer.open($.extend({
            content: content,
            btn: _ready.btn,
            yes: yes,
            btn2: cancel
        }, type ? {} : options));
    },

    msg: function msg(content, options, end) {
        // 最常用提示层
        var type = typeof options === 'function',
            rskin = _ready.config.skin;
        var skin = (rskin ? rskin + ' ' + rskin + '-msg' : '') || 'layui-layer-msg';
        var anim = doms.anim.length - 1;
        if (type) end = options;
        return layer_source_layer.open($.extend({
            content: content,
            time: 3000,
            shade: false,
            skin: skin,
            title: false,
            closeBtn: false,
            btn: false,
            resize: false,
            end: end
        }, type && !_ready.config.skin ? {
            skin: skin + ' layui-layer-hui',
            anim: anim
        } : function () {
            options = options || {};
            if (options.icon === -1 || options.icon === undefined && !_ready.config.skin) {
                options.skin = skin + ' ' + (options.skin || 'layui-layer-hui');
            }
            return options;
        }()));
    },

    load: function load(icon, options) {
        return layer_source_layer.open($.extend({
            type: 3,
            icon: icon || 0,
            resize: false,
            shade: 0.01
        }, options));
    },

    tips: function tips(content, follow, options) {
        return layer_source_layer.open($.extend({
            type: 4,
            content: [content, follow],
            closeBtn: false,
            time: 3000,
            shade: false,
            resize: false,
            fixed: false,
            maxWidth: 210
        }, options));
    }
};

var Class = function Class(setings) {
    var that = this;
    that.index = ++layer_source_layer.index;
    that.config = $.extend({}, that.config, _ready.config, setings);
    document.body ? that.creat() : setTimeout(function () {
        that.creat();
    }, 30);
};

Class.pt = Class.prototype;

// 缓存常用字符
var doms = ['layui-layer', '.layui-layer-title', '.layui-layer-main', '.layui-layer-dialog', 'layui-layer-iframe', 'layui-layer-content', 'layui-layer-btn', 'layui-layer-close'];
doms.anim = ['layer-anim-00', 'layer-anim-01', 'layer-anim-02', 'layer-anim-03', 'layer-anim-04', 'layer-anim-05', 'layer-anim-06'];

// 默认配置
Class.pt.config = {
    type: 0,
    shade: 0.3,
    fixed: true,
    move: doms[1],
    title: '&#x4FE1;&#x606F;',
    offset: 'auto',
    area: 'auto',
    closeBtn: 1,
    time: 0, // 0表示不自动关闭
    zIndex: 2000,
    maxWidth: 360,
    anim: 0,
    isOutAnim: true,
    icon: -1,
    moveType: 1,
    resize: true,
    scrollbar: true, // 是否允许浏览器滚动条
    tips: 2,
    noneBtnField: false // add author: tangdm 是否不显示按钮区域
};

// 容器
Class.pt.vessel = function (conType, callback) {
    var that = this,
        times = that.index,
        config = that.config;
    var zIndex = config.zIndex + times,
        titype = _typeof(config.title) === 'object';
    var ismax = config.maxmin && (config.type === 1 || config.type === 2);
    var titleHTML = config.title ? '<div class="layui-layer-title" style="' + (titype ? config.title[1] : '') + '">' + (titype ? config.title[0] : config.title) + '</div>' : '';

    config.zIndex = zIndex;
    callback([
    // 遮罩
    config.shade ? '<div class="layui-layer-shade" id="layui-layer-shade' + times + '" times="' + times + '" style="' + ('z-index:' + (zIndex - 1) + '; ') + '"></div>' : '',

    // 主体
    '<div class="' + doms[0] + (' layui-layer-' + _ready.type[config.type]) + ((config.type == 0 || config.type == 2) && !config.shade ? ' layui-layer-border' : '') + ' ' + (config.skin || '') + '" id="' + doms[0] + times + '" type="' + _ready.type[config.type] + '" times="' + times + '" showtime="' + config.time + '" conType="' + (conType ? 'object' : 'string') + '" style="z-index: ' + zIndex + '; width:' + config.area[0] + ';height:' + config.area[1] + (config.fixed ? '' : ';position:absolute;') + '">' + (conType && config.type != 2 ? '' : titleHTML) + '<div id="' + (config.id || '') + '" class="layui-layer-content' + (config.type == 0 && config.icon !== -1 ? ' layui-layer-padding' : '') + (config.type == 3 ? ' layui-layer-loading' + config.icon : '') + '">' + (config.type == 0 && config.icon !== -1 ? '<i class="layui-layer-ico layui-layer-ico' + config.icon + '"></i>' : '') + (config.type == 1 && conType ? '' : config.content || '') + '</div>' + '<span class="layui-layer-setwin">' + function () {
        var closebtn = ismax ? '<a class="layui-layer-min" href="javascript:;"><cite></cite></a><a class="layui-layer-ico layui-layer-max dg-icon-fullscreen" href="javascript:;"></a>' : '';
        config.closeBtn && (closebtn += '<a class="layui-layer-ico el-icon-close ' + doms[7] + ' ' + doms[7] + (config.title ? config.closeBtn : config.type == 4 ? '1' : '2') + '" href="javascript:;"></a>');
        return closebtn;
    }() + '</span>' + (config.btn ? function () {
        var button = '';
        typeof config.btn === 'string' && (config.btn = [config.btn]);
        for (var i = 0, len = config.btn.length; i < len; i++) {
            button += '<a class="' + doms[6] + '' + i + '">' + config.btn[i] + '</a>';
        }

        // add author: tangdm desc: 禁止按钮区域
        if (config.noneBtnField) {
            return '<div class="none-btn-field"></div>';
        } else {
            return '<div class="' + doms[6] + ' layui-layer-btn-' + (config.btnAlign || '') + '">' + button + '</div>';
        }
    }() : '') + (config.resize ? '<span class="layui-layer-resize"></span>' : '') + '</div>'], titleHTML, $('<div class="layui-layer-move"></div>'));
    return that;
};

// 创建骨架
Class.pt.creat = function () {
    var that = this,
        config = that.config,
        times = that.index,
        nodeIndex,
        content = config.content,
        conType = (typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object',
        body = $('body');

    if (config.id && $('#' + config.id)[0]) return;

    if (typeof config.area === 'string') {
        config.area = config.area === 'auto' ? ['', ''] : [config.area, ''];
    }

    // anim兼容旧版shift
    if (config.shift) {
        config.anim = config.shift;
    }

    if (layer_source_layer.ie == 6) {
        config.fixed = false;
    }

    switch (config.type) {
        case 0:
            config.btn = 'btn' in config ? config.btn : _ready.btn[0];
            layer_source_layer.closeAll('dialog');
            break;
        case 2:
            var content = config.content = conType ? config.content : [config.content || 'http://layer.layui.com', 'auto'];
            config.content = '<iframe scrolling="' + (config.content[1] || 'auto') + '" allowtransparency="true" id="' + doms[4] + '' + times + '" name="' + doms[4] + '' + times + '" onload="this.className=\'\';" class="layui-layer-load" frameborder="0" src="' + config.content[0] + '"></iframe>';
            break;
        case 3:
            delete config.title;
            delete config.closeBtn;
            config.icon === -1 && config.icon === 0;
            layer_source_layer.closeAll('loading');
            break;
        case 4:
            conType || (config.content = [config.content, 'body']);
            config.follow = config.content[1];
            config.content = config.content[0] + '<i class="layui-layer-TipsG"></i>';
            delete config.title;
            config.tips = _typeof(config.tips) === 'object' ? config.tips : [config.tips, true];
            config.tipsMore || layer_source_layer.closeAll('tips');
            break;
    }

    // 建立容器
    that.vessel(conType, function (html, titleHTML, moveElem) {
        body.append(html[0]);
        conType ? function () {
            config.type == 2 || config.type == 4 ? function () {
                $('body').append(html[1]);
            }() : function () {
                if (!content.parents('.' + doms[0])[0]) {
                    content.data('display', content.css('display')).show().addClass('layui-layer-wrap').wrap(html[1]);
                    $('#' + doms[0] + times).find('.' + doms[5]).before(titleHTML);
                }
            }();
        }() : body.append(html[1]);
        $('.layui-layer-move')[0] || body.append(_ready.moveElem = moveElem);
        that.layero = $('#' + doms[0] + times);
        config.scrollbar || doms.html.css('overflow', 'hidden').attr('layer-full', times);

        // 增加额外按钮yangjy 2019-5-31 start
        $.each(that.config.btnExt, function () {
            that.layero.find('.' + doms[6]).append(this);
        });
        // 增加额外按钮yangjy 2019-5-31  end
    }).auto(times);

    // 遮罩
    $('#layui-layer-shade' + that.index).css({
        'background-color': config.shade[1] || '#000',
        opacity: config.shade[0] || config.shade
    });

    config.type == 2 && layer_source_layer.ie == 6 && that.layero.find('iframe').attr('src', content[0]);

    // 坐标自适应浏览器窗口尺寸
    config.type == 4 ? that.tips() : that.offset();
    if (config.fixed) {
        win.on('resize', function () {
            that.offset();
            (/^\d+%$/.test(config.area[0]) || /^\d+%$/.test(config.area[1])) && that.auto(times);
            config.type == 4 && that.tips();
        });
    }

    config.time <= 0 || setTimeout(function () {
        layer_source_layer.close(that.index);
    }, config.time);
    that.move().callback();

    // 为兼容jQuery3.0的css动画影响元素尺寸计算
    if (doms.anim[config.anim]) {
        var animClass = 'layer-anim ' + doms.anim[config.anim];
        that.layero.addClass(animClass).one('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function () {
            $(this).removeClass(animClass);
        });
    }

    // 记录关闭动画
    if (config.isOutAnim) {
        that.layero.data('isOutAnim', true);
    }
};

// 自适应
Class.pt.auto = function (index) {
    var that = this,
        config = that.config,
        layero = $('#' + doms[0] + index);

    if (config.area[0] === '' && config.maxWidth > 0) {
        // 为了修复IE7下一个让人难以理解的bug
        if (layer_source_layer.ie && layer_source_layer.ie < 8 && config.btn) {
            layero.width(layero.innerWidth());
        }
        layero.outerWidth() > config.maxWidth && layero.width(config.maxWidth);
    }

    var area = [layero.innerWidth(), layero.innerHeight()],
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        btnHeight = layero.find('.' + doms[6]).outerHeight() || 0,
        setHeight = function setHeight(elem) {
        elem = layero.find(elem);
        elem.height(area[1] - titHeight - btnHeight - 2 * (parseFloat(elem.css('padding-top')) | 0));
    };

    switch (config.type) {
        case 2:
            setHeight('iframe');
            break;
        default:
            if (config.area[1] === '') {
                if (config.maxHeight > 0 && layero.outerHeight() > config.maxHeight) {
                    area[1] = config.maxHeight;
                    setHeight('.' + doms[5]);
                } else if (config.fixed && area[1] >= win.height()) {
                    area[1] = win.height();
                    setHeight('.' + doms[5]);
                }
            } else {
                setHeight('.' + doms[5]);
            }
            break;
    }

    return that;
};

// 计算坐标
Class.pt.offset = function () {
    var that = this,
        config = that.config,
        layero = that.layero;
    var area = [layero.outerWidth(), layero.outerHeight()];
    var type = _typeof(config.offset) === 'object';
    that.offsetTop = (win.height() - area[1]) / 2;
    that.offsetLeft = (win.width() - area[0]) / 2;

    if (type) {
        that.offsetTop = config.offset[0];
        that.offsetLeft = config.offset[1] || that.offsetLeft;
    } else if (config.offset !== 'auto') {
        if (config.offset === 't') {
            // 上
            that.offsetTop = 0;
        } else if (config.offset === 'r') {
            // 右
            that.offsetLeft = win.width() - area[0];
        } else if (config.offset === 'b') {
            // 下
            that.offsetTop = win.height() - area[1];
        } else if (config.offset === 'l') {
            // 左
            that.offsetLeft = 0;
        } else if (config.offset === 'lt') {
            // 左上角
            that.offsetTop = 0;
            that.offsetLeft = 0;
        } else if (config.offset === 'lb') {
            // 左下角
            that.offsetTop = win.height() - area[1];
            that.offsetLeft = 0;
        } else if (config.offset === 'rt') {
            // 右上角
            that.offsetTop = 0;
            that.offsetLeft = win.width() - area[0];
        } else if (config.offset === 'rb') {
            // 右下角
            that.offsetTop = win.height() - area[1];
            that.offsetLeft = win.width() - area[0];
        } else {
            that.offsetTop = config.offset;
        }
    }

    if (!config.fixed) {
        that.offsetTop = /%$/.test(that.offsetTop) ? win.height() * parseFloat(that.offsetTop) / 100 : parseFloat(that.offsetTop);
        that.offsetLeft = /%$/.test(that.offsetLeft) ? win.width() * parseFloat(that.offsetLeft) / 100 : parseFloat(that.offsetLeft);
        that.offsetTop += win.scrollTop();
        that.offsetLeft += win.scrollLeft();
    }

    if (layero.attr('minLeft')) {
        that.offsetTop = win.height() - (layero.find(doms[1]).outerHeight() || 0);
        that.offsetLeft = layero.css('left');
    }

    layero.css({ top: that.offsetTop, left: that.offsetLeft });
};

// Tips
Class.pt.tips = function () {
    var that = this,
        config = that.config,
        layero = that.layero;
    var layArea = [layero.outerWidth(), layero.outerHeight()],
        follow = $(config.follow);
    if (!follow[0]) follow = $('body');
    var goal = {
        width: follow.outerWidth(),
        height: follow.outerHeight(),
        top: follow.offset().top,
        left: follow.offset().left
    },
        tipsG = layero.find('.layui-layer-TipsG');

    var guide = config.tips[0];
    config.tips[1] || tipsG.remove();

    goal.autoLeft = function () {
        if (goal.left + layArea[0] - win.width() > 0) {
            goal.tipLeft = goal.left + goal.width - layArea[0];
            tipsG.css({ right: 12, left: 'auto' });
        } else {
            goal.tipLeft = goal.left;
        }
    };

    // 辨别tips的方位
    goal.where = [function () {
        // 上
        goal.autoLeft();
        goal.tipTop = goal.top - layArea[1] - 10;
        tipsG.removeClass('layui-layer-TipsB').addClass('layui-layer-TipsT').css('border-right-color', config.tips[1]);
    }, function () {
        // 右
        goal.tipLeft = goal.left + goal.width + 10;
        goal.tipTop = goal.top;
        tipsG.removeClass('layui-layer-TipsL').addClass('layui-layer-TipsR').css('border-bottom-color', config.tips[1]);
    }, function () {
        // 下
        goal.autoLeft();
        goal.tipTop = goal.top + goal.height + 10;
        tipsG.removeClass('layui-layer-TipsT').addClass('layui-layer-TipsB').css('border-right-color', config.tips[1]);
    }, function () {
        // 左
        goal.tipLeft = goal.left - layArea[0] - 10;
        goal.tipTop = goal.top;
        tipsG.removeClass('layui-layer-TipsR').addClass('layui-layer-TipsL').css('border-bottom-color', config.tips[1]);
    }];
    goal.where[guide - 1]();

    /* 8*2为小三角形占据的空间 */
    if (guide === 1) {
        goal.top - (win.scrollTop() + layArea[1] + 8 * 2) < 0 && goal.where[2]();
    } else if (guide === 2) {
        win.width() - (goal.left + goal.width + layArea[0] + 8 * 2) > 0 || goal.where[3]();
    } else if (guide === 3) {
        goal.top - win.scrollTop() + goal.height + layArea[1] + 8 * 2 - win.height() > 0 && goal.where[0]();
    } else if (guide === 4) {
        layArea[0] + 8 * 2 - goal.left > 0 && goal.where[1]();
    }

    layero.find('.' + doms[5]).css({
        'background-color': config.tips[1],
        'padding-right': config.closeBtn ? '30px' : ''
    });
    layero.css({
        left: goal.tipLeft - (config.fixed ? win.scrollLeft() : 0),
        top: goal.tipTop - (config.fixed ? win.scrollTop() : 0)
    });
};
//新增模拟点击事件 yangjy
function simulateClick() {
    if ($(document).find('.el-popper').length <= 0) {
        return;
    }
    var eventDown = document.createEvent('MouseEvents');
    eventDown.initMouseEvent('mousedown', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    var eventUp = document.createEvent('MouseEvents');
    eventUp.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    document.dispatchEvent(eventDown);
    document.dispatchEvent(eventUp);
}
//拖拽层
Class.pt.move = function () {
    var that = this,
        config = that.config,
        _DOC = $(document),
        layero = that.layero,
        moveElem = layero.find(config.move),
        resizeElem = layero.find('.layui-layer-resize'),
        dict = {};

    if (config.move) {
        moveElem.css('cursor', 'move');
    }

    moveElem.on('mousedown', function (e) {
        e.preventDefault();
        if (config.move) {
            simulateClick();
            dict.moveStart = true;
            dict.offset = [e.clientX - parseFloat(layero.css('left')), e.clientY - parseFloat(layero.css('top'))];
            _ready.moveElem.css('cursor', 'move').show();
        }
    });

    resizeElem.on('mousedown', function (e) {
        e.preventDefault();
        dict.resizeStart = true;
        dict.offset = [e.clientX, e.clientY];
        dict.area = [layero.outerWidth(), layero.outerHeight()];
        _ready.moveElem.css('cursor', 'se-resize').show();
    });

    _DOC.on('mousemove', function (e) {
        // 拖拽移动
        if (dict.moveStart) {
            var X = e.clientX - dict.offset[0],
                Y = e.clientY - dict.offset[1],
                fixed = layero.css('position') === 'fixed';

            e.preventDefault();

            dict.stX = fixed ? 0 : win.scrollLeft();
            dict.stY = fixed ? 0 : win.scrollTop();

            // 控制元素不被拖出窗口外
            if (!config.moveOut) {
                var setRig = win.width() - layero.outerWidth() + dict.stX,
                    setBot = win.height() - layero.outerHeight() + dict.stY;
                X < dict.stX && (X = dict.stX);
                X > setRig && (X = setRig);
                Y < dict.stY && (Y = dict.stY);
                Y > setBot && (Y = setBot);
            }

            layero.css({
                left: X,
                top: Y
            });
        }

        // Resize
        if (config.resize && dict.resizeStart) {
            var X = e.clientX - dict.offset[0],
                Y = e.clientY - dict.offset[1];

            e.preventDefault();

            layer_source_layer.style(that.index, {
                width: dict.area[0] + X,
                height: dict.area[1] + Y
            });
            dict.isResize = true;
            config.resizing && config.resizing(layero);
        }
    }).on('mouseup', function (e) {
        if (dict.moveStart) {
            delete dict.moveStart;
            _ready.moveElem.hide();
            config.moveEnd && config.moveEnd(layero);
        }
        if (dict.resizeStart) {
            delete dict.resizeStart;
            _ready.moveElem.hide();
        }
    });

    return that;
};

Class.pt.callback = function () {
    var that = this,
        layero = that.layero,
        config = that.config;
    that.openLayer();
    if (config.success) {
        if (config.type == 2) {
            layero.find('iframe').on('load', function () {
                config.success(layero, that.index);
            });
        } else {
            config.success(layero, that.index);
        }
    }
    layer_source_layer.ie == 6 && that.IE6(layero);

    // 按钮
    layero.find('.' + doms[6]).children('a').on('click', function () {
        var index = $(this).index();
        if (index === 0) {
            if (config.yes) {
                config.yes(that.index, layero);
            } else if (config['btn1']) {
                config['btn1'](that.index, layero);
            } else {
                layer_source_layer.close(that.index);
            }
        } else {
            var close = config['btn' + (index + 1)] && config['btn' + (index + 1)](that.index, layero);
            close === false || layer_source_layer.close(that.index);
        }
    });

    // 取消
    function cancel() {
        var close = config.cancel && config.cancel(that.index, layero);
        close === false || layer_source_layer.close(that.index);
    }

    // 右上角关闭回调
    layero.find('.' + doms[7]).on('click', cancel);

    // 点遮罩关闭
    if (config.shadeClose) {
        $('#layui-layer-shade' + that.index).on('click', function () {
            layer_source_layer.close(that.index);
        });
    }

    // 最小化
    layero.find('.layui-layer-min').on('click', function () {
        var min = config.min && config.min(layero);
        min === false || layer_source_layer.min(that.index, config);
    });

    // 全屏/还原
    layero.find('.layui-layer-max').on('click', function () {
        // add 修改弹层对应的图标 tangdm
        if (!$(this).siblings('.layui-layer-min').is(':visible')) {
            layer_source_layer.restore(that.index);
            config.restore && config.restore(layero);
            return false;
        }

        // change 改变标识方式 tangdm
        if ($(this).hasClass('dg-icon-scalescreen')) {
            layer_source_layer.restore(that.index);
            config.restore && config.restore(layero);
        } else {
            layer_source_layer.full(that.index, config);
            setTimeout(function () {
                config.full && config.full(layero);
            }, 100);
        }
    });

    config.end && (_ready.end[that.index] = config.end);
};

// for ie6 恢复select
_ready.reselect = function () {
    $.each($('select'), function (index, value) {
        var sthis = $(this);
        if (!sthis.parents('.' + doms[0])[0]) {
            sthis.attr('layer') == 1 && $('.' + doms[0]).length < 1 && sthis.removeAttr('layer').show();
        }
        sthis = null;
    });
};

Class.pt.IE6 = function (layero) {
    // 隐藏select
    $('select').each(function (index, value) {
        var sthis = $(this);
        if (!sthis.parents('.' + doms[0])[0]) {
            sthis.css('display') === 'none' || sthis.attr({ layer: '1' }).hide();
        }
        sthis = null;
    });
};

// 需依赖原型的对外方法
Class.pt.openLayer = function () {
    var that = this;

    // 置顶当前窗口
    layer_source_layer.zIndex = that.config.zIndex;
    layer_source_layer.setTop = function (layero) {
        var setZindex = function setZindex() {
            layer_source_layer.zIndex++;
            layero.css('z-index', layer_source_layer.zIndex + 1);
        };
        layer_source_layer.zIndex = parseInt(layero[0].style.zIndex);
        layero.on('mousedown', setZindex);
        return layer_source_layer.zIndex;
    };
};

_ready.record = function (layero) {
    var area = [layero.width(), layero.height(), layero.position().top, layero.position().left + parseFloat(layero.css('margin-left'))];

    // add 切换图标标识 tangdm
    layero.find('.layui-layer-max').removeClass('dg-icon-fullscreen').addClass('dg-icon-scalescreen');

    layero.attr({ area: area });
};

_ready.rescollbar = function (index) {
    if (doms.html.attr('layer-full') == index) {
        if (doms.html[0].style.removeProperty) {
            doms.html[0].style.removeProperty('overflow');
        } else {
            doms.html[0].style.removeAttribute('overflow');
        }
        doms.html.removeAttr('layer-full');
    }
};

/** 内置成员 */

window.layer = layer_source_layer;

// 获取子iframe的DOM
layer_source_layer.getChildFrame = function (selector, index) {
    index = index || $('.' + doms[4]).attr('times');
    return $('#' + doms[0] + index).find('iframe').contents().find(selector);
};

// 得到当前iframe层的索引，子iframe时使用
layer_source_layer.getFrameIndex = function (name) {
    return $('#' + name).parents('.' + doms[4]).attr('times');
};

// iframe层自适应宽高
layer_source_layer.iframeAuto = function (index) {
    if (!index) return;
    var heg = layer_source_layer.getChildFrame('html', index).outerHeight();
    var layero = $('#' + doms[0] + index);
    var titHeight = layero.find(doms[1]).outerHeight() || 0;
    var btnHeight = layero.find('.' + doms[6]).outerHeight() || 0;
    layero.css({ height: heg + titHeight + btnHeight });
    layero.find('iframe').css({ height: heg });
};

// 重置iframe url
layer_source_layer.iframeSrc = function (index, url) {
    $('#' + doms[0] + index).find('iframe').attr('src', url);
};

// 设定层的样式
layer_source_layer.style = function (index, options, limit) {
    var layero = $('#' + doms[0] + index),
        contElem = layero.find('.layui-layer-content'),
        type = layero.attr('type'),
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        btnHeight = layero.find('.' + doms[6]).outerHeight() || 0,
        minLeft = layero.attr('minLeft');

    if (type === _ready.type[3] || type === _ready.type[4]) {
        return;
    }

    if (!limit) {
        if (parseFloat(options.width) <= 260) {
            options.width = 260;
        }

        if (parseFloat(options.height) - titHeight - btnHeight <= 64) {
            options.height = 64 + titHeight + btnHeight;
        }
    }

    layero.css(options);
    btnHeight = layero.find('.' + doms[6]).outerHeight();

    if (type === _ready.type[2]) {
        layero.find('iframe').css({
            height: parseFloat(options.height) - titHeight - btnHeight
        });
    } else {
        // change by tangdm # 修改放大缩小后与原本的高度不一致的问题
        contElem.css({
            height: parseFloat(options.height) - titHeight - btnHeight
        });

        // code
        // contElem.css({
        //    height:
        //        parseFloat(options.height) -
        //        titHeight -
        //        btnHeight -
        //        parseFloat(contElem.css('padding-top')) -
        //        parseFloat(contElem.css('padding-bottom'))
        // });
    }
};

// 最小化
layer_source_layer.min = function (index, options) {
    var layero = $('#' + doms[0] + index),
        titHeight = layero.find(doms[1]).outerHeight() || 0,
        left = layero.attr('minLeft') || 181 * _ready.minIndex + 'px',
        position = layero.css('position');

    _ready.record(layero);

    if (_ready.minLeft[0]) {
        left = _ready.minLeft[0];
        _ready.minLeft.shift();
    }

    layero.attr('position', position);

    layer_source_layer.style(index, {
        width: 180,
        height: titHeight,
        left: left,
        top: win.height() - titHeight,
        position: 'fixed',
        overflow: 'hidden'
    }, true);

    layero.find('.layui-layer-min').hide();
    layero.attr('type') === 'page' && layero.find(doms[4]).hide();
    _ready.rescollbar(index);

    if (!layero.attr('minLeft')) {
        _ready.minIndex++;
    }
    layero.attr('minLeft', left);

    // 重置图标
    layero.find('.layui-layer-max').removeClass('dg-icon-scalescreen').addClass('dg-icon-fullscreen');
};

// 还原
layer_source_layer.restore = function (index) {
    var layero = $('#' + doms[0] + index),
        area = layero.attr('area').split(',');
    var type = layero.attr('type');
    layer_source_layer.style(index, {
        width: parseFloat(area[0]),
        height: parseFloat(area[1]),
        top: parseFloat(area[2]),
        left: parseFloat(area[3]),
        position: layero.attr('position'),
        overflow: 'visible'
    }, true);

    // change 图标标识 tangdm
    layero.find('.layui-layer-max').removeClass('dg-icon-scalescreen').addClass('dg-icon-fullscreen');

    layero.find('.layui-layer-min').show();
    layero.attr('type') === 'page' && layero.find(doms[4]).show();
    _ready.rescollbar(index);
};

// 全屏
layer_source_layer.full = function (index) {
    var layero = $('#' + doms[0] + index),
        timer;
    _ready.record(layero);
    if (!doms.html.attr('layer-full')) {
        doms.html.css('overflow', 'hidden').attr('layer-full', index);
    }
    clearTimeout(timer);
    timer = setTimeout(function () {
        var isfix = layero.css('position') === 'fixed';
        layer_source_layer.style(index, {
            top: isfix ? 0 : win.scrollTop(),
            left: isfix ? 0 : win.scrollLeft(),
            width: win.width(),
            height: win.height()
        }, true);
        layero.find('.layui-layer-min').hide();
    }, 100);
};

// 改变title
layer_source_layer.title = function (name, index) {
    var title = $('#' + doms[0] + (index || layer_source_layer.index)).find(doms[1]);
    title.html(name);
};

// 关闭layer总方法
layer_source_layer.close = function (index) {
    var layero = $('#' + doms[0] + index),
        type = layero.attr('type'),
        closeAnim = 'layer-anim-close';
    if (!layero[0]) return;
    var WRAP = 'layui-layer-wrap',
        remove = function remove() {
        if (type === _ready.type[1] && layero.attr('conType') === 'object') {
            layero.children(':not(.' + doms[5] + ')').remove();
            // edit by tangdm description: 修复弹窗信息没移除 // var wrap = layero.find('.' + WRAP);
            var wrap = layero.find('.' + doms[5]).children();

            for (var i = 0; i < 2; i++) {
                wrap.unwrap();
            }
            wrap.css('display', wrap.data('display')).removeClass(WRAP);
        } else {
            // 低版本IE 回收 iframe
            if (type === _ready.type[2]) {
                try {
                    var iframe = $('#' + doms[4] + index)[0];
                    iframe.contentWindow.document.write('');
                    iframe.contentWindow.close();
                    layero.find('.' + doms[5])[0].removeChild(iframe);
                } catch (e) {}
            }
            layero[0].innerHTML = '';
            layero.remove();
        }
        typeof _ready.end[index] === 'function' && _ready.end[index]();
        delete _ready.end[index];
    };

    if (layero.data('isOutAnim')) {
        layero.addClass('layer-anim ' + closeAnim);
    }

    $('#layui-layer-moves, #layui-layer-shade' + index).remove();
    layer_source_layer.ie == 6 && _ready.reselect();
    _ready.rescollbar(index);
    if (layero.attr('minLeft')) {
        _ready.minIndex--;
        _ready.minLeft.push(layero.attr('minLeft'));
    }

    if (layer_source_layer.ie && layer_source_layer.ie < 10 || !layero.data('isOutAnim')) {
        remove();
    } else {
        setTimeout(function () {
            remove();
        }, 200);
    }
};

// 关闭所有层
layer_source_layer.closeAll = function (type) {
    $.each($('.' + doms[0]), function () {
        var othis = $(this);
        var is = type ? othis.attr('type') === type : 1;
        is && layer_source_layer.close(othis.attr('times'));
        is = null;
    });
};

/**

   拓展模块，layui开始合并在一起

   */

var cache = layer_source_layer.cache || {},
    skin = function skin(type) {
    return cache.skin ? ' ' + cache.skin + ' ' + cache.skin + '-' + type : '';
};

// 仿系统prompt
layer_source_layer.prompt = function (options, _yes) {
    var style = '';
    options = options || {};

    if (typeof options === 'function') _yes = options;

    if (options.area) {
        var area = options.area;
        style = 'style="width: ' + area[0] + '; height: ' + area[1] + ';"';
        delete options.area;
    }
    var prompt,
        content = options.formType == 2 ? '<textarea class="layui-layer-input"' + style + '>' + (options.value || '') + '</textarea>' : function () {
        return '<input type="' + (options.formType == 1 ? 'password' : 'text') + '" class="layui-layer-input" value="' + (options.value || '') + '">';
    }();

    var _success = options.success;
    delete options.success;

    return layer_source_layer.open($.extend({
        type: 1,
        btn: ['&#x786E;&#x5B9A;', '&#x53D6;&#x6D88;'],
        content: content,
        skin: 'layui-layer-prompt' + skin('prompt'),
        maxWidth: win.width(),
        success: function success(layero) {
            prompt = layero.find('.layui-layer-input');
            prompt.focus();
            typeof _success === 'function' && _success(layero);
        },
        resize: false,
        yes: function yes(index) {
            var value = prompt.val();
            if (value === '') {
                prompt.focus();
            } else if (value.length > (options.maxlength || 500)) {
                layer_source_layer.tips('&#x6700;&#x591A;&#x8F93;&#x5165;' + (options.maxlength || 500) + '&#x4E2A;&#x5B57;&#x6570;', prompt, { tips: 1 });
            } else {
                _yes && _yes(value, index, prompt);
            }
        }
    }, options));
};

// tab层
layer_source_layer.tab = function (options) {
    options = options || {};

    var tab = options.tab || {},
        THIS = 'layui-this',
        _success2 = options.success;

    delete options.success;

    return layer_source_layer.open($.extend({
        type: 1,
        skin: 'layui-layer-tab' + skin('tab'),
        resize: false,
        title: function () {
            var len = tab.length,
                ii = 1,
                str = '';
            if (len > 0) {
                str = '<span class="' + THIS + '">' + tab[0].title + '</span>';
                for (; ii < len; ii++) {
                    str += '<span>' + tab[ii].title + '</span>';
                }
            }
            return str;
        }(),
        content: '<ul class="layui-layer-tabmain">' + function () {
            var len = tab.length,
                ii = 1,
                str = '';
            if (len > 0) {
                str = '<li class="layui-layer-tabli ' + THIS + '">' + (tab[0].content || 'no content') + '</li>';
                for (; ii < len; ii++) {
                    str += '<li class="layui-layer-tabli">' + (tab[ii].content || 'no  content') + '</li>';
                }
            }
            return str;
        }() + '</ul>',
        success: function success(layero) {
            var btn = layero.find('.layui-layer-title').children();
            var main = layero.find('.layui-layer-tabmain').children();
            btn.on('mousedown', function (e) {
                e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
                var othis = $(this),
                    index = othis.index();
                othis.addClass(THIS).siblings().removeClass(THIS);
                main.eq(index).show().siblings().hide();
                typeof options.change === 'function' && options.change(index);
            });
            typeof _success2 === 'function' && _success2(layero);
        }
    }, options));
};

// 相册层
layer_source_layer.photos = function (options, loop, key) {
    var dict = {};
    options = options || {};
    if (!options.photos) return;
    var type = options.photos.constructor === Object;
    var photos = type ? options.photos : {},
        data = photos.data || [];
    var start = photos.start || 0;
    dict.imgIndex = (start | 0) + 1;

    options.img = options.img || 'img';

    var _success3 = options.success;
    delete options.success;

    if (!type) {
        // 页面直接获取
        var parent = $(options.photos),
            pushData = function pushData() {
            data = [];
            parent.find(options.img).each(function (index) {
                var othis = $(this);
                othis.attr('layer-index', index);
                data.push({
                    alt: othis.attr('alt'),
                    pid: othis.attr('layer-pid'),
                    src: othis.attr('layer-src') || othis.attr('src'),
                    thumb: othis.attr('src')
                });
            });
        };

        pushData();

        if (data.length === 0) return;

        loop || parent.on('click', options.img, function () {
            var othis = $(this),
                index = othis.attr('layer-index');
            layer_source_layer.photos($.extend(options, {
                photos: {
                    start: index,
                    data: data,
                    tab: options.tab
                },
                full: options.full
            }), true);
            pushData();
        });

        // 不直接弹出
        if (!loop) return;
    } else if (data.length === 0) {
        return layer_source_layer.msg('&#x6CA1;&#x6709;&#x56FE;&#x7247;');
    }

    // 上一张
    dict.imgprev = function (key) {
        dict.imgIndex--;
        if (dict.imgIndex < 1) {
            dict.imgIndex = data.length;
        }
        dict.tabimg(key);
    };

    // 下一张
    dict.imgnext = function (key, errorMsg) {
        dict.imgIndex++;
        if (dict.imgIndex > data.length) {
            dict.imgIndex = 1;
            if (errorMsg) {
                return;
            }
        }
        dict.tabimg(key);
    };

    // 方向键
    dict.keyup = function (event) {
        if (!dict.end) {
            var code = event.keyCode;
            event.preventDefault();
            if (code === 37) {
                dict.imgprev(true);
            } else if (code === 39) {
                dict.imgnext(true);
            } else if (code === 27) {
                layer_source_layer.close(dict.index);
            }
        }
    };

    // 切换
    dict.tabimg = function (key) {
        if (data.length <= 1) return;
        photos.start = dict.imgIndex - 1;
        layer_source_layer.close(dict.index);
        return layer_source_layer.photos(options, true, key);
        setTimeout(function () {
            layer_source_layer.photos(options, true, key);
        }, 200);
    };

    // 一些动作
    dict.event = function () {
        dict.bigimg.hover(function () {
            dict.imgsee.show();
        }, function () {
            dict.imgsee.hide();
        });

        dict.bigimg.find('.layui-layer-imgprev').on('click', function (event) {
            event.preventDefault();
            dict.imgprev();
        });

        dict.bigimg.find('.layui-layer-imgnext').on('click', function (event) {
            event.preventDefault();
            dict.imgnext();
        });

        $(document).on('keyup', dict.keyup);
    };

    // 图片预加载
    function loadImage(url, callback, error) {
        var img = new Image();
        img.src = url;
        if (img.complete) {
            return callback(img);
        }
        img.onload = function () {
            img.onload = null;
            callback(img);
        };
        img.onerror = function (e) {
            img.onerror = null;
            error(e);
        };
    }

    dict.loadi = layer_source_layer.load(1, {
        shade: 'shade' in options ? false : 0.9,
        scrollbar: false
    });

    loadImage(data[start].src, function (img) {
        layer_source_layer.close(dict.loadi);
        dict.index = layer_source_layer.open($.extend({
            type: 1,
            id: 'layui-layer-photos',
            area: function () {
                var imgarea = [img.width, img.height];
                var winarea = [$(window).width() - 100, $(window).height() - 100];

                // 如果 实际图片的宽或者高比 屏幕大（那么进行缩放）
                if (!options.full && (imgarea[0] > winarea[0] || imgarea[1] > winarea[1])) {
                    var wh = [imgarea[0] / winarea[0], imgarea[1] / winarea[1]]; // 取宽度缩放比例、高度缩放比例
                    if (wh[0] > wh[1]) {
                        // 取缩放比例最大的进行缩放
                        imgarea[0] = imgarea[0] / wh[0];
                        imgarea[1] = imgarea[1] / wh[0];
                    } else if (wh[0] < wh[1]) {
                        imgarea[0] = imgarea[0] / wh[1];
                        imgarea[1] = imgarea[1] / wh[1];
                    }
                }

                return [imgarea[0] + 'px', imgarea[1] + 'px'];
            }(),
            title: false,
            shade: 0.9,
            shadeClose: true,
            closeBtn: false,
            move: '.layui-layer-phimg img',
            moveType: 1,
            scrollbar: false,
            moveOut: true,
            // anim: Math.random()*5|0,
            isOutAnim: false,
            skin: 'layui-layer-photos' + skin('photos'),
            content: '<div class="layui-layer-phimg">' + '<img src="' + data[start].src + '" alt="' + (data[start].alt || '') + '" layer-pid="' + data[start].pid + '">' + '<div class="layui-layer-imgsee">' + (data.length > 1 ? '<span class="layui-layer-imguide"><a href="javascript:;" class="layui-layer-iconext layui-layer-imgprev"></a><a href="javascript:;" class="layui-layer-iconext layui-layer-imgnext"></a></span>' : '') + '<div class="layui-layer-imgbar" style="display:' + (key ? 'block' : '') + '"><span class="layui-layer-imgtit"><a href="javascript:;">' + (data[start].alt || '') + '</a><em>' + dict.imgIndex + '/' + data.length + '</em></span></div>' + '</div>' + '</div>',
            success: function success(layero, index) {
                dict.bigimg = layero.find('.layui-layer-phimg');
                dict.imgsee = layero.find('.layui-layer-imguide,.layui-layer-imgbar');
                dict.event(layero);
                options.tab && options.tab(data[start], layero);
                typeof _success3 === 'function' && _success3(layero);
            },
            end: function end() {
                dict.end = true;
                $(document).off('keyup', dict.keyup);
            }
        }, options));
    }, function () {
        layer_source_layer.close(dict.loadi);
        layer_source_layer.msg('&#x5F53;&#x524D;&#x56FE;&#x7247;&#x5730;&#x5740;&#x5F02;&#x5E38;<br>&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x67E5;&#x770B;&#x4E0B;&#x4E00;&#x5F20;&#xFF1F;', {
            time: 30000,
            btn: ['&#x4E0B;&#x4E00;&#x5F20;', '&#x4E0D;&#x770B;&#x4E86;'],
            yes: function yes() {
                data.length > 1 && dict.imgnext(true, true);
            }
        });
    });
};

// 主入口
_ready.run = function (_$) {
    $ = _$;
    win = $(window);
    doms.html = $('html');
    layer_source_layer.open = function (deliver) {
        var o = new Class(deliver);
        return o.index;
    };
};

_ready.run(external_jquery_default.a);
// layer.ready(); yangjy 2019-5-31 去掉自动加载样式

/* harmony default export */ var layer_source = (layer_source_layer);
// EXTERNAL MODULE: external "element-ui/lib/utils/popup/popup-manager"
var popup_manager_ = __webpack_require__(32);
var popup_manager_default = /*#__PURE__*/__webpack_require__.n(popup_manager_);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// CONCATENATED MODULE: ./packages/dialog/src/layer.js
var layer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };






var layer_layerDialog = function layerDialog(Vue) {
    return function (option) {
        var _this2 = this;

        if (!option.content && !option.component) {
            throw 'error: the content or component of  Dialog cannot be null!';
        }
        // 初始化参数
        var opt = initOption(option);

        // 不是组件的直接调用原有的方法
        if (!opt.isComponent) {
            return layer_source.open(opt);
        }

        // 获取组件信息,和是否异步组件

        var _getComponent = getComponent(opt, Vue),
            component = _getComponent.component,
            isAsync = _getComponent.isAsync;

        // 创建组件实例


        var _$root$$options = this.$root.$options,
            router = _$root$$options.router,
            store = _$root$$options.store;

        var instance = new Vue({
            router: router,
            store: store,
            parent: this,
            el: opt.$el[0],
            opt: opt,
            provide: {
                $p: this,
                $props: opt.props
            },
            components: {
                InnerComponent: component
            },
            render: function render(h) {
                var _this = this;

                var comName = typeof opt.content == 'string' ? opt.content : 'InnerComponent';
                return h(comName, {
                    props: opt.props,
                    on: layer_extends({
                        close: function close(e) {
                            layer_source.close(_this.dialogIndex);
                        },
                        closeAll: function closeAll() {
                            layer_source.closeAll();
                        }
                    }, opt.on)
                });
            },


            methods: {
                destroy: function destroy() {
                    this.$destroy();
                },

                close: function close(index) {
                    var _index = index ? index : _this2.dialogIndex;
                    layer_source.close(_index);
                },
                closeAll: function closeAll() {
                    layer_source.closeAll();
                }
            },
            mounted: function mounted() {
                var that = this;
                this.$nextTick(function () {
                    !isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            updated: function updated() {
                var that = this;
                this.$nextTick(function () {
                    isAsync && openLayer.apply(that, [that.$options.opt]);
                });
            },
            destroyed: function destroyed() {
                external_jquery_default()(this.$el).remove();
                instance = null;
            }
        });

        return instance;
    };
};

/**
 * 初始化参数
 * @param opt
 * @returns {Object}
 */
function initOption(opt) {
    // 计算宽高，不允许超出浏览器最大高框
    var maxW = document.body.clientWidth - 10,
        maxH = document.body.clientHeight - 100;

    var _ref = opt.area || [],
        _ref$ = _ref[0],
        width = _ref$ === undefined ? '10000px' : _ref$,
        _ref$2 = _ref[1],
        height = _ref$2 === undefined ? '10000px' : _ref$2;

    if (width.indexOf('px') > 0) {
        width = parseInt(width) > maxW ? maxW + 'px' : width;
    }
    if (height.indexOf('px') > 0) {
        height = parseInt(height) > maxH ? maxH + 'px' : height;
    }

    // 合并参数
    if (opt.component) {
        opt.content = opt.component;
    }
    var content = opt.content.default ? opt.content.default : opt.content;
    // 获取zIndex,让下一个zIndex加3
    var zIndex = popup_manager_default.a.nextZIndex();
    popup_manager_default.a.zIndex += 2 + layer_source.index;

    opt = external_jquery_default.a.extend({ btn: [], btnExt: [], type: 5, maxmin: true }, opt, {
        zIndex: opt.zIndex ? opt.zIndex : zIndex,
        area: [width, height],
        com: content,
        $el: external_jquery_default()('<div></div>').appendTo('body')
    });
    if (opt.type == 5) {
        opt.isComponent = true;
    }
    return opt;
}

/**
 * 根据参数获取组件对象异步组件、同步组件require、import等
 * @param opt
 */
function getComponent(opt, Vue) {
    var component = {},
        isAsync = false;
    // 指令和注入
    var cfg = {
        inject: ['$p', '$props']
    };

    // 混入对象
    var mixin = function mixin(comObj) {
        var component = comObj.default || comObj;
        var com = layer_extends({}, component);
        com.mixins = com.mixins ? [cfg].concat(com.mixins) : [cfg];
        return com;
    };

    // 根据对象类型返回混合后的组件
    var isVueComponent = opt.com instanceof Function && opt.com.prototype.constructor.toString().includes('VueComponent');
    if (opt.com instanceof Promise) {
        // import("./edit")
        component = function component(resolve, reject) {
            opt.com.then(function (obj) {
                resolve(mixin(obj));
            });
        };
        isAsync = true;
    } else if (opt.com instanceof Function && !isVueComponent) {
        // function(resolve,reject){}
        component = function component(resolve, reject) {
            opt.com(function (obj) {
                resolve(mixin(obj));
            }, reject);
        };
        isAsync = true;
    } else if (opt.com instanceof Function && isVueComponent) {
        component = opt.com;
        component.options.directives.footer = cfg.directives.footer;
    } else {
        component = mixin(opt.com);
    }
    return { component: component, isAsync: isAsync };
}

/**
 * 调用layer弹窗，供组件渲染后调用
 * @param opt
 */
function openLayer(opt) {
    var optClone = layer_extends({}, opt);
    var that = this;
    var optEnd = opt.end;
    optClone.content = external_jquery_default()(this.$el);
    optClone.type = 1;
    optClone.end = function () {
        optEnd && optEnd.apply(that);
        that.$destroy();
    };
    that.dialogIndex = layer_source.open(optClone);
    that.layer = layer_source;
}


// CONCATENATED MODULE: ./packages/dialog/src/footer.js

var WhileLock = 10; // 防止死循环

// 检测是否弹层 Dialog
var checkDialogType = function checkDialogType(vnode) {
    var node = vnode.context.$parent.$el;
    return !!node && node.className === "el-dialog__wrapper";
};

/* harmony default export */ var footer = ({
    bind: function bind(el, _ref, vnode) {
        var value = _ref.value;

        if (checkDialogType(vnode)) return;
        if (value !== false) {
            var opt = vnode.context;
            var whileBool = true;
            var whileLock = WhileLock; // 防止死循环
            while (whileBool && whileLock > 0) {
                opt = opt.$parent;
                if (opt && opt.$options.opt && opt.$options.opt.btnExt) {
                    opt = opt.$options.opt ? opt.$options.opt : opt;
                    whileBool = false;
                }
                --whileLock;
            }
            opt.btnExt.push(el);
        } else {
            vnode.context.$nextTick(function () {
                vnode.elm.parentNode.removeChild(el);
            });
        }
    },
    inserted: function inserted(el, _ref2, vnode) {
        var value = _ref2.value;

        if (!checkDialogType(vnode)) return;
        // 检测是否存在
        if (!vnode.context.$parent.$el.firstChild.querySelector('.el-dialog__footer')) {
            // 构建新的按钮区域
            var dom = document.createElement('div');
            dom.setAttribute('class', 'el-dialog__footer dg-dialog__footer');
            dom.appendChild(el);

            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.appendChild(dom);
        } else {
            // 追加入指定位置
            vnode.context.$parent.$el.firstChild.lastChild.appendChild(el);
        }
    },
    update: function update(el, _ref3, vnode, oldVnode) {
        var value = _ref3.value;

        if (checkDialogType(vnode)) return;
        var layuiLayerBtn = vnode.context.$parent.$el;
        var whileBool = true;
        var whileLock = WhileLock; // 防止死循环
        while (whileBool && whileLock > 0) {
            if (!layuiLayerBtn) {
                whileBool = false;
                continue;
            }
            layuiLayerBtn = layuiLayerBtn.parentNode;

            // 检测是否找到父级元素
            if (!layuiLayerBtn) {
                whileBool = false;
                continue;
            }

            var className = layuiLayerBtn.className;
            if (className && external_lodash_default.a.includes(className, 'layui-layer layui-layer-page')) {
                layuiLayerBtn = layuiLayerBtn.querySelector('.layui-layer-btn');
                whileBool = false;
            }
            --whileLock;
        }
        if (!layuiLayerBtn) {
            return;
        }
        if (value !== false) {
            layuiLayerBtn.appendChild(el);
        } else {
            // el.parentNode === null 说明移除了
            el.parentNode && layuiLayerBtn.removeChild(el);
        }
    }
});
// CONCATENATED MODULE: ./packages/dialog/index.js






external_vue_default.a.directive('footer', footer);

main.dialog = src_dialog;
main.layerDialog = layer_layerDialog;
main.layer = layer_source;
main.directive = footer;

/* istanbul ignore next */
main.install = function (Vue) {
    Vue.directive('footer', footer);
    Vue.component(main.name, main);
};

/* harmony default export */ var packages_dialog = __webpack_exports__["default"] = (main);

/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (target) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop in source) {
      if (source.hasOwnProperty(prop)) {
        var value = source[prop];
        if (value !== undefined) {
          target[prop] = value;
        }
      }
    }
  }

  return target;
});

/***/ })

/******/ });