module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 48);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("element-ui");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return str2arr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return data2type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return uniqArr; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/*
 * @Author: lutz
 * @Date: 2019-06-24 11:16:27
 * @Last Modified by: lutz
 * @Last Modified time: 2019-07-01 15:15:41
 * @Last Modified by: huangjq
 * @Last Modified time: 2020-07-24 11:10:20
 */



/**
 * string to array
 * @param {any} val 需要处理的数据
 * @param {string} seq 字符串分隔符
 * @param {boolen} clone 是否深度拷贝
 * @param {array} dataSource 数据源
 * @param {string|number} dataSourceValueName 数据源需要匹配字段
 *
 * @return {array}
 */
function str2arr(val) {
    var seq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
    var clone = arguments[2];
    var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    var dataSourceValueName = arguments[4];
    var isDataSourceChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNil(val) || val === '') {
        return [];
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return clone ? lodash__WEBPACK_IMPORTED_MODULE_0___default.a.cloneDeep(val) : val;
    }

    var data = val.toString().split(seq);

    // 数据源必须是数组 && 长度大于0 && 展示数据必须是数组
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(dataSource) && dataSource.length && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(data)) {
        // 对象数组 或 数组的截取第一个数据判断数字类型
        if (dataSourceValueName != null && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0][dataSourceValueName]) || !dataSourceValueName && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(dataSource[0])) {
            data = data.map(function (item) {
                return Number(item);
            });
        }
    }

    if (isDataSourceChanged) {
        // huangjq 2020/07/24
        // 数据源改变后，有些原有的value不存在了，重新过滤
        var keys = [];
        dataSource.map(function (item) {
            return keys.push(item[dataSourceValueName]);
        });
        data = data.filter(function (item) {
            return keys.indexOf(item) > -1;
        });
    }

    return data;
}

/**
 * 将数据转换成指定数据类型
 * @param {*} val
 * @param {Array|String|Object} type 需要转换的类型
 * @param {String} seq 分隔符
 */
function data2type(val, type) {
    var seq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';

    var bool = lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type] && lodash__WEBPACK_IMPORTED_MODULE_0___default.a['is' + type](val);

    if (bool) {
        return val;
    }

    // 为保证选项可选中，这里不能将数字转成字符串
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isNumber(val) && type === 'String') {
        return val;
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val) && type === 'String') {
        return val.sort().join(seq);
    }

    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isString(val) && type === 'Array') {
        return val.split(seq);
    }

    var map = {
        String: '',
        Array: [],
        Object: {}
    };

    return map[type];
}

/**
 * 两个数组合并成不重复的数组
 * @param {Array} exp
 * @param {Array} val
 */
function uniqArr(exp, val) {
    if (lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(exp) && lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(val)) {
        return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.union(exp, val);
    }

    return [];
}

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("vue");

/***/ }),
/* 5 */,
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(4);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// CONCATENATED MODULE: ./src/utils/types.js
function isString(obj) {
  return Object.prototype.toString.call(obj) === '[object String]';
}

function isObject(obj) {
  return Object.prototype.toString.call(obj) === '[object Object]';
}

function isHtmlElement(node) {
  return node && node.nodeType === Node.ELEMENT_NODE;
}

var isFunction = function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
};

var isUndefined = function isUndefined(val) {
  return val === void 0;
};

var isDefined = function isDefined(val) {
  return val !== undefined && val !== null;
};
// CONCATENATED MODULE: ./src/utils/util.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return noop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasOwn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return toObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getValueByPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getPropByPath; });
/* unused harmony export generateId */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return valueEquals; });
/* unused harmony export escapeRegexpString */
/* unused harmony export arrayFindIndex */
/* unused harmony export arrayFind */
/* unused harmony export coerceTruthyValueToArray */
/* unused harmony export isIE */
/* unused harmony export isEdge */
/* unused harmony export autoprefixer */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return kebabCase; });
/* unused harmony export capitalize */
/* unused harmony export looseEqual */
/* unused harmony export arrayEquals */
/* unused harmony export isEqual */
/* unused harmony export isEmpty */
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };




var util_hasOwnProperty = Object.prototype.hasOwnProperty;

function noop() {}

function hasOwn(obj, key) {
  return util_hasOwnProperty.call(obj, key);
}

function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

var getValueByPath = function getValueByPath(object, prop) {
  prop = prop || "";
  var paths = prop.split(".");
  var current = object;
  var result = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current) break;

    if (i === j - 1) {
      result = current[path];
      break;
    }
    current = current[path];
  }
  return result;
};

function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, ".$1");
  path = path.replace(/^\./, "");

  var keyArr = path.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict) break;
    var key = keyArr[i];
    if (key in tempObj) {
      tempObj = tempObj[key];
    } else {
      if (strict) {
        throw new Error("please transfer a valid prop path to form item!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}

var generateId = function generateId() {
  return Math.floor(Math.random() * 10000);
};

var valueEquals = function valueEquals(a, b) {
  // see: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript
  if (a === b) return true;
  if (!(a instanceof Array)) return false;
  if (!(b instanceof Array)) return false;
  if (a.length !== b.length) return false;
  for (var i = 0; i !== a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
};

// TODO: use native Array.find, Array.findIndex when IE support is dropped
var arrayFindIndex = function arrayFindIndex(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};

var arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : undefined;
};

// coerce truthy value to array
var coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};

var util_isIE = function isIE() {
  return !external_vue_default.a.prototype.$isServer && !isNaN(Number(document.documentMode));
};

var util_isEdge = function isEdge() {
  return !external_vue_default.a.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
};

var autoprefixer = function autoprefixer(style) {
  if ((typeof style === "undefined" ? "undefined" : _typeof(style)) !== "object") return style;
  var rules = ["transform", "transition", "animation"];
  var prefixes = ["ms-", "webkit-"];
  rules.forEach(function (rule) {
    var value = style[rule];
    if (rule && value) {
      prefixes.forEach(function (prefix) {
        style[prefix + rule] = value;
      });
    }
  });
  return style;
};

var kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, "$1-$2").replace(hyphenateRE, "$1-$2").toLowerCase();
};

var util_capitalize = function capitalize(str) {
  if (!isString(str)) return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var util_looseEqual = function looseEqual(a, b) {
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a) === JSON.stringify(b);
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
};

var arrayEquals = function arrayEquals(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];

  if (arrayA.length !== arrayB.length) {
    return false;
  }

  for (var i = 0; i < arrayA.length; i++) {
    if (!util_looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }

  return true;
};

var isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return util_looseEqual(value1, value2);
};

var isEmpty = function isEmpty(val) {
  // null or undefined
  if (val == null) return true;

  if (typeof val === "boolean") return false;

  if (typeof val === "number") return !val;

  if (val instanceof Error) return val.message === "";

  switch (Object.prototype.toString.call(val)) {
    // String or Array
    case "[object String]":
    case "[object Array]":
      return !val.length;

    // Map or Set or File
    case "[object File]":
    case "[object Map]":
    case "[object Set]":
      {
        return !val.size;
      }
    // Plain Object
    case "[object Object]":
      {
        return !Object.keys(val).length;
      }
  }

  return false;
};

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function (child) {
    var name = child.$options.componentName;

    if (name === componentName) {
      child.$emit.apply(child, [eventName].concat(params));
    } else {
      _broadcast.apply(child, [componentName, eventName].concat([params]));
    }
  });
}
/* harmony default export */ __webpack_exports__["a"] = ({
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent = this.$parent || this.$root;
      var name = parent.$options.componentName;

      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;

        if (parent) {
          name = parent.$options.componentName;
        }
      }
      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
});

/***/ }),
/* 14 */,
/* 15 */,
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/locale/lang/zh-CN.js
/* harmony default export */ var zh_CN = ({
  el: {
    colorpicker: {
      confirm: "确定",
      clear: "清空"
    },
    datepicker: {
      now: "此刻",
      today: "今天",
      cancel: "取消",
      clear: "清空",
      confirm: "确定",
      selectDate: "选择日期",
      selectTime: "选择时间",
      startDate: "开始日期",
      startTime: "开始时间",
      endDate: "结束日期",
      endTime: "结束时间",
      prevYear: "前一年",
      nextYear: "后一年",
      prevMonth: "上个月",
      nextMonth: "下个月",
      year: "年",
      month1: "1 月",
      month2: "2 月",
      month3: "3 月",
      month4: "4 月",
      month5: "5 月",
      month6: "6 月",
      month7: "7 月",
      month8: "8 月",
      month9: "9 月",
      month10: "10 月",
      month11: "11 月",
      month12: "12 月",
      // week: '周次',
      weeks: {
        sun: "日",
        mon: "一",
        tue: "二",
        wed: "三",
        thu: "四",
        fri: "五",
        sat: "六"
      },
      months: {
        jan: "一月",
        feb: "二月",
        mar: "三月",
        apr: "四月",
        may: "五月",
        jun: "六月",
        jul: "七月",
        aug: "八月",
        sep: "九月",
        oct: "十月",
        nov: "十一月",
        dec: "十二月"
      }
    },
    select: {
      loading: "加载中",
      noMatch: "无匹配数据",
      noData: "无数据",
      placeholder: "请选择"
    },
    cascader: {
      noMatch: "无匹配数据",
      loading: "加载中",
      placeholder: "请选择",
      noData: "暂无数据"
    },
    pagination: {
      goto: "前往",
      pagesize: "条/页",
      total: "共 {total} 条",
      pageClassifier: "页"
    },
    messagebox: {
      title: "提示",
      confirm: "确定",
      cancel: "取消",
      error: "输入的数据不合法!"
    },
    upload: {
      deleteTip: "按 delete 键可删除",
      delete: "删除",
      preview: "查看图片",
      continue: "继续上传"
    },
    table: {
      emptyText: "暂无数据",
      confirmFilter: "筛选",
      resetFilter: "重置",
      clearFilter: "全部",
      sumText: "合计"
    },
    tree: {
      emptyText: "暂无数据"
    },
    transfer: {
      noMatch: "无匹配数据",
      noData: "无数据",
      titles: ["列表 1", "列表 2"],
      filterPlaceholder: "请输入搜索内容",
      noCheckedFormat: "共 {total} 项",
      hasCheckedFormat: "已选 {checked}/{total} 项"
    },
    image: {
      error: "加载失败"
    },
    pageHeader: {
      title: "返回"
    }
  }
});
// EXTERNAL MODULE: external "vue"
var external_vue_ = __webpack_require__(4);
var external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);

// EXTERNAL MODULE: external "deepmerge"
var external_deepmerge_ = __webpack_require__(30);
var external_deepmerge_default = /*#__PURE__*/__webpack_require__.n(external_deepmerge_);

// EXTERNAL MODULE: ./src/utils/util.js + 1 modules
var util = __webpack_require__(7);

// CONCATENATED MODULE: ./src/locale/format.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
/**
 *  String format template
 *  - Inspired:
 *    https://github.com/Matt-Esch/string-template/index.js
 */
/* harmony default export */ var format = (function (Vue) {
  /**
   * template
   *
   * @param {String} string
   * @param {Array} ...args
   * @return {String}
   */

  function template(string) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (args.length === 1 && _typeof(args[0]) === "object") {
      args = args[0];
    }

    if (!args || !args.hasOwnProperty) {
      args = {};
    }

    return string.replace(RE_NARGS, function (match, prefix, i, index) {
      var result = void 0;

      if (string[index - 1] === "{" && string[index + match.length] === "}") {
        return i;
      } else {
        result = Object(util["c" /* hasOwn */])(args, i) ? args[i] : null;
        if (result === null || result === undefined) {
          return "";
        }

        return result;
      }
    });
  }

  return template;
});
// CONCATENATED MODULE: ./src/locale/index.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return t; });
/* unused harmony export use */
/* unused harmony export i18n */





var locale_format = format(external_vue_default.a);
var lang = zh_CN;
var merged = false;
var locale_i18nHandler = function i18nHandler() {
  var vuei18n = Object.getPrototypeOf(this || external_vue_default.a).$t;
  if (typeof vuei18n === "function" && !!external_vue_default.a.locale) {
    if (!merged) {
      merged = true;
      external_vue_default.a.locale(external_vue_default.a.config.lang, external_deepmerge_default()(lang, external_vue_default.a.locale(external_vue_default.a.config.lang) || {}, { clone: true }));
    }
    return vuei18n.apply(this, arguments);
  }
};

var t = function t(path, options) {
  var value = locale_i18nHandler.apply(this, arguments);
  if (value !== null && value !== undefined) return value;

  var array = path.split(".");
  var current = lang;

  for (var i = 0, j = array.length; i < j; i++) {
    var property = array[i];
    value = current[property];
    if (i === j - 1) return locale_format(value, options);
    if (!value) return "";
    current = value;
  }
  return "";
};

var use = function use(l) {
  lang = l || lang;
};

var i18n = function i18n(fn) {
  locale_i18nHandler = fn || locale_i18nHandler;
};

/* harmony default export */ var locale = ({ use: use, t: t, i18n: i18n });

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports) {

module.exports = require("deepmerge");

/***/ }),
/* 31 */,
/* 32 */
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/popup/popup-manager");

/***/ }),
/* 33 */,
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var main_locale__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);


/* harmony default export */ __webpack_exports__["a"] = ({
  methods: {
    t: function t() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return main_locale__WEBPACK_IMPORTED_MODULE_0__[/* t */ "a"].apply(this, args);
    }
  }
});

/***/ }),
/* 35 */,
/* 36 */,
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var main_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);

/**
 * Show migrating guide in browser console.
 *
 * Usage:
 * import Migrating from 'main/mixins/migrating';
 *
 * mixins: [Migrating]
 *
 * add getMigratingConfig method for your component.
 *  getMigratingConfig() {
 *    return {
 *      props: {
 *        'allow-no-selection': 'allow-no-selection is removed.',
 *        'selection-mode': 'selection-mode is removed.'
 *      },
 *      events: {
 *        selectionchange: 'selectionchange is renamed to selection-change.'
 *      }
 *    };
 *  },
 */
/* harmony default export */ __webpack_exports__["a"] = ({
  mounted: function mounted() {
    if (true) return;
    if (!this.$vnode) return;

    var _getMigratingConfig = this.getMigratingConfig(),
        _getMigratingConfig$p = _getMigratingConfig.props,
        props = _getMigratingConfig$p === undefined ? {} : _getMigratingConfig$p,
        _getMigratingConfig$e = _getMigratingConfig.events,
        events = _getMigratingConfig$e === undefined ? {} : _getMigratingConfig$e;

    var _$vnode = this.$vnode,
        data = _$vnode.data,
        componentOptions = _$vnode.componentOptions;

    var definedProps = data.attrs || {};
    var definedEvents = componentOptions.listeners || {};

    for (var propName in definedProps) {
      propName = Object(main_utils_util__WEBPACK_IMPORTED_MODULE_0__[/* kebabCase */ "d"])(propName); // compatible with camel case
      if (props[propName]) {
        console.warn("[Element Migrating][" + this.$options.name + "][Attribute]: " + props[propName]);
      }
    }

    for (var eventName in definedEvents) {
      eventName = Object(main_utils_util__WEBPACK_IMPORTED_MODULE_0__[/* kebabCase */ "d"])(eventName); // compatible with camel case
      if (events[eventName]) {
        console.warn("[Element Migrating][" + this.$options.name + "][Event]: " + events[eventName]);
      }
    }
  },

  methods: {
    getMigratingConfig: function getMigratingConfig() {
      return {
        props: {},
        events: {}
      };
    }
  }
});

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = require("viewerjs");

/***/ }),
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */
/***/ (function(module, exports) {

module.exports = require("babel-helper-vue-jsx-merge-props");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("mime");

/***/ }),
/* 46 */,
/* 47 */,
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/main.vue?vue&type=template&id=76177bbe&
var mainvue_type_template_id_76177bbe_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "dg-upload" },
    [
      _vm.listType === "button"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  {
                    class: { "dg-upload--button": !_vm.disabled },
                    attrs: { "list-slot": _vm.$scopedSlots.fileList }
                  },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _c(
                  "el-button",
                  {
                    attrs: { icon: "el-icon-upload2", disabled: _vm.disabled }
                  },
                  [_vm._v("文件上传")]
                ),
                _vm.tipMsg !== false && (_vm.tipMsg || _vm.message)
                  ? _c(
                      "div",
                      {
                        staticClass: "el-upload__tip",
                        attrs: { slot: "tip" },
                        slot: "tip"
                      },
                      [_vm._v(_vm._s(_vm.tipMsg || _vm.message))]
                    )
                  : _vm._e()
              ],
              1
            )
          ]
        : _vm.listType === "avatar"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { staticClass: "dg-upload__image avatar-uploader" },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.imageUrl
                  ? _c("img", {
                      staticClass: "avatar",
                      attrs: {
                        src: _vm.getImg(_vm.imageUrl),
                        onerror: _vm.error
                      }
                    })
                  : _c("div", [
                      _c("i", {
                        class: [
                          "el-icon-plus",
                          "avatar-uploader-icon",
                          _vm.disabled ? "dg-upload--content is-disabled" : ""
                        ]
                      }),
                      _c("p", { staticClass: "dg-upload--text" }, [
                        _vm._v("上传")
                      ])
                    ])
              ]
            )
          ]
        : _vm.listType === "viewer" && !_vm.showOne
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { staticStyle: { display: "inline-block" } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _c(
                  "div",
                  {
                    class: [
                      "el-upload el-upload--text",
                      _vm.disabled ? "dg-upload--content is-disabled" : ""
                    ]
                  },
                  [
                    _c("i", {
                      staticClass: "el-icon-plus avatar-uploader-icon"
                    }),
                    _c(
                      "p",
                      {
                        staticClass: "dg-upload--text",
                        staticStyle: { margin: "0" }
                      },
                      [_vm._v("上传")]
                    )
                  ]
                )
              ]
            ),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(img, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: { src: _vm.getImg(img._url), onerror: _vm.error }
                  })
                ])
              }),
              0
            )
          ]
        : _vm.listType === "viewer" && _vm.showOne
        ? [
            _c(
              "upload",
              _vm._g(_vm._b({}, "upload", _vm._attrs, false), _vm.$listeners),
              [
                _c(
                  "div",
                  {
                    class: [
                      "dg-upload-div",
                      _vm.disabled ? "dg-upload--content is-disabled" : ""
                    ]
                  },
                  [
                    _c("i", { staticClass: "el-icon-plus" }),
                    _c("p", { staticClass: "dg-upload--text" }, [
                      _vm._v("上传")
                    ])
                  ]
                )
              ]
            ),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(img, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: { src: _vm.getImg(img._url), onerror: _vm.error }
                  })
                ])
              }),
              0
            )
          ]
        : _vm.listType === "pictureList"
        ? [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { class: { "dg-upload__list": _vm.fileLength } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm.fileLength < 1
                  ? _c("div", { staticClass: "dg-upload--pictureList" }, [
                      _c("i", { staticClass: "el-icon-plus" }),
                      _c("p", { staticClass: "dg-upload--text" }, [
                        _vm._v("上传")
                      ])
                    ])
                  : _c(
                      "div",
                      {
                        staticClass: "dg-upload__carousel",
                        attrs: { slot: "uploadList" },
                        slot: "uploadList"
                      },
                      [
                        _c(
                          "el-carousel",
                          _vm._b(
                            {
                              ref: "hrl",
                              attrs: {
                                height: _vm.carouselHeight,
                                "initial-index": _vm.index
                              }
                            },
                            "el-carousel",
                            _vm.carousel,
                            false
                          ),
                          _vm._l(_vm.imgList, function(item, key) {
                            return _c(
                              "el-carousel-item",
                              { key: key, attrs: { name: key + "" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: _vm.getImg(_vm.getUrl(item)),
                                    onerror: _vm.error
                                  }
                                })
                              ]
                            )
                          }),
                          1
                        ),
                        _c("span", { staticClass: "dg-upload__shade" }, [
                          _vm.iconZoom
                            ? _c("i", {
                                staticClass: "el-icon-zoom-in",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handleZoomIn($event)
                                  }
                                }
                              })
                            : _vm._e(),
                          _vm.iconDelete
                            ? _c("i", {
                                staticClass: "el-icon-delete",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handleDelete($event)
                                  }
                                }
                              })
                            : _vm._e(),
                          _vm.iconPlus
                            ? _c("i", {
                                staticClass: "el-icon-plus",
                                on: {
                                  click: function($event) {
                                    $event.stopPropagation()
                                    return _vm.handlePlus($event)
                                  }
                                }
                              })
                            : _vm._e()
                        ])
                      ],
                      1
                    ),
                _vm.fileLength
                  ? _c("div", {
                      ref: "uploadBtn",
                      attrs: { slot: "trigger" },
                      slot: "trigger"
                    })
                  : _vm._e()
              ]
            ),
            _vm.fileLength > 1 && _vm.fileLength <= _vm.showbottom
              ? _c(
                  "ul",
                  { staticClass: "dg-upload__indicator" },
                  _vm._l(_vm.fileLength, function(item, key) {
                    return _c(
                      "li",
                      {
                        key: key,
                        class: [
                          "el-carousel__indicator",
                          "el-carousel__indicator--horizontal",
                          { "is-active": _vm.index === key }
                        ],
                        on: {
                          mouseenter: function($event) {
                            return _vm.handleIndicator("hover", key)
                          },
                          click: function($event) {
                            $event.stopPropagation()
                            return _vm.handleIndicator("click", key)
                          }
                        }
                      },
                      [_c("button", { staticClass: "el-carousel__button" })]
                    )
                  }),
                  0
                )
              : _vm._e(),
            _vm.fileLength > _vm.showbottom
              ? _c("div", { staticClass: "dg-upload__indicator-more" }, [
                  _c("i", {
                    staticClass: "el-icon-caret-left",
                    on: {
                      click: function($event) {
                        $event.stopPropagation()
                        return _vm.pageturning("prev")
                      }
                    }
                  }),
                  _c("span", { staticClass: "is-active" }, [
                    _vm._v(_vm._s(_vm.index + 1))
                  ]),
                  _c("span", [_vm._v("/" + _vm._s(_vm.fileLength))]),
                  _c("i", {
                    staticClass: "el-icon-caret-right",
                    on: {
                      click: function($event) {
                        $event.stopPropagation()
                        return _vm.pageturning("next")
                      }
                    }
                  })
                ])
              : _vm._e(),
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: false,
                    expression: "false"
                  }
                ],
                ref: "imageUrl"
              },
              _vm._l(_vm.imgList, function(item, key) {
                return _c("li", { key: key }, [
                  _c("img", {
                    staticClass: "dg-upload__img",
                    attrs: {
                      src: _vm.getImg(_vm.getUrl(item)),
                      onerror: _vm.error
                    }
                  })
                ])
              }),
              0
            )
          ]
        : [
            _c(
              "upload",
              _vm._g(
                _vm._b(
                  { attrs: { "list-slot": _vm.$scopedSlots.fileList } },
                  "upload",
                  _vm._attrs,
                  false
                ),
                _vm.$listeners
              ),
              [
                _vm._t("default"),
                _vm._t("trigger", null, { slot: "trigger" }),
                _vm._t("tip", null, { slot: "tip" })
              ],
              2
            )
          ]
    ],
    2
  )
}
var staticRenderFns = []
mainvue_type_template_id_76177bbe_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/main.vue?vue&type=template&id=76177bbe&

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(0);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// EXTERNAL MODULE: ./src/dg-utils/data-convert.js
var data_convert = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&
var upload_listvue_type_template_id_173fedf5_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "transition-group",
    {
      class: [
        "el-upload-list",
        "el-upload-list--" + _vm.listType,
        { "is-disabled": _vm.disabled }
      ],
      attrs: { tag: "ul", name: "el-list" }
    },
    _vm._l(_vm.showOne ? _vm.files[0] : _vm.files, function(file, indx) {
      return _c(
        "li",
        {
          key: file.uid,
          class: [
            "el-upload-list__item",
            "is-" + file.status,
            _vm.focusing ? "focusing" : ""
          ],
          attrs: { tabindex: "0" },
          on: {
            keydown: function($event) {
              if (
                !$event.type.indexOf("key") &&
                _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                  "Backspace",
                  "Delete",
                  "Del"
                ])
              ) {
                return null
              }
              !_vm.disabled && _vm.$emit("remove", file)
            },
            focus: function($event) {
              _vm.focusing = true
            },
            blur: function($event) {
              _vm.focusing = false
            },
            click: function($event) {
              _vm.focusing = false
            }
          }
        },
        [
          file.status !== "uploading" &&
          ["picture-card", "picture"].indexOf(_vm.listType) > -1
            ? _c("img", {
                staticClass: "el-upload-list__item-thumbnail",
                attrs: {
                  src: _vm.serverUrl + file[_vm.defaultOpt.url],
                  onerror: _vm.error,
                  alt: ""
                }
              })
            : _vm._e(),
          _vm.$scopedSlots.default
            ? [
                _c(
                  "a",
                  {
                    staticClass: "el-upload-list__item-name",
                    on: {
                      click: function($event) {
                        return _vm.handleClick(file)
                      }
                    }
                  },
                  [_vm._t("default", null, null, file)],
                  2
                )
              ]
            : [
                _c(
                  "a",
                  {
                    staticClass: "el-upload-list__item-name",
                    on: {
                      click: function($event) {
                        return _vm.handleClick(file)
                      }
                    }
                  },
                  [
                    _c("i", { staticClass: "el-icon-paperclip" }),
                    _vm._v(
                      "\n        " +
                        _vm._s(
                          file[_vm.defaultOpt.name] +
                            " (" +
                            _vm.fileSize(file.size) +
                            ")"
                        ) +
                        "\n      "
                    )
                  ]
                )
              ],
          _c("label", { staticClass: "el-upload-list__item-status-label" }, [
            _c("i", {
              class: {
                "el-icon-upload-success": true,
                "el-icon-circle-check": _vm.listType === "text",
                "el-icon-check":
                  ["picture-card", "picture"].indexOf(_vm.listType) > -1
              }
            })
          ]),
          !_vm.disabled
            ? _c("i", {
                staticClass: "el-icon-close",
                on: {
                  click: function($event) {
                    return _vm.$emit("remove", file)
                  }
                }
              })
            : _vm._e(),
          !_vm.disabled
            ? _c("i", { staticClass: "el-icon-close-tip" }, [
                _vm._v(_vm._s(_vm.t("el.upload.deleteTip")))
              ])
            : _vm._e(),
          file.status === "uploading"
            ? _c("el-progress", {
                attrs: {
                  type: _vm.listType === "picture-card" ? "circle" : "line",
                  "stroke-width": _vm.listType === "picture-card" ? 6 : 2,
                  percentage: _vm.parsePercentage(file.percentage)
                }
              })
            : _vm._e(),
          _vm.listType === "picture-card"
            ? _c("span", { staticClass: "el-upload-list__item-actions" }, [
                _vm.handlePreview && _vm.listType === "picture-card"
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-preview",
                        on: {
                          click: function($event) {
                            return _vm.handlePreview(file, indx)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-zoom-in" })]
                    )
                  : _vm._e(),
                !_vm.disabled
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-delete",
                        on: {
                          click: function($event) {
                            return _vm.$emit("remove", file)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-delete" })]
                    )
                  : _vm._e(),
                !_vm.disabled && _vm.showUploadIcon
                  ? _c(
                      "span",
                      {
                        staticClass: "el-upload-list__item-plus",
                        on: {
                          click: function($event) {
                            return _vm.$emit("upload", file)
                          }
                        }
                      },
                      [_c("i", { staticClass: "el-icon-plus" })]
                    )
                  : _vm._e()
              ])
            : _vm._e()
        ],
        2
      )
    }),
    0
  )
}
var upload_listvue_type_template_id_173fedf5_staticRenderFns = []
upload_listvue_type_template_id_173fedf5_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&

// EXTERNAL MODULE: ./src/mixins/locale.js
var locale = __webpack_require__(34);

// EXTERNAL MODULE: external "element-ui"
var external_element_ui_ = __webpack_require__(2);

// CONCATENATED MODULE: ./packages/upload/src/unit.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



// 文件单位
var unit = {
    B: 1, // 1024^0
    K: 1024, // 1024^1
    M: 1048576, // 1024^2
    G: 1073741824, // 1024^3
    T: 1099511627776 // 1024^4
};

function noop() {}

function typeBySuffix() {
    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var lastIdx = str.lastIndexOf('.');
    return lastIdx === -1 ? '' : str.slice(lastIdx + 1);
}

function write2Class(type) {
    return !type ? 'el-icon-document' : 'dg-icon-' + type;
}

function round(val) {
    return external_lodash_default.a.round(val, 2);
}

function fileSize() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (size < unit.K) {
        return size + 'B';
    } else if (size < unit.M) {
        return round(size / unit.K) + 'KB';
    } else if (size < unit.G) {
        return round(size / unit.M) + 'MB';
    } else if (size < unit.T) {
        return round(size / unit.G) + 'GB';
    } else {
        return round(size / unit.T) + 'TB';
    }
}

function sizeType(size) {
    return Object.prototype.toString.call(size);
}

// 下载
function linkDown(url, fileName) {
    if ((typeof url === 'undefined' ? 'undefined' : _typeof(url)) == 'object' && url instanceof Blob) {
        url = URL.createObjectURL(url);
    }

    var aLink = document.createElement('a');
    aLink.href = url;
    aLink.download = fileName || '';

    var event = void 0;

    if (window.MouseEvent) {
        event = new MouseEvent('click');
    } else {
        event = document.createEvent('MouseEvents');
        event.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    }

    aLink.dispatchEvent(event);
}
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var upload_listvue_type_script_lang_js_ = ({
    name: 'ElUploadList',

    mixins: [locale["a" /* default */]],

    data: function data() {
        return {
            focusing: false
        };
    },


    computed: {
        error: function error() {
            var errorImg = this.errorImg;

            return errorImg ? 'this.src="' + errorImg + '"; this.onerror=null;' : '';
        }
    },

    components: { ElProgress: external_element_ui_["Progress"] },

    props: {
        errorImg: String,
        // 服务器 baseURL
        serverUrl: {
            type: String,
            default: ''
        },
        showUploadIcon: Boolean,
        showOne: Boolean,
        defaultOpt: Object,
        files: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        disabled: {
            type: Boolean,
            default: false
        },
        handlePreview: Function,
        listType: String
    },
    methods: {
        parsePercentage: function parsePercentage(val) {
            return parseInt(val, 10);
        },
        handleClick: function handleClick(file) {
            this.handlePreview && this.handlePreview(file);
        },

        fileSize: fileSize,
        write2Class: write2Class
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_listvue_type_script_lang_js_ = (upload_listvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_upload_listvue_type_script_lang_js_,
  upload_listvue_type_template_id_173fedf5_render,
  upload_listvue_type_template_id_173fedf5_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/upload/src/upload-list.vue"
/* harmony default export */ var upload_list = (component.exports);
// EXTERNAL MODULE: external "babel-helper-vue-jsx-merge-props"
var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(44);
var external_babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);

// CONCATENATED MODULE: ./packages/upload/src/ajax.js
function getError(action, option, xhr) {
  var msg = void 0;
  if (xhr.response) {
    msg = '' + (xhr.response.error || xhr.response);
  } else if (xhr.responseText) {
    msg = '' + xhr.responseText;
  } else {
    msg = 'fail to post ' + action + ' ' + xhr.status;
  }

  var err = new Error(msg);
  err.status = xhr.status;
  err.method = 'post';
  err.url = action;
  return err;
}

function getBody(xhr) {
  var text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }

  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}

function ajax_upload(option) {
  if (typeof XMLHttpRequest === 'undefined') {
    return;
  }

  var xhr = new XMLHttpRequest();
  var action = option.action;

  if (xhr.upload) {
    xhr.upload.onprogress = function progress(e) {
      if (e.total > 0) {
        e.percent = e.loaded / e.total * 100;
      }
      option.onProgress(e);
    };
  }

  var formData = new FormData();

  if (option.data) {
    Object.keys(option.data).forEach(function (key) {
      formData.append(key, option.data[key]);
    });
  }

  formData.append(option.filename, option.file, option.file.name);

  xhr.onerror = function error(e) {
    option.onError(e);
  };

  xhr.onload = function onload() {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(action, option, xhr));
    }

    option.onSuccess(getBody(xhr));
  };

  xhr.open('post', action, true);

  if (option.withCredentials && 'withCredentials' in xhr) {
    xhr.withCredentials = true;
  }

  var headers = option.headers || {};

  for (var item in headers) {
    if (headers.hasOwnProperty(item) && headers[item] !== null) {
      xhr.setRequestHeader(item, headers[item]);
    }
  }
  xhr.send(formData);
  return xhr;
}
// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&
var upload_draggervue_type_template_id_7ebbf219_render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    {
      class: { "el-upload-dragger": true, "is-dragover": _vm.dragover },
      on: {
        drop: function($event) {
          $event.preventDefault()
          return _vm.onDrop($event)
        },
        dragover: function($event) {
          $event.preventDefault()
          return _vm.onDragover($event)
        },
        dragleave: function($event) {
          $event.preventDefault()
          _vm.dragover = false
        }
      }
    },
    [_vm._t("default")],
    2
  )
}
var upload_draggervue_type_template_id_7ebbf219_staticRenderFns = []
upload_draggervue_type_template_id_7ebbf219_render._withStripped = true


// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var upload_draggervue_type_script_lang_js_ = ({
    name: "ElUploadDrag",
    props: {
        disabled: Boolean
    },
    inject: {
        uploader: {
            default: ""
        }
    },
    data: function data() {
        return {
            dragover: false
        };
    },

    methods: {
        onDragover: function onDragover() {
            if (!this.disabled) {
                this.dragover = true;
            }
        },
        onDrop: function onDrop(e) {
            if (this.disabled || !this.uploader) return;
            var accept = this.uploader.accept;
            this.dragover = false;
            if (!accept) {
                this.$emit("file", e.dataTransfer.files);
                return;
            }
            this.$emit("file", [].slice.call(e.dataTransfer.files).filter(function (file) {
                var type = file.type,
                    name = file.name;

                var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
                var baseType = type.replace(/\/.*$/, "");
                return accept.split(",").map(function (type) {
                    return type.trim();
                }).filter(function (type) {
                    return type;
                }).some(function (acceptedType) {
                    if (/\..+$/.test(acceptedType)) {
                        return extension === acceptedType;
                    }
                    if (/\/\*$/.test(acceptedType)) {
                        return baseType === acceptedType.replace(/\/\*$/, "");
                    }
                    if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                        return type === acceptedType;
                    }
                    return false;
                });
            }));
        }
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_draggervue_type_script_lang_js_ = (upload_draggervue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue





/* normalize component */

var upload_dragger_component = Object(componentNormalizer["a" /* default */])(
  src_upload_draggervue_type_script_lang_js_,
  upload_draggervue_type_template_id_7ebbf219_render,
  upload_draggervue_type_template_id_7ebbf219_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_dragger_api; }
upload_dragger_component.options.__file = "packages/upload/src/upload-dragger.vue"
/* harmony default export */ var upload_dragger = (upload_dragger_component.exports);
// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload.vue?vue&type=script&lang=js&







/* harmony default export */ var uploadvue_type_script_lang_js_ = ({
    inject: ["uploader"],

    components: {
        UploadDragger: upload_dragger
    },

    props: {
        type: String,
        size: [String, Number],
        showTrigger: Boolean,
        action: {
            type: String,
            required: true
        },
        name: {
            type: String,
            default: "file"
        },
        data: Object,
        headers: Object,
        withCredentials: Boolean,
        multiple: Boolean,
        accept: String,
        onStart: Function,
        onProgress: Function,
        onSuccess: Function,
        onError: Function,
        beforeUpload: Function,
        drag: Boolean,
        onPreview: {
            type: Function,
            default: function _default() {}
        },
        onRemove: {
            type: Function,
            default: function _default() {}
        },
        fileList: Array,
        autoUpload: Boolean,
        listType: String,
        httpRequest: {
            type: Function,
            default: ajax_upload
        },
        disabled: Boolean,
        limit: Number,
        onExceed: Function
    },

    data: function data() {
        return {
            mouseover: false,
            reqs: {}
        };
    },


    methods: {
        isImage: function isImage(str) {
            return str.indexOf("image") !== -1;
        },
        handleChange: function handleChange(ev) {
            var files = ev.target.files;
            if (!files) return;
            this.uploadFiles(files);
        },
        uploadFiles: function uploadFiles(files) {
            var _this = this;

            if (this.limit && this.fileList.length + files.length > this.limit) {
                this.onExceed && this.onExceed(files, this.fileList);
                return;
            }

            var postFiles = Array.prototype.slice.call(files);
            if (!this.multiple) {
                postFiles = postFiles.slice(0, 1);
            }

            if (postFiles.length === 0) {
                return;
            }

            postFiles.forEach(function (rawFile) {
                _this.onStart(rawFile);
                if (_this.autoUpload) _this.upload(rawFile);
            });
        },
        upload: function upload(rawFile) {
            var _this2 = this;

            this.$refs.input.value = null;

            // create-start author:lutz
            // size 文件大小的拦截
            var sizeBool = true;
            var size = this.size;
            if (size) {
                var sType = sizeType(size);

                if (sType === "[object String]") {
                    var val = parseFloat(size);
                    var ut = "B";
                    size.replace(/[a-zA-Z]/i, function ($1) {
                        ut = $1;
                        size = (unit[external_lodash_default.a.upperCase($1)] || 1) * val;
                    });
                    if (size < rawFile.size) {
                        this.$message.error("\u4E0A\u4F20\u6587\u4EF6\u8D85\u51FA" + val + ut);
                        sizeBool = false;
                    }
                } else if (sType === "[object Number]") {
                    if (size < rawFile.size) {
                        this.$message.error("\u4E0A\u4F20\u6587\u4EF6\u8D85\u51FA" + size + "B");
                        sizeBool = false;
                    }
                }
            }
            if (!sizeBool) {
                return this.onRemove(null, rawFile, sizeBool);
            }
            if (!this.beforeUpload) {
                return sizeBool && this.post(rawFile, sizeBool);
            }
            /* [code]
                if (!this.beforeUpload) {
                    return this.post(rawFile);
                }
            */
            // create-end

            var before = this.beforeUpload(rawFile, sizeBool);
            if (before && before.then) {
                before.then(function (processedFile) {
                    var fileType = Object.prototype.toString.call(processedFile);

                    if (fileType === "[object File]" || fileType === "[object Blob]") {
                        if (fileType === "[object Blob]") {
                            processedFile = new File([processedFile], rawFile.name, {
                                type: rawFile.type
                            });
                        }
                        for (var p in rawFile) {
                            if (rawFile.hasOwnProperty(p)) {
                                processedFile[p] = rawFile[p];
                            }
                        }
                        _this2.post(processedFile);
                    } else {
                        _this2.post(rawFile);
                    }
                }, function () {
                    _this2.onRemove(null, rawFile, sizeBool);
                });
            } else if (before !== false) {
                this.post(rawFile);
            } else {
                this.onRemove(null, rawFile, sizeBool);
            }
        },
        abort: function abort(file) {
            var reqs = this.reqs;

            if (file) {
                var uid = file;
                if (file.uid) uid = file.uid;
                if (reqs[uid]) {
                    reqs[uid].abort();
                }
            } else {
                Object.keys(reqs).forEach(function (uid) {
                    if (reqs[uid]) reqs[uid].abort();
                    delete reqs[uid];
                });
            }
        },
        post: function post(rawFile) {
            var _this3 = this;

            var uid = rawFile.uid;

            var options = {
                headers: this.headers,
                withCredentials: this.withCredentials,
                file: rawFile,
                data: this.data,
                filename: this.name,
                action: this.action,
                onProgress: function onProgress(e) {
                    _this3.onProgress(e, rawFile);
                },
                onSuccess: function onSuccess(res) {
                    _this3.onSuccess(res, rawFile);
                    delete _this3.reqs[uid];
                },
                onError: function onError(err) {
                    _this3.onError(err, rawFile);
                    delete _this3.reqs[uid];
                }
            };
            var req = this.httpRequest(options);
            this.reqs[uid] = req;
            if (req && req.then) {
                req.then(options.onSuccess, options.onError);
            }
        },
        handleClick: function handleClick() {
            if (!this.disabled) {
                this.$refs.input.value = null;
                this.$refs.input.click();
            }
        },
        handleKeydown: function handleKeydown(e) {
            if (e.target !== e.currentTarget) return;
            if (e.keyCode === 13 || e.keyCode === 32) {
                this.handleClick();
            }
        }
    },

    render: function render(h) {
        var handleClick = this.handleClick,
            drag = this.drag,
            name = this.name,
            handleChange = this.handleChange,
            multiple = this.multiple,
            accept = this.accept,
            listType = this.listType,
            uploadFiles = this.uploadFiles,
            disabled = this.disabled,
            handleKeydown = this.handleKeydown;

        var data = {
            class: {
                "el-upload": true
            },
            on: {
                click: handleClick,
                keydown: handleKeydown
            }
        };

        data.class["el-upload--" + listType] = true;

        return h(
            "div",
            external_babel_helper_vue_jsx_merge_props_default()([data, {
                attrs: { tabindex: "0" },
                directives: [{
                    name: "show",
                    value: this.showTrigger
                }]
            }]),
            [drag ? h(
                "upload-dragger",
                {
                    attrs: { disabled: disabled },
                    on: {
                        "file": uploadFiles
                    }
                },
                [this.$slots.default]
            ) : this.$slots.default, h("input", {
                "class": "el-upload__input",
                attrs: { type: "file",

                    name: name,

                    multiple: multiple,
                    accept: accept
                },
                ref: "input", on: {
                    "change": handleChange
                }
            })]
        );
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_uploadvue_type_script_lang_js_ = (uploadvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload.vue
var upload_render, upload_staticRenderFns




/* normalize component */

var upload_component = Object(componentNormalizer["a" /* default */])(
  src_uploadvue_type_script_lang_js_,
  upload_render,
  upload_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_api; }
upload_component.options.__file = "packages/upload/src/upload.vue"
/* harmony default export */ var src_upload = (upload_component.exports);
// EXTERNAL MODULE: ./src/mixins/migrating.js
var migrating = __webpack_require__(37);

// EXTERNAL MODULE: external "mime"
var external_mime_ = __webpack_require__(45);
var external_mime_default = /*#__PURE__*/__webpack_require__.n(external_mime_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-main.vue?vue&type=script&lang=js&







/* harmony default export */ var upload_mainvue_type_script_lang_js_ = ({
    name: "DgUpload",

    mixins: [migrating["a" /* default */]],

    components: {
        UploadList: upload_list,
        Upload: src_upload
    },

    provide: function provide() {
        return {
            uploader: this
        };
    },


    inject: {
        elForm: {
            default: ""
        }
    },

    props: {
        // 新增属性
        serverUrl: String,
        showTrigger: {
            type: Boolean,
            default: true
        },
        showUploadIcon: Boolean,
        showOne: Boolean,
        listSlot: Function,
        defaultOpt: Object,
        size: [String, Number],
        // 原有属性
        action: String,
        headers: {
            type: Object,
            default: function _default() {
                return {};
            }
        },
        data: Object,
        multiple: Boolean,
        name: {
            type: String,
            default: "file"
        },
        drag: Boolean,
        dragger: Boolean,
        withCredentials: Boolean,
        showFileList: {
            type: Boolean,
            default: true
        },
        accept: String,
        type: {
            type: String,
            default: "select"
        },
        beforeUpload: Function,
        beforeRemove: Function,
        onRemove: {
            type: Function,
            default: noop
        },
        onChange: {
            type: Function,
            default: noop
        },
        onPreview: {
            type: Function
        },
        onSuccess: {
            type: Function,
            default: noop
        },
        onProgress: {
            type: Function,
            default: noop
        },
        onError: {
            type: Function,
            default: noop
        },
        fileList: {
            type: Array,
            default: function _default() {
                return [];
            }
        },
        autoUpload: {
            type: Boolean,
            default: true
        },
        listType: {
            type: String,
            default: "text" // text,picture,picture-card
        },
        httpRequest: Function,
        disabled: Boolean,
        limit: Number,
        onExceed: {
            type: Function,
            default: noop
        },
        errorImg: String
    },

    data: function data() {
        return {
            uploadFiles: [],
            dragOver: false,
            draging: false,
            tempIndex: 1
        };
    },


    computed: {
        uploadDisabled: function uploadDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
        }
    },

    watch: {
        listType: function listType(type) {
            if (type === "picture-card" || type === "picture") {
                this.uploadFiles = this.uploadFiles.map(function (file) {
                    if (!file.url && file.raw) {
                        try {
                            file.url = URL.createObjectURL(file.raw);
                        } catch (err) {
                            console.error("[Element Error][Upload]", err);
                        }
                    }
                    return file;
                });
            }
        },

        fileList: {
            immediate: true,
            handler: function handler(fileList) {
                var _this = this;

                this.uploadFiles = fileList.map(function (item) {
                    item.type = item.type || typeBySuffix(item[_this.defaultOpt.name]);
                    item.uid = item.uid || Date.now() + _this.tempIndex++;
                    item.status = item.status || "success";
                    return item;
                });
            }
        }
    },

    methods: {
        handleStart: function handleStart(rawFile) {
            rawFile.uid = Date.now() + this.tempIndex++;
            var file = {
                status: "ready",
                name: rawFile.name,
                size: rawFile.size,
                type: external_mime_default.a.getExtension(rawFile.type),
                percentage: 0,
                uid: rawFile.uid,
                raw: rawFile
            };
            if (this.listType === "picture-card" || this.listType === "picture") {
                try {
                    file.url = URL.createObjectURL(rawFile);
                } catch (err) {
                    console.error("[Element Error][Upload]", err);
                    return;
                }
            }
            this.uploadFiles.push(file);
            this.onChange(file, this.uploadFiles);
        },
        handleProgress: function handleProgress(ev, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
                this.onProgress(ev, file, this.uploadFiles);
                file.status = "uploading";
                file.percentage = ev.percent || 0;
            }
        },
        handleSuccess: function handleSuccess(res, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
                file.status = "success";
                file.response = res;

                this.onSuccess(res, file, this.uploadFiles);
                this.onChange(file, this.uploadFiles);
            }
        },
        handleError: function handleError(err, rawFile) {
            var file = this.getFile(rawFile);
            var fileList = this.uploadFiles;

            file.status = "fail";

            fileList.splice(fileList.indexOf(file), 1);

            this.onError(err, file, this.uploadFiles);
            this.onChange(file, this.uploadFiles);
        },
        handleRemove: function handleRemove(file, raw, sizeBool) {
            var _this2 = this;

            if (raw) {
                file = this.getFile(raw);
            }
            var doRemove = function doRemove() {
                _this2.abort(file);
                var fileList = _this2.uploadFiles;
                fileList.splice(fileList.indexOf(file), 1);
                _this2.onRemove(file, fileList, sizeBool);
            };

            if (!this.beforeRemove) {
                doRemove();
            } else if (typeof this.beforeRemove === "function") {
                var before = this.beforeRemove(file, this.uploadFiles, sizeBool);
                if (before && before.then) {
                    before.then(function () {
                        doRemove();
                    }, noop);
                } else if (before !== false) {
                    doRemove();
                }
            }
        },
        getFile: function getFile(rawFile) {
            var fileList = this.uploadFiles;
            var target = void 0;
            fileList.every(function (item) {
                target = rawFile.uid === item.uid ? item : null;
                return !target;
            });
            return target;
        },
        abort: function abort(file) {
            this.$refs["upload-inner"].abort(file);
        },
        clearFiles: function clearFiles() {
            this.uploadFiles = [];
        },
        submit: function submit() {
            var _this3 = this;

            this.uploadFiles.filter(function (file) {
                return file.status === "ready";
            }).forEach(function (file) {
                _this3.$refs["upload-inner"].upload(file.raw);
            });
        },
        getMigratingConfig: function getMigratingConfig() {
            return {
                props: {
                    "default-file-list": "default-file-list is renamed to file-list.",
                    "show-upload-list": "show-upload-list is renamed to show-file-list.",
                    "thumbnail-mode": "thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan"
                }
            };
        }
    },

    beforeDestroy: function beforeDestroy() {
        this.uploadFiles.forEach(function (file) {
            if (file.url && file.url.indexOf("blob:") === 0) {
                URL.revokeObjectURL(file.url);
            }
        });
    },
    render: function render(h) {
        var uploadList = void 0;

        if (this.showFileList) {
            uploadList = h(
                upload_list,
                {
                    attrs: {
                        "server-url": this.serverUrl,
                        "show-upload-icon": this.showUploadIcon,
                        defaultOpt: this.defaultOpt,
                        disabled: this.uploadDisabled,
                        listType: this.listType,
                        files: this.uploadFiles,

                        handlePreview: this.onPreview,
                        "error-img": this.errorImg
                    },
                    on: {
                        "remove": this.handleRemove
                    }
                },
                [this.listSlot || this.$slots.list]
            );
        }

        var uploadData = {
            props: {
                'server-url': this.serverUrl,
                showTrigger: this.showTrigger,
                size: this.size,
                type: this.type,
                drag: this.drag,
                action: this.action,
                multiple: this.multiple,
                "before-upload": this.beforeUpload,
                "with-credentials": this.withCredentials,
                headers: this.headers,
                name: this.name,
                data: this.data,
                accept: this.accept,
                fileList: this.uploadFiles,
                autoUpload: this.autoUpload,
                listType: this.listType,
                disabled: this.uploadDisabled,
                limit: this.limit,
                "on-exceed": this.onExceed,
                "on-start": this.handleStart,
                "on-progress": this.handleProgress,
                "on-success": this.handleSuccess,
                "on-error": this.handleError,
                "on-preview": this.onPreview,
                "on-remove": this.handleRemove,
                "http-request": this.httpRequest
            },
            ref: "upload-inner"
        };

        var trigger = this.$slots.trigger || this.$slots.default;
        var uploadComponent = h(
            "upload",
            uploadData,
            [trigger]
        );

        return h("div", [this.$slots.uploadList, this.listType === "picture-card" ? uploadList : "", this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== "picture-card" ? uploadList : ""]);
    }
});
// CONCATENATED MODULE: ./packages/upload/src/upload-main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_upload_mainvue_type_script_lang_js_ = (upload_mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/upload-main.vue
var upload_main_render, upload_main_staticRenderFns




/* normalize component */

var upload_main_component = Object(componentNormalizer["a" /* default */])(
  src_upload_mainvue_type_script_lang_js_,
  upload_main_render,
  upload_main_staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var upload_main_api; }
upload_main_component.options.__file = "packages/upload/src/upload-main.vue"
/* harmony default export */ var upload_main = (upload_main_component.exports);
// EXTERNAL MODULE: ./src/mixins/emitter.js
var emitter = __webpack_require__(13);

// EXTERNAL MODULE: external "element-ui/lib/utils/popup/popup-manager"
var popup_manager_ = __webpack_require__(32);
var popup_manager_default = /*#__PURE__*/__webpack_require__.n(popup_manager_);

// EXTERNAL MODULE: external "viewerjs"
var external_viewerjs_ = __webpack_require__(38);
var external_viewerjs_default = /*#__PURE__*/__webpack_require__.n(external_viewerjs_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/main.vue?vue&type=script&lang=js&
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//










/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgUpload',

    mixins: [emitter["a" /* default */]],

    inject: {
        elForm: {
            default: ""
        },
        elFormItem: {
            default: ""
        }
    },

    components: {
        Upload: upload_main,
        ElDialog: external_element_ui_["Dialog"],
        ElButton: external_element_ui_["Button"],
        ElCarousel: external_element_ui_["Carousel"],
        ElCarouselItem: external_element_ui_["CarouselItem"]
    },

    props: {
        // form
        validateEvent: {
            type: Boolean,
            default: true
        },
        action: String,
        value: [String, Array],
        leaflet: Boolean,
        showOne: Boolean,
        disabled: Boolean,
        tipMsg: [String, Boolean],
        accept: String,
        size: [String, Number],
        limit: Number,
        fileList: Array,
        listType: {
            type: String,
            default: 'text'
        },
        seq: {
            type: String,
            default: ','
        },
        outputFormat: {
            type: String,
            default: 'String',
            validator: function validator(val) {
                return ['String', 'Array'].indexOf(val) !== -1;
            }
        },
        // 请求数据处理
        reqFunction: Function,
        // 响应的数据类型
        resFunction: Function,
        // 资源服务器前缀
        serverUrl: {
            type: String,
            default: ''
        },
        props: Object,
        valueName: String,
        labelName: String,
        // 是否展示缩放图标
        iconZoom: {
            type: Boolean,
            default: false
        },
        // 是否展示删除图标
        iconDelete: {
            type: Boolean,
            default: false
        },
        // 是否展示增加图标
        iconPlus: {
            type: Boolean,
            default: false
        },
        carouselHeight: {
            type: String,
            default: '120px'
        },
        onExceed: Function,
        onPreview: Function,
        onRemove: Function,
        onSuccess: Function,
        onProgress: Function,
        errorImg: String
    },

    data: function data() {
        return {
            index: 0,
            showbottom: 3,
            dialogImageUrl: '',
            // dialogVisible: false,
            imageUrlViewer: null
        };
    },


    computed: {
        carousel: function carousel() {
            return {
                autoplay: false,
                'indicator-position': 'none',
                arrow: 'never'
            };
        },
        error: function error() {
            var errorImg = this.errorImg;

            return errorImg ? 'this.src="' + errorImg + '"; this.onerror=null;' : '';
        },
        defaultOpt: function defaultOpt() {
            var _props = this.props,
                props = _props === undefined ? {} : _props,
                labelName = this.labelName,
                valueName = this.valueName;


            return {
                name: labelName || props.name || 'name',
                url: valueName || props.url || 'url'
            };
        },
        message: function message() {
            var tipMsg = this.tipMsg,
                size = this.size,
                accept = this.accept,
                limit = this.limit;


            if (tipMsg) {
                return tipMsg;
            }

            if (tipMsg === false) {
                return false;
            }

            var arr = [];

            if (accept) {
                arr.push('\u9650\u5236\u7C7B\u578B' + accept);
            }

            if (limit) {
                arr.push('\u9650\u5236\u9009\u62E9' + limit + '\u4E2A');
            }

            if (size) {
                var sType = sizeType(size);

                if (sType === '[object String]') {
                    arr.push('\u9650\u5236\u5927\u5C0F' + size);
                } else if (sType === '[object Number]') {
                    arr.push('\u9650\u5236\u5927\u5C0F' + fileSize(size));
                }
            }

            return '\u6587\u4EF6' + arr.join('、');
        },


        // 对数据进行处理
        imgList: function imgList() {
            var _this = this;

            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            return arr.map(function (item) {
                item._url = _this.getUrl(item);
                return item;
            });
        },
        fileLength: function fileLength() {
            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            return arr.length;
        },


        // 获取文件中列表的URL
        imageUrl: function imageUrl() {
            var value = this.value,
                fileList = this.fileList;

            var arr = this.fileValue(value || fileList);
            if (arr.length) {
                return this.getUrl(arr[arr.length - 1]);
            }
            return '';
        },
        _attrs: function _attrs() {
            var listType = this.listType,
                $attrs = this.$attrs,
                $props = this.$props;

            var attr = _extends({}, $attrs, $props);
            attr['errorImg'] = this.errorImg;
            attr.ref = 'upload';
            attr['onProgress'] = this._handleProgress;
            attr['onRemove'] = this._handleRemove;
            attr['onSuccess'] = this._handleSuccess;
            attr['onExceed'] = this._handleExceed;
            attr['onPreview'] = this._handlePreview;
            attr.action = this.action;
            attr['server-url'] = this.serverUrl;
            attr['fileList'] = this.fileValue(this.value || this.fileList);
            attr.defaultOpt = this.defaultOpt;

            if (['avatar', 'button', 'viewer', 'pictureList'].indexOf(listType) !== -1) {
                attr['listType'] = 'text';

                switch (listType) {
                    case 'button':
                        break;
                    case 'avatar':
                        attr['showFileList'] = false;
                        break;
                    case 'pictureList':
                        attr['showFileList'] = false;
                        break;
                    case 'viewer':
                        attr['listType'] = 'picture-card';
                        attr['onPreview'] = this._handleViewerPreview;
                        break;
                }
            }

            return attr;
        }
    },

    watch: {
        value: function value(val) {
            if (this.validateEvent) {
                this.dispatch('ElFormItem', 'el.form.change', [val]);
            }
        }
    },

    methods: {
        submit: function submit() {
            var _this2 = this;

            this.$nextTick(function () {
                _this2.$refs.upload.submit();
            });
        },
        abort: function abort(file) {
            var _this3 = this;

            this.$nextTick(function () {
                _this3.$refs.upload.abort(file);
            });
        },
        clearFiles: function clearFiles() {
            var _this4 = this;

            this.$nextTick(function () {
                _this4.$refs.upload.clearFiles();
            });
        },
        getImg: function getImg(url) {
            var serverUrl = this.serverUrl;

            return (/^\//.test(url) ? serverUrl + url : url
            );
        },
        getUrl: function getUrl(item) {
            var isFile = Object.prototype.toString.call(item.raw) === '[object File]';
            return item[this.defaultOpt.url] || isFile && URL.createObjectURL(item.raw) || '';
        },


        // value 或 fileList 的数据转换
        fileValue: function fileValue(val) {
            var _this5 = this;

            // 对象解构简化写法 const { name, url } = defaultOpt
            var _defaultOpt = this.defaultOpt,
                name = _defaultOpt.name,
                url = _defaultOpt.url,
                reqFunction = this.reqFunction,
                seq = this.seq;
            /*
            [BUG]
            描述
            如果没有更新 Upload (比如插入,删除等)，更新 Upload 父组件中的 $data 会造成 upload-list 重新渲
            原因
            这里不能深度拷贝，upload-list 中有 map 更新 fileList 数据
            */

            var arr = Object(data_convert["b" /* str2arr */])(val, seq, false);
            if (external_lodash_default.a.isString(val)) {
                arr.forEach(function (item) {
                    var _ref;

                    return _ref = {}, _ref[name] = null, _ref[url] = item, _ref._url = item, _ref;
                });
            } else {
                arr.forEach(function (item) {
                    if (!item[url]) {
                        var _url = _this5.getUrl(item);
                        item[url] = _url;
                        item._url = _url;
                    }
                });
            }
            return reqFunction ? reqFunction(arr) : arr;
        },


        // pictureList-start
        // 翻页
        pageturning: function pageturning(type) {
            var index = this.index,
                fileLength = this.fileLength;

            if (type === 'next') {
                this.index = index < fileLength - 1 ? index + 1 : fileLength - 1;
            } else {
                this.index = index > 0 ? index - 1 : 0;
            }
            this.handleIndicator(type, this.index);
        },


        // 查看
        handleZoomIn: function handleZoomIn() {
            var index = this.index,
                imgList = this.imgList,
                getUrl = this.getUrl;

            this.dialogImageUrl = getUrl(imgList[index]);
            // this.dialogVisible = true;
            this._handleViewerShow(index);
        },


        // 删除
        handleDelete: function handleDelete() {
            var index = this.index,
                imgList = this.imgList;

            var fileList = external_lodash_default.a.cloneDeep(imgList);
            var file = fileList.splice(index, 1);
            this.index = index > 0 ? index - 1 : 0;
            this.$refs.hrl.setActiveItem(this.index);
            this._handleRemove(file, fileList);
        },


        // 上传事件
        handlePlus: function handlePlus() {
            this.$refs.uploadBtn.click();
        },

        // pictureList-end

        handleIndicator: function handleIndicator(type, index) {
            var hrl = this.$refs.hrl;
            this.index = index;
            hrl.setActiveItem(index);
        },


        // 进度条控制
        _handleProgress: function _handleProgress(event, file, fileList) {
            this._handleChangeData(fileList);
            this.onProgress && this.onProgress(event, file, fileList);
        },
        _handleChangeData: function _handleChangeData(fileList) {
            var listType = this.listType,
                resFunction = this.resFunction;


            if (external_lodash_default.a.isArray(fileList) && fileList.length > 1) {
                if (listType === 'avatar') {
                    fileList = [fileList.pop()];
                }

                if (listType === 'pictureList' && this.leaflet) {
                    fileList = [fileList.pop()];
                }
            }
            this.$emit('input', resFunction ? this.resFunction(fileList) : fileList);
        },
        _handleSuccess: function _handleSuccess(res, file, fileList) {
            this._handleChangeData(fileList);
            this.onSuccess && this.onSuccess(res, file, fileList);
        },
        _handleRemove: function _handleRemove(file, fileList, sizeBool) {
            this._handleChangeData(fileList);
            this.onRemove && this.onRemove(file, fileList, sizeBool);
        },
        _handleExceed: function _handleExceed(files, fileList) {
            if (this.limit && !this.onExceed) {
                this.$message.warning('\u5F53\u524D\u9650\u5236\u9009\u62E9 ' + this.limit + ' \u4E2A\u6587\u4EF6\uFF0C\u672C\u6B21\u9009\u62E9\u4E86 ' + files.length + ' \u4E2A\u6587\u4EF6\uFF0C\u5171\u9009\u62E9\u4E86 ' + (files.length + fileList.length) + ' \u4E2A\u6587\u4EF6');
                return;
            }
            this.onExceed && this.onExceed(files, fileList);
        },
        _handlePreview: function _handlePreview(file) {
            var listType = this.listType,
                defaultOpt = this.defaultOpt,
                serverUrl = this.serverUrl;
            var name = defaultOpt.name,
                url = defaultOpt.url;


            if (file[url] && !this.onPreview && listType && listType.indexOf('picture-card') === -1) {
                linkDown(serverUrl + file[url], file[name]);
                return;
            }

            this.onPreview && this.onPreview(file);
        },
        _handleViewerPreview: function _handleViewerPreview(file, index) {
            // this.dialogVisible = true;
            this._handleViewerShow(index);
            this.index = index;
            this.onPreview && this.onPreview(file);
        },

        /**
         * 图片预览方法
         *
         * @param index
         * @return {boolean}
         * @private
         */
        _handleViewerShow: function _handleViewerShow(index) {
            // 检测是否存在图片文件
            if (!this.imageUrlViewer) return false;

            // 刷新图片数据
            this.imageUrlViewer.update();

            if (index === 'underfined') {
                this.imageUrlViewer.show();
            } else {
                this.imageUrlViewer.view(index);
            }
        }
    },

    mounted: function mounted() {
        var _this6 = this;

        this.$nextTick(function () {
            if (_this6.$refs.imageUrl) {
                _this6.imageUrlViewer = new external_viewerjs_default.a(_this6.$refs.imageUrl, {
                    zIndex: popup_manager_default.a.nextZIndex(),
                    zIndexInline: popup_manager_default.a.nextZIndex()
                });
            }
        });
    }
});
// CONCATENATED MODULE: ./packages/upload/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./packages/upload/src/main.vue





/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  mainvue_type_template_id_76177bbe_render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var main_api; }
main_component.options.__file = "packages/upload/src/main.vue"
/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./packages/upload/index.js


/* istanbul ignore next */
main.install = function (Vue) {
  Vue.component(main.name, main);
};

/* harmony default export */ var packages_upload = __webpack_exports__["default"] = (main);

/***/ })
/******/ ]);