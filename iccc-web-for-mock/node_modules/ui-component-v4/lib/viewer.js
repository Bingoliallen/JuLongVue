module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 63);
/******/ })
/************************************************************************/
/******/ ({

/***/ 1:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 32:
/***/ (function(module, exports) {

module.exports = require("element-ui/lib/utils/popup/popup-manager");

/***/ }),

/***/ 38:
/***/ (function(module, exports) {

module.exports = require("viewerjs");

/***/ }),

/***/ 63:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/viewer/src/main.vue?vue&type=template&id=7d3d3b4d&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { ref: "viewer", staticClass: "dg_viewer" },
    [
      _vm.$scopedSlots.listItem
        ? [_vm._t("listItem", null, { list: _vm.list })]
        : _vm._l(_vm.list, function(item, index) {
            return _c("span", { key: index, staticClass: "dg_viewer_item" }, [
              item instanceof Object
                ? _c("img", { attrs: { src: item.url, alt: item.title } })
                : _c("img", { attrs: { src: item } })
            ])
          })
    ],
    2
  )
}
var staticRenderFns = []
render._withStripped = true


// CONCATENATED MODULE: ./packages/viewer/src/main.vue?vue&type=template&id=7d3d3b4d&

// EXTERNAL MODULE: external "viewerjs"
var external_viewerjs_ = __webpack_require__(38);
var external_viewerjs_default = /*#__PURE__*/__webpack_require__.n(external_viewerjs_);

// EXTERNAL MODULE: external "element-ui/lib/utils/popup/popup-manager"
var popup_manager_ = __webpack_require__(32);
var popup_manager_default = /*#__PURE__*/__webpack_require__.n(popup_manager_);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/viewer/src/main.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//




var TOOLBAR_OPTIONS = {
    // {key: Boolean | Number | String | Function}，{key: {show: Boolean | Number, size: String, click: Function }}， sizes: "small", "medium" (default) and "large"
    zoomIn: 1,
    zoomOut: 1,
    oneToOne: 1,
    reset: 1,
    prev: 1,
    play: 1,
    next: 1,
    rotateLeft: 1,
    rotateRight: 1,
    flipHorizontal: 1,
    flipVertical: 1
};

/* harmony default export */ var mainvue_type_script_lang_js_ = ({
    name: 'DgViewer',
    props: {
        images: {
            type: [String, Object, Array]
        },
        visible: {
            type: Boolean,
            default: false
        },
        inline: {
            // 是否启用内联模式
            type: Boolean,
            default: false
        },
        button: {
            // 显示右上角的按钮
            type: Boolean,
            default: true
        },
        navbar: {
            // 导航栏的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示
            type: [Boolean, Number],
            default: 1
        },
        title: {
            // 标题的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示, Function: 自定义标题内容，[Number, Function]： Function(image, imageData)
            type: [Boolean, Number, Function, Array],
            default: 1
        },
        toolbarType: {
            // 工具栏的可见性 0/false：隐藏，1/true：显示，2：屏幕宽度大于768像素时显示，3：屏幕宽度大于992像素时显示，4：屏幕宽度大于1200像素时显示
            type: [Boolean, Number],
            default: 1
        },
        toolbarOptions: {
            // 工具栏按钮的可见性和布局
            type: Object
        },
        tooltipShow: {
            // 放大或缩小时图像比率（百分比）提示
            type: Boolean,
            default: true
        },
        movable: {
            // 是否可以移动图像
            type: Boolean,
            default: true
        },
        zoomable: {
            // 是否可以放大缩小图像
            type: Boolean,
            default: true
        },
        rotatable: {
            // 是否可以旋转图像
            type: Boolean,
            default: true
        },
        scalable: {
            // 是否可以翻转图像
            type: Boolean,
            default: true
        },
        transition: {
            // 是否启用transition
            type: Boolean,
            default: true
        },
        fullscreen: {
            // 是否可以查看原始图片大小
            type: Boolean,
            default: true
        },
        keyboard: {
            // 是否启用键盘
            type: Boolean,
            default: true
        },
        backdrop: {
            // 是否启用遮罩，static不可点击遮罩关闭
            type: [Boolean, String],
            default: true
        },
        loading: {
            // 加载图像时是否显示加载动画
            type: Boolean,
            default: true
        },
        loop: {
            // 是否启用循环
            type: Boolean,
            default: true
        },
        interval: {
            // 自动循环播放时间间隔
            type: Number,
            default: 5000
        },
        minWidth: {
            // 最小宽度
            type: Number,
            default: 200
        },
        minHeight: {
            // 最小高度
            type: Number,
            default: 200
        },
        zoomRatio: {
            // 鼠标缩放图像时的比率
            type: Number,
            default: 0.1
        },
        minZoomRatio: {
            // 最小缩放图像比率
            type: Number,
            default: 0.01
        },
        maxZoomRatio: {
            // 最大缩放图像比率
            type: Number,
            default: 100
        },
        zIndex: {
            // z-index值
            type: Number,
            default: function _default() {
                return popup_manager_default.a.nextZIndex();
            }
        },
        zIndexInline: {
            // 内联模式z-index值
            type: Number,
            default: function _default() {
                return popup_manager_default.a.nextZIndex();
            }
        },
        url: {
            // 占位图片
            type: [String, Function],
            default: 'src'
        },
        container: {
            // 插入位置
            type: [Element, String],
            Default: 'body'
        },
        filter: {
            // 顾虑器
            type: Function
        },
        toggleOnDblclick: {
            // 双击功能
            type: Boolean,
            default: true
        },
        value: {
            type: Number
        }
    },
    data: function data() {
        return {
            list: [],
            index: 0,
            toolbar: '',
            closed: false
        };
    },

    watch: {
        images: function images() {
            var _this = this;

            this.$nextTick(function () {
                _this.update();
            });
        },
        visible: function visible(newVal) {
            if (this.closed === newVal) return;
            this.closed = newVal;
            if (newVal) {
                this.show();
            } else {
                this.hide();
            }
        },
        index: function index() {
            this.$emit('input', this.index);
        },
        value: function value() {
            if (!this.value && this.value !== 0) return;
            this.view(this.value);
        }
    },
    created: function created() {
        var _this2 = this;

        this._optionsInit();
        this.$nextTick(function () {
            _this2._viewerInit();
        });
    },
    beforeDestroy: function beforeDestroy() {
        this.destroy();
    },

    methods: {
        _optionsInit: function _optionsInit() {
            if (this.images instanceof Array) {
                this.list = this.images;
            } else {
                this.list = [this.images];
            }
            this.index = this.value;
            if (this.toolbarOptions) {
                this.toolbar = Object.assign(TOOLBAR_OPTIONS, this.toolbarOptions);
            } else {
                this.toolbar = this.toolbarType;
            }
            this.closed = this.visible;
        },
        _viewerInit: function _viewerInit() {
            var _this3 = this;

            this.viewer = new external_viewerjs_default.a(this.$refs.viewer, {
                initialViewIndex: this.index,
                inline: this.inline,
                button: this.button,
                navbar: this.navbar,
                title: this.title,
                toolbar: this.toolbar,
                tooltip: this.tooltipShow,
                movable: this.movable,
                zoomable: this.zoomable,
                rotatable: this.rotatable,
                scalable: this.scalable,
                transition: this.transition,
                fullscreen: this.fullscreen,
                keyboard: this.keyboard,
                backdrop: this.backdrop,
                loading: this.loading,
                loop: this.loop,
                interval: this.interval,
                minWidth: this.minWidth,
                minHeight: this.minHeight,
                zoomRatio: this.zoomRatio,
                minZoomRatio: this.minZoomRatio,
                maxZoomRatio: this.maxZoomRatio,
                zIndex: this.zIndex,
                zIndexInline: this.zIndexInline,
                url: this.url,
                container: this.container,
                filter: this.filter,
                toggleOnDblclick: this.toggleOnDblclick,
                ready: function ready(event) {
                    // 初始化ready事件
                    _this3.$emit('ready', event);
                },
                show: function show(event) {
                    // 显示事件-开始
                    _this3.$emit('show', event);
                },
                shown: function shown(event) {
                    // 显示事件-结束
                    _this3.closed = true;
                    _this3.$emit('shown', event);
                    _this3.$emit('update:visible', true);
                },
                hide: function hide(event) {
                    // 隐藏事件-开始
                    _this3.$emit('hide', event);
                },
                hidden: function hidden(event) {
                    // 隐藏事件-结束
                    _this3.closed = false;
                    _this3.$emit('hidden', event);
                    _this3.$emit('update:visible', false);
                },
                view: function view(event) {
                    // 切换事件-开始
                    _this3.$emit('view', event);
                },
                viewed: function viewed(event) {
                    // 切换事件-结束
                    _this3.index = event.detail.index;
                    _this3.$emit('viewed', event);
                },
                zoom: function zoom(event) {
                    // 缩放事件-开始
                    _this3.$emit('zoom', event);
                },
                zoomed: function zoomed(event) {
                    // 缩放事件-结束
                    _this3.$emit('zoomed', event);
                }
            });
            if (this.visible) {
                this.show();
            }
        },

        // 显示 immediate = 是否立即显示
        show: function show(immediate) {
            this.viewer.show(immediate);
            return this;
        },

        // 隐藏 immediate = 是否立即隐藏
        hide: function hide(immediate) {
            this.viewer.hide(immediate);
            return this;
        },

        // 切换到图像到索引的图像位置，如果未显示灯箱，将首先显示灯箱。index = 索引
        view: function view(index) {
            this.viewer.view(index);
            return this;
        },

        // 上一张，如果未显示灯箱，将首先显示灯箱。 loop = 是否循环
        prev: function prev(loop) {
            this.viewer.prev(loop);
            return this;
        },

        // 下一张，如果未显示灯箱，将首先显示灯箱。 loop = 是否循环
        next: function next(loop) {
            this.viewer.next(loop);
            return this;
        },

        // 移动 offsetX = '在水平方向上移动尺寸（px）', offsetX = '在垂直方向移动尺寸（px）， 不填默认与offsetX相同'
        move: function move(offsetX, offsetY) {
            this.viewer.move(offsetX, offsetY);
            return this;
        },

        // 移动到 x = '在水平方向移动到（px）', y = '在垂直方向移动到（px）， 不填默认与x相同'
        moveTo: function moveTo(x, y) {
            this.viewer.moveTo(x, x);
            return this;
        },

        // 缩放 ratio = '缩放比例，正数放大，负数缩小'， hasTooltip = '是否显示提示'
        zoom: function zoom(ratio, hasTooltip) {
            this.viewer.zoom(ratio, hasTooltip);
            return this;
        },

        // 缩放到 ratio = '缩放到大小'， hasTooltip = '是否显示提示'
        zoomTo: function zoomTo(ratio, hasTooltip) {
            this.viewer.zoomTo(ratio, hasTooltip);
            return this;
        },

        // 旋转 ratio = '旋转角度，正数顺时针，负数逆时针'
        rotate: function rotate(degree) {
            this.viewer.rotate(degree);
            return this;
        },

        // 旋转到 ratio = '旋转到角度'
        rotateTo: function rotateTo(degree) {
            this.viewer.rotateTo(degree);
            return this;
        },

        // 拉伸 scaleX = '在水平方向上拉伸比例', scaleY = '在垂直方向拉伸比例， 不填默认与scaleX相同'
        scale: function scale(scaleX, scaleY) {
            this.viewer.scale(scaleX, scaleY);
            return this;
        },

        // 水平方向上拉伸 scaleX = '在水平方向上拉伸比例'
        scaleX: function scaleX(_scaleX) {
            this.viewer.scaleX(_scaleX);
            return this;
        },

        // 垂直方向上拉伸 scaleY = '在垂直方向上拉伸比例'
        scaleY: function scaleY(_scaleY) {
            this.viewer.scaleY(_scaleY);
            return this;
        },

        // 播放 fullscreen = '是否全屏'
        play: function play(fullscreen) {
            this.viewer.play(fullscreen);
            return this;
        },

        // 停止播放
        stop: function stop() {
            this.viewer.stop();
            return this;
        },

        // 进入模态模式
        full: function full() {
            this.viewer.full();
            return this;
        },

        // 退出模态模式
        exit: function exit() {
            this.viewer.exit();
            return this;
        },

        // 显示当前比例
        tooltip: function tooltip() {
            this.viewer.tooltip();
            return this;
        },

        // 切换到在自然大小
        toggle: function toggle() {
            this.viewer.toggle();
            return this;
        },

        // 初始化
        reset: function reset() {
            this.viewer.reset();
            return this;
        },

        // 更新
        update: function update() {
            this.viewer.update();
            return this;
        },

        // 销毁
        destroy: function destroy() {
            this.viewer.destroy();
        }
    }
});
// CONCATENATED MODULE: ./packages/viewer/src/main.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mainvue_type_script_lang_js_ = (mainvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(1);

// CONCATENATED MODULE: ./packages/viewer/src/main.vue





/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  src_mainvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "packages/viewer/src/main.vue"
/* harmony default export */ var main = (component.exports);
// CONCATENATED MODULE: ./packages/viewer/index.js


/* istanbul ignore next */
main.install = function (Vue) {
  Vue.component(main.name, main);
};

/* harmony default export */ var viewer = __webpack_exports__["default"] = (main);

/***/ })

/******/ });