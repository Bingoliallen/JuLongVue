/**
 * 树形组件
 * @Author: huangjq
 * @Date:   2019-02-28
 * @Project jz
 */
import { Tree } from "ui-component-v4";
import DataOp from "../../utils/zt-data";

export default {
    name: Tree.name,

    props: {
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        nodeKey: {
            type: String,
            default: "id",
            required: false
        },
        // 枚举
        enum: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        params: {
            type: Object,
            default: function() {
                return {};
            },
            required: false
        },
        // 是否使用扁平化数据
        flatData: {
            type: Boolean,
            default: false,
            required: false
        },
        // 不使用缓存
        noCache: {
            type: Boolean,
            default: true,
            require: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        // 在点击时展开节点
        expandOnClickNode: {
            type: Boolean,
            default: true,
            require: false
        }
    },

    watch: {
        // 表码
        code() {
            this.loadData(this.$props);
        },
        // 枚举
        enum() {
            this.loadData(this.$props);
        },
        // url
        url(){
            this.loadData(this.$props);
        }
    },

    mixins: [Tree],

    methods: {
        loadAsync: function(node, resolve) {
            this.params[this.valueName] = node.key;
            DataOp.fetchData(this.$props, data => {
                resolve(data);
            });
        },
        loadData(params) {
            DataOp.fetchData(params, response => {
                this.dataSource = !this.flatData ? response : DataOp.toTreeData(response, "code", "pCode", "children");
            });
        },
        initData() {
            this.loadData(this.$props);
        }
    },

    created() {
        this.initData();
    }
};
