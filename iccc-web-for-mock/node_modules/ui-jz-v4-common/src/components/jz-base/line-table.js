/**
 * 数据表格
 * @Author: huangjq
 * @Date:   2019-03-05
 * @Project jz
 */

import { LineTable } from "ui-component-v4";
import DataOp from "../../utils/zt-data";

export default {
    name: LineTable.name,

    props: {
        url: {
            type: String,
            default: "",
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        pagination: {
            type: Boolean,
            default: true,
            required: false
        },
        lazyLoad: {
            type: Boolean,
            default: false,
            required: false
        },
        vLoading: {
            type: Boolean,
            default: true
        },
        border: {
            type: Boolean,
            default: true,
            required: false
        },
        paginationProps: {
            type: Object,
            default: function() {
                return {
                    currentPage: 1,
                    pageSizes: [10, 20, 30],
                    pageSize: 10,
                    layout: "total, sizes, prev, pager, next, jumper"
                };
            }
        },
        isAutoPageSizes: {
            type: Boolean,
            default: false
        },
        condition: {
            type: [Array, Object],
            default: () => {}
        }
    },

    data() {
        return {
            _sort: {}
        };
    },

    computed: {},

    methods: {
        /**
         * 获取条件
         * @returns {{size: number | default.props.pageSize | {default, type} | default.watch.pageSize | {handler, immediate} | pagination.props.pageSize | *, searchCondition: string, page: number, sort: ({}|*)}}
         */
        getReqSearchCondition() {
            const condition = [];
            const searchCondition = this.condition;
            for (let key in searchCondition) {
                if (searchCondition[key].value) {
                    condition.push({
                        name: key,
                        op: searchCondition[key].op || "=",
                        value: searchCondition[key].value,
                        type: searchCondition[key].type || "",
                        format: searchCondition[key].format || ""
                    });
                }
            }
            return {
                page: this.paginationOptions.currentPage - 1,
                size: this.paginationOptions.pageSize,
                sort: this._sort,
                searchCondition: JSON.stringify(condition)
            };
        },
        /**
         * 当前页改变方法
         * @param val 当前页数
         */
        handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.loadData();
            this.$emit("change-current", val);
        },

        /**
         * 每页记录数改变方法
         * @param val 每页记录数
         */
        handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.loadData();
            this.$emit("change-size", val);
        },
        /**
         * 排序方法
         * @param column 用户当前选择的列
         */
        handleSortChange(column) {
            let columnName = column.prop;
            let order = column.order;
            this._sort = {};

            if ("descending" === order) {
                order = "desc";
            } else if ("ascending" === order) {
                order = "asc";
            } else {
                order = null;
            }
            if (order) {
                this._sort[columnName] = order;
            }
            this.loadData();
        },

        /**
         * 加载数据
         * @param params 请求参数
         */
        loadData(params) {
            if ("client" === this.pagingType && this.dataSource.length > 0) {
                return;
            }

            this.loadding = true;

            if (params && params.url) {
                this.url = params.url;
            }

            DataOp.reqTableData(this.$props, this.getReqSearchCondition()).then(({ data }) => {
                setTimeout(() => {
                    this.loadding = false;
                }, 200);

                let total = data.length;
                if (!this.pagination) {
                    this.dataSource = data;
                } else if (this.pagingType === "client") {
                    this.dataClient = data;
                } else {
                    this.dataSource = data.content;
                    total = data.totalElements;
                }
                this.paginationOptions.total = total;
            });
        },
        searchForm(params) {
            this.paginationOptions.currentPage = 1;
            this.loadData(params);
        },
        reload() {
            this.loadData();
        }
    },

    mixins: [LineTable],

    mounted() {},

    created() {
        if (!this.lazyLoad && this.dataSource.length <= 0) {
            this.loadData();
        }
    }
};
