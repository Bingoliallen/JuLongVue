/**
 * 单选下拉框
 * @Author: huangjq
 * @Date:   2019-02-27
 * @Project jz
 */
import { Select } from "ui-component-v4";
import DataOp from "../../utils/zt-data";
// import { data2type } from './utils/data-convert.js';

export default {
    name: Select.name,

    props: {
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        // 枚举
        enum: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        // 不使用缓存
        noCache: {
            type: Boolean,
            default: false,
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        onLoad: {
            type: Function,
            default: val => val,
            required: false
        },
        customData: {
            type: Array,
            default: () => []
        },
        labelName: {
            type: String,
            default: "label"
        },
        valueName: {
            type: String,
            default: "value"
        }
        // 输出的数据类型
        // outputFormat: {
        //     type: String,
        //     default: 'String',
        //     validator: function(val) {
        //         return ['String', 'Array'].indexOf(val) !== -1;
        //     }
        // }
    },
    mixins: [Select],
    data() {
        return {
            setCustomData: false
        };
    },
    watch: {
        // 表码
        code() {
            this.loadData(this.$props);
        },
        // 枚举
        enum() {
            this.loadData(this.$props);
        },
        // url
        url() {
            this.loadData(this.$props);
        }
    },
    computed: {

        // model: {
        //     get() {
        //         // 数据转换 mulitiple ? <Array> : <String>
        //         const { value, seq } = this;
        //         // return multiple ? str2arr(value, seq) : data2type(value, 'String', seq);

        //         return data2type(value, this.outputFormat, seq);
        //     },
        //     set(val) {
        //         const { outputFormat, seq } = this;
        //         this.$emit('input', data2type(val, outputFormat, seq));
        //     }
        // },
    },

    methods: {
        getLabel() {
            let obj = this.dataSource.find(item => item[this.valueName] === this.value);
            return obj ? obj[this.labelName] : "";
        },
        loadData(param) {
            DataOp.fetchData(param, data => {
                let result = data;
                if (!this.setCustomData) {
                    this.setCustomData = true;
                    result = this.customData.concat(data);
                }
                this.dataSource = this.onLoad(result)
            });
        },
        initData() {
            this.loadData(this.$props);
        }
    },
    created() {
        this.initData();
    }
};