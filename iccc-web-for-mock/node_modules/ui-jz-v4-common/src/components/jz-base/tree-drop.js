/**
 * 此处填写文件描述
 * @Author: huangjq
 * @Date:   2019-04-02
 * @Project jz
 */

import { TreeDrop } from "ui-component-v4";
import DataOp from "../../utils/zt-data";
// import request from "@/utils/request-base";
import axios from "axios";
import { fetchTree } from "../../api/jz-base";
import objectAssign from "ui-component-v4/src/utils/merge";
import _ from "lodash";

export default {
    name: TreeDrop.name,

    props: {
        data: {
            type: Array,
            default: () => [],
            required: false
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        curNodeId: {
            type: String,
            default: ""
        },
        lazyLoad: {
            type: Boolean,
            default: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        customData: {
            type: Array,
            default: () => []
        },
        cacheable: {
            type: Boolean,
            default: true,
            required: false
        },
        showCurNode: {
            type: Boolean,
            default: false,
            required: false
        },
        maxInduceNum: {
            type: Number,
            default: 500,
            required: false
        },
        debounceTime: {
            type: Number,
            default: 500
        },
        maxLevel: {
            type: Number,
            default: 100
        }
    },

    data() {
        return {
            timer: "",
            setCustomData: false,
            defaultTranslateData: [],
        };
    },

    watch: {
        // 表码
        code() {
            this.loadData(this.$props);
        },
        // 枚举
        enum() {
            this.loadData(this.$props);
        },
        // url
        url() {
            this.loadData(this.$props);
        },
        value:{
            immediate: true,
            handler(val){
                let { code, lazyLoad } = this;
                if (code && lazyLoad && val){
                    let value = val.split(',');
                    this.setTranslateData(this.$props,value);
                }
            }
        }
    },

    mixins: [TreeDrop],

    computed: {
        /**
         * 重写树形参数
         */
        treeBind() {
            let treeBind = objectAssign({}, this.treeProps, {
                data: this.dataSource,
                props: this.alias,
                "node-key": this.alias.value,
                "check-leaf": this.checkLeaf,
                "show-checkbox": this.radioType === "" && this.multiple,
                "radio-type": this.radioType,
                "filter-node-method": _.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                "check-strictly": this.checkStrictly,
                "highlight-current": true,
                "render-after-expand": false,
                "render-content": this.renderContent
            });
            if (this.lazyLoad) {
                treeBind["lazy"] = true;
                treeBind["load"] = this.lazyloads;
            }
            return treeBind;
        }
    },

    methods: {
        handleSelectFilerClose(bool) {
            const { val } = this;
            if (bool) {
                /*
                    BUG描述
                        form reset 多触发选中，照成父组件数据的change
                    修复：
                        this.value === '' 下拉打开的时候判断，清空选中数据
                */
                if (_.isEmpty(val) || val.length < 1) {
                    this.clearDeaulf();
                }
            } else {
                this.filterText = "";
            }

            //过滤文字为空，则加载全部,临时修改，正常应该是保留搜索文字和搜索结果
            // console.log(this);
            if (!bool /*&& this.$refs.tree.isEmpty*/) {
                this.handleSelectFiler("");
            }

            this.$emit("visible-change",bool)
        },
        /**
         * 懒加载数据
         */
        lazyloads(node, resolve) {
            if (this.maxLevel && node.level >= this.maxLevel) {
                return resolve([]);
            } else {
                let curNodeId = node.key ? node.key : "";
                if ((curNodeId && curNodeId != " ") || node.level < 1) {
                    let param = {
                        code: this.code || "",
                        curNodeId: curNodeId || this.curNodeId,
                        keyword: "",
                        notShowCurNode: node.level > 0
                    };
                    return this.loadData(Object.assign({}, this.$props, param), resolve).then(() => {
                        if (node.checked && !this.checkStrictly && this.multiple) {
                            this.$nextTick(() => {
                                const childNodeKeys = node.childNodes.map(item => item.key);
                                this.val = _.uniq([...this.value.split(this.seq), ...childNodeKeys]);
                            });
                        }
                    });
                } else {
                    return resolve([]);
                }
            }
        },

        loadData(params, resolve, query) {
            if (this.url) {
                DataOp.fetchData(params, data => {
                    this.dataSource = data;
                });
            } else {
                if (params.code) {
                    const _params = {
                        showCurNode: params.notShowCurNode ? false : this.showCurNode,
                        codeId: this.code,
                        induceValue: query || params.induceValue || this.induceValue,
                        maxInduceNum: this.maxInduceNum,
                        lazyLoad: this.lazyLoad,
                        curNodeId: params.curNodeId || this.curNodeId,
                        cacheable: this.cacheable
                            // async: this.async,
                            // induceValueMinLength: this.induceValueMinLength
                    };

                    return fetchTree(_params, this.module).then(({ data }) => {
                        if (!this.setCustomData) {
                            this.setCustomData = true;
                            data = this.customData.concat(data);
                        }
                        if (this.lazyLoad && resolve) {
                            resolve(data);
                        } else {
                            this.dataSource = data;

                            // 懒加载时重新渲染树前记录下已经选中的节点，然后渲染完成后勾选
                            const valArr = this.value.split(this.seq);
                            if (this.multiple) {
                                this.rerendering = true;

                                this.$nextTick(() => {
                                    this.$refs.tree.setCheckedKeys(valArr);
                                    this.rerendering = false;
                                });
                            }
                        }

                        this.$emit("loadEnd", data);
                    });
                }
            }
        },
        // 防抖
        debounce(method, wait) {
            let result,
                _this = this;
            let _debounce = function(...args) {
                return new Promise(resolve => {
                    let context = this;
                    if (_this.timer) {
                        clearTimeout(_this.timer);
                    }
                    _this.timer = setTimeout(() => {
                        _this.setCustomData = false;
                        result = method.apply(context, args);
                        resolve(result);
                    }, wait);
                });
            };

            // 扩展取消防抖
            _debounce.cancel = function() {
                clearTimeout(this.timer);
                this.timer = null;
            };

            return _debounce;
        },
        // 重写关键字搜索
        handleSelectFiler(query) {
            // if (!query) {
            //     this.dataSource =
            //     return;
            // }
            if (this.code) {
                this.debounce(this.loadData, this.debounceTime)(this.$props, "", query);
            } else {
                this.filterText = query;
            }
        },
        // 设置懒加载时需要预翻译的数据
        setTranslateData(params,value){
            const _params = {
                showCurNode: true,
                codeId: this.code,
                induceValue: params.induceValue || this.induceValue,
                maxInduceNum: this.maxInduceNum,
                lazyLoad: this.lazyLoad,
                curNodeId: params.curNodeId || this.curNodeId,
                cacheable: this.cacheable
                // async: this.async,
                // induceValueMinLength: this.induceValueMinLength
            };
            let requestArr = [];
            value.map(val=>{
                requestArr.push(fetchTree(Object.assign(_params,{curNodeId:params.curNodeId || this.curNodeId || val}), this.module))
            })
            this.defaultTranslateData = [];
            axios.all(requestArr)
            .then(axios.spread((...data)=>{
                data.forEach(res=>{
                    this.defaultTranslateData = this.defaultTranslateData.concat(res.data);
                })
            }))
        },
        initData() {
            this.loadData(this.$props);
        }
    },

    created() {
        if (!this.lazyLoad) {
            this.initData();
        }
    }
};
