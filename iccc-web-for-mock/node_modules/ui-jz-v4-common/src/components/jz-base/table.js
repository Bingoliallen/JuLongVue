/**
 * 数据表格
 * @Author: huangjq
 * @Date:   2019-03-05
 * @Project jz
 */

import { Table } from "ui-component-v4";
import DataOp from "../../utils/zt-data";

export default {
    name: "DgTable",

    props: {
        // 表格请求地址
        url: {
            type: String,
            default: "",
            required: false
        },
        // 表格请求方式
        method: {
            type: String,
            default: "post",
            required: false
        },
        // 是否开启分页
        pagination: {
            type: Boolean,
            default: true,
            required: false
        },
        // 懒加载
        lazyLoad: {
            type: Boolean,
            default: false,
            required: false
        },
        vLoading: {
            type: Boolean,
            default: true
        },
        condition: {
            type: [Array, Object],
            default: () => {}
        },
        sortProps: {
            type: Object,
            default: () => {}
        },
        defaultSort: {
            type: Object,
            default: () => {}
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        customCondition: {
            type: Function
        },
        // 请求数据后，将数据给表格之前进行操作的接口
        beforeQuest: {
            type: Function,
            default: res => res
        },

        // 发起查询前
        beforeSearch: {
            type: Function,
            default: conditions => conditions
        }
    },

    data() {
        return {
            _sort: {}
        };
    },

    computed: {},

    methods: {
        /**
         * 获取请求条件
         * @returns {{size: number | default.props.pageSize | {default, type} | default.watch.pageSize | {handler, immediate} | pagination.props.pageSize | *, searchCondition: string, page: number, sort: ({}|*)}}
         */
        getReqSearchCondition() {
            let finalConditions = {};
            if (this.customCondition) {
                finalConditions = this.customCondition(this.condition);
            } else {
                let conditions;
                conditions = this._getConditions();
                let reqSearchCondition = {
                    sort: JSON.stringify(this._getSort()),
                    searchCondition: JSON.stringify(conditions)
                };
                if (this.pagingType !== "client") {
                    let pageSize = this.paginationOptions.pageSize;
                    reqSearchCondition.page = this.paginationOptions.currentPage - 1;
                    reqSearchCondition.size = pageSize;
                }
                finalConditions = reqSearchCondition;
            }
            return finalConditions;
        },

        /**
         * 获取查询表单条件
         */
        _getConditions() {
            let searchCondition = this.condition;
            let conditions = [];
            const isConArr = searchCondition instanceof Array;
            let name = "";
            for (let key in searchCondition) {
                if (searchCondition[key].value || searchCondition[key].value === 0) {
                    name = isConArr ? searchCondition[key].name : key;
                    conditions.push({
                        name: name,
                        op: searchCondition[key].op || "=",
                        value: searchCondition[key].value,
                        type: searchCondition[key].type || "",
                        format: searchCondition[key].format || ""
                    });
                }
            }
            return conditions;
        },

        /**
         * 当前页改变方法
         * @param val 当前页数
         */
        handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.loadData();
            this.$emit("change-current", val);
        },

        /**
         * 每页记录数改变方法
         * @param val 每页记录数
         */
        handleSizeChange(val) {
            this.paginationOptions.currentPage = 1;
            this.paginationOptions.pageSize = val;
            this.loadData();
            this.$emit("change-size", val);
        },
        /**
         *
         * @private
         */
        _getSort() {
            let sort = {};
            if (this.sortColumn.property && this.sortColumn.order) {
                let order = null;
                if ("descending" === this.sortColumn.order) {
                    order = "desc";
                } else if ("ascending" === this.sortColumn.order) {
                    order = "asc";
                }
                sort[this.sortColumn.property] = order;
            } else if (this.defaultSort && this.defaultSort.prop && this.defaultSort.order) {
                let order = null;
                if ("descending" === this.defaultSort.order) {
                    order = "desc";
                } else if ("ascending" === this.defaultSort.order) {
                    order = "asc";
                }
                sort[this.defaultSort.prop] = order;
            }
            return sort;
        },
        /**
         * 排序方法
         * @param column 用户当前选择的列
         */
        _handleSortChange(column) {
            if (this.pagingType === "client") {
                // 不做操作
            } else {
                let columnName = column.prop;
                let order = column.order;
                this._sort = {};

                if ("descending" === order) {
                    order = "desc";
                } else if ("ascending" === order) {
                    order = "asc";
                } else {
                    order = null;
                }
                if (order) {
                    this._sort[columnName] = order;
                }
                this.loadData();
            }
        },

        /**
         * 客户端分页排序
         * @private
         */
        _filterData() {
            let conditions = this._getConditions();
            let oldDataLength = this.dataClient.length;
            if (this.orignData.length === 0) {
                this.orignData = this.dataClient;
            }
            let data = this.orignData.filter(item => {
                let flag = true;
                conditions.map(function(condition) {
                    let { name, value, op } = condition;
                    if (op === "=") {
                        if (item[name] != value) {
                            flag = false;
                        }
                    } else if (op === "!=") {
                        if (!(item[name] != value)) {
                            flag = false;
                        }
                    } else if (op === ">") {
                        if (!(item[name] > value)) {
                            flag = false;
                        }
                    } else if (op === "<=") {
                        if (!(item[name] <= value)) {
                            flag = false;
                        }
                    } else if (op === ">=") {
                        if (!(item[name] >= value)) {
                            flag = false;
                        }
                    } else if (op === "like") {
                        if (item[name].indexOf(value) < 0) {
                            flag = false;
                        }
                    } else if (op === "between") {
                        if (item[name] <= value[0] || item[name] >= value[1]) {
                            flag = false;
                        }
                    }
                });
                return flag;
            });
            !data && (data = []);
            this.paginationOptions.total = data.length;
            this.dataClient = data;
            let { total } = this.paginationOptions;
            if (oldDataLength !== total || total === 0) {
                this.paginationOptions.currentPage = 1;
            }
            // }
        },

        /**
         * 加载数据
         * @param params 请求参数
         */
        loadData(params) {
            if (
                "client" === this.pagingType &&
                this.orignData &&
                this.orignData.length > 0 &&
                (!params || (!params.isInit && !params.url))
            ) {
                this._filterData();
                this.$emit("loaded", this.dataClient);
                return Promise.resolve();
            }

            this.loadding = true;

            if (params && params.url) {
                this.url = params.url;
            }
            let conditions = this.getReqSearchCondition();
            conditions = this.beforeSearch(conditions);

            return DataOp.reqTableData(this.$props, conditions)
                .then(res => this.beforeQuest(res))
                .then(({ data }) => {
                    setTimeout(() => {
                        this.loadding = false;
                    }, 200);

                    const isArray = param => Object.prototype.toString.call(param) === "[object Array]";
                    let total = 0;
                    if (this.pagingType === "client" && isArray(data)) {
                        this.dataClient = data;
                        this.orignData = data;
                        total = data.length;
                    } else {
                        this.dataSource = data.content ? data.content : data;
                        total = data.content ? data.totalElements : isArray(data) ? data.length : 0;
                    }
                    this.paginationOptions.total = total;
                    this.$emit("loaded", data);
                });
        },
        searchForm(params = {}) {
            this.paginationOptions.currentPage = params.currentPage || 1;
            return this.loadData(params);
        },
        reload() {
            return this.loadData();
        },
        getDataStroe() {
            let data = [];
            if ("client" === this.pagingType) {
                data = this.dataClient;
            } else {
                data = this.dataSource;
            }
            return data;
        }
    },

    watch: {
        url(val) {
            this.searchForm({ url: val });
        }
    },
    mixins: [Table],

    mounted() {},

    created() {
        if (this.defaultSort) {
            this._sort = {};
            this._sort[this.defaultSort["prop"]] = this.defaultSort["order"];
        }
        if ("client" === this.pagingType && this.dataClient && this.dataClient.length > 0) {
            this.loadData({ isInit: true });
        } else if (!this.lazyLoad && this.dataSource.length <= 0) {
            this.loadData();
        }
    }
};
