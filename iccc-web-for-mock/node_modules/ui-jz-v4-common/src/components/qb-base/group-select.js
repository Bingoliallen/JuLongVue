/**
 * 分组选择器
 * @Author:
 * @Date:   2020/6/18 13:46
 * @Project qb
 */
import { GroupSelect } from "ui-component-v4";
import { DchooseApi } from "../../api/qb-base/DchooseApi"; //表码翻译api
import { ChooseGroupApi } from "../../api/qb-base/ChooseGroupApi"; //分组的api
import objectAssign from "ui-component-v4/src/utils/merge";
export default {
    name: "QbGroupSelect",
    props: {
        data: {
            type: Array,
            default: () => [],
            required: false
        },
        async: {
            type: Boolean,
            default: true
        },
        cacheable: {
            type: Boolean,
            default: true
        },
        curNodeId: {
            type: String,
            default: ""
        },
        induceValue: {
            type: String,
            default: ""
        },
        induceValueMinLength: {
            type: Number,
            default: 0
        },
        lazyLoad: {
            type: Boolean,
            default: true
        },
        maxInduceNum: {
            type: Number,
            default: 10
        },
        showCurNode: {
            type: Boolean,
            default: false
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        nodeKey: {
            type: String,
            default: "id",
            required: false
        },
        // sql
        sql: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        debounceTime: {
            type: Number,
            default: 500
        },
        maxLevel: {
            type: Number | String,
            default: ""
        },
        customData: {
            type: Array,
            default: () => []
        },
        loadingShow: {
            type: Boolean,
            default: false
        },
        //共享类型：不共享(none)、本单位(dept)、本级单位(same-dept)、自定义共享(custom)
        shareType: {
            type: String,
            default: "dept"
        },
        customShareCode: {
            type: String,
            default: ""
        },
        //用户信息
        userInfo: {
            type: Object,
            default: () => {},
            required: true
        },
        //编辑类型：无控制(none)、谁创建谁维护(self)、本单位用户可维护(dept)、本级单位用户可维护(same-dept)
        editType: {
            type: String,
            default: "dept"
        },
        //树结构自定义
        TreeProps: {
            type: Object,
            default: () => {
                return {
                    value: "id",
                    label: "name",
                    children: "children"
                };
            }
        },
        //自定义分组
        customGroup: {
            type: Boolean,
            default: false
        },
        //自定义常用
        customMost: {
            type: Boolean,
            default: false
        },
        valueName: {
            type: String,
            default: "id"
        },
        labelName: {
            type: String,
            default: "label"
        },
        childrenName: {
            type: String,
            default: "children"
        }
    },

    data() {
        return {
            timer: "",
            setCustomData: false,
            groupDataSource: [],
            chooseGroupApi: new ChooseGroupApi(this.module)
        };
    },
    mixins: [GroupSelect],
    computed: {
        /**
         * shareCode
         */
        shareCode() {
            //默认取用户信息
            let shareType = this.shareType;
            let customShareCode = this.customShareCode;
            let result = this.userInfo.id;
            if (customShareCode) {
                result = customShareCode;
            } else if (shareType == "dept") {
                //用户单位代码
                result = this.userInfo.securityOrg;
            } else if (shareType == "same-dept") {
                //用户单位查询编码
                result = this.userInfo.shortSecurityOrg;
            }
            return result;
        },
        /**
         * 树参数绑定
         * @returns {*}
         */
        treeBind() {
            let result = {};
            if (this.lazyLoad) {
                result = {
                    lazy: true,
                    load: this.lazyloads
                };
            }
            return this._mergeTreeProps(objectAssign({}, this.treeProps, result));
        },
        /**
         * 分组数据
         * @returns {*}
         */
        groups() {
            let dataSource = this.customGroup ? this.groupData : this.groupDataSource;
            if (this.changedGroupData.length > 0) {
                dataSource = this.changedGroupData;
            } else if (this.isLocal) {
                dataSource = this._getLocalStorage("groupData");
            }
            return dataSource.map(group => group.id);
        },
        /**
         * 分组数据
         * @returns {*}
         */
        innerGroupData() {
            let dataSource = this.customGroup ? this.groupData : this.groupDataSource;
            if (this.changedGroupData.length > 0) {
                dataSource = this.changedGroupData;
            } else if (this.isLocal) {
                dataSource = this._getLocalStorage("groupData");
            }

            return dataSource.map(item => {
                item.children.map(leaf => {
                    leaf.id = item.id + "---" + leaf.id;
                });
                return { ...item, disabled: false };
            });
        }
    },
    mounted() {},

    methods: {
        /**
         * 懒加载数据
         */
        lazyloads(node, resolve) {
            if (this.maxLevel && node.level >= this.maxLevel) {
                return resolve([]);
            } else {
                let curNodeId = node["data"] ? node["data"]["id"] : "";
                if ((curNodeId && curNodeId != " ") || node.level < 1) {
                    let param = {
                        code: this.code || "",
                        curNodeId: curNodeId || this.curNodeId,
                        induceValue: ""
                    };
                    this.loadData(Object.assign({}, this.$props, param), resolve);
                } else {
                    return resolve([]);
                }
            }
        },
        /**加载树数据
         * @param params
         * @param resolve
         * @param query
         */
        loadData(params, resolve, query) {
            if (params.code) {
                let dChooseApi = new DchooseApi(params.module);
                const _params = {
                    async: this.async,
                    cacheable: this.cacheable,
                    curNodeId: params.curNodeId || this.curNodeId,
                    induceValue: query || params.induceValue || this.induceValue,
                    induceValueMinLength: this.induceValueMinLength,
                    lazyLoad: this.lazyLoad,
                    maxInduceNum: this.maxInduceNum,
                    showCurNode: this.showCurNode,
                    codeId: this.code
                };
                dChooseApi.loadData(_params, this.loadingShow, data => {
                    let result = data;
                    if (!this.setCustomData) {
                        this.setCustomData = true;
                        result = this.customData.concat(data);
                    }
                    result = this.filterTree(result);
                    if (this.lazyLoad && resolve) {
                        resolve(result);
                    } else {
                        this.dataSource = result;
                    }
                    this.$emit("loadEnd", result);
                });
            }
        },
        /**
         * 树结构遍历
         */
        filterTree(allData) {
            let result = [];
            const _this = this;
            function filterFn(data) {
                data.map(item => {
                    result.push(
                        objectAssign({}, item, {
                            id: item[_this.TreeProps.value],
                            label: item[_this.TreeProps.label],
                            children: item[_this.TreeProps.children]
                        })
                    );
                    if (item[_this.TreeProps.children] && item[_this.TreeProps.children].length > 0) {
                        filterFn(item[_this.TreeProps.children]);
                    }
                });
            }
            filterFn(allData);
            return result;
        },
        /**
         * 防抖函数
         * @param method
         * @param wait
         * @returns {function(...[*]=): Promise<any>}
         */
        debounce(method, wait) {
            let result,
                _this = this;
            let _debounce = function(...args) {
                return new Promise(resolve => {
                    let context = this;
                    if (_this.timer) {
                        clearTimeout(_this.timer);
                    }
                    _this.timer = setTimeout(() => {
                        _this.setCustomData = false;
                        result = method.apply(context, args);
                        resolve(result);
                    }, wait);
                });
            };

            // 扩展取消防抖
            _debounce.cancel = function() {
                clearTimeout(this.timer);
                this.timer = null;
            };

            return _debounce;
        },
        /**
         * 搜索方法
         * @param query
         */
        handleSelectFiler(query) {
            //all面板的查询
            if (this.code && this.tabKey == "all") {
                this.debounce(this.loadData, this.debounceTime)(this.$props, "", query);
            } else {
                this.filterText = query;
            }
        },
        /**
         * 获取分组数据
         */
        getGroupData() {
            if (this.code && !this.isLocal && !this.customGroup) {
                this.chooseGroupApi.getUserGroup(this.code, this.shareCode, this.loading).then(({ data }) => {
                    if (data.status == "1") {
                        let groupDataSource = JSON.parse(JSON.stringify(data.data));
                        groupDataSource.map(group => {
                            //编辑类型，无控制(none)、谁创建谁维护(self)、本单位用户可维护(dept)、本级单位用户可维护(same-dept)
                            if (this.editType == "self") {
                                group.disabled = this.userInfo.id == group.userId ? false : true;
                            } else if (this.editType == "dept") {
                                group.disabled = this.userInfo.securityOrg == group.userDept ? false : true;
                            } else if (this.editType == "same-dept") {
                                group.disabled = group.userDept.startsWith(this.userInfo.shortSecurityOrg, 0)
                                    ? false
                                    : true;
                            }
                            group.children = group.children instanceof Array ? group.children : [];
                            if (group.disabled) {
                                group.children.map(item => {
                                    item.disabled = false;
                                });
                            } else {
                                group.children.map(item => {
                                    item.disabled = false;
                                });
                            }
                        });
                        this.$set(this, "groupDataSource", groupDataSource);
                    }
                });
            }
        },
        /**
         * 获取常用数据
         */
        getMostGroup() {
            const _this = this;
            if (this.code && !this.isLocal && !this.customMost) {
                this.chooseGroupApi.getMostGroup(this.code, this.userInfo.id, this.loading).then(({ data }) => {
                    if (data.status == "1") {
                        let dataSource = data.data;
                        this.innerMostData = dataSource;
                        if (this.useMost) {
                            _this.$nextTick(() => {
                                const checkedKeys = _this.getRef("tree").getCheckedKeys();
                                _this.getRef("mostTree").setCheckedKeys(checkedKeys);
                            });
                        }
                    }
                });
            }
        },
        /**
         * 保存分组
         */
        handleSaveGroup(data) {
            this.saveGroup(Array.isArray(data) ? data : [data]).then(({ data }) => {
                if (data.status == "1") {
                    !this.isLocal && this.$emit("save-group", data);
                }
            });
        },
        /**
         * 删除分组
         */
        handleDeleteGroup(id) {
            this.chooseGroupApi.delUserGroup(id, this.loading).then(({ data }) => {
                if (data.status == "1") {
                    !this.isLocal && this.$emit("delete-group", id);
                }
            });
        },
        /**
         * 分组数据拖拽后触发事件
         */
        handleAfterGrag(groupData) {
            this.saveGroup(groupData).then(({ data }) => {
                if (data.status == "1") {
                    !this.isLocal && this.$emit("after-grag", groupData);
                }
            });
        },
        /**
         * 保存分组
         */
        saveGroup(group) {
            let param = {
                base: {
                    userId: this.userInfo.id,
                    userName: this.userInfo.name,
                    userDept: this.userInfo.securityOrg,
                    codeId: this.code,
                    shareCode: this.shareCode
                },
                groups: group
            };
            return this.chooseGroupApi.saveUserGroup(param, this.loading);
        },
        /**
         * 更新点击次数
         */
        updateCheckCount(data) {
            const _this = this;
            let tmpObj = _this.innerMostData.find(item => {
                return item.id === data.id;
            });
            if (tmpObj) {
                tmpObj.count += 1;
            } else {
                _this.innerMostData.push({ checked: true, id: data.id, label: data.label, count: 1 });
            }

            if (_this.isLocal) {
                //保存数据
                const mostData = _this.innerMostData.map(item => {
                    return { id: item.id, label: item.label, count: item.count };
                });
                _this._setLocalStorage(mostData, "mostData");
            }

            _this.$nextTick(() => {
                if (_this.multiple) {
                    _this.getRef("mostTree").setChecked(data.id, true);
                } else {
                    _this.getRef("mostTree").setCurrentKey(data.id);
                }
                this.sortMostTree();
            });
            this.saveMostGroup(data.id);
            _this.$emit(
                "add-click-times",
                _this.innerMostData.find(item => item.id == data.id)
            );
        },
        /**
         * 常用选项保存
         */
        saveMostGroup(codeValue) {
            let param = {
                userId: this.userInfo.id,
                codeId: this.code,
                codeValue: codeValue
            };
            return this.chooseGroupApi.saveMostGroup(param, this.loading);
        }
    },
    created() {
        this.getGroupData();
        this.getMostGroup();
    }
};
