/**
 * 树形组件
 * @Author:
 * @Date:   2019-04-02
 * @Project qb
 */
import { TreeDrop } from "ui-component-v4";
import { DchooseApi } from '../../api/qb-base/DchooseApi'//表码翻译api
import objectAssign from 'ui-component-v4/src/utils/merge';
import _ from "lodash";

export default {
    name: "QbTreeSelect",

    props: {
        data: {
            type: Array,
            default: () => [],
            required: false
        },
        async: {
            type: Boolean,
            default: true
        },
        cacheable: {
            type: Boolean,
            default: true
        },
        curNodeId: {
            type: String,
            default: ""
        },
        induceValue: {
            type: String,
            default: ""
        },
        induceValueMinLength: {
            type: Number,
            default: 0
        },
        lazyLoad: {
            type: Boolean,
            default: true
        },
        maxInduceNum: {
            type: Number,
            default: 10
        },
        showCurNode: {
            type: Boolean,
            default: false
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        nodeKey: {
            type: String,
            default: "id",
            required: false
        },
        // sql
        sql: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        debounceTime: {
            type: Number,
            default: 500
        },
        maxLevel: {
            type: Number|String,
            default: ''
        },
        customData:{
            type:Array,
            default: () => []
        },
        loadingShow:{
            type: Boolean,
            default: false
        }
    },

    data () {
        return {
            timer: "",
            setCustomData:false,
        }
    },

    mixins: [TreeDrop],
    computed: {
        /**
         * 重写树形参数
         */
        treeBind() {
             let treeBind=objectAssign({}, this.treeProps, {
                data: this.dataSource,
                props: this.alias,
                'node-key': this.alias.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': _.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-after-expand': false,
                'render-content': this.renderContent
            });
            if(this.lazyLoad){
                treeBind["lazy"]=true;
                treeBind["load"]=this.lazyloads;
            }
            return treeBind
        }
    },

    methods: {

        /**
         * 懒加载数据
         */
        lazyloads(node,resolve){
            if (this.maxLevel && node.level >= this.maxLevel) {
                return resolve([]);
            }else{
                let curNodeId=node["data"]?node["data"]["id"]:"";
                if((curNodeId && curNodeId!=" ")||node.level<1){
                    let param={
                        code:this.code||"",
                        curNodeId:curNodeId||this.curNodeId,
                        induceValue:"",
                        notShowCurNode:node.level>0
                    }
                    this.loadData( Object.assign({},this.$props,param),resolve);
                }else{
                    return resolve([]);
                }
            }
        },
        loadData(params, resolve,query) {
            if (params.code) {
                let dChooseApi = new DchooseApi(params.module);
                const _params = {
                    async: this.async,
                    cacheable: this.cacheable,
                    curNodeId: params.curNodeId||this.curNodeId,
                    induceValue: query||params.induceValue||this.induceValue,
                    induceValueMinLength: this.induceValueMinLength,
                    lazyLoad: this.lazyLoad,
                    maxInduceNum: this.maxInduceNum,
                    showCurNode: params.notShowCurNode ? false : this.showCurNode,
                    codeId: this.code,
                }
                dChooseApi.loadData(_params,this.loadingShow ,data => {
                    let result=data;
                    if(!this.setCustomData){
                        this.setCustomData=true;
                        result= this.customData.concat(data);
                    }
                    if(this.lazyLoad && resolve){
                        resolve(result);
                    }else{
                        this.dataSource = result;
                    }
                    this.$emit('loadEnd',result);
                });
            }
        },
        // 防抖
        debounce(method, wait) {
            let result, _this = this;
            let _debounce = function(...args) {
                return new Promise(resolve => {
                    let context = this;
                    if (_this.timer) {
                        clearTimeout(_this.timer);
                    }
                    _this.timer = setTimeout(() => {
                        _this.setCustomData=false;
                        result = method.apply(context, args);
                        resolve(result);
                    }, wait);
                })
            }

            // 扩展取消防抖
            _debounce.cancel = function() {
                clearTimeout(this.timer);
                this.timer = null;
            }

            return _debounce;
        },
        // 重写关键字搜索
        handleSelectFiler (query) {
            if (this.code) {
                this.debounce(this.loadData, this.debounceTime)(this.$props, "",query);
            } else {
                this.filterText = query;
            }
        },
        initData() {
            this.loadData(this.$props);
        }
    },

    created() {
        if(!this.lazyLoad){
            this.initData();
        }

    }
};
