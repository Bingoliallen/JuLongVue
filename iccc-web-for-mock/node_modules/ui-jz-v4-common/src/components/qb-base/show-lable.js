/**
 * 翻译组件支持表码翻译、日期翻译
 * @Author:
 * @Date:   2019-11-20
 * @Project qb
 */
import { BufferedCodedicApi } from "../../api/qb-base/BufferedCodedicApi"; //表码翻译api
import DateUtils from "../../utils/date-utils";
export default {
    name: "QbShowlable",
    props: {
        //绑定的数据
        values: {
            type: [String ,Number],
            default: ""
        },
        //2种类型CODE(表码)、DATE(日期)
        type: {
            type: String,
            default: "CODE"
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        //不使用缓存
        noCache: {
            type: Boolean,
            default: false,
            require: false
        },
        //是否显示title
        showTitle: {
            type: Boolean,
            default: true
        },
        //当type等于DATE时,显示格式
        format: {
            type: String,
            default: "yyyy-MM-dd"
        },
        //当type等于DATE时,值的类型Date、String
        valueType: {
            type: String,
            default: "String"
        },
        //当翻译的表码为空时是返回空,还是返回codeid原字段。
        isShowCodeId: {
            type: Boolean,
            default: true
        },
        loadingShow: {
            type: Boolean,
            default: false
        }
    },
    data() {
        return {
            codeData: "",
            dateUtils: DateUtils
        };
    },
    watch: {
        values() {
            this.codeData = ""; //表码数据
        }
    },
    computed: {
        /**
         * 计算结果值
         */
        result() {
            let values = this.values ? this.values : "";
            let codeData = this.codeData;
            //当type为Date
            if (values && values != "-") {
                if (this.type == "DATE") {
                    if (this.valueType == "String") {
                        values = this.dateUtils.strToDate(values, "", this.format);
                    } else {
                        let data = new Date(values);
                        values = this.dateUtils.format(data, this.format);
                    }
                    return values;
                    //当type为code表码时
                } else if (this.type == "CODE") {
                    codeData ? "" : this.loadData();
                    return this.codeData ? this.codeData : this.isShowCodeId ? this.values : this.codeData;
                }
            } else {
                //直接显示
                return values;
            }
        }
    },
    render(h) {
        let header = this.$slots.header;
        let footer = this.$slots.footer;
        return h(
            "span",
            {
                props: {
                    data: this.result
                },
                attrs: {
                    class: "showlable",
                    title: this.showTitle ? this.result : ""
                }
            },
            [
                header,
                this.$scopedSlots.default
                    ? this.$scopedSlots.default({
                          data: this.result
                      })
                    : this.result
                    ? this.result
                    : "-",
                footer
            ]
        );
    },
    methods: {
        /**
         * 数据加载的方法
         */
        loadData() {
            let codedicApi = new BufferedCodedicApi(this.module);
            let param={
                code:this.code,
                loadingShow:this.loadingShow,
                noCache:this.noCache
            }
            codedicApi.getMCS(param, this.values, data => {
                this.$emit("loadEnd", data);
                this.codeData = data;
            });
        }
    }
};
