/**
 * 情报的文件上传
 * @Author:
 * @Date:   2019-03-04
 * @Project qb
 */

import { Upload} from "ui-component-v4";
import { AttrachmentApi } from '../../api/qb-base/AttrachmentApi'//照片上传组件
const { getSetting } = window.systemParamsUtils;
const filterPath=function (the) {
    let module=the.$attrs.module?the.$attrs.module:"BASE_API";
    let modulePath=getSetting(module);
    return modulePath;
}
export default {
    name: 'QbUpload',
    props: {
        cardId:String,//身份证id获取照片
        listType: String,
        cardIdModule:{
            type: String,
            default: "NOAH_ARK"
        },
        //不立即保存
        noInstantSave:{
            type: Boolean,
            default: false
        },
        imgId:{
            type: String,
            default: ""
        },
        fileList: {
            type: Array,
            default() {
                return [];
            }
        },
        headers: {
            type: Object,
            default() {
                return { access_token: this.$store.getters.token };
            }
        },
        serverUrl: {
            type: String,
            default() {
                return ``;
            },
            required: false
        },
        // 上传的地址
        action: {
            type: String,
            default() {
                let modulePath=filterPath(this);
                let fileType=(this.$attrs.filetype)?this.$attrs.filetype:"ZP";
                let url=this.noInstantSave?`${modulePath}/fjUploader/upload`:`${modulePath}/fjUploader/uploadAndSave/${fileType}`;
                return url;
            },
            required: false
        },
        onSuccess: {
            type: Function,
            default: function(file, res, fileList) {
                res.id = file.id;
                res.url = file.url;
            },
            required: false
        },
        onExceed: {
            type: Function,
            default: function(files, fileList) {
                this.$message.warning(
                    `当前限制选择 ${this.limit} 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length +
                    fileList.length} 个文件`
                );
            },
            required: false
        },
        //响应数据
        resFunction: {
            type: Function,
            default: function (fileList) {
                const { noInstantSave } = this;
                const serverUrl = filterPath(this)
                const type = this.$attrs.filetype || "ZP";
                fileList.forEach(item => {
                    const response = item.response || {};
                    if (response.data) {
                        const id = noInstantSave ? response.data[0].id : response.data[0];
                        item.id = id;
                        item.url = `${serverUrl}/fjUploader/download/${type}-${id}`;
                    }
                });
                return fileList;
            },
            required: false
        },
        onRemove: {
            type: Function,
            default: function(file) {
                if(file && file.id && !this.noInstantSave) {
                    let type=(this.$attrs.filetype)?this.$attrs.filetype:"ZP";
                    let module = this.module ? this.module : "BASE_API";
                    let ApiBase = new AttrachmentApi(module);
                    ApiBase.delFiles(type, file.id,this.loadingShow);
                }
            }
        },
        loadingShow:{
            type: Boolean,
            default: false
        }
    },
    data() {
        return {
            module: this.$attrs.module
        };
    },
    watch: {
        fileList(val) {
            return val;
        },
        cardId(val){
            this.getCardidData(val);
        },
        imgId(val){
            this.getMsgidData(val);
        }
    },
    computed: {
    },

    methods: {
        handleSuccess(res, rawFile) {
            const file = this.getFile(rawFile);
            if (file) {
                file.status = "success";
                file.response = res;
                this.onSuccess(res, file, this.uploadFiles);
                this.onChange(file, this.uploadFiles);
            }
        },
        /*
         *通过身份证获取照片数据
         */
        getCardidData(val) {
            if(val){
                let showPhone = new AttrachmentApi(this.cardIdModule);
                showPhone.getDatabyCardid(val,this.loadingShow).then(res => {
                    let fileList=Array.isArray(this.value)?this.value:[];
                    if(res && res["data"]){
                        let imgPath=res["data"];
                            if(imgPath){
                                imgPath = imgPath.split(",");
                                imgPath.map((p,i) => {
                                    if (this.limit) {
                                        if (i < this.limit) {
                                            fileList.push({ name: 'zp' + i, url: p });
                                        }
                                    }else{
                                        fileList.push({ name: 'zp' + i, url: p });
                                    }
                                });
                            }
                    }
                    this.$emit('input',fileList);
                });
            }
        },
        /*
         通过id获取附件数据
         */
        getMsgidData(val) {
            let imageId=[];
            if(val != "-" && val) {
                let module = this.module ? this.module : "BASE_API";
                let type=(this.$attrs.filetype)?this.$attrs.filetype:"ZP";
                let ApiBase = new AttrachmentApi(module);
                imageId = val.split(",");
                ApiBase.loadFiles(type, imageId,this.loadingShow).then(res => {
                    let resData=res.data;
                    if(resData.status=="1"){
                        let souceData=resData.data;
                        let serverUrl=filterPath(this);
                        let fileList=Array.isArray(this.value)?this.value:[];
                        souceData.map((p,i)=>{
                            let url=`${serverUrl}/fjUploader/download/${type}-${p.id}`;
                            p.url=url;
                            p.name=p.fileName;
                            p.size=p.fileSize;
                            if (this.limit) {
                                if (i < this.limit) {
                                    fileList.push(p);
                                }
                            }else{
                                fileList.push(p);
                            }
                            //fileList.push(p);
                        });
                        fileList = this.filterArray(fileList);
                        this.$emit('input',fileList);
                    }
                });
            }
        },
        /**
         * 数组对象去重
         */
        filterArray(arr){
            const newArr = arr.map(item => {
                return {
                    ...item,
                    id: item.response ? item.response.data[0] : item.id
                };
            });
            const res = new Map();
            return newArr.filter((item) => !res.has(item.id) && res.set(item.id, 1));
        },
        /**
         * 清空当前列表
         */
        delList(ids,types){
            let filetype=(this.$attrs.filetype)?this.$attrs.filetype:"ZP";
            let module = this.module ? this.module : "BASE_API";
            let ApiBase = new AttrachmentApi(module);
            ApiBase.delFiles(filetype, ids, this.loadingShow).then(res => {
                let result=[];
                if(types!='clear'){
                    let fileList=Array.isArray(this.value)?this.value:[];
                    fileList.map(p =>{
                        if(ids.indexOf(p.id)==-1){
                            result.push(p);
                        }
                    });
                }
                this.$emit('input',result);
            });
        },
        /**
         * 清空当前列表
         */
        clear(){
            let result=[];
            let fileList=Array.isArray(this.value)?this.value:[];
            fileList.map(p=>{
                result.push(p.id);
            });
            result=result.join(",");
            if(result){
                this.delList(result,'clear');
            }
        },
    },
    mixins: [Upload],
    mounted() {},
    created() {
        if(this.cardId){
            this.getCardidData(this.cardId);
        }
        if(this.imgId){
            this.getMsgidData(this.imgId);
        }
    }
};

