/**
 * 时间轴
 * 添加url获取数据功能
 * @Author:
 * @Date:   2019-06-24
 * @Project qb
 */

import { TimeLine } from "ui-component-v4";
import { BufferedCodedicApi } from '../../api/qb-base/BufferedCodedicApi'//表码翻译api
export default {
    name: 'QbTimeLine',

    props: {
        data: {
            type: Array,
            default: () => [],
            required: false
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        // 枚举
        enum: {
            type: String,
            default: "",
            required: false
        },
        // sql
        sql: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        condition: {
            type: Object,
            default: () => ({}),
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        paginationProps: {
            type: Object,
            default: function() {
                return {
                    currentPage: 1,
                    pageSize: 10,
                    layout: "total, sizes, prev, pager, next, jumper"
                };
            }
        },
        loadingShow:{
            type: Boolean,
            default: false
        }
    },
    mixins: [TimeLine],

    data() {
        return {
            params: {}
        };
    },

    methods: {
        getReqSearchCondition() {
            return {
                searchCondition: this.condition,
                page: this.paginationOptions.currentPage - 1,
                size: this.paginationOptions.pageSize
            };
        },

        loadData(param) {
            param.params = this.getReqSearchCondition();
            let codedicApi=new BufferedCodedicApi(params.module);
            codedicApi.reqData(param, this.getReqSearchCondition()).then(({ data }) => {
                let total = 0;
                if (this.pagingType === "server") {
                    if (this.pagination) {
                        this.dataSource = data.content;
                    } else {
                        this.dataSource = data;
                    }
                    total = data.totalElements;
                } else {
                    this.dataClient = data;
                    total = data.length;
                }
                this.paginationOptions.total = total;
            });
        },
        initData() {
            this.loadData(this.$props);
        },
        getDataStore() {
            return this.dataSource;
        },

        /**
         * 倒序
         */
        reverse() {
            this.dataSource.reverse();
        },

        /**
         * 处理分页改变事件
         *
         */
        handlePageChange: function(val) {
            this.paginationOptions.currentPage = val;
            if (this.pagingType !== "client") {
                this.loadData(this.$props);
            }
        },

        /**
         * 分页切换
         *
         * @param val 当前页码
         */
        currentPage(val) {
            this.paginationOptions.currentPage = val;
            this.handlePageChange(val);
            this.$emit("current-page", val);
        },
        /**
         * 页数值改变方法
         *
         * @param evt
         */
        handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.handlePageChange(val);
            this.$emit("change-size", val);
        },
        /**
         * 当前页改变方法
         *
         * @param evt
         */
        handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.handlePageChange(val);
            this.$emit("change-current", val);
        },
        /**
         * 点击上一页
         *
         * @param evt
         */
        handlePrevClick(val) {
            this.paginationOptions.currentPage = val;
            this.handlePageChange(val);
            this.$emit("click-prev", val);
        },
        /**
         * 点击下一页
         *
         * @param evt
         */
        handleNextClick(val) {
            this.paginationOptions.currentPage = val;
            this.handlePageChange(val);
            this.$emit("click-next", val);
        }
    },

    created() {
        if (this.dataSource.length <= 0) {
            this.initData();
        }
    }
};
