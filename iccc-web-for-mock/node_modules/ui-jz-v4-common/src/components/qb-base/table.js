/**
 * 数据表格
 * @Author:
 * @Date:   2019-11-18
 * @Project qb
 */

import { Table } from "ui-component-v4";
import { QscApi } from "../../api/qb-base/QscApi"; //表格查询
//表格数据请求
export default {
    name: "QbTable",
    props: {
        //pdkId
        pdkId: {
            type: String,
            default: "",
            required: false
        },
        //升序、降序
        sorts: {
            type: Array,
            default: function() {
                return [];
            }
        },
        //升序、降序
        defaultSort: {
            type: Object,
            default: function() {
                return {};
            }
        },
        //查询参数
        paramMap: {
            type: Object,
            default: function() {
                return {};
            }
        },
        //查询条件
        condition: {
            type: Object,
            default: function() {
                return {};
            }
        },
        debounceTime: {
            type: Number,
            default: 500
        },
        messageSign: {
            type: String,
            default: "content"
        },
        totalSign: {
            type: String,
            default: "totalElements"
        },
        pagination: {
            type: Boolean,
            default: true,
            required: false
        },
        lazyLoad: {
            type: Boolean,
            default: false,
            required: false
        },
        border: {
            type: Boolean,
            default: true,
            required: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        paginationProps: {
            type: Object,
            default: function() {
                return {
                    currentPage: 1,
                    pageSizes: [5, 10, 20, 30, 40, 50],
                    pageSize: 10,
                    layout: "total, sizes, prev, pager, next, jumper"
                };
            }
        }
    },
    model: {
        prop: "pageSize",
        event: "changePageSize"
    },
    data() {
        return {
            timer: "",
            _sort: {}
        };
    },

    computed: {},
    methods: {
        /**
         * 排序方法
         * @param column 用户当前选择的列
         */
        _handleSortChange(column) {
            if (this.pagingType === "client") {
            } else {
                let columnName = column.prop;
                let order = column.order;
                this._sort = {};

                if ("descending" === order) {
                    order = "desc";
                } else if ("ascending" === order) {
                    order = "asc";
                } else {
                    order = null;
                }
                if (order) {
                    this._sort[columnName] = order;
                }
                this.loadData();
            }
        },
        /**
         * 客户端查询条件过滤
         * @private
         */
        _filterData() {
            let conditions = this.condition;
            let oldDataLength = this.dataClient.length;
            if (this.orignData.length === 0) {
                this.orignData = this.dataClient;
            }
            let data = this.orignData.filter(item => {
                let flag = true;
                Object.keys(conditions).map(key => {
                    if (key) {
                        let str = key.split("_");
                        if (str.length >= 2) {
                            let name = str[str.length - 1];
                            let op = str[str.length];
                            let value = conditions[key];
                            if (op === "eq") {
                                if (item[name] != value) {
                                    flag = false;
                                }
                            } else if (op === "ne") {
                                if (!(item[name] != value)) {
                                    flag = false;
                                }
                            } else if (op === "gt") {
                                if (!(item[name] > value)) {
                                    flag = false;
                                }
                            } else if (op === "le") {
                                if (!(item[name] <= value)) {
                                    flag = false;
                                }
                            } else if (op === "ge") {
                                if (!(item[name] >= value)) {
                                    flag = false;
                                }
                            } else if (op === "like") {
                                if (item[name].indexOf(value) < 0) {
                                    flag = false;
                                }
                            } else if (op === "rangeDate" || op === "rangeAge" || op === "rangeNumber") {
                                if (item[name] <= value[0] || item[name] >= value[1]) {
                                    flag = false;
                                }
                            }
                        }
                    }
                });
                return flag;
            });
            !data && (data = []);
            this.paginationOptions.total = data.length;
            this.dataClient = data;
            let { total, pageSize, currentPage } = this.paginationOptions;
            if (oldDataLength !== total || total === 0) {
                this.paginationOptions.currentPage = 1;
            }
        },
        /**
         * 当前页改变方法
         * @param val 当前页数
         */
        handleCurrentChange(val) {
            this.paginationOptions.currentPage = val;
            this.loadData();
            this.$emit("change-current", val);
        },

        /**
         * 每页记录数改变方法
         * @param val 每页记录数
         */
        handleSizeChange(val) {
            this.paginationOptions.pageSize = val;
            this.loadData({pageNum:1});
            this.$emit("change-size", val);
        },
        /**
         * 加载数据
         * @param params 请求参数
         */
        loadData(params) {
            if ("client" === this.pagingType && this.dataSource.length > 0 && (!params || !params.pdkId)) {
                this._filterData();
                return ;
            }
            if (params && params.pdkId) this.pdkId = params.pdkId;
            if(!this.pdkId)return;
            this.loadding = true;
            if (params && params.pageNum) this.paginationOptions.currentPage = params.pageNum;
            if (params && params.pageSize) this.paginationOptions.pageSize = params.pageSize;
            let QscApis = new QscApi(this.module);
            return QscApis.search({
                qschema: this.pdkId,
                pn: this.paginationOptions.currentPage,
                size: this.paginationOptions.pageSize,
                queryMap: this.condition,
                paramMap: this.paramMap,
                sorts: this.sorts
            }).then(data => {
                if (data.data.status == "1") {
                    let dataSouce = data.data.data;
                    setTimeout(() => {
                        this.loadding = false;
                    }, 200);
                    const isArray = param => Object.prototype.toString.call(param) === "[object Array]";
                    let total = 0;
                    if (this.pagingType === "client" && isArray(dataSouce[this.messageSign])) {
                        this.dataClient = dataSouce[this.messageSign];
                        this.orignData = dataSouce[this.messageSign];
                    } else {
                        this.dataSource = dataSouce[this.messageSign];
                        total = dataSouce[this.totalSign];
                    }
                    this.$set(this.paginationOptions,"total",total);
                }
                this.$emit("loaded", data.data);
            })
                .catch(function(error) {
                    this.$emit("httpCode", error.response.status);
                });
        },
        //上一页
        prev() {
            let pageNum = this.paginationOptions.currentPage + 1;
            if (pageNum > parseInt(this.paginationOptions.total/this.paginationOptions.pageSize)) {
                return false;
            } else {
                this.loadData({
                    pageNum: pageNum
                });
            }
        },
        //下一页
        next() {
            let pageNum = this.paginationOptions.currentPage - 1;
            if (pageNum < 1) {
                return false;
            } else {
                this.loadData({
                    pageNum: pageNum
                });
            }
        },
        reload() {
            return this.loadData();
        },
        searchForm(params = {}) {
            this.paginationOptions.currentPage = params.currentPage || 1;
            return this.loadData(params);
        },
        // 防抖
        debounce(method, wait) {
            let result, _this = this;
            let _debounce = function(...args) {
                return new Promise(resolve => {
                    let context = this;
                    if (_this.timer) {
                        clearTimeout(_this.timer);
                    }
                    _this.timer = setTimeout(() => {
                        result = method.apply(context, args);
                        resolve(result);
                    }, wait);
                })
            }

            // 扩展取消防抖
            _debounce.cancel = function() {
                clearTimeout(this.timer);
                this.timer = null;
            }

            return _debounce;
        },
    },

    watch: {
        pdkId(val) {
            this.searchForm({ pdkId: val });
        },
        condition: {
            handler: function(val) {
                this.$set(this.paginationOptions,"currentPage",1);
                this.debounce(this.loadData, this.debounceTime)();
            },
            deep: true
        }
    },
    mixins: [Table],

    mounted() {},

    created() {
        this.paginationOptions = Object.assign({}, this.paginationOptions, this.paginationProps);
        if (this.defaultSort) {
            this._sort = {};
            this._sort[this.defaultSort["prop"]] = this.defaultSort["order"];
        }
        if ("client" === this.pagingType && this.dataClient && this.dataClient.length > 0) {
            this.loadData({ isInit: true });
        } else if (!this.lazyLoad && this.dataSource.length <= 0) {
            this.loadData();
        }
    }
};
