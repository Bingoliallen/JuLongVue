/**
 * 树形组件
 * @Author:
 * @Date:   2019-02-28
 * @Project qb
 */
import { Tree } from "ui-component-v4";
// import DataOp from "../../utils/zt-data";
import { DchooseApi } from '../../api/qb-base/DchooseApi'
import objectAssign from "ui-component-v4/src/utils/merge";
//表码翻译api

export default {
    name: "QbTree",

    props: {
        async: {
            type: Boolean,
            default: true
        },
        cacheable: {
            type: Boolean,
            default: true
        },
        curNodeId: {
            type: String,
            default: ""
        },
        induceValue: {
            type: String,
            default: ""
        },
        induceValueMinLength: {
            type: Number,
            default: 0
        },
        lazyLoad: {
            type: Boolean,
            default: true
        },
        maxInduceNum: {
            type: Number,
            default: 10
        },
        showCurNode: {
            type: Boolean,
            default: true
        },
        // 表码
        code: {
            type: String,
            default: "",
            required: false
        },
        nodeKey: {
            type: String,
            default: "id",
            required: false
        },
        // sql
        sql: {
            type: String,
            default: "",
            required: false
        },
        // url
        url: {
            type: String,
            default: "",
            required: false
        },
        params: {
            type: Object,
            default: function() {
                return {};
            },
            required: false
        },
        //不使用缓存
        noCache: {
            type: Boolean,
            default: true,
            require: false
        },
        module: {
            type: String,
            default: "BASE_API"
        },
        //在点击时展开节点
        expandOnClickNode: {
            type: Boolean,
            default: false,
            require: false
        },
        debounceTime: {
            type: Number,
            default: 500
        },
        loadingShow:{
            type: Boolean,
            default: false
        }
    },
    computed: {
        /**
         * 重写树形参数
         */
        treeBind() {
            let treeBind=objectAssign({}, this.treeProps, {
                data: this.dataSource,
                props: this.defaultProp,
                'node-key': this.defaultProp.value,
                'check-leaf': this.checkLeaf,
                'show-checkbox': this.radioType === '' && this.multiple,
                'radio-type': this.radioType,
                'filter-node-method': _.isFunction(this.filterNodeMethod) ? this.filterNodeMethod : this.filterNode,
                'check-strictly': this.checkStrictly,
                'highlight-current': true,
                'render-content': this.renderContent
            });
            if(this.lazyLoad){
                treeBind["lazy"]=true;
                treeBind["load"]=this.lazyloads;
            }
            return treeBind;
        }
    },
    data () {
        return {
            setCustomData:false,
        }
    },

    mixins: [Tree],

    methods: {

        /**
         * 懒加载数据
         */
        lazyloads(node,resolve){
            if (this.maxLevel && node.level >= this.maxLevel) {
                return resolve([]);
            }else{
                let curNodeId=node["data"]?node["data"]["id"]:"";
                if((curNodeId && curNodeId!=" ")||node.level<1){
                    let param={
                        code:this.code||"",
                        curNodeId:curNodeId||this.curNodeId,
                        induceValue:"",
                        notShowCurNode:node.level>0
                    }
                    this.loadData(param,resolve);
                }else{
                    return resolve([]);
                }
            }
        },
        loadData(params, resolve,query) {
            if (params.code) {
                let dChooseApi = new DchooseApi(params.module);
                const _params = {
                    async: this.async,
                    cacheable: this.cacheable,
                    curNodeId: params.curNodeId||this.curNodeId,
                    induceValue: query||params.induceValue||this.induceValue,
                    induceValueMinLength: this.induceValueMinLength,
                    lazyLoad: this.lazyLoad,
                    maxInduceNum: this.maxInduceNum,
                    showCurNode: params.notShowCurNode ? false : this.showCurNode,
                    codeId: this.code,
                }
                dChooseApi.loadData(_params,this.loadingShow ,data => {
                    let result=data;
                    if(!this.setCustomData){
                        this.setCustomData=true;
                        result= this.customData.concat(data);
                    }
                    if(this.lazyLoad && resolve){
                        resolve(result);
                    }else{
                        this.dataSource = result;
                    }
                    this.$emit('loadEnd',result);
                });
            }
        },
        // 重写filter方法
        filter (value) {
            const filterNodeMethod = this.filterNodeMethod;
            const lazy = this.lazy;
            const traverse = function(node) {
                const childNodes = node.root ? node.root.childNodes : node.childNodes;
                childNodes.forEach(child => {
                    child.visible = filterNodeMethod.call(child, value, child.data, child);

                    traverse(child);
                });

                if (!node.visible && childNodes.length) {
                    let allHidden = true;
                    childNodes.forEach(child => {
                        if (child.visible) allHidden = false;
                    });

                    if (node.root) {
                        node.root.visible = allHidden === false;
                    } else {
                        node.visible = allHidden === false;
                    }
                }
                if (!value) return;

                if (node.visible && !node.isLeaf && !lazy) node.expand();
            };

            traverse(this);
        },
        initData() {
            this.loadData(this.$props);
        }
    },

    created() {
        if(!this.lazyLoad){
            this.initData();
        }
    }
};
