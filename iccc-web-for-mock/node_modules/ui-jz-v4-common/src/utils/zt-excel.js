// eslint-disable-next-line
/* eslint-disable */
import utils from "@/common/utils";
import DateUtils from "./date-utils";
import { Message } from 'element-ui';
const { ztData } = utils;
export default {
  //查取表码和枚举
  checkCode(acceptdata, metadata, params, isImport, callback) {
    let codeArr = [];   //获取需要的表码和枚举数据
    let uniqueCodeMap = {};
    metadata.forEach(item => {
      item.type = item.type ? item.type.toLowerCase() : "";
      var uniqueKey = item.type + "_" + item.format;
      if (item.type == "code" && !uniqueCodeMap[uniqueKey]) {
        codeArr.push({ code: item.format });
        uniqueCodeMap[uniqueKey] = true;
      }
      if (item.type == "enum" && !uniqueCodeMap[uniqueKey]) {
        codeArr.push({ enum: item.format });
        uniqueCodeMap[uniqueKey] = true;
      }
    });

    var fetched = 0;
    let codeMap = {};
    if (codeArr.length > 0) {
      codeArr.forEach(code => {
        let codeConfig = code;
        ztData.fetchData(codeConfig, data => {
          fetched++;
          var key = codeConfig.code ? "code_" + codeConfig.code : codeConfig.enum ? "enum_" + codeConfig.enum : "";
          let dataSource = {};
          if (data.length > 0) {
            data.forEach(item => {
              isImport? dataSource[item.label] = item.value : dataSource[item.value] = item.label
            });
          }
          codeMap[key] = dataSource;
          if (fetched == codeArr.length) {
            this.excelList = this.dataTransition(acceptdata, metadata, params, isImport, codeMap);
            callback(this.excelList);
          }
        });
      });
    } else {
      this.excelList = this.dataTransition(acceptdata, metadata, params, isImport, codeMap);
      callback(this.excelList);
    }
  },
  // 解析导入数据
  dataTransition(outdata, metadata, params, isImport, codeMap) {
    let importData = [];
    var uniqueMap = {};

    outdata.map(v => {
      let row = {};
      metadata.forEach(item => {
        let value = "";
        isImport? value = v[item.display] : value = v[item.name];;
        if (value) {
          if (item.converter) {
            value = item.converter(value);
          } else if ((item.type == 'code' || item.type == 'enum') && (!/^\w+$/.test(value) || /^\w+$/.test(value))) {
            var convertCode = codeMap[item.type + "_" + item.format][value];
            value = convertCode ? convertCode : value;
          } else if (item.type == 'date') {
            value = this.formatDate(value, item.format);
          }
          isImport? row[item.name] = value : row[item.display] = value;
        } else {
          isImport? row[item.name] = "" : row[item.display] = "";
        }
      });

      //根据filter传过来的过滤条件对数据进行过滤
      if (isImport == true) {
        var isValide = params.filter ? params.filter(row) : true;
        if (isValide) {
          var unique = params.unique || [];
          if (unique.length > 0) {
            var key = "";
            unique.forEach(uni => {
              key += row[uni];
            });
            if (key && !uniqueMap[key]) {
              uniqueMap[key] = true;
              importData.push(row);
            }
          } else {
            importData.push(row);
          }
        }
      } else {
        importData.push(row);
      }
    });
    return importData;
  },
  //日期格式转换
  formatDate(numb, format) {
    //判断值是不是date,是date直接进行转换
    if (typeof (numb) == 'object' && numb instanceof Date) {
      return DateUtils.format(numb, format);
    } else {
      numb = numb.toString();
      if (new RegExp("^(\\+)?\\d+(\\.\\d+)?$").test(numb)) {   //判断是否为数字
        if (numb.length == 5 || numb.slice(5, 6) == ".") {  //数字长度为5位或者为五位小数的数字'
          const time = new Date((numb - 1) * 24 * 3600000 + 1);
          time.setYear(time.getFullYear() - 70);
          const year = time.getFullYear() + "";
          const month = time.getMonth() + 1 + "";
          const date = time.getDate() - 1 + "";
          const hour = time.getHours() - 8 + "";
          const minute = time.getMinutes() + "";
          const second = time.getSeconds() + "";
          numb = (
            year +
            (month < 10 ? "0" + month : month) +
            (date < 10 ? "0" + date : date) + (hour < 10 ? "0" + hour : hour) + (minute < 10 ? "0" + minute : minute) + (second < 10 ? "0" + second : second)
          );
        } else if (numb.startsWith("1") && (numb.length == 13 || numb.length == 10) && /^\+?[1-9][0-9]*$/.test(numb)) {  //传过来的为时间戳
          if (numb.length == 10) {
            numb = numb + "000";
          }
          numb = new Date(parseInt(numb)).toLocaleString();  //转换为yyyymmddhhmmss格式
          numb = numb.replace(new RegExp("/", "gm"), "").replace(new RegExp(":", "gm"), "").replace(new RegExp("上午", "gm"), "").replace(new RegExp("下午", "gm"), "").replace(" ", "");
        } else {
          numb = this.formatNumb(numb);
        }
      } else {
        numb = this.formatNumb(numb);
      }
    }
    // numb = DateUtils.strToDate(numb,'yyyyMMddHHmmss',format.flase);
    numb = DateUtils.strToDate(numb, 'yyyyMMddHHmmss', format);
    return numb
  },
  formatNumb(numb) {
    numb = numb.replace(/\s+/g, "").replace("年", "#").replace("月", "#").replace("日", "#").replace("号", "#").replace("时", "#").replace("分", "#")
      .replace("秒", "#").replace(new RegExp("-", "gm"), "#").replace(new RegExp("：", "gm"), "#").replace(new RegExp(":", "gm"), "#").replace(new RegExp("/", "gm"), "#")
      .replace(new RegExp("\\.", "gm"), "#").replace(new RegExp(" ", "gm"), "#")
      .replace(new RegExp("　", "gm"), "#").replace(new RegExp(" {1,}", "gm"), "#").replace(new RegExp("#{2,}", "gm"), "#");
    let dateArr = numb.split("#");
    let dateStr = dateArr[0];// 年
    dateStr += dateArr.length > 1 ? dateArr[1].length == 1 ? "0" + dateArr[1] : dateArr[1] : "01";// 月
    dateStr += dateArr.length > 2 ? dateArr[2].length == 1 ? "0" + dateArr[2] : dateArr[2] : "01";// 日
    dateStr += dateArr.length > 3 ? dateArr[3].length == 1 ? "0" + dateArr[3] : dateArr[3] : "00";// 时
    dateStr += dateArr.length > 4 ? dateArr[4].length == 1 ? "0" + dateArr[4] : dateArr[4] : "00";// 分
    dateStr += dateArr.length > 5 ? dateArr[5].length == 1 ? "0" + dateArr[5] : dateArr[5] : "00";// 秒
    numb = dateStr;
    return numb
  },
  importExcel: function (file, metadata, params, callback) {
    //文件大小验证
    let isLt2M, isExcel = "";
    isLt2M = file.size / 1024 / 1024 < params.xlsxParams.limitSize;
    if (!isLt2M) {
      Message.error("上传文件大小不能超过要求大小!");
    }
    //文件类型验证
    let suffix = file.name.split('.').pop(); //获取数组最后一个值
    isExcel = params.xlsxParams.acceptType.includes(suffix);
    if (!isExcel) {
      Message.error("上传文件只能是 excel格式!");
    }
    if (isLt2M && isExcel) {
      return new Promise((resolve, reject) => {
        let that = this;
        var f = file;
        let isImport = true;    //是导入Excel
        var rABS = false // 是否将文件读取为二进制字符串
        var reader = new FileReader()
        FileReader.prototype.readAsBinaryString = function (f) {
          var binary = ''
          var rABS = false // 是否将文件读取为二进制字符串
          var wb // 读取完成的数据
          var outdata
          var reader = new FileReader()
          reader.onload = function (e) {
            var bytes = new Uint8Array(reader.result)
            var length = bytes.byteLength
            for (let i = 0; i < length; i++) {
              binary += String.fromCharCode(bytes[i])
            }
            if (rABS) {
              // eslint-disable-next-line no-undef
              wb = XLSX.read(btoa(fixdata(binary)), { // 手动转化
                type: 'base64'
              })
            } else {
              wb = XLSX.read(binary, {
                type: 'binary'
              })
            }
            outdata = XLSX.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]])
            that.checkCode(outdata, metadata, params, isImport, (importList) => {
              callback(importList);
            });
          }
          reader.readAsArrayBuffer(f)
        }
        if (rABS) {
          reader.readAsArrayBuffer(f)
        } else {
          reader.readAsBinaryString(f)
        }
      })
    }
  },
  /** @param params  导出参数
       {
          fileName:"重点人员信息", //导出的excel名称
          xlsxParams:{ //xlsx excel数据导出参数配置
              cols: [   { wpx: 150 },    //列宽
                          { wpx: 150 },
                          { wpx: 300 },
                          { wpx: 150 },
                          { wpx: 100 },
                          { wpx: 100 },
                          { wpx: 150 },
                          { wpx: 200 },
                          { wpx: 200 }
          },
          rows: []     //行高
       }
   */
  exportExcel: function (tableData, metadata, params) {
    const tHeader = [];
    return new Promise((resolve, reject) => {
      let isImport = false;
      this.checkCode(tableData, metadata, params, isImport, (importList) => {
        resolve(importList);
        const xlsxName = params.fileName;   //导出文件名
        //创建book
        var wb = XLSX.utils.book_new();
        //json转sheet
        var ws = XLSX.utils.json_to_sheet(importList, tHeader)
        //设置列宽
        ws['!cols'] = params.xlsxParams.cols
        //sheet写入book
        XLSX.utils.book_append_sheet(wb, ws, xlsxName)
        //输出
        XLSX.writeFile(wb, xlsxName + ".xlsx")
      });
    })
  },
}
