import axios from "axios";
import { Message, Loading } from "element-ui";
import store from "@/store";
import { getToken } from "@/utils/auth";
import { getSetting } from "./sys-settings";

console.log("BASE_API:" + getSetting("BASE_API"));
let loadingMap = {};
let loadingShow = function(config) {
    if (!config["loading"]) {
        return;
    }
    let loading = Loading.service({
        lock: true,
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.8)",
        text: "数据加载中..."
    });
    config.uuid = new Date().getTime() + "=" + config.url;
    loadingMap[config.uuid] = loading;
};
let loadingHide = function(config) {
    if (!config["loading"]) {
        return;
    }
    if (loadingMap[config.uuid]) {
        loadingMap[config.uuid].close();
    }
    delete loadingMap[config.uuid];
};
// create an axios instance
const service = axios.create({
    baseURL: getSetting("BASE_API"), // api 的 base_url
    timeout: getSetting("REQ_TIMEOUT") || 5000 // request timeout
});

// request interceptor
service.interceptors.request.use(
    config => {
        // Do something before request is sent
        if (store.getters.token) {
            // 让每个请求携带authorization-- ['authorization']为自定义key 请根据实际情况自行修改
            config.headers["access_token"] = getToken();
        }
        // config.headers["Content-Type"] = "application/x-www-form-urlencoded";
        // config.headers["X-Requested-With"] = "XMLHttpRequest";

        loadingShow(config);

        return config;
    },
    error => {
        // Do something with request error
        console.log(error); // for debug
        return Promise.reject(error);
    }
);

// response interceptor
service.interceptors.response.use(
    response => {
        loadingHide(response.config);
        return response;
    },
    error => {
        if (error.response.status === 403 && error.response.data.statusCode === "403") {
            let link = error.response.data.link;
            !link && (link = error.response.data.authorizeUrl);
            sessionStorage["authorizeUrl"] = link;

            //Oauth2登录方式
            let paramArr = [];
            paramArr.push(`response_type=code`);
            paramArr.push(`client_id=${getSetting("CLIENT_ID")}`);
            paramArr.push(`is_oauth=1`);
            paramArr.push(`loginPage=${getSetting("LOGIN_PAGE")}`);
            paramArr.push(`redirect_uri=${location.href}`);
            link += `/authorize?${paramArr.join("&")}`;
            link = link.replace("/authorize/authorize", "/authorize");

            window.location.href = link;
            return Promise.reject(link);
        }
        loadingHide(error.config);
        console.error("err" + error); // for debug
        return Promise.reject(error);
    }
);

export default service;
