/**
 * 此处填写文件描述
 * @Author: huangjq
 * @Date:   2019-03-29
 * @Project jz
 */
import request from "@/utils/request";
const { getSetting } = window.systemParamsUtils;

let Form = function(module = "BASE_API") {
    this.module = module;
    return new FormModel(this);
};

let FormModel = function(self) {
    this.module = self.module;
    this.$refs = self.$refs;
    this.$message = self.$message;
    this.$alert = self.$alert;
    this.$confirm = self.$confirm;
    this.$emit = self.$emit;
};

FormModel.prototype = {
    /**
     * 获取form表单的ref
     * @param refName 表单名
     * @return 表单名
     */
    _getRefName(refName) {
        if (!refName) {
            for (let item in this.$refs) {
                let $el = this.$refs[item].$el;
                if ($el && $el.tagName && $el.tagName.toUpperCase() === "FORM") {
                    refName = item;
                    break;
                }
            }
        }
        return refName;
    },

    /**
     * 提交表单
     * @param url 提交地址
     * @param refName 表单名称
     * @param postMethods 提交方法
     * @return {*}
     * @private true
     */
    _submitForm(url, refName, postMethods) {
        let result;
        refName = this._getRefName(refName);

        this.$refs[refName].validate(valid => {
            if (valid) {
                result = request({
                    url: url,
                    method: postMethods,
                    loading: true,
                    data: this.$refs[refName].model,
                    baseURL: this._getBaseURL(this.module)
                })
                    .then(response => {
                        return response;
                    })
                    .catch(response => {
                        return Promise.reject(response);
                    });
            } else {
                result = Promise.reject({
                    data: {
                        valid: valid,
                        message: "表单校验失败"
                    }
                });
            }
        });
        return result;
    },

    add(url, refName) {
        return this._submitForm(url, refName, "POST");
    },

    update(url, refName) {
        return this._submitForm(url, refName, "PUT");
    },

    delete(url, params) {
        return new Promise((resolve, reject) => {
            this.$confirm("确认删除？")
                .then(() => {
                    return request({
                        url: url,
                        method: "DELETE",
                        params: params,
                        loading: true,
                        baseURL: this._getBaseURL(this.module)
                    })
                        .then(response => {
                            resolve(response);
                        })
                        .catch(response => {
                            reject(response);
                        });
                })
                .catch(reason => {
                    return Promise.reject(reason);
                });
        });
    },

    load(url, params) {
        return request({
            url: url,
            method: "GET",
            params: params,
            loading: true,
            baseURL: this._getBaseURL(this.module)
        })
            .then(function(response) {
                return response;
            })
            .catch(response => {
                return Promise.reject(response);
            });
    },

    /**
     * 根据module获取上下文
     * @param module
     * @private
     */
    _getBaseURL(module) {
        if (module === "" || !module) {
            module = "BASE_API";
        }
        return getSetting(module);
    }
};

export default Form;
