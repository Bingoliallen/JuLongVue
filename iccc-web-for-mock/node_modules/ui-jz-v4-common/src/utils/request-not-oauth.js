import axios from "axios";
import { Loading } from "element-ui";
import store from "@/store";
const { getSetting } = window.systemParamsUtils;

const NEED_TO_LOGIN = {
    "9": "登出成功",
    "10": "未登录",
    "11": "登录超时",
    "13": "登出"
};

console.log("BASE_API:" + getSetting("BASE_API"));
let loadingMap = {};
let loadingShow = function(config) {
    if (!config["loading"]) {
        return;
    }
    let loading = Loading.service({
        lock: true,
        spinner: "el-icon-loading",
        background: "rgba(0, 0, 0, 0.8)",
        text: "数据加载中..."
    });
    config.uuid = new Date().getTime() + "=" + config.url;
    loadingMap[config.uuid] = loading;
};
let loadingHide = function(config) {
    if (!config["loading"]) {
        return;
    }
    loadingMap[config.uuid] && loadingMap[config.uuid].close();
    delete loadingMap[config.uuid];
};
// create an axios instance
const service = axios.create({
    baseURL: getSetting("BASE_API"), // api 的 base_url
    timeout: getSetting("REQ_TIMEOUT") || 5000 // request timeout
});

// request interceptor
service.interceptors.request.use(
    config => {
        config.headers["X-Requested-With"] = "XMLHttpRequest";
        loadingShow(config);

        return config;
    },
    error => {
        // Do something with request error
        console.log(error); // for debug
        Promise.reject(error);
    }
);

// response interceptor
service.interceptors.response.use(
    response => {
        loadingHide(response.config);
        const res = response.data;
        if (res.statusCode === "401") {
            window.location.href = res.link;
        }
        if (NEED_TO_LOGIN[res.statusCode]) {
            if (res.link) {
                if (res.loginType === "dids") {
                    res.link = res.link.replace(
                        "forwardUrl=",
                        "forwardUrl=" + encodeURIComponent(encodeURIComponent(window.location.href))
                    );
                } else if (res.loginType === "dcuc") {
                    res.link = res.link.replace(
                        "forwardUrl=",
                        "forwardUrl=" + encodeURIComponent(window.location.href)
                    );
                }
                window.location.href = res.link;
                return Promise.reject({ link: res.link });
            } else {
                //dssoac登录方式
                store.dispatch("FedLogout").then(() => {
                    if (!response.config.url.endsWith("/api/user/info")) {
                        location.reload(); // 为了重新实例化vue-router对象 避免bug
                    }
                });
            }
        } else {
            return response;
        }
    },
    error => {
        loadingHide(error.config);
        console.error("err" + error); // for debug
        return Promise.reject(error);
    }
);

export default service;
