// eslint-disable-next-line
/* eslint-disable */
let SIGN_REGEXP = /([yMdHsm])(\1*)/g;
let DEFAULT_PATTERN = 'yyyy-MM-dd';
function padding(s, len){
    len = len - (s + '').length;
    for (let i = 0; i < len; i++) { s = '0' + s; }
    return s;
}
export default {
    /**
     * 获取日期
     * days天数
     * outFmt输出格式
     */
    getData: function (days, outFmt) {
        let date = new Date();
        date.setDate(date.getDate() - days);
        return this.format(date,outFmt);
    },
    /**
     * 距离现在几分钟
     * dateTimeStamp时间戳
     */
    timeAgo:function (dateString,inFmt){
        let dateTimeStamp=this.strToDate(dateString,inFmt,'',true).getTime();
        let minute = 1000 * 60;
        let hour = minute * 60;
        let day = hour * 24;
        let week = day * 7;
        let month = day * 30;
        let now = new Date().getTime();   // 获取当前时间毫秒
        let diffValue = now - dateTimeStamp;// 时间差
        let result="";
        if (diffValue < 0){
            return;
        }
        let minC = diffValue/minute;  // 计算时间差的分，时，天，周，月
        let hourC = diffValue/hour;
        let dayC = diffValue/day;
        let weekC = diffValue/week;
        let monthC = diffValue/month;
        if (monthC >= 1 && monthC < 3){
            result = " " + parseInt(monthC) + "月前"
        } else if (weekC >= 1 && weekC < 3){
            result = " " + parseInt(weekC) + "周前"
        } else if (dayC >= 1 && dayC <6){
            result = " " + parseInt(dayC) + "天前"
        } else if (hourC >= 1 && hourC < 24){
            result = " " + parseInt(hourC) + "小时前"
        } else if (minC >= 1 && minC < 60){
            result =" " + parseInt(minC) + "分钟前"
        } else if (diffValue >= 0 && diffValue < minute){
            result = "刚刚"
        } else {
            let datetime = new Date();
            datetime.setTime(dateTimeStamp);
            let Nyear = datetime.getFullYear();
            let Nmonth = datetime.getMonth() + 1 < 10 ? "0" + (datetime.getMonth() + 1) : datetime.getMonth() + 1;
            let Ndate = datetime.getDate() < 10 ? "0" + datetime.getDate() : datetime.getDate();
            result = Nyear + "-" + Nmonth + "-" + Ndate
        }
        return result;
    },
    /*
    日期格式化
     */
    format: function (date, pattern) {
        pattern = pattern || DEFAULT_PATTERN;
        return pattern.replace(SIGN_REGEXP, function ($0) {
            switch ($0.charAt(0)) {
                case 'y':
                    return padding(date.getFullYear(), $0.length);
                case 'M':
                    return padding(date.getMonth() + 1, $0.length);
                case 'd':
                    return padding(date.getDate(), $0.length);
                case 'w':
                    return date.getDay() + 1;
                case 'H':
                    return padding(date.getHours(), $0.length);
                case 'm':
                    return padding(date.getMinutes(), $0.length);
                case 's':
                    return padding(date.getSeconds(), $0.length);
            }
        });
    },
    parse: function (dateString, pattern) {
        let matchs1 = pattern.match(SIGN_REGEXP);
        let matchs2 = dateString.match(/(\d)+/g);
        if (matchs1.length == matchs2.length) {
            let _date = new Date(1970, 0, 1);
            for (let i = 0; i < matchs1.length; i++) {
                let _int = parseInt(matchs2[i]);
                let sign = matchs1[i];
                switch (sign.charAt(0)) {
                    case 'y':
                        _date.setFullYear(_int);
                        break;
                    case 'M':
                        _date.setMonth(_int - 1);
                        break;
                    case 'd':
                        _date.setDate(_int);
                        break;
                    case 'H':
                        _date.setHours(_int);
                        break;
                    case 'm':
                        _date.setMinutes(_int);
                        break;
                    case 's':
                        _date.setSeconds(_int);
                        break;
                }
            }
            return _date;
        }
        return null;
    },
    strToDate: function (str, inFmt, outFmt,isDate) {
        if (str) {
            inFmt = inFmt ? inFmt : "yyyyMMddHHmmss";
            let date = new Date();
            // 获取年
            let yearStart = inFmt.indexOf("y");
            let yearEnd = inFmt.lastIndexOf("y");
            let year = str.substring(yearStart, yearEnd + 1);
            year && date.setYear(parseInt(year));

            // 获取月
            let monthStart = inFmt.indexOf("M");
            let monthEnd = inFmt.lastIndexOf("M");
            let month = str.substring(monthStart, monthEnd + 1);
            //bug:如果今天比转换月份最大天数大，会转换出错
            //month && date.setMonth(parseInt(month) - 1);
            if (month) {
                //获取当前月中的天数
                var nowDay = date.getDate();
                //获取待转换月份天数
                var dayInMonths = this.getDaysInMonth(year,parseInt(month));
                //如果当前月中天数大于待转换月份天数，转换月份天数设置为本月最后一天
                if (nowDay > dayInMonths) {
                    date.setDate(dayInMonths);
                }
                date.setMonth(parseInt(month) - 1);
            }


            // 获取日
            let dayStart = inFmt.indexOf("d");
            let dayEnd = inFmt.lastIndexOf("d");
            let day = str.substring(dayStart, dayEnd + 1);
            day && date.setDate(parseInt(day));

            // 获取时
            let hourStart = inFmt.indexOf("H");
            let hourEnd = inFmt.lastIndexOf("H");
            let hour = str.substring(hourStart, hourEnd + 1);
            hour && date.setHours(parseInt(hour));

            // 获取分
            let minStart = inFmt.indexOf("m");
            let minEnd = inFmt.lastIndexOf("m");
            let min = str.substring(minStart, minEnd + 1);
            min && date.setMinutes(parseInt(min));

            // 获取秒
            let secondStart = inFmt.indexOf("s");
            let secondEnd = inFmt.lastIndexOf("s");
            let second = str.substring(secondStart, secondEnd + 1);
            second && date.setSeconds(parseInt(second));
            return isDate?date:this.format(date, outFmt);
        } else {
            return str;
        }
    },
    getDaysInMonth : function(year, month){
        month = parseInt(month, 10);
        var monthStartDate = new Date(year, month - 1, 1);
        var monthEndDate = new Date(year, month, 1);
        var days = (monthEndDate.getTime() - monthStartDate.getTime()) / (1000 * 60 * 60 * 24);
        return days;
    }
}