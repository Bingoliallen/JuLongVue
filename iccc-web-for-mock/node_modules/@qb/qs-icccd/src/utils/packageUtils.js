/*
 * @Author: Liugh
 * @Date: 2019-12-10 14:59:22
 * @LastEditTime : 2019-12-27 15:52:08
 * @Description: 公用方法抽离
 */
// 引入表单验证
import { Verification, verify } from './Verification';

export default {
  install(Vue) {
    Vue.prototype.Verification = Verification;
    Vue.prototype.verify = verify;

    /**
     * @func 处理过长数字进行分割（","分割数字）
     * @param {String|Number} num 需要进行处理的数字
     * @returns {String|Number} 计算出的数字
     */
    Vue.prototype.toThousands = function(num) {
      if (num == null || num == '' || num == undefined) {
        return 0;
      } else if (num == '-') {
        return '-';
      } else {
        let result = [],
          counter = 0;
        num = (num || 0).toString().split('');
        for (let i = num.length - 1; i >= 0; i--) {
          counter++;
          result.unshift(num[i]);
          !(counter % 3) && i != 0 ? result.unshift(',') : '';
        }
        return result.join('');
      }
    };

    /**
     * @func 使用身份证进行计算年龄
     * @param {String} val 需要年龄的身份证号码
     * @returns {String} 返回计算的年龄
     */
    Vue.prototype.showYear = function(val) {
      let len = val.length;
      let myDate = new Date();
      // let month = myDate.getMonth() + 1;
      // let day = myDate.getDate();
      let age = 0;
      if (len === 18) {
        age = myDate.getFullYear() - val.substring(6, 10);
        return age;
      } else if (len === 15) {
        age = myDate.getFullYear() - val.substring(6, 8) - 1901;
        return age;
      }
    };

    /**
     * @func 处理过长数字进行添加单位和分割
     * @param {String|Number} num 需要进行处理的数字
     * @param {String} style 传入的Style样式
     * @param {Number} toFixed 传入保留的位数（默认两位）
     * @param {Number} toFixed 传入保留的位数（默认两位）
     * @returns {String|Number} 计算出的数字
     */
    Vue.prototype.toThousandsSpecial = function(num, style, toFixed) {
      // 为了控制图表模块Retrn 数据不带标签使用了Flag标识 ----利用参数数组进行判断是否传入boolaen类型进行判断（开始）
      let flag = false;
      for (let argumentsKey in arguments) {
        flag = typeof arguments[argumentsKey] == 'boolean';
      }
      // （结束）
      if (num == null || num == '' || num == undefined) {
        return 0;
      }
      if (num >= 100000000) {
        let numRun = num / 100000000;
        if (flag) {
          // 使用flag
          return numRun.toFixed(toFixed ? toFixed : 4) + '亿';
        } else {
          return numRun.toFixed(toFixed ? toFixed : 4) + '<span style="' + style + '">&nbsp;亿</span>';
        }
      } else if (num >= 10000) {
        let numRun = num / 10000;
        if (flag) {
          // 使用flag
          return numRun.toFixed(toFixed ? toFixed : 4) + '万';
        } else {
          return numRun.toFixed(toFixed ? toFixed : 4) + '<span style="' + style + '">&nbsp;万</span>';
        }
      } else {
        let result = [],
          counter = 0;
        num = (num || 0).toString().split('');
        for (let i = num.length - 1; i >= 0; i--) {
          counter++;
          result.unshift(num[i]);
          if (!(counter % 3) && i != 0) {
            result.unshift(',');
          }
        }
        return result.join('');
      }
    };

    /**
     *
     * 获取当前日期及星期
     * @returns {String} 当前日期及星期
     */
    Vue.prototype.currentDate = function() {
      let nowDate = new Date();
      let weekday = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];
      let date = {
        year: nowDate.getFullYear(),
        month: nowDate.getMonth() + 1,
        date: nowDate.getDate(),
        week: nowDate.getDay()
      };
      let mon = date.month < 10 ? '0' + date.month : date.month;
      let dat = date.date < 10 ? '0' + date.date : date.date;
      let currtentTime = date.year + '-' + mon + '-' + dat + ' ' + ' ' + weekday[date.week];
      return currtentTime;
    };

    /**
     * 下载附件
     * @param {String|Number} id 传入需要下载的附件ID
     * @author Liugh
     * @return {*} 没有返回值
     */
    Vue.prototype.downloadAppendix = function(id) {
      let url = `${window.systemParams.BASE_API}/fjUploader/download/FJ-${id}`;
      // let hrefDownLoad = location.origin + url;
      var oA = document.createElement('a');
      oA.href = url;
      // oA.download = '';// 设置下载的文件名，默认是'下载'
      document.body.appendChild(oA);
      oA.click();
      oA.remove(); // 下载之后把创建的元素删除
    };

    /**
     * @func 导出文件下载模块
     * @param {Object} res 传入后端返回的文件流数据
     * @param {String} name 需要自定义的文件name 不传入默认从接口头部获取
     * @return {*} null
     */
    Vue.prototype.exportDownload = function(res, name) {
      let FileName = decodeURI(res.headers['content-disposition'].split(';')[1].split('=')[1]);
      var blob = new Blob([res.data], {
        type: res.headers['content-type']
      });
      var downloadElement = document.createElement('a');
      var href = window.URL.createObjectURL(blob); // 创建下载的链接
      downloadElement.href = href;
      downloadElement.download = name ? name + FileName.split('.')[1] : FileName; // 下载后文件名
      document.body.appendChild(downloadElement);
      downloadElement.click(); // 点击下载
      document.body.removeChild(downloadElement); // 下载完成移除元素
      window.URL.revokeObjectURL(href); // 释放掉blob对象
    };

    /**
     * @func 路由跳转链接
     * @param {string} url 需要跳转的路径地址
     */
    Vue.prototype.routerToPath = function(url) {
      if (url) {
        // 添加外部跳转
        if (url.substr(0, 7).toLowerCase() == 'http://') {
          window.open(url);
          return;
        }
        this.$router.push(url);
      }
    };
  }
};
