/*
 * @Author: Liugh
 * @Date: 2019-12-04 09:43:41
 * @LastEditTime: 2019-12-17 10:19:49
 * @LastEditors: Do not edit
 * @Description: 统一表单校验文件
 */
// /**
//  * 验证Url是否合格
//  * @param {String} str_url //需要验证的URl
//  * @returns {Boolean} true/false
//  * @author Liugh
//  */
// function IsURL(str_url) {
//     var strRegex = "^((https|http|ftp|rtsp|mms)?://)"
//         + "?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?" //ftp的user@
//         + "(([0-9]{1,3}\.){3}[0-9]{1,3}" // IP形式的URL- 199.194.52.184
//         + "|" // 允许IP和DOMAIN（域名）
//         + "([0-9a-z_!~*'()-]+\.)*" // 域名- www.
//         + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\." // 二级域名
//         + "[a-z]{2,6})" // first level domain- .com or .museum
//         + "(:[0-9]{1,4})?" // 端口- :80
//         + "((/?)|" // a slash isn't required if there is no file name
//         + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
//     var re = new RegExp(strRegex);
//     if (re.test(str_url)) {
//         return (true);
//     } else {
//         return (false);
//     }
// }

// 存放自定义校验规则(以及一些使用方法)
const verify = {
  /**
   *进行深拷贝（无法深拷贝内部的方法）
   * @param {String} key 需要深拷贝Verification属性
   * @returns {Object} 返回一个深拷贝对象
   */
  deepCopy(key) {
    return JSON.parse(JSON.stringify(Verification[key]));
  },
  // URL地址验证（添加APP）
  // isUrl: (rule, value, callback) => {
  //     if (!value) {
  //         callback(new Error("请输入跳转链接"));
  //     } else if (!IsURL(value)) {
  //         callback(new Error("请输入正确的跳转链接!"));
  //     } else {
  //         callback();
  //     }
  // },
  // 手机号码验证(快速申请)
  phoneRule: (rule, value, callback) => {
    let replaceStr = '，'; // 要替换的字符串
    let str = value.replace(new RegExp(replaceStr, 'gm'), ','); // 要被替换的字符串
    let phoneArray = str.split(',');
    if (!phoneArray[0] && phoneArray.length != 1) {
      callback(new Error('不能以" , "开头'));
    } else if (phoneArray) {
      for (let i = 0; i < phoneArray.length; i++) {
        let hi = phoneArray[i];
        if (hi && hi.length != 11) {
          callback(new Error('请输入正确的手机号码'));
        }
      }
    }
    callback();
  },
  // 身份证号码验证（快速申请）
  sfzhRule: (rule, value, callback) => {
    if (!value) {
      callback(new Error('背审目标不能为空！'));
    } else {
      let replaceStr = '，'; // 要替换的字符串
      let str = value.replace(new RegExp(replaceStr, 'gm'), ','); // 要被替换的字符串
      let phoneArray = str.split(',');
      if (!phoneArray[0]) {
        callback(new Error('不能以" , "开头'));
      } else if (phoneArray) {
        for (let i = 0; i < phoneArray.length; i++) {
          let hi = phoneArray[i];
          if (hi && hi.length != 15 && hi.length != 18) {
            callback(new Error('请输入正确的身份证号'));
          }
        }
      }
      callback();
    }
  }
};
// 需要导出验证的对象
const Verification = {
  // 首页使用
  indexAddApp: {
    yymc: [{ required: true, message: '请输入应用名称', trigger: 'blur' }],
    // yyurl: [{ required: true, validator: verify.isUrl, trigger: "blur" }],
    yyurl: [{ required: true, message: '请输入URL', trigger: 'blur' }]
  },
  // 快速申请
  bcAdd: {
    bssy: [{ required: true, message: '背审事由不能为空！', trigger: 'blur' }],
    bsmb: [{ required: true, validator: verify.sfzhRule, trigger: 'blur' }], // 默认规则
    bsmbOne: [{ required: false, trigger: 'blur' }],
    bsfa: [{ required: true, message: '请至少选择一个背审方案！', trigger: 'change' }],
    qy: [{ required: true, message: '请至少选择一个区域！', trigger: 'change' }],
    sczp: [{ required: true, message: '上传照片不能为空！', trigger: 'blur' }],
    jgtz: [{ validator: verify.phoneRule, trigger: 'blur' }]
  },
  // 审批详情（复核）
  check: {
    fhjg: [{ required: true, message: '请选择复核结果', trigger: 'change' }],
    fhbz: [{ required: false, trigger: 'blur' }], // 默认规则
    fhbzOne: [{ required: true, message: '请输入复核备注', trigger: 'blur' }]
  }
};
export { Verification, verify };
