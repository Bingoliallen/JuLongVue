/**
 * Created by hecg on 2020/10/22.
 */
import {
  sceneModel,
  loadConfig,
  modelComponentList,
  modelComponent,
  modelComponentListSave,
  releasePublish
} from './../request';

const util = {
  sort(i1, i2) {
    return i1.order - i2.order;
  },
  generateKey(len = 32) {
    const $chars = 'abcdefhijkmnprstwxyz2345678';
    const result = [];
    for (let i = 0; i < len; i++) {
      result.push($chars.charAt((Math.random() * 27) << 0));
    }
    return result.join('');
  },
  isArray(arr) {
    return arr instanceof Array;
  }
};

/**
 * 查询场景下的模块
 * @param id {String} 场景ID
 */
export async function getSceneModelList(id) {
  const res = await sceneModel(id);
  return res.data.map(item => {
    const { id, name, embedCode } = item;
    return { id, name, code: embedCode };
  });
}

export async function getLeftList(modelId) {
  const res = await modelComponentList(modelId);
  const list = res.data.map(({ id, name, type }) => {
    return { id: util.generateKey(), componentId: id, label: name, type };
  });
  list.sort(util.sort);
  return list;
}

/**
 * 查询模块下的已选组件
 * @param modelId {String} 模块ID
 */
export async function getPreview(modelId) {
  const res = await loadConfig(modelId);
  const list = res.data.map(e => {
    let { id, moduleId, componentId, orderNum, options, component_options } = e;
    if (options && typeof options === 'string') {
      options = JSON.parse(options);
    }
    if (component_options) {
      if (typeof component_options === 'string') {
        component_options = JSON.parse(component_options);
      }
      // 数据还原，将中间配置的内容还原到右侧
      if (options && component_options.configs) {
        component_options.configs.forEach(item => {
          const { prop, use } = item;
          switch (use) {
            case 'form-item':
              item.value = options.formBind[prop];
              break;
            case 'rules': {
              const rules = options.formBind.rules || [];
              // 在这里写表单的3种验证规则
              switch (prop) {
                case 'required': {
                  item.value = rules.some(e => e.required);
                  break;
                }
              }
              break;
            }
            default: {
              let val = options.bind[prop];
              if (util.isArray(val)) {
                val = val.map(e => e.value).join(',');
              }
              item.value = val;
            }
          }
        });
      }
    }

    const item = {
      id,
      moduleId,
      componentId,
      order: orderNum,
      options,
      ...component_options
    };
    // item.bind 和 item.formBind 在 component_options 里（右侧）
    // 下面代码把中间和右侧合并在一起（用中间的替换右侧的）
    if (item.bind) {
      item.bind = { ...item.bind, ...item.options.bind };
    }
    if (item.formBind) {
      item.formBind = { ...item.formBind, ...item.options.formBind };
    }
    delete item.options;
    return item;
  });
  list.sort(util.sort);
  return list;
}

/**
 * 查询组件配置项
 * @param componentId {String} 组件ID
 */
export async function getComponentOption(componentId) {
  const res = await modelComponent(componentId);
  let options = res.data.options;
  if (options && typeof options === 'string') {
    options = JSON.parse(options);
  }
  return options;
}

export function saveModelConfig(list, sceneId) {
  return modelComponentListSave(
    list.map(({ id, moduleId, componentId, order, formBind, bind }) => {
      return {
        id,
        sceneId,
        moduleId,
        componentId,
        orderNum: order,
        options: JSON.stringify({ formBind, bind })
      };
    })
  );
}
export function publishScenes(scenesId) {
  return releasePublish(scenesId);
}
