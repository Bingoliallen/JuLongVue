import router from '@/router/index.js';
import store from '@/store';
import { Message } from 'element-ui';
import NProgress from 'nprogress'; // progress bar
import './progress.css';
import { getQueryObject } from '../utils/data-utils.js';
import { getToken, getUserName } from '@icccdPath/utils/auth'; // getToken from cookie
import _ from 'lodash';
import common from '@icccdPath/common';
const { initSettings, getSetting, getSettings, getSettingBool } = common;

NProgress.configure({ showSpinner: false }); // NProgress Configuration
const whiteList = ['/login', '/403-1', '/403-2', '/404', '/500', '/501']; // no redirect whitelist
window.checkTheme = false;
// permission judge function
function hasPermission(userPermissions, to) {
  if (getSetting('NEED_PERMISSIONS')) {
    if (userPermissions.length <= 0) {
      return false;
    } else {
      let routePermissions = to.meta.permission;
      if (
        whiteList.indexOf(to.path) !== -1 ||
        !routePermissions ||
        (routePermissions && routePermissions.length === 0)
      ) {
        return true;
      }
      return userPermissions.some(userPermission => {
        return routePermissions.indexOf(userPermission) >= 0;
      });
    }
  } else {
    return true;
  }
}

router.beforeEach((to, from, next) => {
  NProgress.start(); // start progress bar
  let queryObject = getQueryObject();
  if (_.isEmpty(getSettings())) {
    // 如果配置信息为空，则先加载配置信息
    initSettings().then(() => location.reload());
  } else if (!getSettingBool('NEED_LOGIN')) {
    // 如果项目不需要登录，则不需要获取用户信息和权限
    noNeedLogin(to, from, next);
  } else if (getSettingBool('IS_OAUTH2') && queryObject.code) {
    // 如果使用oauth2登录并且地址栏中有code参数，则去请求token
    getAccessToken(queryObject);
  } else {
    // 检查是否登录
    checkLogin(to, next);
  }
  const matched = to.matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false);
  let title = window.systemParams.APP_NAME || '情指云控';
  if (matched.length > 0) {
    title = matched[matched.length - 1].meta.title + '-' + title;
    // title = matched[matched.length - 1].meta.title;
  }
  document.title = title;
});

router.afterEach(() => {
  NProgress.done(); // finish progress bar
});

/**
 * 不需要登录则直接加载所有路由
 * @param to
 * @param from
 * @param next
 */
function noNeedLogin(to, from, next) {
  if (store.getters.addRouters.length === 0) {
    generateRoutes([], next, to);
  } else {
    checkCongif(next, to);
    // next();
  }
}

/**
 * 如果是Oauth2登录并且地址栏上有code字段，则去请求access_token
 * @param queryObject   地址栏上的参数
 */
function getAccessToken(queryObject) {
  let code = queryObject.code.split('#/')[0];
  store
    .dispatch('GetOAuthToken', { code })
    .then(() => {
      // 如果登录成功了，清除掉url中的code，刷新页面
      if (getToken()) {
        window.location.href = delParam('code');
      }
    })
    .catch(reason => {
      store.dispatch('FedLogout').then(() => {
        Message.error(reason);
        location.reload();
      });
    });
}

/**
 * 去掉url上的指定参数
 * @param paramKey  要删除的key
 */
function delParam(paramKey) {
  let url = window.location.href; // 页面url
  let urlParam = window.location.search.substr(1); // 页面参数
  let beforeUrl = url.substr(0, url.indexOf('?')); // 页面主地址（参数之前地址）
  let nextUrl = '';
  let arr = new Array();
  if (urlParam !== '') {
    let urlParamArr = urlParam.split('&'); // 将参数按照&符分成数组
    for (let i = 0; i < urlParamArr.length; i++) {
      let paramArr = urlParamArr[i].split('='); // 将参数键，值拆开
      // 如果键雨要删除的不一致，则加入到参数中
      if (paramArr[0] != paramKey) {
        arr.push(urlParamArr[i]);
      }
    }
    if (arr.length > 0) {
      nextUrl = '?' + arr.join('&');
    }
    url = beforeUrl + nextUrl;
  }
  url = 'http://' + window.location.host + decodeURIComponent(window.location.pathname);
  return url;
}

/**
 * 检查是否在白名单中,跟权限判断进行页面跳转
 * @param to
 * @param next
 * @param link
 */
function checkIsInWhiteList(to, next, link) {
  if (hasPermission(store.getters.permissions, to, link)) {
    let endTo = to;
    if (!window.checkTheme && whiteList.indexOf(to.path) !== -1) {
      endTo = {
        path: '/dashboard',
        replace: true
      };
    }
    checkCongif(next, endTo);
    // next({ to, replace: true });
  } else {
    checkCongif(next, {
      path: '/403-1',
      replace: true
    });
  }
  NProgress.done();
}

/**
 * mock模拟检查是否在白名单中
 * @param to
 * @param next
 * @param link
 */
function checkIsMockWhiteList(to, next, link) {
  if (whiteList.indexOf(to.path) !== -1) {
    // 在免登录白名单，直接进入
    next();
  } else {
    !link && next(`/login?redirect=${to.path}`); // 否则全部重定向到登录页
    NProgress.done(); // if current page is login will not trigger afterEach hook, so manually handle it
  }
}

/**
 * 生成路由
 * @param permissions   用户权限
 * @param next
 * @param to
 */
function generateRoutes(permissions, next, to) {
  store.dispatch('GenerateRoutes', { permissions }).then(() => {
    // 根据权限生成可访问的路由表
    router.addRoutes(store.getters.addRouters); // 动态添加可访问路由表
    checkIsInWhiteList(to, next);
    // next({ ...to, replace: true }); // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record
  });
}

/**
 *  登录，跳转判断
 * @param {Object} to 当前路由状态
 * @param {Function} next 执行下一个路由
 */
function checkLogin(to, next) {
  if (getUserName()) {
    if (to.path === '/login') {
      next();
      NProgress.done(); // if current page is dashboard will not trigger	afterEach hook, so manually handle it
    } else {
      let permissionsLength = store.getters.permissions.length;
      if (!store.getters.name && !permissionsLength) {
        store.dispatch('GetUserInfo').then(() => {
          let permissions = store.getters.permissions;
          generateRoutes(permissions, next, to);
          // 跳转
        });
      } else {
        checkIsInWhiteList(to, next);
      }
    }
  } else {
    if (getSetting('BASE_API') === '/bjsc-imitate_tpl') {
      // 检查是否在白名单中
      checkIsMockWhiteList(to, next);
    } else {
      store.dispatch('GetUserInfo').then(res => {
        checkIsInWhiteList(to, next, res);
      });
    }
  }
}

/**
 *  判断当前用户是否需要切换主题
 * @param {Object} to 当前路由状态
 * @param {Function} next 执行下一个路由
 */
function checkCongif(next, to) {
  // 1、判断是否加载用户配置信息
  const sysParam = window.systemParams;
  if ((sysParam.IS_THEME || sysParam.IS_SCENE) &&!window.checkTheme) {
    new Promise(function(resolve) {
      let userConfig = {};
      try {
        userConfig = JSON.parse(sessionStorage.userConfig);
      } catch (er) {
        console.log(er);
      }
      if (JSON.stringify(userConfig) != '{}') {
        resolve(userConfig);
      } else {
        store.dispatch('GetUserConfig').then(res => {
          resolve(res);
        });
      }
    }).then(myData => {
      let path = to.path;
      // 2、判断是否需要桌面
      if (sysParam.IS_THEME) {
        let dqxtzt = myData.dqxtzt;
        if (dqxtzt) {
          window.HOMEACCESS = myData;
        } else {
          window.HOMEACCESS = null;
        }
        // 判断是否选择过主题-->去掉白名单数据
        if (dqxtzt != 'JYFG' && dqxtzt != 'GXFG' && !(whiteList.indexOf(path) !== -1)) {
          path = sysParam.REDIRECT_PATH;
        } else {
          let regex = /\/themeSimple|\/themeSelfdom|\/dashboard/;
          if (regex.test(to.path) || to.path == '/') {
            path = dqxtzt == 'JYFG' ? '/themeSimple' : dqxtzt == 'GXFG' ? '/themeSelfdom' : '/dashboard';
          }
        }
      }
      window.checkTheme = true;
      next({
        path: path,
        replace: true
      });
    });
  } else {
    next();
  }
}
