import { loginByUsername, logout, getUserInfo, getOAuthTokeByCode } from '@icccdPath/api/login';
import { getToken, setToken, removeToken, setUserName, removeUserName } from '@icccdPath/utils/auth';
import gztApi from '../../api/gztApi.js';

import common from '@icccdPath/common';

const { getSetting, getSettingBool } = common;

const user = {
  state: {
    user: '',
    status: '',
    code: '',
    token: getToken(),
    name: '',
    avatar: '',
    introduction: '',
    roles: [],
    permissions: [],
    info: {},
    userConfig: {},
    setting: {
      articlePlatform: []
    },
    // 根据权限获取的菜单
    menuTree: []
  },

  mutations: {
    SET_INFO: (state, info) => {
      state.info = info;
    },
    SET_CODE: (state, code) => {
      state.code = code;
    },
    SET_TOKEN: (state, token) => {
      state.token = token;
    },
    SET_INTRODUCTION: (state, introduction) => {
      state.introduction = introduction;
    },
    SET_SETTING: (state, setting) => {
      state.setting = setting;
    },
    SET_STATUS: (state, status) => {
      state.status = status;
    },
    SET_NAME: (state, name) => {
      state.name = name;
    },
    SET_AVATAR: (state, avatar) => {
      state.avatar = avatar;
    },
    SET_ROLES: (state, roles) => {
      state.roles = roles;
    },
    SET_PERMISSIONS: (state, permissions) => {
      state.permissions = permissions;
    },
    SET_PERMISSIONS_MAP: (state, permissions) => {
      state.permissionsMap = permissions;
    },
    SET_USER_CONFIG: (state, userConfig) => {
      state.userConfig = userConfig;
    },
    SET_MENU_TREE: (state, data) => {
      state.menuTree = data;
    }
  },

  actions: {
    // 用户名登录
    LoginByUsername({ commit }, userInfo) {
      const username = userInfo.username.trim();
      return new Promise((resolve, reject) => {
        loginByUsername(username, userInfo.password)
          .then(({ data }) => {
            setUserName(data.name);
            resolve(commit);
          })
          .catch(error => {
            reject(error);
          });
      });
    },

    // 获取用户信息
    GetUserInfo({ commit, dispatch }) {
      return new Promise((resolve, reject) => {
        let params = {};
        if (getSettingBool('IS_OAUTH2')) {
          params['access_token'] = getToken();
          params['appCode'] = getSetting('APP_CODE');
        }
        getUserInfo(params)
          .then(({ data }) => {
            // TODO 用户信息缓存，等用户信息出来后做
            if (data.name === undefined) {
              reject(data);
            } else {
              resolve(data);
            }
            commit('SET_INFO', data);
            commit('SET_NAME', data.name);
            commit('SET_PERMISSIONS', data.securityRights || []);
            commit('SET_ROLES', data.securityRights || []);
            commit('SET_AVATAR', data.avatar);
            let cacheMap = new Map();
            if (data.securityRights && data.securityRights.length > 0) {
              for (let i = 0; i < data.securityRights.length; i++) {
                let hi = data.securityRights[i];
                cacheMap.set(hi, hi);
              }
            }
            commit('SET_PERMISSIONS_MAP', cacheMap);
            console.log('=data.securityRights==', data.securityRights);
            setUserName(data.name);
            // 获取权限菜单
            dispatch('getMenuTree');
          })
          .catch(error => {
            reject(error);
          });
      });
    },

    // oauth2登录方式获取token
    GetOAuthToken({ commit }, param) {
      return new Promise((resolve, reject) => {
        let params = {
          grant_type: 'authorization_code',
          code: param.code,
          redirect_uri: location.href.split('?')[0],
          client_id: getSetting('CLIENT_ID'),
          client_secret: getSetting('CLIENT_SECRET')
        };
        getOAuthTokeByCode(params)
          .then(({ data }) => {
            commit('SET_TOKEN', data.access_token);
            setToken(data.access_token);
            resolve(param.code);
          })
          .catch(error => {
            reject(error);
          });
      });
    },

    // 登出
    Logout({ commit }) {
      return new Promise((resolve, reject) => {
        logout({ redirectUrl: location.href })
          .then(() => {
            commit('SET_TOKEN', '');
            commit('SET_ROLES', []);
            removeToken();
            removeUserName();
            resolve();
          })
          .catch(error => {
            reject(error);
          });
      });
    },

    // oauth2登录方式退出
    LogoutOauth({ commit }, logoutUrl) {
      return new Promise(resolve => {
        commit('SET_TOKEN', '');
        commit('SET_NAME', '');
        removeToken();
        removeUserName();
        resolve(logoutUrl);
        // window.location.href = logoutUrl;
      });
    },

    // 前端 登出
    FedLogout({ commit }) {
      return new Promise(resolve => {
        commit('SET_TOKEN', '');
        commit('SET_NAME', '');
        removeToken();
        removeUserName();
        resolve();
      });
    },

    // 动态修改权限
    ChangeRoles({ commit, dispatch }, role) {
      return new Promise(resolve => {
        commit('SET_TOKEN', role);
        setToken(role);
        // commit("SET_Name", role);
        // setToken(role);
        getUserInfo(role).then(({ data }) => {
          commit('SET_ROLES', data.roles);
          commit('SET_NAME', data.name);
          commit('SET_AVATAR', data.avatar);
          commit('SET_INTRODUCTION', data.introduction);
          dispatch('GenerateRoutes', data); // 动态修改权限后 重绘侧边菜单
          resolve();
        });
      });
    },

    // 获取用户配置信息
    GetUserConfig({ commit }) {
      return new Promise(resolve => {
        gztApi.loadUserManagerDetail().then(res => {
          let soucesData = res.data;
          sessionStorage.userConfig = JSON.stringify(soucesData);
          commit('SET_USER_CONFIG', soucesData);
          resolve(soucesData);
        });
      });
    },
    async getMenuTree({ commit }) {
      // const res = await searchTreeMenu();
      // const data = res.data;
      // TODO:先用模拟数据
      const data = require('@/store/modules/menu.js');
      commit('SET_MENU_TREE', data.default);
      return data;
    }
  },
  getters: {
    user: state => state.info,
    token: state => state.token,
    avatar: state => state.avatar,
    name: state => state.name,
    introduction: state => state.introduction,
    status: state => state.status,
    roles: state => state.roles,
    setting: state => state.setting,
    permissions: state => state.permissions,
    permissionsMap: state => state.permissionsMap,
    userConfig: state => {
      if (Object.keys(state.userConfig).length) {
        return state.userConfig;
      } else {
        let userConfig = JSON.parse(sessionStorage.getItem('userConfig'));
        return userConfig ? userConfig:{
          dqcjid:window.systemParams.SCENE_ID,
          dqcjmc:window.systemParams.APP_NAME
        }
      }
    },
    menuTree: state => state.menuTree
  }
};

export default user;
